
examples/display/target/thumbv7em-none-eabihf/debug/microbit-async-display-example:     file format elf32-littlearm


Disassembly of section .text:

00000100 <Reset>:
                size: usize = size_of::<T>(),
            ) => runtime_add_nowrap(this, count, size)
        );

        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { intrinsics::offset(self, count) }
     100:	f006 fa0b 	bl	651a <DefaultPreInit>
    r.intenclr().write(|w| w.0 = 0xFFFF_FFFF);

    // Reset rxstarted, txstarted. These are used by drop to know whether a transfer was
    // stopped midway or not.
    r.events_rxstarted().write_value(0);
    r.events_txstarted().write_value(0);
     104:	480e      	ldr	r0, [pc, #56]	@ (140 <Reset+0x40>)
     106:	490f      	ldr	r1, [pc, #60]	@ (144 <Reset+0x44>)
     108:	2200      	movs	r2, #0
        }
    }
    impl<T: Copy, A: Write> Reg<T, A> {
        #[inline(always)]
        pub fn write_value(&self, val: T) {
            unsafe { (self.ptr as *mut T).write_volatile(val) }
     10a:	4281      	cmp	r1, r0
     10c:	d001      	beq.n	112 <Reset+0x12>
     10e:	c004      	stmia	r0!, {r2}
    pub unsafe fn write_volatile(self, val: T)
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `write_volatile`.
        unsafe { write_volatile(self, val) }
     110:	e7fb      	b.n	10a <Reset+0xa>
     112:	480d      	ldr	r0, [pc, #52]	@ (148 <Reset+0x48>)
     114:	490d      	ldr	r1, [pc, #52]	@ (14c <Reset+0x4c>)
     116:	4a0e      	ldr	r2, [pc, #56]	@ (150 <Reset+0x50>)
     118:	4281      	cmp	r1, r0
     11a:	d002      	beq.n	122 <Reset+0x22>
     11c:	ca08      	ldmia	r2!, {r3}
     11e:	c008      	stmia	r0!, {r3}
     120:	e7fa      	b.n	118 <Reset+0x18>
        unsafe { intrinsics::offset(self, count) }
     122:	480c      	ldr	r0, [pc, #48]	@ (154 <Reset+0x54>)
     124:	f44f 0170 	mov.w	r1, #15728640	@ 0xf00000
     128:	6802      	ldr	r2, [r0, #0]
     12a:	ea42 0201 	orr.w	r2, r2, r1
     12e:	6002      	str	r2, [r0, #0]
     130:	f3bf 8f4f 	dsb	sy
     134:	f3bf 8f6f 	isb	sy

    // reset all pins
    r.psel().txd().write_value(DISCONNECTED);
     138:	f001 ff22 	bl	1f80 <main>
     13c:	de00      	udf	#0
     13e:	0000      	movs	r0, r0
     140:	20000050 	.word	0x20000050
     144:	20008220 	.word	0x20008220
     148:	20000000 	.word	0x20000000
        unsafe { write_volatile(self, val) }
     14c:	20000050 	.word	0x20000050
     150:	0000edd0 	.word	0x0000edd0
     154:	e000ed88 	.word	0xe000ed88

00000158 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E>:
    /// # Example
    /// ```ignore
    /// let bitmap = Bitmap::new(0b11100000, 3); // 3 bits set
    /// ```
    // TODO: Change input to array when const generics are fully stabilized
    pub const fn new(input: u8, nbits: usize) -> Self {
     158:	b580      	push	{r7, lr}
     15a:	466f      	mov	r7, sp
     15c:	b086      	sub	sp, #24
     15e:	9201      	str	r2, [sp, #4]
     160:	9002      	str	r0, [sp, #8]
     162:	4608      	mov	r0, r1
     164:	9003      	str	r0, [sp, #12]
     166:	f807 1c05 	strb.w	r1, [r7, #-5]
     16a:	9205      	str	r2, [sp, #20]
     16c:	2000      	movs	r0, #0
        let mut data = [0; BITMAP_WIDTH];
     16e:	f807 0c07 	strb.w	r0, [r7, #-7]
        //for i in 0..input.len() {
        if nbits < BITMAP_WORD_SIZE {
     172:	2a08      	cmp	r2, #8
     174:	d304      	bcc.n	180 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E+0x28>
     176:	e7ff      	b.n	178 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E+0x20>
            data[0] = input << (BITMAP_WORD_SIZE - nbits);
        } else {
            data[0] = input;
     178:	9803      	ldr	r0, [sp, #12]
     17a:	f807 0c07 	strb.w	r0, [r7, #-7]
        if nbits < BITMAP_WORD_SIZE {
     17e:	e006      	b.n	18e <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E+0x36>
            data[0] = input << (BITMAP_WORD_SIZE - nbits);
     180:	9801      	ldr	r0, [sp, #4]
     182:	f1c0 0108 	rsb	r1, r0, #8
     186:	9100      	str	r1, [sp, #0]
     188:	2808      	cmp	r0, #8
     18a:	d810      	bhi.n	1ae <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E+0x56>
     18c:	e00b      	b.n	1a6 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E+0x4e>
        }
        //}
        Self { data, nbits }
     18e:	9801      	ldr	r0, [sp, #4]
     190:	9902      	ldr	r1, [sp, #8]
     192:	f817 2c07 	ldrb.w	r2, [r7, #-7]
     196:	f807 2c06 	strb.w	r2, [r7, #-6]
     19a:	f817 2c06 	ldrb.w	r2, [r7, #-6]
     19e:	710a      	strb	r2, [r1, #4]
     1a0:	6008      	str	r0, [r1, #0]
    }
     1a2:	b006      	add	sp, #24
     1a4:	bd80      	pop	{r7, pc}
            data[0] = input << (BITMAP_WORD_SIZE - nbits);
     1a6:	9800      	ldr	r0, [sp, #0]
     1a8:	2808      	cmp	r0, #8
     1aa:	d306      	bcc.n	1ba <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E+0x62>
     1ac:	e00d      	b.n	1ca <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E+0x72>
     1ae:	f64b 208c 	movw	r0, #47756	@ 0xba8c
     1b2:	f2c0 0000 	movt	r0, #0
     1b6:	f00a ffcb 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
     1ba:	9803      	ldr	r0, [sp, #12]
     1bc:	9900      	ldr	r1, [sp, #0]
     1be:	f001 0107 	and.w	r1, r1, #7
     1c2:	4088      	lsls	r0, r1
     1c4:	f807 0c07 	strb.w	r0, [r7, #-7]
        if nbits < BITMAP_WORD_SIZE {
     1c8:	e7e1      	b.n	18e <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E+0x36>
            data[0] = input << (BITMAP_WORD_SIZE - nbits);
     1ca:	f64b 209c 	movw	r0, #47772	@ 0xba9c
     1ce:	f2c0 0000 	movt	r0, #0
     1d2:	f00a fff6 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

000001d6 <_ZN30microbit_async_display_example5types6Bitmap5empty17h671b31d8a4f10c17E>:
    ///
    /// # Example
    /// ```ignore
    /// let bitmap = Bitmap::empty(5); // 5-bit empty bitmap
    /// ```
    pub const fn empty(nbits: usize) -> Self {
     1d6:	b580      	push	{r7, lr}
     1d8:	466f      	mov	r7, sp
     1da:	b082      	sub	sp, #8
     1dc:	9101      	str	r1, [sp, #4]
     1de:	2200      	movs	r2, #0
        Self { data: [0; 1], nbits }
     1e0:	f807 2c05 	strb.w	r2, [r7, #-5]
     1e4:	f817 2c05 	ldrb.w	r2, [r7, #-5]
     1e8:	7102      	strb	r2, [r0, #4]
     1ea:	6001      	str	r1, [r0, #0]
    }
     1ec:	b002      	add	sp, #8
     1ee:	bd80      	pop	{r7, pc}

000001f0 <_ZN30microbit_async_display_example5types6Bitmap9clear_all17h8a2ff72cfaf55b17E>:
    /// # Example
    /// ```ignore
    /// let mut bitmap = Bitmap::new(0b11111111, 8);
    /// bitmap.clear_all(); // All bits now 0
    /// ```
    pub fn clear_all(&mut self) {
     1f0:	b580      	push	{r7, lr}
     1f2:	466f      	mov	r7, sp
     1f4:	b088      	sub	sp, #32
     1f6:	9001      	str	r0, [sp, #4]
     1f8:	9006      	str	r0, [sp, #24]
     1fa:	2000      	movs	r0, #0
     1fc:	2101      	movs	r1, #1
        for i in 0..self.data.len() {
     1fe:	f009 ffd1 	bl	a1a4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0afde0faa91357dbE>
     202:	9002      	str	r0, [sp, #8]
     204:	9103      	str	r1, [sp, #12]
     206:	e7ff      	b.n	208 <_ZN30microbit_async_display_example5types6Bitmap9clear_all17h8a2ff72cfaf55b17E+0x18>
     208:	a802      	add	r0, sp, #8
     20a:	f009 ffc3 	bl	a194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd1eed7027fe23b7aE>
     20e:	9004      	str	r0, [sp, #16]
     210:	9105      	str	r1, [sp, #20]
     212:	9804      	ldr	r0, [sp, #16]
     214:	07c0      	lsls	r0, r0, #31
     216:	b128      	cbz	r0, 224 <_ZN30microbit_async_display_example5types6Bitmap9clear_all17h8a2ff72cfaf55b17E+0x34>
     218:	e7ff      	b.n	21a <_ZN30microbit_async_display_example5types6Bitmap9clear_all17h8a2ff72cfaf55b17E+0x2a>
     21a:	9805      	ldr	r0, [sp, #20]
     21c:	9000      	str	r0, [sp, #0]
     21e:	9007      	str	r0, [sp, #28]
            self.data[i] = 0;
     220:	b110      	cbz	r0, 228 <_ZN30microbit_async_display_example5types6Bitmap9clear_all17h8a2ff72cfaf55b17E+0x38>
     222:	e007      	b.n	234 <_ZN30microbit_async_display_example5types6Bitmap9clear_all17h8a2ff72cfaf55b17E+0x44>
        }
    }
     224:	b008      	add	sp, #32
     226:	bd80      	pop	{r7, pc}
            self.data[i] = 0;
     228:	9801      	ldr	r0, [sp, #4]
     22a:	9900      	ldr	r1, [sp, #0]
     22c:	4401      	add	r1, r0
     22e:	2000      	movs	r0, #0
     230:	7108      	strb	r0, [r1, #4]
        for i in 0..self.data.len() {
     232:	e7e9      	b.n	208 <_ZN30microbit_async_display_example5types6Bitmap9clear_all17h8a2ff72cfaf55b17E+0x18>
            self.data[i] = 0;
     234:	9800      	ldr	r0, [sp, #0]
     236:	f64b 22ac 	movw	r2, #47788	@ 0xbaac
     23a:	f2c0 0200 	movt	r2, #0
     23e:	2101      	movs	r1, #1
     240:	f00a f95a 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

00000244 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E>:
    /// ```ignore
    /// let bitmap = Bitmap::new(0b10100000, 3);
    /// assert!(bitmap.is_set(0)); // First bit is set
    /// assert!(!bitmap.is_set(1)); // Second bit is clear
    /// ```
    pub fn is_set(&self, bit: usize) -> bool {
     244:	b580      	push	{r7, lr}
     246:	466f      	mov	r7, sp
     248:	b08a      	sub	sp, #40	@ 0x28
     24a:	9104      	str	r1, [sp, #16]
     24c:	9005      	str	r0, [sp, #20]
     24e:	9006      	str	r0, [sp, #24]
     250:	9107      	str	r1, [sp, #28]
        assert!(bit < self.nbits);
     252:	6800      	ldr	r0, [r0, #0]
     254:	4281      	cmp	r1, r0
     256:	d30b      	bcc.n	270 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E+0x2c>
     258:	e7ff      	b.n	25a <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E+0x16>
     25a:	f64b 20bc 	movw	r0, #47804	@ 0xbabc
     25e:	f2c0 0000 	movt	r0, #0
     262:	f64b 22e0 	movw	r2, #47840	@ 0xbae0
     266:	f2c0 0200 	movt	r2, #0
     26a:	2122      	movs	r1, #34	@ 0x22
     26c:	f00a f8fd 	bl	a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>
        let idx: usize = bit / BITMAP_WORD_SIZE;
     270:	9904      	ldr	r1, [sp, #16]
     272:	08c8      	lsrs	r0, r1, #3
     274:	4602      	mov	r2, r0
     276:	9202      	str	r2, [sp, #8]
     278:	9008      	str	r0, [sp, #32]
        let p: usize = bit % BITMAP_WORD_SIZE;
     27a:	f001 0107 	and.w	r1, r1, #7
     27e:	460a      	mov	r2, r1
     280:	9203      	str	r2, [sp, #12]
     282:	9109      	str	r1, [sp, #36]	@ 0x24
        (self.data[idx] & (1 << ((BITMAP_WORD_SIZE - 1) - p))) != 0
     284:	b960      	cbnz	r0, 2a0 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E+0x5c>
     286:	e7ff      	b.n	288 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E+0x44>
     288:	9803      	ldr	r0, [sp, #12]
     28a:	9905      	ldr	r1, [sp, #20]
     28c:	9a02      	ldr	r2, [sp, #8]
     28e:	4411      	add	r1, r2
     290:	7909      	ldrb	r1, [r1, #4]
     292:	9100      	str	r1, [sp, #0]
     294:	f1c0 0107 	rsb	r1, r0, #7
     298:	9101      	str	r1, [sp, #4]
     29a:	2807      	cmp	r0, #7
     29c:	d80c      	bhi.n	2b8 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E+0x74>
     29e:	e007      	b.n	2b0 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E+0x6c>
     2a0:	9802      	ldr	r0, [sp, #8]
     2a2:	f64b 22f0 	movw	r2, #47856	@ 0xbaf0
     2a6:	f2c0 0200 	movt	r2, #0
     2aa:	2101      	movs	r1, #1
     2ac:	f00a f924 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
     2b0:	9801      	ldr	r0, [sp, #4]
     2b2:	2808      	cmp	r0, #8
     2b4:	d306      	bcc.n	2c4 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E+0x80>
     2b6:	e00f      	b.n	2d8 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E+0x94>
     2b8:	f64b 3000 	movw	r0, #47872	@ 0xbb00
     2bc:	f2c0 0000 	movt	r0, #0
     2c0:	f00a ff46 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
     2c4:	9800      	ldr	r0, [sp, #0]
     2c6:	9901      	ldr	r1, [sp, #4]
     2c8:	f001 0107 	and.w	r1, r1, #7
     2cc:	b2c0      	uxtb	r0, r0
     2ce:	40c8      	lsrs	r0, r1
    }
     2d0:	f000 0001 	and.w	r0, r0, #1
     2d4:	b00a      	add	sp, #40	@ 0x28
     2d6:	bd80      	pop	{r7, pc}
        (self.data[idx] & (1 << ((BITMAP_WORD_SIZE - 1) - p))) != 0
     2d8:	f64b 3010 	movw	r0, #47888	@ 0xbb10
     2dc:	f2c0 0000 	movt	r0, #0
     2e0:	f00a ff6f 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

000002e4 <_ZN30microbit_async_display_example5types6Bitmap10shift_left17h5fb52be716cf284fE>:
    /// # Example
    /// ```ignore
    /// let mut bitmap = Bitmap::new(0b11000000, 8);
    /// bitmap.shift_left(2); // Now 0b00000000 (bits shifted out)
    /// ```
    pub fn shift_left(&mut self, nbits: usize) {
     2e4:	b580      	push	{r7, lr}
     2e6:	466f      	mov	r7, sp
     2e8:	b088      	sub	sp, #32
     2ea:	9101      	str	r1, [sp, #4]
     2ec:	9005      	str	r0, [sp, #20]
     2ee:	9106      	str	r1, [sp, #24]
        for b in self.data.iter_mut() {
     2f0:	3004      	adds	r0, #4
     2f2:	2101      	movs	r1, #1
     2f4:	f006 fd66 	bl	6dc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h46b3d0894c23207cE>
     2f8:	f000 faf8 	bl	8ec <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hca4b17596e89abbbE>
     2fc:	9002      	str	r0, [sp, #8]
     2fe:	9103      	str	r1, [sp, #12]
     300:	e7ff      	b.n	302 <_ZN30microbit_async_display_example5types6Bitmap10shift_left17h5fb52be716cf284fE+0x1e>
     302:	a802      	add	r0, sp, #8
     304:	f006 fd32 	bl	6d6c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E>
     308:	9004      	str	r0, [sp, #16]
     30a:	9804      	ldr	r0, [sp, #16]
     30c:	b138      	cbz	r0, 31e <_ZN30microbit_async_display_example5types6Bitmap10shift_left17h5fb52be716cf284fE+0x3a>
     30e:	e7ff      	b.n	310 <_ZN30microbit_async_display_example5types6Bitmap10shift_left17h5fb52be716cf284fE+0x2c>
     310:	9801      	ldr	r0, [sp, #4]
     312:	9904      	ldr	r1, [sp, #16]
     314:	9100      	str	r1, [sp, #0]
     316:	9107      	str	r1, [sp, #28]
            *b <<= nbits;
     318:	2808      	cmp	r0, #8
     31a:	d302      	bcc.n	322 <_ZN30microbit_async_display_example5types6Bitmap10shift_left17h5fb52be716cf284fE+0x3e>
     31c:	e009      	b.n	332 <_ZN30microbit_async_display_example5types6Bitmap10shift_left17h5fb52be716cf284fE+0x4e>
        }
    }
     31e:	b008      	add	sp, #32
     320:	bd80      	pop	{r7, pc}
            *b <<= nbits;
     322:	9900      	ldr	r1, [sp, #0]
     324:	9a01      	ldr	r2, [sp, #4]
     326:	7808      	ldrb	r0, [r1, #0]
     328:	f002 0207 	and.w	r2, r2, #7
     32c:	4090      	lsls	r0, r2
     32e:	7008      	strb	r0, [r1, #0]
        for b in self.data.iter_mut() {
     330:	e7e7      	b.n	302 <_ZN30microbit_async_display_example5types6Bitmap10shift_left17h5fb52be716cf284fE+0x1e>
            *b <<= nbits;
     332:	f64b 3020 	movw	r0, #47904	@ 0xbb20
     336:	f2c0 0000 	movt	r0, #0
     33a:	f00a ff42 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

0000033e <_ZN30microbit_async_display_example5types6Bitmap11shift_right17h116d0bbee2ff2972E>:
    /// # Example
    /// ```ignore
    /// let mut bitmap = Bitmap::new(0b11000000, 8);
    /// bitmap.shift_right(2); // Now 0b00110000
    /// ```
    pub fn shift_right(&mut self, nbits: usize) {
     33e:	b580      	push	{r7, lr}
     340:	466f      	mov	r7, sp
     342:	b088      	sub	sp, #32
     344:	9101      	str	r1, [sp, #4]
     346:	9005      	str	r0, [sp, #20]
     348:	9106      	str	r1, [sp, #24]
        for b in self.data.iter_mut() {
     34a:	3004      	adds	r0, #4
     34c:	2101      	movs	r1, #1
     34e:	f006 fd39 	bl	6dc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h46b3d0894c23207cE>
     352:	f000 facb 	bl	8ec <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hca4b17596e89abbbE>
     356:	9002      	str	r0, [sp, #8]
     358:	9103      	str	r1, [sp, #12]
     35a:	e7ff      	b.n	35c <_ZN30microbit_async_display_example5types6Bitmap11shift_right17h116d0bbee2ff2972E+0x1e>
     35c:	a802      	add	r0, sp, #8
     35e:	f006 fd05 	bl	6d6c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E>
     362:	9004      	str	r0, [sp, #16]
     364:	9804      	ldr	r0, [sp, #16]
     366:	b138      	cbz	r0, 378 <_ZN30microbit_async_display_example5types6Bitmap11shift_right17h116d0bbee2ff2972E+0x3a>
     368:	e7ff      	b.n	36a <_ZN30microbit_async_display_example5types6Bitmap11shift_right17h116d0bbee2ff2972E+0x2c>
     36a:	9801      	ldr	r0, [sp, #4]
     36c:	9904      	ldr	r1, [sp, #16]
     36e:	9100      	str	r1, [sp, #0]
     370:	9107      	str	r1, [sp, #28]
            *b >>= nbits;
     372:	2808      	cmp	r0, #8
     374:	d302      	bcc.n	37c <_ZN30microbit_async_display_example5types6Bitmap11shift_right17h116d0bbee2ff2972E+0x3e>
     376:	e009      	b.n	38c <_ZN30microbit_async_display_example5types6Bitmap11shift_right17h116d0bbee2ff2972E+0x4e>
        }
    }
     378:	b008      	add	sp, #32
     37a:	bd80      	pop	{r7, pc}
            *b >>= nbits;
     37c:	9900      	ldr	r1, [sp, #0]
     37e:	9a01      	ldr	r2, [sp, #4]
     380:	7808      	ldrb	r0, [r1, #0]
     382:	f002 0207 	and.w	r2, r2, #7
     386:	40d0      	lsrs	r0, r2
     388:	7008      	strb	r0, [r1, #0]
        for b in self.data.iter_mut() {
     38a:	e7e7      	b.n	35c <_ZN30microbit_async_display_example5types6Bitmap11shift_right17h116d0bbee2ff2972E+0x1e>
            *b >>= nbits;
     38c:	f64b 3030 	movw	r0, #47920	@ 0xbb30
     390:	f2c0 0000 	movt	r0, #0
     394:	f00a ff02 	bl	b19c <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h3b7efafe8b312b78E>

00000398 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E>:
    /// ```ignore
    /// let mut bitmap1 = Bitmap::new(0b11000000, 8);
    /// let bitmap2 = Bitmap::new(0b00110000, 8);
    /// bitmap1.or(&bitmap2); // Result: 0b11110000
    /// ```
    pub fn or(&mut self, other: &Bitmap) {
     398:	b580      	push	{r7, lr}
     39a:	466f      	mov	r7, sp
     39c:	b08c      	sub	sp, #48	@ 0x30
     39e:	9103      	str	r1, [sp, #12]
     3a0:	9004      	str	r0, [sp, #16]
     3a2:	9009      	str	r0, [sp, #36]	@ 0x24
     3a4:	910a      	str	r1, [sp, #40]	@ 0x28
     3a6:	2000      	movs	r0, #0
     3a8:	2101      	movs	r1, #1
        for i in 0..self.data.len() {
     3aa:	f009 fefb 	bl	a1a4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0afde0faa91357dbE>
     3ae:	9005      	str	r0, [sp, #20]
     3b0:	9106      	str	r1, [sp, #24]
     3b2:	e7ff      	b.n	3b4 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E+0x1c>
     3b4:	a805      	add	r0, sp, #20
     3b6:	f009 feed 	bl	a194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd1eed7027fe23b7aE>
     3ba:	9007      	str	r0, [sp, #28]
     3bc:	9108      	str	r1, [sp, #32]
     3be:	9807      	ldr	r0, [sp, #28]
     3c0:	07c0      	lsls	r0, r0, #31
     3c2:	b128      	cbz	r0, 3d0 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E+0x38>
     3c4:	e7ff      	b.n	3c6 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E+0x2e>
     3c6:	9808      	ldr	r0, [sp, #32]
     3c8:	9002      	str	r0, [sp, #8]
     3ca:	900b      	str	r0, [sp, #44]	@ 0x2c
            self.data[i] |= other.data[i];
     3cc:	b110      	cbz	r0, 3d4 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E+0x3c>
     3ce:	e008      	b.n	3e2 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E+0x4a>
        }
    }
     3d0:	b00c      	add	sp, #48	@ 0x30
     3d2:	bd80      	pop	{r7, pc}
            self.data[i] |= other.data[i];
     3d4:	9802      	ldr	r0, [sp, #8]
     3d6:	9903      	ldr	r1, [sp, #12]
     3d8:	4401      	add	r1, r0
     3da:	7909      	ldrb	r1, [r1, #4]
     3dc:	9101      	str	r1, [sp, #4]
     3de:	b140      	cbz	r0, 3f2 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E+0x5a>
     3e0:	e00f      	b.n	402 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E+0x6a>
     3e2:	9802      	ldr	r0, [sp, #8]
     3e4:	f64b 3240 	movw	r2, #47936	@ 0xbb40
     3e8:	f2c0 0200 	movt	r2, #0
     3ec:	2101      	movs	r1, #1
     3ee:	f00a f883 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
     3f2:	9a01      	ldr	r2, [sp, #4]
     3f4:	9804      	ldr	r0, [sp, #16]
     3f6:	9902      	ldr	r1, [sp, #8]
     3f8:	4401      	add	r1, r0
     3fa:	7908      	ldrb	r0, [r1, #4]
     3fc:	4310      	orrs	r0, r2
     3fe:	7108      	strb	r0, [r1, #4]
        for i in 0..self.data.len() {
     400:	e7d8      	b.n	3b4 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E+0x1c>
            self.data[i] |= other.data[i];
     402:	9802      	ldr	r0, [sp, #8]
     404:	f64b 3250 	movw	r2, #47952	@ 0xbb50
     408:	f2c0 0200 	movt	r2, #0
     40c:	2101      	movs	r1, #1
     40e:	f00a f873 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

00000412 <_ZN30microbit_async_display_example5types10Brightness5level17hec1be1fa7303eef2E>:
    /// # Example
    /// ```ignore
    /// let brightness = Brightness::new(7);
    /// assert_eq!(brightness.level(), 7);
    /// ```
    pub fn level(&self) -> u8 {
     412:	b580      	push	{r7, lr}
     414:	466f      	mov	r7, sp
     416:	b081      	sub	sp, #4
     418:	9000      	str	r0, [sp, #0]
        self.0
    }
     41a:	7800      	ldrb	r0, [r0, #0]
     41c:	b001      	add	sp, #4
     41e:	bd80      	pop	{r7, pc}

00000420 <_ZN92_$LT$microbit_async_display_example..types..Brightness$u20$as$u20$core..default..Default$GT$7default17hb3a063483d781c24E>:
}

impl Default for Brightness {
    fn default() -> Self {
     420:	b580      	push	{r7, lr}
     422:	466f      	mov	r7, sp
     424:	2005      	movs	r0, #5
        Self(5)
    }
     426:	bd80      	pop	{r7, pc}

00000428 <_ZN16embassy_executor4arch6thread8Executor3run17h88665bb70e3781baE>:
        /// - a [StaticCell](https://docs.rs/static_cell/latest/static_cell/) (safe)
        /// - a `static mut` (unsafe)
        /// - a local variable in a function you know never returns (like `fn main() -> !`), upgrading its lifetime with `transmute`. (unsafe)
        ///
        /// This function never returns.
        pub fn run(&'static mut self, init: impl FnOnce(Spawner)) -> ! {
     428:	b580      	push	{r7, lr}
     42a:	466f      	mov	r7, sp
     42c:	b084      	sub	sp, #16
     42e:	9001      	str	r0, [sp, #4]
     430:	9002      	str	r0, [sp, #8]
            init(self.inner.spawner());
     432:	f009 fa24 	bl	987e <_ZN16embassy_executor3raw8Executor7spawner17hb7e0d8e9e2724e86E>
     436:	f001 fd77 	bl	1f28 <_ZN30microbit_async_display_example18__cortex_m_rt_main28_$u7b$$u7b$closure$u7d$$u7d$17h896f7c19bfe0cb50E>
     43a:	e7ff      	b.n	43c <_ZN16embassy_executor4arch6thread8Executor3run17h88665bb70e3781baE+0x14>

            loop {
                unsafe {
                    self.inner.poll();
     43c:	9801      	ldr	r0, [sp, #4]
     43e:	f009 fa16 	bl	986e <_ZN16embassy_executor3raw8Executor4poll17h19375dbfb09ee3a6E>
                    asm!("wfe");
     442:	bf20      	wfe
     444:	e7fa      	b.n	43c <_ZN16embassy_executor4arch6thread8Executor3run17h88665bb70e3781baE+0x14>

00000446 <_ZN16embassy_executor3raw20TaskStorage$LT$F$GT$4poll17ha6c24643d096382aE>:
            Some(task) => task.initialize(future),
            None => SpawnToken::new_failed(),
        }
    }

    unsafe fn poll(p: TaskRef) {
     446:	b580      	push	{r7, lr}
     448:	466f      	mov	r7, sp
     44a:	b094      	sub	sp, #80	@ 0x50
     44c:	9003      	str	r0, [sp, #12]
     44e:	900d      	str	r0, [sp, #52]	@ 0x34
        let this = &*p.as_ptr().cast::<TaskStorage<F>>();
     450:	f009 f965 	bl	971e <_ZN16embassy_executor3raw7TaskRef6as_ptr17h4e14071552633612E>
     454:	4601      	mov	r1, r0
     456:	9102      	str	r1, [sp, #8]
     458:	9013      	str	r0, [sp, #76]	@ 0x4c
     45a:	900e      	str	r0, [sp, #56]	@ 0x38

        let future = Pin::new_unchecked(this.future.as_mut());
     45c:	3020      	adds	r0, #32
     45e:	f002 fb0c 	bl	2a7a <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$6as_mut17hdd982ef03b686451E>
     462:	4601      	mov	r1, r0
     464:	9803      	ldr	r0, [sp, #12]
     466:	9104      	str	r1, [sp, #16]
     468:	9112      	str	r1, [sp, #72]	@ 0x48
     46a:	910f      	str	r1, [sp, #60]	@ 0x3c
        let waker = waker::from_task(p);
     46c:	f009 f906 	bl	967c <_ZN16embassy_executor3raw5waker9from_task17hf8dbfc94448a63d2E>
     470:	9006      	str	r0, [sp, #24]
     472:	9107      	str	r1, [sp, #28]
     474:	a808      	add	r0, sp, #32
     476:	9005      	str	r0, [sp, #20]
     478:	a906      	add	r1, sp, #24
        let mut cx = Context::from_waker(&waker);
     47a:	f001 ffeb 	bl	2454 <_ZN4core4task4wake7Context10from_waker17hb97e09dee403d1d5E>
     47e:	9804      	ldr	r0, [sp, #16]
     480:	9905      	ldr	r1, [sp, #20]
        match future.poll(&mut cx) {
     482:	f001 fc15 	bl	1cb0 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E>
     486:	b130      	cbz	r0, 496 <_ZN16embassy_executor3raw20TaskStorage$LT$F$GT$4poll17ha6c24643d096382aE+0x50>
     488:	e7ff      	b.n	48a <_ZN16embassy_executor3raw20TaskStorage$LT$F$GT$4poll17ha6c24643d096382aE+0x44>
            Poll::Pending => {}
        }

        // the compiler is emitting a virtual call for waker drop, but we know
        // it's a noop for our waker.
        mem::forget(waker);
     48a:	9806      	ldr	r0, [sp, #24]
     48c:	9907      	ldr	r1, [sp, #28]
     48e:	f002 f9d5 	bl	283c <_ZN4core3mem6forget17h1c783cea6f02fee8E>
    }
     492:	b014      	add	sp, #80	@ 0x50
     494:	bd80      	pop	{r7, pc}
                this.future.drop_in_place();
     496:	9802      	ldr	r0, [sp, #8]
     498:	3020      	adds	r0, #32
     49a:	f002 fad0 	bl	2a3e <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$13drop_in_place17hcaf4ca6de9f39e37E>
     49e:	9802      	ldr	r0, [sp, #8]
                this.raw.poll_fn.set(Some(poll_exited));
     4a0:	301c      	adds	r0, #28
     4a2:	f249 712d 	movw	r1, #38701	@ 0x972d
     4a6:	f2c0 0100 	movt	r1, #0
     4aa:	910c      	str	r1, [sp, #48]	@ 0x30
     4ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
     4ae:	f002 faec 	bl	2a8a <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3set17h518a18d14392673eE>
     4b2:	9802      	ldr	r0, [sp, #8]
                this.raw.state.despawn();
     4b4:	3010      	adds	r0, #16
     4b6:	9001      	str	r0, [sp, #4]
     4b8:	9011      	str	r0, [sp, #68]	@ 0x44
     4ba:	2001      	movs	r0, #1
    }

    /// Unmark the task as spawned.
    #[inline(always)]
    pub fn despawn(&self) {
        compiler_fence(Ordering::Release);
     4bc:	f807 0c0e 	strb.w	r0, [r7, #-14]
     4c0:	f817 0c0e 	ldrb.w	r0, [r7, #-14]
     4c4:	f002 ff74 	bl	33b0 <_ZN4core4sync6atomic14compiler_fence17h02052c57d8d5e9d5E>
     4c8:	9801      	ldr	r0, [sp, #4]
     4ca:	2100      	movs	r1, #0
        self.spawned.store(false, Ordering::Relaxed);
     4cc:	f807 1c0d 	strb.w	r1, [r7, #-13]
     4d0:	f817 2c0d 	ldrb.w	r2, [r7, #-13]
     4d4:	f002 ff5f 	bl	3396 <_ZN4core4sync6atomic10AtomicBool5store17hde2be9a0f56795adE>
     4d8:	e7d7      	b.n	48a <_ZN16embassy_executor3raw20TaskStorage$LT$F$GT$4poll17ha6c24643d096382aE+0x44>

000004da <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E>:
        Self {
            pool: [TaskStorage::NEW; N],
        }
    }

    fn spawn_impl<T>(&'static self, future: impl FnOnce() -> F) -> SpawnToken<T> {
     4da:	b580      	push	{r7, lr}
     4dc:	466f      	mov	r7, sp
     4de:	b08a      	sub	sp, #40	@ 0x28
     4e0:	9101      	str	r1, [sp, #4]
     4e2:	9007      	str	r0, [sp, #28]
     4e4:	9108      	str	r1, [sp, #32]
     4e6:	2100      	movs	r1, #0
        match self.pool.iter().find_map(AvailableTask::claim) {
     4e8:	f807 1c0d 	strb.w	r1, [r7, #-13]
     4ec:	2101      	movs	r1, #1
     4ee:	f807 1c0d 	strb.w	r1, [r7, #-13]
     4f2:	f000 f8b2 	bl	65a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17ha661ed814e902af1E>
     4f6:	9004      	str	r0, [sp, #16]
     4f8:	9105      	str	r1, [sp, #20]
     4fa:	a804      	add	r0, sp, #16
     4fc:	f000 fa31 	bl	962 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE>
     500:	9003      	str	r0, [sp, #12]
     502:	9803      	ldr	r0, [sp, #12]
     504:	b150      	cbz	r0, 51c <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E+0x42>
     506:	e7ff      	b.n	508 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E+0x2e>
            Some(task) => task.initialize_impl::<T>(future),
     508:	9901      	ldr	r1, [sp, #4]
     50a:	9803      	ldr	r0, [sp, #12]
     50c:	9009      	str	r0, [sp, #36]	@ 0x24
     50e:	2200      	movs	r2, #0
     510:	f807 2c0d 	strb.w	r2, [r7, #-13]
     514:	f000 f83b 	bl	58e <_ZN16embassy_executor3raw22AvailableTask$LT$F$GT$15initialize_impl17hb60128c8430b2e48E>
     518:	9002      	str	r0, [sp, #8]
     51a:	e003      	b.n	524 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E+0x4a>
            None => SpawnToken::new_failed(),
     51c:	f002 fc90 	bl	2e40 <_ZN16embassy_executor7spawner19SpawnToken$LT$S$GT$10new_failed17h14713d30cecec555E>
     520:	9002      	str	r0, [sp, #8]
     522:	e7ff      	b.n	524 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E+0x4a>
        }
    }
     524:	f817 0c0d 	ldrb.w	r0, [r7, #-13]
     528:	07c0      	lsls	r0, r0, #31
     52a:	b918      	cbnz	r0, 534 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E+0x5a>
     52c:	e7ff      	b.n	52e <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E+0x54>
     52e:	9802      	ldr	r0, [sp, #8]
     530:	b00a      	add	sp, #40	@ 0x28
     532:	bd80      	pop	{r7, pc}
     534:	e7fb      	b.n	52e <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E+0x54>

00000536 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$15_spawn_async_fn17h1601693635614615E>:
    /// by the Embassy macros ONLY.
    ///
    /// SAFETY: `future` must be a closure of the form `move || my_async_fn(args)`, where `my_async_fn`
    /// is an `async fn`, NOT a hand-written `Future`.
    #[doc(hidden)]
    pub unsafe fn _spawn_async_fn<FutFn>(&'static self, future: FutFn) -> SpawnToken<impl Sized>
     536:	b580      	push	{r7, lr}
     538:	466f      	mov	r7, sp
     53a:	b082      	sub	sp, #8
     53c:	9000      	str	r0, [sp, #0]
     53e:	9101      	str	r1, [sp, #4]
    where
        FutFn: FnOnce() -> F,
    {
        // See the comment in AvailableTask::__initialize_async_fn for explanation.
        self.spawn_impl::<FutFn>(future)
     540:	f7ff ffcb 	bl	4da <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$10spawn_impl17h6d46def5e71b4fb0E>
    }
     544:	b002      	add	sp, #8
     546:	bd80      	pop	{r7, pc}

00000548 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$3new17h9cf8f319d5268cb1E>:
    pub const fn new() -> Self {
     548:	b580      	push	{r7, lr}
     54a:	466f      	mov	r7, sp
     54c:	b0c4      	sub	sp, #272	@ 0x110
     54e:	9002      	str	r0, [sp, #8]
     550:	2000      	movs	r0, #0
            pool: [TaskStorage::NEW; N],
     552:	9003      	str	r0, [sp, #12]
     554:	e7ff      	b.n	556 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$3new17h9cf8f319d5268cb1E+0xe>
     556:	9803      	ldr	r0, [sp, #12]
     558:	9001      	str	r0, [sp, #4]
     55a:	b980      	cbnz	r0, 57e <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$3new17h9cf8f319d5268cb1E+0x36>
     55c:	e7ff      	b.n	55e <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$3new17h9cf8f319d5268cb1E+0x16>
     55e:	9901      	ldr	r1, [sp, #4]
     560:	a804      	add	r0, sp, #16
     562:	eb00 2001 	add.w	r0, r0, r1, lsl #8
     566:	f64b 3160 	movw	r1, #47968	@ 0xbb60
     56a:	f2c0 0100 	movt	r1, #0
     56e:	f44f 7280 	mov.w	r2, #256	@ 0x100
     572:	f00b f862 	bl	b63a <__aeabi_memcpy8>
     576:	9801      	ldr	r0, [sp, #4]
     578:	3001      	adds	r0, #1
     57a:	9003      	str	r0, [sp, #12]
     57c:	e7eb      	b.n	556 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$3new17h9cf8f319d5268cb1E+0xe>
        Self {
     57e:	9802      	ldr	r0, [sp, #8]
     580:	a904      	add	r1, sp, #16
     582:	f44f 7280 	mov.w	r2, #256	@ 0x100
     586:	f00b f858 	bl	b63a <__aeabi_memcpy8>
    }
     58a:	b044      	add	sp, #272	@ 0x110
     58c:	bd80      	pop	{r7, pc}

0000058e <_ZN16embassy_executor3raw22AvailableTask$LT$F$GT$15initialize_impl17hb60128c8430b2e48E>:
    fn initialize_impl<S>(self, future: impl FnOnce() -> F) -> SpawnToken<S> {
     58e:	b580      	push	{r7, lr}
     590:	466f      	mov	r7, sp
     592:	b086      	sub	sp, #24
     594:	9101      	str	r1, [sp, #4]
     596:	9002      	str	r0, [sp, #8]
     598:	9104      	str	r1, [sp, #16]
            self.task.raw.poll_fn.set(Some(TaskStorage::<F>::poll));
     59a:	9802      	ldr	r0, [sp, #8]
     59c:	301c      	adds	r0, #28
     59e:	f240 4147 	movw	r1, #1095	@ 0x447
     5a2:	f2c0 0100 	movt	r1, #0
     5a6:	9103      	str	r1, [sp, #12]
     5a8:	9903      	ldr	r1, [sp, #12]
     5aa:	f002 fa6e 	bl	2a8a <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3set17h518a18d14392673eE>
     5ae:	9901      	ldr	r1, [sp, #4]
            self.task.future.write_in_place(future);
     5b0:	9802      	ldr	r0, [sp, #8]
     5b2:	3020      	adds	r0, #32
     5b4:	f002 fa4d 	bl	2a52 <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$14write_in_place17hfca5611d46463744E>
            let task = TaskRef::new(self.task);
     5b8:	9802      	ldr	r0, [sp, #8]
     5ba:	f000 f844 	bl	646 <_ZN16embassy_executor3raw7TaskRef3new17h1662bfabef155bf4E>
     5be:	9005      	str	r0, [sp, #20]
            SpawnToken::new(task)
     5c0:	f002 fc46 	bl	2e50 <_ZN16embassy_executor7spawner19SpawnToken$LT$S$GT$3new17h7e8bfa4500b6e3ffE>
    }
     5c4:	b006      	add	sp, #24
     5c6:	bd80      	pop	{r7, pc}

000005c8 <_ZN16embassy_executor3raw22AvailableTask$LT$F$GT$5claim17h480f478892374325E>:
    pub fn claim(task: &'static TaskStorage<F>) -> Option<Self> {
     5c8:	b580      	push	{r7, lr}
     5ca:	466f      	mov	r7, sp
     5cc:	b08a      	sub	sp, #40	@ 0x28
     5ce:	9003      	str	r0, [sp, #12]
        task.raw.state.spawn().then(|| Self { task })
     5d0:	9803      	ldr	r0, [sp, #12]
     5d2:	3010      	adds	r0, #16
     5d4:	9001      	str	r0, [sp, #4]
     5d6:	9008      	str	r0, [sp, #32]
     5d8:	2001      	movs	r0, #1
        compiler_fence(Ordering::Release);
     5da:	f807 0c15 	strb.w	r0, [r7, #-21]
     5de:	f817 0c15 	ldrb.w	r0, [r7, #-21]
     5e2:	f002 fee5 	bl	33b0 <_ZN4core4sync6atomic14compiler_fence17h02052c57d8d5e9d5E>
     5e6:	9801      	ldr	r0, [sp, #4]
        let r = self
     5e8:	f009 f80d 	bl	9606 <_ZN16embassy_executor3raw5state5State6as_u3217h2de4fd4b41425cedE>
     5ec:	2100      	movs	r1, #0
                Ordering::Relaxed,
     5ee:	f807 1c0b 	strb.w	r1, [r7, #-11]
                Ordering::Relaxed,
     5f2:	f807 1c0a 	strb.w	r1, [r7, #-10]
        let r = self
     5f6:	f817 3c0b 	ldrb.w	r3, [r7, #-11]
     5fa:	f817 2c0a 	ldrb.w	r2, [r7, #-10]
     5fe:	46ec      	mov	ip, sp
     600:	f8cc 2000 	str.w	r2, [ip]
     604:	f240 1201 	movw	r2, #257	@ 0x101
     608:	f002 ff05 	bl	3416 <_ZN4core4sync6atomic9AtomicU3216compare_exchange17h08b568de30730aa7E>
     60c:	9005      	str	r0, [sp, #20]
     60e:	9106      	str	r1, [sp, #24]
     610:	a805      	add	r0, sp, #20
     612:	f002 fbc9 	bl	2da8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h6b8f9933727becb9E>
     616:	9002      	str	r0, [sp, #8]
     618:	f807 0c01 	strb.w	r0, [r7, #-1]
     61c:	2002      	movs	r0, #2
        compiler_fence(Ordering::Acquire);
     61e:	f807 0c09 	strb.w	r0, [r7, #-9]
     622:	f817 0c09 	ldrb.w	r0, [r7, #-9]
     626:	f002 fec3 	bl	33b0 <_ZN4core4sync6atomic14compiler_fence17h02052c57d8d5e9d5E>
     62a:	9802      	ldr	r0, [sp, #8]
     62c:	a903      	add	r1, sp, #12
     62e:	f002 fa89 	bl	2b44 <_ZN4core4bool22_$LT$impl$u20$bool$GT$4then17he2b205a9f9b5d805E>
    }
     632:	b00a      	add	sp, #40	@ 0x28
     634:	bd80      	pop	{r7, pc}

00000636 <_ZN16embassy_executor3raw22AvailableTask$LT$F$GT$5claim28_$u7b$$u7b$closure$u7d$$u7d$17h192ea2556efaa5fbE>:
        task.raw.state.spawn().then(|| Self { task })
     636:	b580      	push	{r7, lr}
     638:	466f      	mov	r7, sp
     63a:	b081      	sub	sp, #4
     63c:	9000      	str	r0, [sp, #0]
     63e:	9800      	ldr	r0, [sp, #0]
     640:	6800      	ldr	r0, [r0, #0]
     642:	b001      	add	sp, #4
     644:	bd80      	pop	{r7, pc}

00000646 <_ZN16embassy_executor3raw7TaskRef3new17h1662bfabef155bf4E>:
    fn new<F: Future + 'static>(task: &'static TaskStorage<F>) -> Self {
     646:	b580      	push	{r7, lr}
     648:	466f      	mov	r7, sp
     64a:	b082      	sub	sp, #8
     64c:	9001      	str	r0, [sp, #4]
            ptr: NonNull::from(task).cast(),
     64e:	f001 ff89 	bl	2564 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hb6b6b95f3e6c2b63E>
     652:	f001 ff81 	bl	2558 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h9c4595d49df83306E>
    }
     656:	b002      	add	sp, #8
     658:	bd80      	pop	{r7, pc}

0000065a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17ha661ed814e902af1E>:
    /// assert_eq!(iterator.next(), None);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    #[rustc_diagnostic_item = "slice_iter"]
    pub fn iter(&self) -> Iter<'_, T> {
     65a:	b580      	push	{r7, lr}
     65c:	466f      	mov	r7, sp
     65e:	b082      	sub	sp, #8
     660:	9000      	str	r0, [sp, #0]
     662:	9101      	str	r1, [sp, #4]
        Iter::new(self)
     664:	f000 f8f7 	bl	856 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17ha012cd68c91985feE>
    }
     668:	b002      	add	sp, #8
     66a:	bd80      	pop	{r7, pc}

0000066c <_ZN4core3ptr5write17h05e94e16f97cc45cE>:
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_stable(feature = "const_ptr_write", since = "1.83.0")]
#[rustc_diagnostic_item = "ptr_write"]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
pub const unsafe fn write<T>(dst: *mut T, src: T) {
     66c:	b580      	push	{r7, lr}
     66e:	466f      	mov	r7, sp
     670:	b082      	sub	sp, #8
     672:	9001      	str	r0, [sp, #4]
     674:	22e0      	movs	r2, #224	@ 0xe0
                addr: *mut () = dst as *mut (),
                align: usize = align_of::<T>(),
                is_zst: bool = T::IS_ZST,
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
        );
        intrinsics::write_via_move(dst, src)
     676:	f00a ffe0 	bl	b63a <__aeabi_memcpy8>
    }
}
     67a:	b002      	add	sp, #8
     67c:	bd80      	pop	{r7, pc}

0000067e <_ZN16embassy_executor7_export11TaskPoolRef3get17h2a7433025a7916ccE>:

        /// Get the pool for this ref, allocating it from the arena the first time.
        ///
        /// safety: for a given TaskPoolRef instance, must always call with the exact
        /// same generic params.
        pub unsafe fn get<F: Future, const N: usize>(&'static self) -> &'static TaskPool<F, N> {
     67e:	b580      	push	{r7, lr}
     680:	466f      	mov	r7, sp
     682:	b082      	sub	sp, #8
     684:	9001      	str	r0, [sp, #4]
            critical_section::with(|cs| {
     686:	f002 fc30 	bl	2eea <_ZN16critical_section4with17had406faee0062bd7E>
                    ptr.set(pool as *mut _ as _);
                }

                unsafe { &*(ptr.get() as *const _) }
            })
        }
     68a:	b002      	add	sp, #8
     68c:	bd80      	pop	{r7, pc}

0000068e <_ZN16embassy_executor7_export11TaskPoolRef3get28_$u7b$$u7b$closure$u7d$$u7d$17h51e2099415bbea6fE>:
            critical_section::with(|cs| {
     68e:	b580      	push	{r7, lr}
     690:	466f      	mov	r7, sp
     692:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
     696:	9007      	str	r0, [sp, #28]
                let ptr = self.ptr.borrow(cs);
     698:	9807      	ldr	r0, [sp, #28]
     69a:	f002 fa43 	bl	2b24 <_ZN16critical_section5mutex14Mutex$LT$T$GT$6borrow17he86f423c40f64adeE>
     69e:	4601      	mov	r1, r0
     6a0:	9106      	str	r1, [sp, #24]
     6a2:	904a      	str	r0, [sp, #296]	@ 0x128
                if ptr.get().is_null() {
     6a4:	f002 fe59 	bl	335a <_ZN4core4cell13Cell$LT$T$GT$3get17h3beb6b66500aa087E>
     6a8:	f002 fa43 	bl	2b32 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc47244a84bb37139E>
     6ac:	b930      	cbnz	r0, 6bc <_ZN16embassy_executor7_export11TaskPoolRef3get28_$u7b$$u7b$closure$u7d$$u7d$17h51e2099415bbea6fE+0x2e>
     6ae:	e7ff      	b.n	6b0 <_ZN16embassy_executor7_export11TaskPoolRef3get28_$u7b$$u7b$closure$u7d$$u7d$17h51e2099415bbea6fE+0x22>
                unsafe { &*(ptr.get() as *const _) }
     6b0:	9806      	ldr	r0, [sp, #24]
     6b2:	f002 fe52 	bl	335a <_ZN4core4cell13Cell$LT$T$GT$3get17h3beb6b66500aa087E>
            })
     6b6:	f50d 7d4e 	add.w	sp, sp, #824	@ 0x338
     6ba:	bd80      	pop	{r7, pc}
                    let pool = ARENA.alloc::<TaskPool<F, N>>(cs);
     6bc:	f240 201c 	movw	r0, #540	@ 0x21c
     6c0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
     6c4:	f000 f820 	bl	708 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E>
     6c8:	9005      	str	r0, [sp, #20]
     6ca:	904b      	str	r0, [sp, #300]	@ 0x12c
     6cc:	a808      	add	r0, sp, #32
                    pool.write(TaskPool::new());
     6ce:	9001      	str	r0, [sp, #4]
     6d0:	f7ff ff3a 	bl	548 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$3new17h9cf8f319d5268cb1E>
     6d4:	9901      	ldr	r1, [sp, #4]
     6d6:	9805      	ldr	r0, [sp, #20]
     6d8:	90cd      	str	r0, [sp, #820]	@ 0x334
     6da:	a88c      	add	r0, sp, #560	@ 0x230
     6dc:	9002      	str	r0, [sp, #8]
     6de:	f44f 7280 	mov.w	r2, #256	@ 0x100
    #[must_use = "if you don't need the wrapper, you can use `mem::forget` instead"]
    #[stable(feature = "manually_drop", since = "1.20.0")]
    #[rustc_const_stable(feature = "const_manually_drop", since = "1.32.0")]
    #[inline(always)]
    pub const fn new(value: T) -> ManuallyDrop<T> {
        ManuallyDrop { value }
     6e2:	9204      	str	r2, [sp, #16]
     6e4:	f00a ffa9 	bl	b63a <__aeabi_memcpy8>
     6e8:	9902      	ldr	r1, [sp, #8]
     6ea:	9a04      	ldr	r2, [sp, #16]
     6ec:	a84c      	add	r0, sp, #304	@ 0x130
    #[stable(feature = "maybe_uninit", since = "1.36.0")]
    #[rustc_const_stable(feature = "const_maybe_uninit", since = "1.36.0")]
    #[must_use = "use `forget` to avoid running Drop code"]
    #[inline(always)]
    pub const fn new(val: T) -> MaybeUninit<T> {
        MaybeUninit { value: ManuallyDrop::new(val) }
     6ee:	9003      	str	r0, [sp, #12]
     6f0:	f00a ffa3 	bl	b63a <__aeabi_memcpy8>
     6f4:	9903      	ldr	r1, [sp, #12]
     6f6:	9a04      	ldr	r2, [sp, #16]
     6f8:	9805      	ldr	r0, [sp, #20]
    /// ```
    #[inline(always)]
    #[stable(feature = "maybe_uninit_write", since = "1.55.0")]
    #[rustc_const_stable(feature = "const_maybe_uninit_write", since = "1.85.0")]
    pub const fn write(&mut self, val: T) -> &mut T {
        *self = MaybeUninit::new(val);
     6fa:	f00a ff9e 	bl	b63a <__aeabi_memcpy8>
     6fe:	9806      	ldr	r0, [sp, #24]
     700:	9905      	ldr	r1, [sp, #20]
                    ptr.set(pool as *mut _ as _);
     702:	f002 fe38 	bl	3376 <_ZN4core4cell13Cell$LT$T$GT$3set17h7fa06842796ee4c0E>
     706:	e7d3      	b.n	6b0 <_ZN16embassy_executor7_export11TaskPoolRef3get28_$u7b$$u7b$closure$u7d$$u7d$17h51e2099415bbea6fE+0x22>

00000708 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E>:
        fn alloc<T>(&'static self, cs: CriticalSection) -> &'static mut MaybeUninit<T> {
     708:	b580      	push	{r7, lr}
     70a:	466f      	mov	r7, sp
     70c:	b0a0      	sub	sp, #128	@ 0x80
     70e:	9008      	str	r0, [sp, #32]
     710:	900e      	str	r0, [sp, #56]	@ 0x38
            let layout = Layout::new::<T>();
     712:	f002 fdc6 	bl	32a2 <_ZN4core5alloc6layout6Layout3new17h392af1b5063bfc40E>
     716:	4602      	mov	r2, r0
     718:	9808      	ldr	r0, [sp, #32]
     71a:	920a      	str	r2, [sp, #40]	@ 0x28
     71c:	910b      	str	r1, [sp, #44]	@ 0x2c
     71e:	901f      	str	r0, [sp, #124]	@ 0x7c
     720:	901d      	str	r0, [sp, #116]	@ 0x74
            let start = self.buf.get().cast::<u8>();
     722:	9010      	str	r0, [sp, #64]	@ 0x40
     724:	901a      	str	r0, [sp, #104]	@ 0x68
     726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
     72a:	911b      	str	r1, [sp, #108]	@ 0x6c
        unsafe { intrinsics::offset(self, count) }
     72c:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
     730:	4601      	mov	r1, r0
            let end = unsafe { start.add(N) };
     732:	9109      	str	r1, [sp, #36]	@ 0x24
     734:	9011      	str	r0, [sp, #68]	@ 0x44
            let mut ptr = self.ptr.borrow(cs).get();
     736:	f002 f9ee 	bl	2b16 <_ZN16critical_section5mutex14Mutex$LT$T$GT$6borrow17h77d965106c134d4bE>
     73a:	f002 fe15 	bl	3368 <_ZN4core4cell13Cell$LT$T$GT$3get17h5a4f70328894023eE>
     73e:	900c      	str	r0, [sp, #48]	@ 0x30
            if ptr.is_null() {
     740:	980c      	ldr	r0, [sp, #48]	@ 0x30
     742:	f006 fb48 	bl	6dd6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hfec3e1d4a4a9bd7eE>
     746:	b938      	cbnz	r0, 758 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x50>
     748:	e7ff      	b.n	74a <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x42>
            let bytes_left = (end as usize) - (ptr as usize);
     74a:	9809      	ldr	r0, [sp, #36]	@ 0x24
     74c:	990c      	ldr	r1, [sp, #48]	@ 0x30
     74e:	1a42      	subs	r2, r0, r1
     750:	9207      	str	r2, [sp, #28]
     752:	4288      	cmp	r0, r1
     754:	d316      	bcc.n	784 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x7c>
     756:	e004      	b.n	762 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x5a>
     758:	9808      	ldr	r0, [sp, #32]
     75a:	901e      	str	r0, [sp, #120]	@ 0x78
     75c:	901c      	str	r0, [sp, #112]	@ 0x70
                ptr = self.buf.get().cast::<u8>();
     75e:	900c      	str	r0, [sp, #48]	@ 0x30
            if ptr.is_null() {
     760:	e7f3      	b.n	74a <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x42>
            let bytes_left = (end as usize) - (ptr as usize);
     762:	9807      	ldr	r0, [sp, #28]
     764:	9012      	str	r0, [sp, #72]	@ 0x48
            let align_offset = (ptr as usize).next_multiple_of(layout.align()) - (ptr as usize);
     766:	980c      	ldr	r0, [sp, #48]	@ 0x30
     768:	9005      	str	r0, [sp, #20]
     76a:	a80a      	add	r0, sp, #40	@ 0x28
     76c:	f001 fc45 	bl	1ffa <_ZN4core5alloc6layout6Layout5align17heea29df1c3211099E>
     770:	4601      	mov	r1, r0
     772:	9805      	ldr	r0, [sp, #20]
     774:	f002 f992 	bl	2a9c <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E>
     778:	990c      	ldr	r1, [sp, #48]	@ 0x30
     77a:	1a42      	subs	r2, r0, r1
     77c:	9206      	str	r2, [sp, #24]
     77e:	4288      	cmp	r0, r1
     780:	d311      	bcc.n	7a6 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x9e>
     782:	e005      	b.n	790 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x88>
            let bytes_left = (end as usize) - (ptr as usize);
     784:	f64b 40cc 	movw	r0, #48332	@ 0xbccc
     788:	f2c0 0000 	movt	r0, #0
     78c:	f00a fce0 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
            let align_offset = (ptr as usize).next_multiple_of(layout.align()) - (ptr as usize);
     790:	9806      	ldr	r0, [sp, #24]
     792:	9013      	str	r0, [sp, #76]	@ 0x4c
     794:	a80a      	add	r0, sp, #40	@ 0x28
            if align_offset + layout.size() > bytes_left {
     796:	f001 fc29 	bl	1fec <_ZN4core5alloc6layout6Layout4size17h30fba2bb97d3f226E>
     79a:	9906      	ldr	r1, [sp, #24]
     79c:	4408      	add	r0, r1
     79e:	4288      	cmp	r0, r1
     7a0:	9004      	str	r0, [sp, #16]
     7a2:	d30b      	bcc.n	7bc <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0xb4>
     7a4:	e005      	b.n	7b2 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0xaa>
            let align_offset = (ptr as usize).next_multiple_of(layout.align()) - (ptr as usize);
     7a6:	f64b 40dc 	movw	r0, #48348	@ 0xbcdc
     7aa:	f2c0 0000 	movt	r0, #0
     7ae:	f00a fccf 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
            if align_offset + layout.size() > bytes_left {
     7b2:	9804      	ldr	r0, [sp, #16]
     7b4:	9907      	ldr	r1, [sp, #28]
     7b6:	4288      	cmp	r0, r1
     7b8:	d819      	bhi.n	7ee <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0xe6>
     7ba:	e005      	b.n	7c8 <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0xc0>
     7bc:	f64b 40ec 	movw	r0, #48364	@ 0xbcec
     7c0:	f2c0 0000 	movt	r0, #0
     7c4:	f00a fcb1 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
            let res = unsafe { ptr.add(align_offset) };
     7c8:	9906      	ldr	r1, [sp, #24]
     7ca:	980c      	ldr	r0, [sp, #48]	@ 0x30
     7cc:	9018      	str	r0, [sp, #96]	@ 0x60
     7ce:	9119      	str	r1, [sp, #100]	@ 0x64
     7d0:	4408      	add	r0, r1
     7d2:	4601      	mov	r1, r0
     7d4:	9101      	str	r1, [sp, #4]
     7d6:	9014      	str	r0, [sp, #80]	@ 0x50
            let ptr = unsafe { ptr.add(align_offset + layout.size()) };
     7d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
     7da:	9002      	str	r0, [sp, #8]
     7dc:	a80a      	add	r0, sp, #40	@ 0x28
     7de:	f001 fc05 	bl	1fec <_ZN4core5alloc6layout6Layout4size17h30fba2bb97d3f226E>
     7e2:	9906      	ldr	r1, [sp, #24]
     7e4:	4408      	add	r0, r1
     7e6:	4288      	cmp	r0, r1
     7e8:	9003      	str	r0, [sp, #12]
     7ea:	d320      	bcc.n	82e <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x126>
     7ec:	e00d      	b.n	80a <_ZN16embassy_executor7_export14Arena$LT$_$GT$5alloc17hd3523b6eec755e24E+0x102>
                panic!("embassy-executor: task arena is full. You must increase the arena size, see the documentation for details: https://docs.embassy.dev/embassy-executor/");
     7ee:	f240 000a 	movw	r0, #10
     7f2:	f2c0 0000 	movt	r0, #0
     7f6:	f009 faf4 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
     7fa:	f827 0c4a 	strh.w	r0, [r7, #-74]
     7fe:	f1a7 004a 	sub.w	r0, r7, #74	@ 0x4a
     802:	f009 fb5d 	bl	9ec0 <_ZN5defmt6export26acquire_header_and_release17h7ce8ef2ffd00dd1bE>
#[inline(always)]
pub fn panic() -> ! {
    extern "Rust" {
        fn _defmt_panic() -> !;
    }
    unsafe { _defmt_panic() }
     806:	f009 fb8b 	bl	9f20 <__defmt_default_panic>
     80a:	9808      	ldr	r0, [sp, #32]
     80c:	9902      	ldr	r1, [sp, #8]
     80e:	9a03      	ldr	r2, [sp, #12]
     810:	9116      	str	r1, [sp, #88]	@ 0x58
     812:	9217      	str	r2, [sp, #92]	@ 0x5c
     814:	4411      	add	r1, r2
            let ptr = unsafe { ptr.add(align_offset + layout.size()) };
     816:	9100      	str	r1, [sp, #0]
     818:	9115      	str	r1, [sp, #84]	@ 0x54
            self.ptr.borrow(cs).set(ptr);
     81a:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
     81e:	f002 f97a 	bl	2b16 <_ZN16critical_section5mutex14Mutex$LT$T$GT$6borrow17h77d965106c134d4bE>
     822:	9900      	ldr	r1, [sp, #0]
     824:	f002 fdaf 	bl	3386 <_ZN4core4cell13Cell$LT$T$GT$3set17hbd924c25cd1bf402E>
     828:	9801      	ldr	r0, [sp, #4]
        }
     82a:	b020      	add	sp, #128	@ 0x80
     82c:	bd80      	pop	{r7, pc}
            let ptr = unsafe { ptr.add(align_offset + layout.size()) };
     82e:	f64b 40fc 	movw	r0, #48380	@ 0xbcfc
     832:	f2c0 0000 	movt	r0, #0
     836:	f00a fc78 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

0000083a <_ZN4core4iter6traits8iterator8Iterator9enumerate17h98d390c1ea5f9ce6E>:
    /// assert_eq!(iter.next(), None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_diagnostic_item = "enumerate_method"]
    fn enumerate(self) -> Enumerate<Self>
     83a:	b580      	push	{r7, lr}
     83c:	466f      	mov	r7, sp
     83e:	b083      	sub	sp, #12
     840:	9100      	str	r1, [sp, #0]
     842:	4601      	mov	r1, r0
     844:	9800      	ldr	r0, [sp, #0]
     846:	9001      	str	r0, [sp, #4]
     848:	9202      	str	r2, [sp, #8]
    iter: I,
    count: usize,
}
impl<I> Enumerate<I> {
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
        Enumerate { iter, count: 0 }
     84a:	6008      	str	r0, [r1, #0]
     84c:	604a      	str	r2, [r1, #4]
     84e:	2000      	movs	r0, #0
     850:	6088      	str	r0, [r1, #8]
    where
        Self: Sized,
    {
        Enumerate::new(self)
    }
     852:	b003      	add	sp, #12
     854:	bd80      	pop	{r7, pc}

00000856 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17ha012cd68c91985feE>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
     856:	b580      	push	{r7, lr}
     858:	466f      	mov	r7, sp
     85a:	b08a      	sub	sp, #40	@ 0x28
     85c:	9100      	str	r1, [sp, #0]
     85e:	9001      	str	r0, [sp, #4]
     860:	9003      	str	r0, [sp, #12]
     862:	9104      	str	r1, [sp, #16]
        let len = slice.len();
     864:	9105      	str	r1, [sp, #20]
    /// Converts a reference to a `NonNull` pointer.
    #[unstable(feature = "non_null_from_ref", issue = "130823")]
    #[inline]
    pub const fn from_ref(r: &T) -> Self {
        // SAFETY: A reference cannot be null.
        unsafe { NonNull { pointer: r as *const T } }
     866:	9006      	str	r0, [sp, #24]
     868:	9107      	str	r1, [sp, #28]
    #[must_use = "this returns the result of the operation, \
                  without modifying the original"]
    #[inline]
    pub const fn cast<U>(self) -> NonNull<U> {
        // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
     86a:	9008      	str	r0, [sp, #32]
        let ptr: NonNull<T> = NonNull::from(slice).cast();
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            let end_or_len =
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
     86c:	e7ff      	b.n	86e <_ZN4core5slice4iter13Iter$LT$T$GT$3new17ha012cd68c91985feE+0x18>
        unsafe { mem::transmute::<Self, *mut T>(self) }
     86e:	9801      	ldr	r0, [sp, #4]
     870:	9900      	ldr	r1, [sp, #0]
     872:	9009      	str	r0, [sp, #36]	@ 0x24
     874:	eb00 2001 	add.w	r0, r0, r1, lsl #8
     878:	9002      	str	r0, [sp, #8]
     87a:	e7ff      	b.n	87c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17ha012cd68c91985feE+0x26>

            Self { ptr, end_or_len, _marker: PhantomData }
     87c:	9801      	ldr	r0, [sp, #4]
     87e:	9902      	ldr	r1, [sp, #8]
        }
    }
     880:	b00a      	add	sp, #40	@ 0x28
     882:	bd80      	pop	{r7, pc}

00000884 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hd287c3811530aa19E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Send> Send for IterMut<'_, T> {}

impl<'a, T> IterMut<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a mut [T]) -> Self {
     884:	b580      	push	{r7, lr}
     886:	466f      	mov	r7, sp
     888:	b08a      	sub	sp, #40	@ 0x28
     88a:	9100      	str	r1, [sp, #0]
     88c:	9001      	str	r0, [sp, #4]
     88e:	9003      	str	r0, [sp, #12]
     890:	9104      	str	r1, [sp, #16]
        let len = slice.len();
     892:	9105      	str	r1, [sp, #20]
        unsafe { NonNull { pointer: r as *mut T } }
     894:	9006      	str	r0, [sp, #24]
     896:	9107      	str	r1, [sp, #28]
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
     898:	9008      	str	r0, [sp, #32]
        //
        // See the `next_unchecked!` and `is_empty!` macros as well as the
        // `post_inc_start` method for more information.
        unsafe {
            let end_or_len =
                if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
     89a:	e7ff      	b.n	89c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hd287c3811530aa19E+0x18>
        unsafe { mem::transmute::<Self, *mut T>(self) }
     89c:	9801      	ldr	r0, [sp, #4]
     89e:	9900      	ldr	r1, [sp, #0]
     8a0:	9009      	str	r0, [sp, #36]	@ 0x24
     8a2:	4408      	add	r0, r1
     8a4:	9002      	str	r0, [sp, #8]
     8a6:	e7ff      	b.n	8a8 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hd287c3811530aa19E+0x24>

            Self { ptr, end_or_len, _marker: PhantomData }
     8a8:	9801      	ldr	r0, [sp, #4]
     8aa:	9902      	ldr	r1, [sp, #8]
        }
    }
     8ac:	b00a      	add	sp, #40	@ 0x28
     8ae:	bd80      	pop	{r7, pc}

000008b0 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hfd0a6c09fb961270E>:
    pub(super) fn new(slice: &'a mut [T]) -> Self {
     8b0:	b580      	push	{r7, lr}
     8b2:	466f      	mov	r7, sp
     8b4:	b08a      	sub	sp, #40	@ 0x28
     8b6:	9100      	str	r1, [sp, #0]
     8b8:	9001      	str	r0, [sp, #4]
     8ba:	9003      	str	r0, [sp, #12]
     8bc:	9104      	str	r1, [sp, #16]
        let len = slice.len();
     8be:	9105      	str	r1, [sp, #20]
        unsafe { NonNull { pointer: r as *mut T } }
     8c0:	9006      	str	r0, [sp, #24]
     8c2:	9107      	str	r1, [sp, #28]
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
     8c4:	9008      	str	r0, [sp, #32]
                if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
     8c6:	e7ff      	b.n	8c8 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hfd0a6c09fb961270E+0x18>
        unsafe { mem::transmute::<Self, *mut T>(self) }
     8c8:	9801      	ldr	r0, [sp, #4]
     8ca:	9900      	ldr	r1, [sp, #0]
     8cc:	9009      	str	r0, [sp, #36]	@ 0x24
     8ce:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
     8d2:	9002      	str	r0, [sp, #8]
     8d4:	e7ff      	b.n	8d6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hfd0a6c09fb961270E+0x26>
            Self { ptr, end_or_len, _marker: PhantomData }
     8d6:	9801      	ldr	r0, [sp, #4]
     8d8:	9902      	ldr	r1, [sp, #8]
    }
     8da:	b00a      	add	sp, #40	@ 0x28
     8dc:	bd80      	pop	{r7, pc}

000008de <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha73d16b1813da6c8E>:
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    #[inline]
    fn into_iter(self) -> I {
     8de:	b580      	push	{r7, lr}
     8e0:	466f      	mov	r7, sp
     8e2:	b082      	sub	sp, #8
     8e4:	9000      	str	r0, [sp, #0]
     8e6:	9101      	str	r1, [sp, #4]
        self
    }
     8e8:	b002      	add	sp, #8
     8ea:	bd80      	pop	{r7, pc}

000008ec <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hca4b17596e89abbbE>:
    fn into_iter(self) -> I {
     8ec:	b580      	push	{r7, lr}
     8ee:	466f      	mov	r7, sp
     8f0:	b082      	sub	sp, #8
     8f2:	9000      	str	r0, [sp, #0]
     8f4:	9101      	str	r1, [sp, #4]
    }
     8f6:	b002      	add	sp, #8
     8f8:	bd80      	pop	{r7, pc}

000008fa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfe3c64bb99cfde94E>:
    fn into_iter(self) -> I {
     8fa:	b580      	push	{r7, lr}
     8fc:	466f      	mov	r7, sp
     8fe:	b082      	sub	sp, #8
     900:	9000      	str	r0, [sp, #0]
     902:	9101      	str	r1, [sp, #4]
    }
     904:	b002      	add	sp, #8
     906:	bd80      	pop	{r7, pc}

00000908 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
     908:	b580      	push	{r7, lr}
     90a:	466f      	mov	r7, sp
     90c:	b08d      	sub	sp, #52	@ 0x34
     90e:	9000      	str	r0, [sp, #0]
     910:	9006      	str	r0, [sp, #24]
     912:	2101      	movs	r1, #1
        #[rustc_const_stable(feature = "unchecked_math", since = "1.79.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline(always)]
        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
     914:	9107      	str	r1, [sp, #28]
    #[inline(always)]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    #[must_use = "returns a new pointer rather than modifying its argument"]
    #[stable(feature = "non_null_convenience", since = "1.80.0")]
    #[rustc_const_stable(feature = "non_null_convenience", since = "1.80.0")]
    pub const unsafe fn add(self, count: usize) -> Self
     916:	9108      	str	r1, [sp, #32]
                // intentionally not using the helpers because this is
                // one of the most mono'd things in the library.

                let ptr = self.ptr;
     918:	6801      	ldr	r1, [r0, #0]
     91a:	9103      	str	r1, [sp, #12]
                let end_or_len = self.end_or_len;
     91c:	6840      	ldr	r0, [r0, #4]
     91e:	9001      	str	r0, [sp, #4]
     920:	9009      	str	r0, [sp, #36]	@ 0x24
                // SAFETY: See inner comments. (For some reason having multiple
                // block breaks inlining this -- if you can fix that please do!)
                unsafe {
                    if T::IS_ZST {
     922:	e7ff      	b.n	924 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE+0x1c>
     924:	9801      	ldr	r0, [sp, #4]
     926:	a903      	add	r1, sp, #12
                        self.end_or_len = without_provenance_mut(len.unchecked_sub(1));
                    } else {
                        // SAFETY: by type invariant, the `end_or_len` field is always
                        // non-null for a non-ZST pointee.  (This transmute ensures we
                        // get `!nonnull` metadata on the load of the field.)
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
     928:	910a      	str	r1, [sp, #40]	@ 0x28
     92a:	9004      	str	r0, [sp, #16]
     92c:	a804      	add	r0, sp, #16
     92e:	900b      	str	r0, [sp, #44]	@ 0x2c
        unsafe { mem::transmute::<Self, *mut T>(self) }
     930:	9803      	ldr	r0, [sp, #12]
     932:	9904      	ldr	r1, [sp, #16]
     934:	4288      	cmp	r0, r1
     936:	d006      	beq.n	946 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE+0x3e>
     938:	e7ff      	b.n	93a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE+0x32>
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        // Additionally safety contract of `offset` guarantees that the resulting pointer is
        // pointing to an allocation, there can't be an allocation at null, thus it's safe to
        // construct `NonNull`.
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
     93a:	9900      	ldr	r1, [sp, #0]
     93c:	9803      	ldr	r0, [sp, #12]
     93e:	f500 7080 	add.w	r0, r0, #256	@ 0x100
                            return None;
                        }
                        // SAFETY: since it's not empty, per the check above, moving
                        // forward one keeps us inside the slice, and this is valid.
                        self.ptr = ptr.add(1);
     942:	6008      	str	r0, [r1, #0]
                    if T::IS_ZST {
     944:	e002      	b.n	94c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE+0x44>
     946:	2000      	movs	r0, #0
                            return None;
     948:	9002      	str	r0, [sp, #8]
     94a:	e009      	b.n	960 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE+0x58>
                    }
                    // SAFETY: Now that we know it wasn't empty and we've moved past
                    // the first one (to avoid giving a duplicate `&mut` next time),
                    // we can give out a reference to it.
                    Some({ptr}.$into_ref())
     94c:	9803      	ldr	r0, [sp, #12]
     94e:	9005      	str	r0, [sp, #20]
     950:	a805      	add	r0, sp, #20
     952:	900c      	str	r0, [sp, #48]	@ 0x30
        self as _
     954:	9803      	ldr	r0, [sp, #12]
     956:	9002      	str	r0, [sp, #8]
                }
            }
     958:	e7ff      	b.n	95a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE+0x52>
     95a:	9802      	ldr	r0, [sp, #8]
     95c:	b00d      	add	sp, #52	@ 0x34
     95e:	bd80      	pop	{r7, pc}
     960:	e7fb      	b.n	95a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE+0x52>

00000962 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE>:

            // We override the default implementation, which uses `try_fold`,
            // because this simple implementation generates less LLVM IR and is
            // faster to compile.
            #[inline]
            fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
     962:	b580      	push	{r7, lr}
     964:	466f      	mov	r7, sp
     966:	b088      	sub	sp, #32
     968:	9000      	str	r0, [sp, #0]
     96a:	9005      	str	r0, [sp, #20]
            where
                Self: Sized,
                F: FnMut(Self::Item) -> Option<B>,
            {
                while let Some(x) = self.next() {
     96c:	e7ff      	b.n	96e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE+0xc>
     96e:	9800      	ldr	r0, [sp, #0]
     970:	f7ff ffca 	bl	908 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha62b596e8603dbbaE>
     974:	9003      	str	r0, [sp, #12]
     976:	9803      	ldr	r0, [sp, #12]
     978:	b150      	cbz	r0, 990 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE+0x2e>
     97a:	e7ff      	b.n	97c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE+0x1a>
     97c:	9903      	ldr	r1, [sp, #12]
     97e:	9106      	str	r1, [sp, #24]
     980:	f1a7 0019 	sub.w	r0, r7, #25
                    if let Some(y) = f(x) {
     984:	f001 fdf4 	bl	2570 <_ZN4core3ops8function5FnMut8call_mut17h8c995993caba2854E>
     988:	9004      	str	r0, [sp, #16]
     98a:	9804      	ldr	r0, [sp, #16]
     98c:	b918      	cbnz	r0, 996 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE+0x34>
     98e:	e006      	b.n	99e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE+0x3c>
     990:	2000      	movs	r0, #0
                        return Some(y);
                    }
                }
                None
     992:	9002      	str	r0, [sp, #8]
            }
     994:	e004      	b.n	9a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE+0x3e>
                    if let Some(y) = f(x) {
     996:	9804      	ldr	r0, [sp, #16]
     998:	9007      	str	r0, [sp, #28]
                        return Some(y);
     99a:	9002      	str	r0, [sp, #8]
            }
     99c:	e000      	b.n	9a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE+0x3e>
                while let Some(x) = self.next() {
     99e:	e7e6      	b.n	96e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8find_map17h591791fb5ca92d1fE+0xc>
            }
     9a0:	9802      	ldr	r0, [sp, #8]
     9a2:	b008      	add	sp, #32
     9a4:	bd80      	pop	{r7, pc}

000009a6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E>:
            fn next(&mut self) -> Option<$elem> {
     9a6:	b580      	push	{r7, lr}
     9a8:	466f      	mov	r7, sp
     9aa:	b08d      	sub	sp, #52	@ 0x34
     9ac:	9000      	str	r0, [sp, #0]
     9ae:	9006      	str	r0, [sp, #24]
     9b0:	2101      	movs	r1, #1
     9b2:	9107      	str	r1, [sp, #28]
    pub const unsafe fn add(self, count: usize) -> Self
     9b4:	9108      	str	r1, [sp, #32]
                let ptr = self.ptr;
     9b6:	6801      	ldr	r1, [r0, #0]
     9b8:	9103      	str	r1, [sp, #12]
                let end_or_len = self.end_or_len;
     9ba:	6840      	ldr	r0, [r0, #4]
     9bc:	9001      	str	r0, [sp, #4]
     9be:	9009      	str	r0, [sp, #36]	@ 0x24
                    if T::IS_ZST {
     9c0:	e7ff      	b.n	9c2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E+0x1c>
     9c2:	9801      	ldr	r0, [sp, #4]
     9c4:	a903      	add	r1, sp, #12
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
     9c6:	910a      	str	r1, [sp, #40]	@ 0x28
     9c8:	9004      	str	r0, [sp, #16]
     9ca:	a804      	add	r0, sp, #16
     9cc:	900b      	str	r0, [sp, #44]	@ 0x2c
        unsafe { mem::transmute::<Self, *mut T>(self) }
     9ce:	9803      	ldr	r0, [sp, #12]
     9d0:	9904      	ldr	r1, [sp, #16]
     9d2:	4288      	cmp	r0, r1
     9d4:	d005      	beq.n	9e2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E+0x3c>
     9d6:	e7ff      	b.n	9d8 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E+0x32>
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
     9d8:	9900      	ldr	r1, [sp, #0]
     9da:	9803      	ldr	r0, [sp, #12]
     9dc:	3001      	adds	r0, #1
                        self.ptr = ptr.add(1);
     9de:	6008      	str	r0, [r1, #0]
                    if T::IS_ZST {
     9e0:	e002      	b.n	9e8 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E+0x42>
     9e2:	2000      	movs	r0, #0
                            return None;
     9e4:	9002      	str	r0, [sp, #8]
     9e6:	e009      	b.n	9fc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E+0x56>
                    Some({ptr}.$into_ref())
     9e8:	9803      	ldr	r0, [sp, #12]
     9ea:	9005      	str	r0, [sp, #20]
     9ec:	a805      	add	r0, sp, #20
     9ee:	900c      	str	r0, [sp, #48]	@ 0x30
        unsafe { &mut *self.as_ptr() }
     9f0:	9805      	ldr	r0, [sp, #20]
     9f2:	9002      	str	r0, [sp, #8]
            }
     9f4:	e7ff      	b.n	9f6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E+0x50>
     9f6:	9802      	ldr	r0, [sp, #8]
     9f8:	b00d      	add	sp, #52	@ 0x34
     9fa:	bd80      	pop	{r7, pc}
     9fc:	e7fb      	b.n	9f6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E+0x50>

000009fe <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E>:
            fn next(&mut self) -> Option<$elem> {
     9fe:	b580      	push	{r7, lr}
     a00:	466f      	mov	r7, sp
     a02:	b08d      	sub	sp, #52	@ 0x34
     a04:	9000      	str	r0, [sp, #0]
     a06:	9006      	str	r0, [sp, #24]
     a08:	2101      	movs	r1, #1
     a0a:	9107      	str	r1, [sp, #28]
    pub const unsafe fn add(self, count: usize) -> Self
     a0c:	9108      	str	r1, [sp, #32]
                let ptr = self.ptr;
     a0e:	6801      	ldr	r1, [r0, #0]
     a10:	9103      	str	r1, [sp, #12]
                let end_or_len = self.end_or_len;
     a12:	6840      	ldr	r0, [r0, #4]
     a14:	9001      	str	r0, [sp, #4]
     a16:	9009      	str	r0, [sp, #36]	@ 0x24
                    if T::IS_ZST {
     a18:	e7ff      	b.n	a1a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E+0x1c>
     a1a:	9801      	ldr	r0, [sp, #4]
     a1c:	a903      	add	r1, sp, #12
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
     a1e:	910a      	str	r1, [sp, #40]	@ 0x28
     a20:	9004      	str	r0, [sp, #16]
     a22:	a804      	add	r0, sp, #16
     a24:	900b      	str	r0, [sp, #44]	@ 0x2c
        unsafe { mem::transmute::<Self, *mut T>(self) }
     a26:	9803      	ldr	r0, [sp, #12]
     a28:	9904      	ldr	r1, [sp, #16]
     a2a:	4288      	cmp	r0, r1
     a2c:	d005      	beq.n	a3a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E+0x3c>
     a2e:	e7ff      	b.n	a30 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E+0x32>
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
     a30:	9900      	ldr	r1, [sp, #0]
     a32:	9803      	ldr	r0, [sp, #12]
     a34:	3008      	adds	r0, #8
                        self.ptr = ptr.add(1);
     a36:	6008      	str	r0, [r1, #0]
                    if T::IS_ZST {
     a38:	e002      	b.n	a40 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E+0x42>
     a3a:	2000      	movs	r0, #0
                            return None;
     a3c:	9002      	str	r0, [sp, #8]
     a3e:	e009      	b.n	a54 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E+0x56>
                    Some({ptr}.$into_ref())
     a40:	9803      	ldr	r0, [sp, #12]
     a42:	9005      	str	r0, [sp, #20]
     a44:	a805      	add	r0, sp, #20
     a46:	900c      	str	r0, [sp, #48]	@ 0x30
        unsafe { &mut *self.as_ptr() }
     a48:	9805      	ldr	r0, [sp, #20]
     a4a:	9002      	str	r0, [sp, #8]
            }
     a4c:	e7ff      	b.n	a4e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E+0x50>
     a4e:	9802      	ldr	r0, [sp, #8]
     a50:	b00d      	add	sp, #52	@ 0x34
     a52:	bd80      	pop	{r7, pc}
     a54:	e7fb      	b.n	a4e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E+0x50>

00000a56 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h084bf453f79ba1fbE>:
#[stable(feature = "into_future", since = "1.64.0")]
impl<F: Future> IntoFuture for F {
    type Output = F::Output;
    type IntoFuture = F;

    fn into_future(self) -> Self::IntoFuture {
     a56:	b580      	push	{r7, lr}
     a58:	466f      	mov	r7, sp
     a5a:	2260      	movs	r2, #96	@ 0x60
        self
     a5c:	f00a fded 	bl	b63a <__aeabi_memcpy8>
    }
     a60:	bd80      	pop	{r7, pc}

00000a62 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h896d1013a979303dE>:
    fn into_future(self) -> Self::IntoFuture {
     a62:	b580      	push	{r7, lr}
     a64:	466f      	mov	r7, sp
     a66:	2258      	movs	r2, #88	@ 0x58
        self
     a68:	f00a fde7 	bl	b63a <__aeabi_memcpy8>
    }
     a6c:	bd80      	pop	{r7, pc}

00000a6e <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h90e0f18db2d5d939E>:
    fn into_future(self) -> Self::IntoFuture {
     a6e:	b580      	push	{r7, lr}
     a70:	466f      	mov	r7, sp
     a72:	2288      	movs	r2, #136	@ 0x88
        self
     a74:	f00a fde1 	bl	b63a <__aeabi_memcpy8>
    }
     a78:	bd80      	pop	{r7, pc}

00000a7a <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17hdcc650a88c2ece8cE>:
    fn into_future(self) -> Self::IntoFuture {
     a7a:	b580      	push	{r7, lr}
     a7c:	466f      	mov	r7, sp
     a7e:	2278      	movs	r2, #120	@ 0x78
        self
     a80:	f00a fddb 	bl	b63a <__aeabi_memcpy8>
    }
     a84:	bd80      	pop	{r7, pc}

00000a86 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$3new17hf46a222811fa3cf4E>:
    /// ```ignore
    /// let rows = [pin1, pin2, pin3, pin4, pin5];
    /// let cols = [pin6, pin7, pin8, pin9, pin10];
    /// let mut display = LedMatrix::new(rows, cols);
    /// ```
    pub fn new(pin_rows: [P; ROWS], pin_cols: [P; COLS]) -> Self {
     a86:	b5f0      	push	{r4, r5, r6, r7, lr}
     a88:	af03      	add	r7, sp, #12
     a8a:	f84d bd04 	str.w	fp, [sp, #-4]!
     a8e:	b08e      	sub	sp, #56	@ 0x38
     a90:	9201      	str	r2, [sp, #4]
     a92:	9100      	str	r1, [sp, #0]
        LedMatrix {
            pin_rows,
            pin_cols,
            frame_buffer: Frame::empty(),
     a94:	9003      	str	r0, [sp, #12]
     a96:	a804      	add	r0, sp, #16
     a98:	9002      	str	r0, [sp, #8]
     a9a:	f002 f870 	bl	2b7e <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5empty17h8a63f91ef58e935cE>
            row_p: 0,
            brightness: Default::default(),
     a9e:	f7ff fcbf 	bl	420 <_ZN92_$LT$microbit_async_display_example..types..Brightness$u20$as$u20$core..default..Default$GT$7default17hb3a063483d781c24E>
     aa2:	f8dd c000 	ldr.w	ip, [sp]
     aa6:	9a01      	ldr	r2, [sp, #4]
     aa8:	9b02      	ldr	r3, [sp, #8]
     aaa:	9903      	ldr	r1, [sp, #12]
        LedMatrix {
     aac:	f89c e004 	ldrb.w	lr, [ip, #4]
     ab0:	f881 e030 	strb.w	lr, [r1, #48]	@ 0x30
     ab4:	f8dc c000 	ldr.w	ip, [ip]
     ab8:	f8c1 c02c 	str.w	ip, [r1, #44]	@ 0x2c
     abc:	f892 c004 	ldrb.w	ip, [r2, #4]
     ac0:	f881 c035 	strb.w	ip, [r1, #53]	@ 0x35
     ac4:	6812      	ldr	r2, [r2, #0]
     ac6:	f8c1 2031 	str.w	r2, [r1, #49]	@ 0x31
     aca:	460a      	mov	r2, r1
     acc:	e8b3 5070 	ldmia.w	r3!, {r4, r5, r6, ip, lr}
     ad0:	e8a2 5070 	stmia.w	r2!, {r4, r5, r6, ip, lr}
     ad4:	e893 5070 	ldmia.w	r3, {r4, r5, r6, ip, lr}
     ad8:	e882 5070 	stmia.w	r2, {r4, r5, r6, ip, lr}
     adc:	2200      	movs	r2, #0
     ade:	628a      	str	r2, [r1, #40]	@ 0x28
     ae0:	f881 0036 	strb.w	r0, [r1, #54]	@ 0x36
        }
    }
     ae4:	b00e      	add	sp, #56	@ 0x38
     ae6:	f85d bb04 	ldr.w	fp, [sp], #4
     aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000aec <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E>:
    /// # Example
    /// ```ignore
    /// display.clear();
    /// // All LEDs are now off
    /// ```
    pub fn clear(&mut self) {
     aec:	b580      	push	{r7, lr}
     aee:	466f      	mov	r7, sp
     af0:	b08a      	sub	sp, #40	@ 0x28
     af2:	9000      	str	r0, [sp, #0]
     af4:	9007      	str	r0, [sp, #28]
        self.frame_buffer.clear();
     af6:	f002 f876 	bl	2be6 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5clear17h7095c9faaf3a5846E>
     afa:	9800      	ldr	r0, [sp, #0]
        for row in self.pin_rows.iter_mut() {
     afc:	302c      	adds	r0, #44	@ 0x2c
     afe:	2105      	movs	r1, #5
     b00:	f002 fb01 	bl	3106 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h2b28b071caa8b06cE>
     b04:	f7ff feeb 	bl	8de <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha73d16b1813da6c8E>
     b08:	9001      	str	r0, [sp, #4]
     b0a:	9102      	str	r1, [sp, #8]
     b0c:	e7ff      	b.n	b0e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E+0x22>
     b0e:	a801      	add	r0, sp, #4
     b10:	f7ff ff49 	bl	9a6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E>
     b14:	9003      	str	r0, [sp, #12]
     b16:	9803      	ldr	r0, [sp, #12]
     b18:	b138      	cbz	r0, b2a <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E+0x3e>
     b1a:	e7ff      	b.n	b1c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E+0x30>
     b1c:	9803      	ldr	r0, [sp, #12]
     b1e:	9009      	str	r0, [sp, #36]	@ 0x24
            row.set_high().ok();
     b20:	f002 fed3 	bl	38ca <_ZN78_$LT$embassy_nrf..gpio..Output$u20$as$u20$embedded_hal..digital..OutputPin$GT$8set_high17hb140d5bce220f12aE>
     b24:	f002 f933 	bl	2d8e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E>
     b28:	e7f1      	b.n	b0e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E+0x22>
        }
        for col in self.pin_cols.iter_mut() {
     b2a:	9800      	ldr	r0, [sp, #0]
     b2c:	3031      	adds	r0, #49	@ 0x31
     b2e:	2105      	movs	r1, #5
     b30:	f002 fae9 	bl	3106 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h2b28b071caa8b06cE>
     b34:	f7ff fed3 	bl	8de <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha73d16b1813da6c8E>
     b38:	9004      	str	r0, [sp, #16]
     b3a:	9105      	str	r1, [sp, #20]
     b3c:	e7ff      	b.n	b3e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E+0x52>
     b3e:	a804      	add	r0, sp, #16
     b40:	f7ff ff31 	bl	9a6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E>
     b44:	9006      	str	r0, [sp, #24]
     b46:	9806      	ldr	r0, [sp, #24]
     b48:	b138      	cbz	r0, b5a <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E+0x6e>
     b4a:	e7ff      	b.n	b4c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E+0x60>
     b4c:	9806      	ldr	r0, [sp, #24]
     b4e:	9008      	str	r0, [sp, #32]
            col.set_high().ok();
     b50:	f002 febb 	bl	38ca <_ZN78_$LT$embassy_nrf..gpio..Output$u20$as$u20$embedded_hal..digital..OutputPin$GT$8set_high17hb140d5bce220f12aE>
     b54:	f002 f91b 	bl	2d8e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E>
     b58:	e7f1      	b.n	b3e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E+0x52>
        }
    }
     b5a:	b00a      	add	sp, #40	@ 0x28
     b5c:	bd80      	pop	{r7, pc}

00000b5e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5apply17ha4d902a50f6e9c9dE>:
    /// # Example
    /// ```ignore
    /// let frame: Frame<5, 5> = 'A'.into();
    /// display.apply(frame);
    /// ```
    pub fn apply(&mut self, frame: Frame<COLS, ROWS>) {
     b5e:	b5d0      	push	{r4, r6, r7, lr}
     b60:	af02      	add	r7, sp, #8
     b62:	b081      	sub	sp, #4
     b64:	9000      	str	r0, [sp, #0]
        self.frame_buffer = frame;
     b66:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
     b6a:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
     b6e:	e891 501c 	ldmia.w	r1, {r2, r3, r4, ip, lr}
     b72:	e880 501c 	stmia.w	r0, {r2, r3, r4, ip, lr}
    }
     b76:	b001      	add	sp, #4
     b78:	bdd0      	pop	{r4, r6, r7, pc}

00000b7a <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$14set_brightness17h6b9aafaaf56ca5aaE>:
    /// # Example
    /// ```ignore
    /// display.set_brightness(Brightness::MAX);  // Maximum brightness
    /// display.set_brightness(Brightness::new(3)); // Custom level
    /// ```
    pub fn set_brightness(&mut self, brightness: Brightness) {
     b7a:	b580      	push	{r7, lr}
     b7c:	466f      	mov	r7, sp
     b7e:	b082      	sub	sp, #8
     b80:	9000      	str	r0, [sp, #0]
     b82:	f807 1c01 	strb.w	r1, [r7, #-1]
        self.brightness = brightness;
     b86:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
     b8a:	b002      	add	sp, #8
     b8c:	bd80      	pop	{r7, pc}

00000b8e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E>:
    pub fn decrease_brightness(&mut self) {
        self.brightness -= 1;
    }

    /// Perform a full refresh of the display based on the current frame buffer
    pub fn render(&mut self) {
     b8e:	b580      	push	{r7, lr}
     b90:	466f      	mov	r7, sp
     b92:	b0a0      	sub	sp, #128	@ 0x80
     b94:	900d      	str	r0, [sp, #52]	@ 0x34
     b96:	901c      	str	r0, [sp, #112]	@ 0x70
        for row in self.pin_rows.iter_mut() {
     b98:	302c      	adds	r0, #44	@ 0x2c
     b9a:	2105      	movs	r1, #5
     b9c:	f002 fab3 	bl	3106 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h2b28b071caa8b06cE>
     ba0:	f7ff fe9d 	bl	8de <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha73d16b1813da6c8E>
     ba4:	900e      	str	r0, [sp, #56]	@ 0x38
     ba6:	910f      	str	r1, [sp, #60]	@ 0x3c
     ba8:	e7ff      	b.n	baa <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x1c>
     baa:	a80e      	add	r0, sp, #56	@ 0x38
     bac:	f7ff fefb 	bl	9a6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E>
     bb0:	9010      	str	r0, [sp, #64]	@ 0x40
     bb2:	9810      	ldr	r0, [sp, #64]	@ 0x40
     bb4:	b138      	cbz	r0, bc6 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x38>
     bb6:	e7ff      	b.n	bb8 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x2a>
     bb8:	9810      	ldr	r0, [sp, #64]	@ 0x40
     bba:	901f      	str	r0, [sp, #124]	@ 0x7c
            row.set_low().ok();
     bbc:	f002 fe8d 	bl	38da <_ZN78_$LT$embassy_nrf..gpio..Output$u20$as$u20$embedded_hal..digital..OutputPin$GT$7set_low17h0a9fb674b5f9e687E>
     bc0:	f002 f8e5 	bl	2d8e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E>
     bc4:	e7f1      	b.n	baa <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x1c>
        }

        for (cid, col) in self.pin_cols.iter_mut().enumerate() {
     bc6:	980d      	ldr	r0, [sp, #52]	@ 0x34
     bc8:	3031      	adds	r0, #49	@ 0x31
     bca:	2105      	movs	r1, #5
     bcc:	f002 fa9b 	bl	3106 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h2b28b071caa8b06cE>
     bd0:	900b      	str	r0, [sp, #44]	@ 0x2c
     bd2:	460a      	mov	r2, r1
     bd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
     bd6:	a814      	add	r0, sp, #80	@ 0x50
     bd8:	900c      	str	r0, [sp, #48]	@ 0x30
     bda:	f7ff fe2e 	bl	83a <_ZN4core4iter6traits8iterator8Iterator9enumerate17h98d390c1ea5f9ce6E>
     bde:	990c      	ldr	r1, [sp, #48]	@ 0x30
     be0:	a811      	add	r0, sp, #68	@ 0x44
     be2:	f001 fa41 	bl	2068 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9839e29032e1f0c6E>
     be6:	9811      	ldr	r0, [sp, #68]	@ 0x44
     be8:	9912      	ldr	r1, [sp, #72]	@ 0x48
     bea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
     bec:	9219      	str	r2, [sp, #100]	@ 0x64
     bee:	9118      	str	r1, [sp, #96]	@ 0x60
     bf0:	9017      	str	r0, [sp, #92]	@ 0x5c
     bf2:	e7ff      	b.n	bf4 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x66>
     bf4:	a817      	add	r0, sp, #92	@ 0x5c
     bf6:	f001 fa07 	bl	2008 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8bae91d0affa80cfE>
     bfa:	901a      	str	r0, [sp, #104]	@ 0x68
     bfc:	911b      	str	r1, [sp, #108]	@ 0x6c
     bfe:	981b      	ldr	r0, [sp, #108]	@ 0x6c
     c00:	b168      	cbz	r0, c1e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x90>
     c02:	e7ff      	b.n	c04 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x76>
     c04:	980d      	ldr	r0, [sp, #52]	@ 0x34
     c06:	991a      	ldr	r1, [sp, #104]	@ 0x68
     c08:	911d      	str	r1, [sp, #116]	@ 0x74
     c0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
     c0c:	920a      	str	r2, [sp, #40]	@ 0x28
     c0e:	921e      	str	r2, [sp, #120]	@ 0x78
            if self.frame_buffer.is_set(cid, self.row_p) {
     c10:	6a82      	ldr	r2, [r0, #40]	@ 0x28
     c12:	f002 f802 	bl	2c1a <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$6is_set17hf08d897d8d086efdE>
     c16:	2800      	cmp	r0, #0
     c18:	f040 8084 	bne.w	d24 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x196>
     c1c:	e07c      	b.n	d18 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x18a>
            }
        }

        // Adjust interval will impact brightness of the LEDs
        block_for(Duration::from_micros(
            ((Brightness::MAX.level() - self.brightness.level()) as u64) * 6000 / Brightness::MAX.level() as u64,
     c1e:	f64b 5047 	movw	r0, #48455	@ 0xbd47
     c22:	f2c0 0000 	movt	r0, #0
     c26:	f7ff fbf4 	bl	412 <_ZN30microbit_async_display_example5types10Brightness5level17hec1be1fa7303eef2E>
     c2a:	4601      	mov	r1, r0
     c2c:	980d      	ldr	r0, [sp, #52]	@ 0x34
     c2e:	9107      	str	r1, [sp, #28]
     c30:	b2c9      	uxtb	r1, r1
     c32:	9108      	str	r1, [sp, #32]
     c34:	3036      	adds	r0, #54	@ 0x36
     c36:	f7ff fbec 	bl	412 <_ZN30microbit_async_display_example5types10Brightness5level17hec1be1fa7303eef2E>
     c3a:	9a07      	ldr	r2, [sp, #28]
     c3c:	4603      	mov	r3, r0
     c3e:	9808      	ldr	r0, [sp, #32]
     c40:	b2d9      	uxtb	r1, r3
     c42:	1ad2      	subs	r2, r2, r3
     c44:	9209      	str	r2, [sp, #36]	@ 0x24
     c46:	4288      	cmp	r0, r1
     c48:	d30b      	bcc.n	c62 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0xd4>
     c4a:	e7ff      	b.n	c4c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0xbe>
     c4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
     c4e:	b2c0      	uxtb	r0, r0
     c50:	f241 7170 	movw	r1, #6000	@ 0x1770
     c54:	fba0 0101 	umull	r0, r1, r0, r1
     c58:	9105      	str	r1, [sp, #20]
     c5a:	9006      	str	r0, [sp, #24]
     c5c:	2000      	movs	r0, #0
     c5e:	b998      	cbnz	r0, c88 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0xfa>
     c60:	e005      	b.n	c6e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0xe0>
     c62:	f64b 5058 	movw	r0, #48472	@ 0xbd58
     c66:	f2c0 0000 	movt	r0, #0
     c6a:	f00a fa71 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
     c6e:	f64b 5047 	movw	r0, #48455	@ 0xbd47
     c72:	f2c0 0000 	movt	r0, #0
     c76:	f7ff fbcc 	bl	412 <_ZN30microbit_async_display_example5types10Brightness5level17hec1be1fa7303eef2E>
     c7a:	b2c0      	uxtb	r0, r0
     c7c:	2100      	movs	r1, #0
     c7e:	9103      	str	r1, [sp, #12]
     c80:	4601      	mov	r1, r0
     c82:	9104      	str	r1, [sp, #16]
     c84:	b1b0      	cbz	r0, cb4 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x126>
     c86:	e005      	b.n	c94 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x106>
     c88:	f64b 5068 	movw	r0, #48488	@ 0xbd68
     c8c:	f2c0 0000 	movt	r0, #0
     c90:	f00a fa71 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
     c94:	9b03      	ldr	r3, [sp, #12]
     c96:	9a04      	ldr	r2, [sp, #16]
     c98:	9905      	ldr	r1, [sp, #20]
     c9a:	9806      	ldr	r0, [sp, #24]
     c9c:	f00a fd18 	bl	b6d0 <__aeabi_uldivmod>
        block_for(Duration::from_micros(
     ca0:	f005 fded 	bl	687e <_ZN12embassy_time8duration8Duration11from_micros17hfa619c00dc798ed6E>
     ca4:	f005 fda8 	bl	67f8 <_ZN12embassy_time5delay9block_for17hffec92adb099cf68E>
     ca8:	980d      	ldr	r0, [sp, #52]	@ 0x34
        ));

        self.pin_rows[self.row_p].set_high().ok();
     caa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
     cac:	9002      	str	r0, [sp, #8]
     cae:	2805      	cmp	r0, #5
     cb0:	d306      	bcc.n	cc0 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x132>
     cb2:	e014      	b.n	cde <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x150>
            ((Brightness::MAX.level() - self.brightness.level()) as u64) * 6000 / Brightness::MAX.level() as u64,
     cb4:	f64b 5068 	movw	r0, #48488	@ 0xbd68
     cb8:	f2c0 0000 	movt	r0, #0
     cbc:	f00a fa94 	bl	b1e8 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hff1aa7944d63a61dE>
        self.pin_rows[self.row_p].set_high().ok();
     cc0:	980d      	ldr	r0, [sp, #52]	@ 0x34
     cc2:	9902      	ldr	r1, [sp, #8]
     cc4:	4408      	add	r0, r1
     cc6:	302c      	adds	r0, #44	@ 0x2c
     cc8:	f002 fdff 	bl	38ca <_ZN78_$LT$embassy_nrf..gpio..Output$u20$as$u20$embedded_hal..digital..OutputPin$GT$8set_high17hb140d5bce220f12aE>
     ccc:	f002 f85f 	bl	2d8e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E>

        self.row_p = (self.row_p + 1) % self.pin_rows.len();
     cd0:	980d      	ldr	r0, [sp, #52]	@ 0x34
     cd2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
     cd4:	1c48      	adds	r0, r1, #1
     cd6:	4288      	cmp	r0, r1
     cd8:	9001      	str	r0, [sp, #4]
     cda:	d317      	bcc.n	d0c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x17e>
     cdc:	e007      	b.n	cee <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x160>
        self.pin_rows[self.row_p].set_high().ok();
     cde:	9802      	ldr	r0, [sp, #8]
     ce0:	f64b 5278 	movw	r2, #48504	@ 0xbd78
     ce4:	f2c0 0200 	movt	r2, #0
     ce8:	2105      	movs	r1, #5
     cea:	f009 fc05 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
     cee:	990d      	ldr	r1, [sp, #52]	@ 0x34
     cf0:	9801      	ldr	r0, [sp, #4]
     cf2:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
     cf6:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
        self.row_p = (self.row_p + 1) % self.pin_rows.len();
     cfa:	fba0 3202 	umull	r3, r2, r0, r2
     cfe:	0892      	lsrs	r2, r2, #2
     d00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     d04:	1a80      	subs	r0, r0, r2
     d06:	6288      	str	r0, [r1, #40]	@ 0x28
    }
     d08:	b020      	add	sp, #128	@ 0x80
     d0a:	bd80      	pop	{r7, pc}
        self.row_p = (self.row_p + 1) % self.pin_rows.len();
     d0c:	f64b 5088 	movw	r0, #48520	@ 0xbd88
     d10:	f2c0 0000 	movt	r0, #0
     d14:	f00a fa09 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
                col.set_high().ok();
     d18:	980a      	ldr	r0, [sp, #40]	@ 0x28
     d1a:	f002 fdd6 	bl	38ca <_ZN78_$LT$embassy_nrf..gpio..Output$u20$as$u20$embedded_hal..digital..OutputPin$GT$8set_high17hb140d5bce220f12aE>
     d1e:	f002 f836 	bl	2d8e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E>
     d22:	e767      	b.n	bf4 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x66>
                col.set_low().ok();
     d24:	980a      	ldr	r0, [sp, #40]	@ 0x28
     d26:	f002 fdd8 	bl	38da <_ZN78_$LT$embassy_nrf..gpio..Output$u20$as$u20$embedded_hal..digital..OutputPin$GT$7set_low17h0a9fb674b5f9e687E>
     d2a:	f002 f830 	bl	2d8e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E>
     d2e:	e761      	b.n	bf4 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E+0x66>

00000d30 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display17h2bca18fd9dbaada7E>:

    /// Display the provided frame for the duration. Handles screen refresh
    /// in an async display loop.
    pub async fn display(&mut self, frame: Frame<COLS, ROWS>, length: Duration) {
     d30:	b5f0      	push	{r4, r5, r6, r7, lr}
     d32:	af03      	add	r7, sp, #12
     d34:	f84d 8d04 	str.w	r8, [sp, #-4]!
     d38:	b084      	sub	sp, #16
     d3a:	4694      	mov	ip, r2
     d3c:	460b      	mov	r3, r1
     d3e:	4601      	mov	r1, r0
     d40:	68fa      	ldr	r2, [r7, #12]
     d42:	68b8      	ldr	r0, [r7, #8]
     d44:	9301      	str	r3, [sp, #4]
     d46:	9203      	str	r2, [sp, #12]
     d48:	9002      	str	r0, [sp, #8]
     d4a:	648b      	str	r3, [r1, #72]	@ 0x48
     d4c:	460b      	mov	r3, r1
     d4e:	e8bc 4170 	ldmia.w	ip!, {r4, r5, r6, r8, lr}
     d52:	e8a3 4170 	stmia.w	r3!, {r4, r5, r6, r8, lr}
     d56:	e89c 4170 	ldmia.w	ip, {r4, r5, r6, r8, lr}
     d5a:	e883 4170 	stmia.w	r3, {r4, r5, r6, r8, lr}
     d5e:	62ca      	str	r2, [r1, #44]	@ 0x2c
     d60:	6288      	str	r0, [r1, #40]	@ 0x28
     d62:	2000      	movs	r0, #0
     d64:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
        while Instant::now() < end {
            self.render();
            Timer::after(REFRESH_INTERVAL).await;
        }
        self.clear();
    }
     d68:	b004      	add	sp, #16
     d6a:	f85d 8b04 	ldr.w	r8, [sp], #4
     d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d70 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E>:
    pub async fn display(&mut self, frame: Frame<COLS, ROWS>, length: Duration) {
     d70:	b5f0      	push	{r4, r5, r6, r7, lr}
     d72:	af03      	add	r7, sp, #12
     d74:	f84d bd04 	str.w	fp, [sp, #-4]!
     d78:	b0ae      	sub	sp, #184	@ 0xb8
     d7a:	9104      	str	r1, [sp, #16]
     d7c:	9006      	str	r0, [sp, #24]
     d7e:	9116      	str	r1, [sp, #88]	@ 0x58
     d80:	9806      	ldr	r0, [sp, #24]
     d82:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
     d86:	4601      	mov	r1, r0
     d88:	9105      	str	r1, [sp, #20]
     d8a:	b130      	cbz	r0, d9a <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0x2a>
     d8c:	e7ff      	b.n	d8e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0x1e>
     d8e:	9805      	ldr	r0, [sp, #20]
     d90:	2801      	cmp	r0, #1
     d92:	d036      	beq.n	e02 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0x92>
     d94:	e7ff      	b.n	d96 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0x26>
     d96:	e038      	b.n	e0a <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0x9a>
     d98:	defe      	udf	#254	@ 0xfe
     d9a:	9804      	ldr	r0, [sp, #16]
     d9c:	9015      	str	r0, [sp, #84]	@ 0x54
     d9e:	9906      	ldr	r1, [sp, #24]
     da0:	6c88      	ldr	r0, [r1, #72]	@ 0x48
     da2:	64c8      	str	r0, [r1, #76]	@ 0x4c
     da4:	9906      	ldr	r1, [sp, #24]
     da6:	ab08      	add	r3, sp, #32
     da8:	4618      	mov	r0, r3
     daa:	e8b1 5034 	ldmia.w	r1!, {r2, r4, r5, ip, lr}
     dae:	e8a0 5034 	stmia.w	r0!, {r2, r4, r5, ip, lr}
     db2:	e891 5034 	ldmia.w	r1, {r2, r4, r5, ip, lr}
     db6:	e880 5034 	stmia.w	r0, {r2, r4, r5, ip, lr}
     dba:	9906      	ldr	r1, [sp, #24]
     dbc:	6a88      	ldr	r0, [r1, #40]	@ 0x28
     dbe:	9001      	str	r0, [sp, #4]
     dc0:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
     dc2:	9102      	str	r1, [sp, #8]
     dc4:	9119      	str	r1, [sp, #100]	@ 0x64
     dc6:	9018      	str	r0, [sp, #96]	@ 0x60
        self.apply(frame);
     dc8:	9806      	ldr	r0, [sp, #24]
     dca:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
     dcc:	a91a      	add	r1, sp, #104	@ 0x68
     dce:	460a      	mov	r2, r1
     dd0:	e8b3 5070 	ldmia.w	r3!, {r4, r5, r6, ip, lr}
     dd4:	e8a2 5070 	stmia.w	r2!, {r4, r5, r6, ip, lr}
     dd8:	e893 5070 	ldmia.w	r3, {r4, r5, r6, ip, lr}
     ddc:	e882 5070 	stmia.w	r2, {r4, r5, r6, ip, lr}
     de0:	f7ff febd 	bl	b5e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5apply17ha4d902a50f6e9c9dE>
        let end = Instant::now() + length;
     de4:	f005 fddc 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
     de8:	9a01      	ldr	r2, [sp, #4]
     dea:	9b02      	ldr	r3, [sp, #8]
     dec:	f8dd c018 	ldr.w	ip, [sp, #24]
     df0:	f8cd c00c 	str.w	ip, [sp, #12]
     df4:	f005 fe34 	bl	6a60 <_ZN112_$LT$embassy_time..instant..Instant$u20$as$u20$core..ops..arith..Add$LT$embassy_time..duration..Duration$GT$$GT$3add17h1e8ed146d555fbf8E>
     df8:	460a      	mov	r2, r1
     dfa:	9903      	ldr	r1, [sp, #12]
     dfc:	634a      	str	r2, [r1, #52]	@ 0x34
     dfe:	6308      	str	r0, [r1, #48]	@ 0x30
     e00:	e006      	b.n	e10 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0xa0>
     e02:	2000      	movs	r0, #0
    pub async fn display(&mut self, frame: Frame<COLS, ROWS>, length: Duration) {
     e04:	2800      	cmp	r0, #0
     e06:	d1fc      	bne.n	e02 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0x92>
     e08:	e00e      	b.n	e28 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0xb8>
            Timer::after(REFRESH_INTERVAL).await;
     e0a:	9804      	ldr	r0, [sp, #16]
     e0c:	9015      	str	r0, [sp, #84]	@ 0x54
     e0e:	e011      	b.n	e34 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0xc4>
        while Instant::now() < end {
     e10:	f005 fdc6 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
     e14:	9113      	str	r1, [sp, #76]	@ 0x4c
     e16:	9012      	str	r0, [sp, #72]	@ 0x48
     e18:	9806      	ldr	r0, [sp, #24]
     e1a:	f100 0130 	add.w	r1, r0, #48	@ 0x30
     e1e:	a812      	add	r0, sp, #72	@ 0x48
     e20:	f005 fba0 	bl	6564 <_ZN4core3cmp10PartialOrd2lt17h4bbb5a114439107eE>
     e24:	bb68      	cbnz	r0, e82 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0x112>
     e26:	e01b      	b.n	e60 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0xf0>
    pub async fn display(&mut self, frame: Frame<COLS, ROWS>, length: Duration) {
     e28:	f64b 5098 	movw	r0, #48536	@ 0xbd98
     e2c:	f2c0 0000 	movt	r0, #0
     e30:	f00a fa00 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
            Timer::after(REFRESH_INTERVAL).await;
     e34:	9806      	ldr	r0, [sp, #24]
     e36:	3038      	adds	r0, #56	@ 0x38
     e38:	902d      	str	r0, [sp, #180]	@ 0xb4
     e3a:	9915      	ldr	r1, [sp, #84]	@ 0x54
     e3c:	f005 fe5c 	bl	6af8 <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE>
     e40:	b168      	cbz	r0, e5e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0xee>
     e42:	e7ff      	b.n	e44 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0xd4>
     e44:	2001      	movs	r0, #1
     e46:	f807 0ca9 	strb.w	r0, [r7, #-169]
     e4a:	9906      	ldr	r1, [sp, #24]
     e4c:	2003      	movs	r0, #3
     e4e:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
     e52:	f817 0ca9 	ldrb.w	r0, [r7, #-169]
     e56:	b02e      	add	sp, #184	@ 0xb8
     e58:	f85d bb04 	ldr.w	fp, [sp], #4
     e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while Instant::now() < end {
     e5e:	e7d7      	b.n	e10 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0xa0>
        self.clear();
     e60:	9806      	ldr	r0, [sp, #24]
     e62:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
     e64:	f7ff fe42 	bl	aec <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E>
     e68:	2000      	movs	r0, #0
    }
     e6a:	f807 0ca9 	strb.w	r0, [r7, #-169]
     e6e:	9906      	ldr	r1, [sp, #24]
     e70:	2001      	movs	r0, #1
     e72:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
     e76:	f817 0ca9 	ldrb.w	r0, [r7, #-169]
     e7a:	b02e      	add	sp, #184	@ 0xb8
     e7c:	f85d bb04 	ldr.w	fp, [sp], #4
     e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
            self.render();
     e82:	9806      	ldr	r0, [sp, #24]
     e84:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
     e86:	f7ff fe82 	bl	b8e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E>
     e8a:	a824      	add	r0, sp, #144	@ 0x90
     e8c:	2211      	movs	r2, #17
     e8e:	2300      	movs	r3, #0
            Timer::after(REFRESH_INTERVAL).await;
     e90:	f005 fe1c 	bl	6acc <_ZN12embassy_time5timer5Timer5after17h90fc56a887000710E>
     e94:	9a24      	ldr	r2, [sp, #144]	@ 0x90
     e96:	9b25      	ldr	r3, [sp, #148]	@ 0x94
     e98:	f89d 0098 	ldrb.w	r0, [sp, #152]	@ 0x98
     e9c:	4669      	mov	r1, sp
     e9e:	6008      	str	r0, [r1, #0]
     ea0:	a828      	add	r0, sp, #160	@ 0xa0
     ea2:	f002 fa4c 	bl	333e <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17hb4b3c43807099097E>
     ea6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
     ea8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
     eaa:	f89d 00a8 	ldrb.w	r0, [sp, #168]	@ 0xa8
     eae:	9906      	ldr	r1, [sp, #24]
     eb0:	63cb      	str	r3, [r1, #60]	@ 0x3c
     eb2:	638a      	str	r2, [r1, #56]	@ 0x38
     eb4:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
     eb8:	e7bc      	b.n	e34 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E+0xc4>

00000eba <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll17hb28bce8910432fa3E>:

    /// Scroll the provided text across the LED display using default duration based on text length
    pub async fn scroll(&mut self, text: &str) {
     eba:	b580      	push	{r7, lr}
     ebc:	466f      	mov	r7, sp
     ebe:	b084      	sub	sp, #16
     ec0:	9100      	str	r1, [sp, #0]
     ec2:	4601      	mov	r1, r0
     ec4:	9800      	ldr	r0, [sp, #0]
     ec6:	9001      	str	r0, [sp, #4]
     ec8:	9202      	str	r2, [sp, #8]
     eca:	9303      	str	r3, [sp, #12]
     ecc:	f8c1 0080 	str.w	r0, [r1, #128]	@ 0x80
     ed0:	600a      	str	r2, [r1, #0]
     ed2:	604b      	str	r3, [r1, #4]
     ed4:	2000      	movs	r0, #0
     ed6:	f881 0084 	strb.w	r0, [r1, #132]	@ 0x84
        self.scroll_with_speed(text, Duration::from_secs((text.len() / 2) as u64))
            .await;
    }
     eda:	b004      	add	sp, #16
     edc:	bd80      	pop	{r7, pc}

00000ede <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E>:
    pub async fn scroll(&mut self, text: &str) {
     ede:	b580      	push	{r7, lr}
     ee0:	466f      	mov	r7, sp
     ee2:	b0d0      	sub	sp, #320	@ 0x140
     ee4:	9108      	str	r1, [sp, #32]
     ee6:	900a      	str	r0, [sp, #40]	@ 0x28
     ee8:	914a      	str	r1, [sp, #296]	@ 0x128
     eea:	980a      	ldr	r0, [sp, #40]	@ 0x28
     eec:	f890 0084 	ldrb.w	r0, [r0, #132]	@ 0x84
     ef0:	4601      	mov	r1, r0
     ef2:	9109      	str	r1, [sp, #36]	@ 0x24
     ef4:	b130      	cbz	r0, f04 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x26>
     ef6:	e7ff      	b.n	ef8 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x1a>
     ef8:	9809      	ldr	r0, [sp, #36]	@ 0x24
     efa:	2801      	cmp	r0, #1
     efc:	d02f      	beq.n	f5e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x80>
     efe:	e7ff      	b.n	f00 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x22>
     f00:	e031      	b.n	f66 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x88>
     f02:	defe      	udf	#254	@ 0xfe
     f04:	9808      	ldr	r0, [sp, #32]
     f06:	9049      	str	r0, [sp, #292]	@ 0x124
     f08:	980a      	ldr	r0, [sp, #40]	@ 0x28
     f0a:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
     f0e:	9005      	str	r0, [sp, #20]
     f10:	904c      	str	r0, [sp, #304]	@ 0x130
     f12:	990a      	ldr	r1, [sp, #40]	@ 0x28
     f14:	6808      	ldr	r0, [r1, #0]
     f16:	9003      	str	r0, [sp, #12]
     f18:	6849      	ldr	r1, [r1, #4]
     f1a:	9104      	str	r1, [sp, #16]
     f1c:	904d      	str	r0, [sp, #308]	@ 0x134
     f1e:	914e      	str	r1, [sp, #312]	@ 0x138
        self.scroll_with_speed(text, Duration::from_secs((text.len() / 2) as u64))
     f20:	f000 fbb5 	bl	168e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17ha6e9c427a1f032a9E>
     f24:	0840      	lsrs	r0, r0, #1
     f26:	2100      	movs	r1, #0
     f28:	f005 fc83 	bl	6832 <_ZN12embassy_time8duration8Duration9from_secs17h0d65bcb0ec475bedE>
     f2c:	9a03      	ldr	r2, [sp, #12]
     f2e:	9b04      	ldr	r3, [sp, #16]
     f30:	468e      	mov	lr, r1
     f32:	9905      	ldr	r1, [sp, #20]
     f34:	46ec      	mov	ip, sp
     f36:	f8cc e004 	str.w	lr, [ip, #4]
     f3a:	f8cc 0000 	str.w	r0, [ip]
     f3e:	a82a      	add	r0, sp, #168	@ 0xa8
     f40:	9006      	str	r0, [sp, #24]
     f42:	f000 f83b 	bl	fbc <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed17hda38a3c09c0ac63dE>
     f46:	9906      	ldr	r1, [sp, #24]
     f48:	a80c      	add	r0, sp, #48	@ 0x30
            .await;
     f4a:	9007      	str	r0, [sp, #28]
     f4c:	f7ff fd95 	bl	a7a <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17hdcc650a88c2ece8cE>
     f50:	9907      	ldr	r1, [sp, #28]
        self.scroll_with_speed(text, Duration::from_secs((text.len() / 2) as u64))
     f52:	980a      	ldr	r0, [sp, #40]	@ 0x28
     f54:	3008      	adds	r0, #8
     f56:	2278      	movs	r2, #120	@ 0x78
     f58:	f00a fb6f 	bl	b63a <__aeabi_memcpy8>
            .await;
     f5c:	e006      	b.n	f6c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x8e>
     f5e:	2000      	movs	r0, #0
    pub async fn scroll(&mut self, text: &str) {
     f60:	2800      	cmp	r0, #0
     f62:	d1fc      	bne.n	f5e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x80>
     f64:	e00a      	b.n	f7c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x9e>
            .await;
     f66:	9808      	ldr	r0, [sp, #32]
     f68:	9049      	str	r0, [sp, #292]	@ 0x124
     f6a:	e7ff      	b.n	f6c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0x8e>
     f6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
     f6e:	3008      	adds	r0, #8
     f70:	904f      	str	r0, [sp, #316]	@ 0x13c
     f72:	9949      	ldr	r1, [sp, #292]	@ 0x124
     f74:	f000 f83d 	bl	ff2 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E>
     f78:	b930      	cbnz	r0, f88 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0xaa>
     f7a:	e010      	b.n	f9e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E+0xc0>
    pub async fn scroll(&mut self, text: &str) {
     f7c:	f64b 50a8 	movw	r0, #48552	@ 0xbda8
     f80:	f2c0 0000 	movt	r0, #0
     f84:	f00a f956 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
     f88:	2001      	movs	r0, #1
            .await;
     f8a:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
     f8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
     f90:	2003      	movs	r0, #3
     f92:	f881 0084 	strb.w	r0, [r1, #132]	@ 0x84
     f96:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
     f9a:	b050      	add	sp, #320	@ 0x140
     f9c:	bd80      	pop	{r7, pc}
     f9e:	980a      	ldr	r0, [sp, #40]	@ 0x28
     fa0:	3008      	adds	r0, #8
     fa2:	f001 fbef 	bl	2784 <_ZN4core3ptr172drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll_with_speed..$u7b$$u7b$closure$u7d$$u7d$$GT$17h16dab7023a742d18E>
     fa6:	2000      	movs	r0, #0
    }
     fa8:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
     fac:	990a      	ldr	r1, [sp, #40]	@ 0x28
     fae:	2001      	movs	r0, #1
     fb0:	f881 0084 	strb.w	r0, [r1, #132]	@ 0x84
     fb4:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
     fb8:	b050      	add	sp, #320	@ 0x140
     fba:	bd80      	pop	{r7, pc}

00000fbc <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed17hda38a3c09c0ac63dE>:

    /// Scroll the provided text across the screen within the provided duration
    pub async fn scroll_with_speed(&mut self, text: &str, speed: Duration) {
     fbc:	b580      	push	{r7, lr}
     fbe:	466f      	mov	r7, sp
     fc0:	b086      	sub	sp, #24
     fc2:	4694      	mov	ip, r2
     fc4:	468e      	mov	lr, r1
     fc6:	4601      	mov	r1, r0
     fc8:	68fa      	ldr	r2, [r7, #12]
     fca:	68b8      	ldr	r0, [r7, #8]
     fcc:	f8cd e004 	str.w	lr, [sp, #4]
     fd0:	f8cd c008 	str.w	ip, [sp, #8]
     fd4:	9303      	str	r3, [sp, #12]
     fd6:	9205      	str	r2, [sp, #20]
     fd8:	9004      	str	r0, [sp, #16]
     fda:	f8c1 e070 	str.w	lr, [r1, #112]	@ 0x70
     fde:	f8c1 c000 	str.w	ip, [r1]
     fe2:	604b      	str	r3, [r1, #4]
     fe4:	60ca      	str	r2, [r1, #12]
     fe6:	6088      	str	r0, [r1, #8]
     fe8:	2000      	movs	r0, #0
     fea:	f881 0074 	strb.w	r0, [r1, #116]	@ 0x74
        self.animate(text.as_bytes(), AnimationEffect::Slide, speed).await;
    }
     fee:	b006      	add	sp, #24
     ff0:	bd80      	pop	{r7, pc}

00000ff2 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E>:
    pub async fn scroll_with_speed(&mut self, text: &str, speed: Duration) {
     ff2:	b5d0      	push	{r4, r6, r7, lr}
     ff4:	af02      	add	r7, sp, #8
     ff6:	b0c8      	sub	sp, #288	@ 0x120
     ff8:	9106      	str	r1, [sp, #24]
     ffa:	9008      	str	r0, [sp, #32]
     ffc:	913d      	str	r1, [sp, #244]	@ 0xf4
     ffe:	9808      	ldr	r0, [sp, #32]
    1000:	f890 0074 	ldrb.w	r0, [r0, #116]	@ 0x74
    1004:	4601      	mov	r1, r0
    1006:	9107      	str	r1, [sp, #28]
    1008:	b130      	cbz	r0, 1018 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0x26>
    100a:	e7ff      	b.n	100c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0x1a>
    100c:	9807      	ldr	r0, [sp, #28]
    100e:	2801      	cmp	r0, #1
    1010:	d031      	beq.n	1076 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0x84>
    1012:	e7ff      	b.n	1014 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0x22>
    1014:	e033      	b.n	107e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0x8c>
    1016:	defe      	udf	#254	@ 0xfe
    1018:	9806      	ldr	r0, [sp, #24]
    101a:	903c      	str	r0, [sp, #240]	@ 0xf0
    101c:	9808      	ldr	r0, [sp, #32]
    101e:	6f01      	ldr	r1, [r0, #112]	@ 0x70
    1020:	913f      	str	r1, [sp, #252]	@ 0xfc
    1022:	9808      	ldr	r0, [sp, #32]
    1024:	6802      	ldr	r2, [r0, #0]
    1026:	6843      	ldr	r3, [r0, #4]
    1028:	9240      	str	r2, [sp, #256]	@ 0x100
    102a:	9341      	str	r3, [sp, #260]	@ 0x104
    102c:	9808      	ldr	r0, [sp, #32]
    102e:	f8d0 e008 	ldr.w	lr, [r0, #8]
    1032:	68c4      	ldr	r4, [r0, #12]
    1034:	9443      	str	r4, [sp, #268]	@ 0x10c
    1036:	f8cd e108 	str.w	lr, [sp, #264]	@ 0x108
    103a:	9246      	str	r2, [sp, #280]	@ 0x118
    103c:	9347      	str	r3, [sp, #284]	@ 0x11c
    103e:	2001      	movs	r0, #1
        self.animate(text.as_bytes(), AnimationEffect::Slide, speed).await;
    1040:	f807 0c39 	strb.w	r0, [r7, #-57]
    1044:	f817 0c39 	ldrb.w	r0, [r7, #-57]
    1048:	46ec      	mov	ip, sp
    104a:	f8cc 400c 	str.w	r4, [ip, #12]
    104e:	f8cc e008 	str.w	lr, [ip, #8]
    1052:	f8cc 0000 	str.w	r0, [ip]
    1056:	a822      	add	r0, sp, #136	@ 0x88
    1058:	9004      	str	r0, [sp, #16]
    105a:	f000 f83b 	bl	10d4 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate17hfb5f31c83fb16f0fE>
    105e:	9904      	ldr	r1, [sp, #16]
    1060:	a80a      	add	r0, sp, #40	@ 0x28
    1062:	9005      	str	r0, [sp, #20]
    1064:	f7ff fcf7 	bl	a56 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h084bf453f79ba1fbE>
    1068:	9905      	ldr	r1, [sp, #20]
    106a:	9808      	ldr	r0, [sp, #32]
    106c:	3010      	adds	r0, #16
    106e:	2260      	movs	r2, #96	@ 0x60
    1070:	f00a fae3 	bl	b63a <__aeabi_memcpy8>
    1074:	e006      	b.n	1084 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0x92>
    1076:	2000      	movs	r0, #0
    pub async fn scroll_with_speed(&mut self, text: &str, speed: Duration) {
    1078:	2800      	cmp	r0, #0
    107a:	d1fc      	bne.n	1076 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0x84>
    107c:	e00a      	b.n	1094 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0xa2>
        self.animate(text.as_bytes(), AnimationEffect::Slide, speed).await;
    107e:	9806      	ldr	r0, [sp, #24]
    1080:	903c      	str	r0, [sp, #240]	@ 0xf0
    1082:	e7ff      	b.n	1084 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0x92>
    1084:	9808      	ldr	r0, [sp, #32]
    1086:	3010      	adds	r0, #16
    1088:	9045      	str	r0, [sp, #276]	@ 0x114
    108a:	993c      	ldr	r1, [sp, #240]	@ 0xf0
    108c:	f000 f843 	bl	1116 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E>
    1090:	b930      	cbnz	r0, 10a0 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0xae>
    1092:	e010      	b.n	10b6 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$17scroll_with_speed28_$u7b$$u7b$closure$u7d$$u7d$17h9ecf84d48999b150E+0xc4>
    pub async fn scroll_with_speed(&mut self, text: &str, speed: Duration) {
    1094:	f64b 50b8 	movw	r0, #48568	@ 0xbdb8
    1098:	f2c0 0000 	movt	r0, #0
    109c:	f00a f8ca 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
    10a0:	2001      	movs	r0, #1
        self.animate(text.as_bytes(), AnimationEffect::Slide, speed).await;
    10a2:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
    10a6:	9908      	ldr	r1, [sp, #32]
    10a8:	2003      	movs	r0, #3
    10aa:	f881 0074 	strb.w	r0, [r1, #116]	@ 0x74
    10ae:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
    10b2:	b048      	add	sp, #288	@ 0x120
    10b4:	bdd0      	pop	{r4, r6, r7, pc}
    10b6:	9808      	ldr	r0, [sp, #32]
    10b8:	3010      	adds	r0, #16
    10ba:	f001 fb3b 	bl	2734 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..animate..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4f3b2f4d8ed6f4fbE>
    10be:	2000      	movs	r0, #0
    }
    10c0:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
    10c4:	9908      	ldr	r1, [sp, #32]
    10c6:	2001      	movs	r0, #1
    10c8:	f881 0074 	strb.w	r0, [r1, #116]	@ 0x74
    10cc:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
    10d0:	b048      	add	sp, #288	@ 0x120
    10d2:	bdd0      	pop	{r4, r6, r7, pc}

000010d4 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate17hfb5f31c83fb16f0fE>:

    /// Apply animation based on data with the given effect during the provided duration
    pub async fn animate(&mut self, data: &[u8], effect: AnimationEffect, duration: Duration) {
    10d4:	b5d0      	push	{r4, r6, r7, lr}
    10d6:	af02      	add	r7, sp, #8
    10d8:	b086      	sub	sp, #24
    10da:	469c      	mov	ip, r3
    10dc:	4696      	mov	lr, r2
    10de:	460c      	mov	r4, r1
    10e0:	4601      	mov	r1, r0
    10e2:	697a      	ldr	r2, [r7, #20]
    10e4:	6938      	ldr	r0, [r7, #16]
    10e6:	68bb      	ldr	r3, [r7, #8]
    10e8:	9400      	str	r4, [sp, #0]
    10ea:	f8cd e004 	str.w	lr, [sp, #4]
    10ee:	f8cd c008 	str.w	ip, [sp, #8]
    10f2:	f807 3c11 	strb.w	r3, [r7, #-17]
    10f6:	9205      	str	r2, [sp, #20]
    10f8:	9004      	str	r0, [sp, #16]
    10fa:	654c      	str	r4, [r1, #84]	@ 0x54
    10fc:	f8c1 e048 	str.w	lr, [r1, #72]	@ 0x48
    1100:	f8c1 c04c 	str.w	ip, [r1, #76]	@ 0x4c
    1104:	f881 3059 	strb.w	r3, [r1, #89]	@ 0x59
    1108:	644a      	str	r2, [r1, #68]	@ 0x44
    110a:	6408      	str	r0, [r1, #64]	@ 0x40
    110c:	2000      	movs	r0, #0
    110e:	f881 0058 	strb.w	r0, [r1, #88]	@ 0x58
            }
            self.render();
            Timer::after(REFRESH_INTERVAL).await;
        }
        self.clear();
    }
    1112:	b006      	add	sp, #24
    1114:	bdd0      	pop	{r4, r6, r7, pc}

00001116 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E>:
    pub async fn animate(&mut self, data: &[u8], effect: AnimationEffect, duration: Duration) {
    1116:	b5f0      	push	{r4, r5, r6, r7, lr}
    1118:	af03      	add	r7, sp, #12
    111a:	f84d bd04 	str.w	fp, [sp, #-4]!
    111e:	b0ca      	sub	sp, #296	@ 0x128
    1120:	9106      	str	r1, [sp, #24]
    1122:	9008      	str	r0, [sp, #32]
    1124:	912f      	str	r1, [sp, #188]	@ 0xbc
    1126:	9808      	ldr	r0, [sp, #32]
    1128:	f890 0058 	ldrb.w	r0, [r0, #88]	@ 0x58
    112c:	4601      	mov	r1, r0
    112e:	9107      	str	r1, [sp, #28]
    1130:	b130      	cbz	r0, 1140 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x2a>
    1132:	e7ff      	b.n	1134 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x1e>
    1134:	9807      	ldr	r0, [sp, #28]
    1136:	2801      	cmp	r0, #1
    1138:	d048      	beq.n	11cc <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xb6>
    113a:	e7ff      	b.n	113c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x26>
    113c:	e04a      	b.n	11d4 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xbe>
    113e:	defe      	udf	#254	@ 0xfe
    1140:	9806      	ldr	r0, [sp, #24]
    1142:	902e      	str	r0, [sp, #184]	@ 0xb8
    1144:	9908      	ldr	r1, [sp, #32]
    1146:	6d48      	ldr	r0, [r1, #84]	@ 0x54
    1148:	6508      	str	r0, [r1, #80]	@ 0x50
    114a:	9808      	ldr	r0, [sp, #32]
    114c:	f8d0 c048 	ldr.w	ip, [r0, #72]	@ 0x48
    1150:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    1152:	f8cd c0c4 	str.w	ip, [sp, #196]	@ 0xc4
    1156:	9132      	str	r1, [sp, #200]	@ 0xc8
    1158:	9808      	ldr	r0, [sp, #32]
    115a:	f890 2059 	ldrb.w	r2, [r0, #89]	@ 0x59
    115e:	f807 2c69 	strb.w	r2, [r7, #-105]
    1162:	9b08      	ldr	r3, [sp, #32]
    1164:	6c18      	ldr	r0, [r3, #64]	@ 0x40
    1166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    1168:	9335      	str	r3, [sp, #212]	@ 0xd4
    116a:	9034      	str	r0, [sp, #208]	@ 0xd0
            Animation::new(AnimationData::Bytes(data), effect, duration).unwrap();
    116c:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
    1170:	9118      	str	r1, [sp, #96]	@ 0x60
    1172:	2101      	movs	r1, #1
    1174:	9116      	str	r1, [sp, #88]	@ 0x58
    1176:	4669      	mov	r1, sp
    1178:	604b      	str	r3, [r1, #4]
    117a:	6008      	str	r0, [r1, #0]
    117c:	a80a      	add	r0, sp, #40	@ 0x28
    117e:	a916      	add	r1, sp, #88	@ 0x58
    1180:	f000 f907 	bl	1392 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E>
    1184:	9808      	ldr	r0, [sp, #32]
    pub fn unwrap(self) -> T
    where
        E: fmt::Debug,
    {
        match self {
            Ok(t) => t,
    1186:	9005      	str	r0, [sp, #20]
        match self {
    1188:	9812      	ldr	r0, [sp, #72]	@ 0x48
    118a:	2802      	cmp	r0, #2
    118c:	d113      	bne.n	11b6 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xa0>
    118e:	e7ff      	b.n	1190 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x7a>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    1190:	f64b 50c8 	movw	r0, #48584	@ 0xbdc8
    1194:	f2c0 0000 	movt	r0, #0
    1198:	4669      	mov	r1, sp
    119a:	6008      	str	r0, [r1, #0]
    119c:	f64b 501c 	movw	r0, #48412	@ 0xbd1c
    11a0:	f2c0 0000 	movt	r0, #0
    11a4:	f64b 530c 	movw	r3, #48396	@ 0xbd0c
    11a8:	f2c0 0300 	movt	r3, #0
    11ac:	212b      	movs	r1, #43	@ 0x2b
    11ae:	f1a7 0211 	sub.w	r2, r7, #17
    11b2:	f009 f9bf 	bl	a534 <_ZN4core6result13unwrap_failed17h5f8fbd930397df6cE>
    11b6:	9805      	ldr	r0, [sp, #20]
    11b8:	a90a      	add	r1, sp, #40	@ 0x28
            Ok(t) => t,
    11ba:	e8b1 503c 	ldmia.w	r1!, {r2, r3, r4, r5, ip, lr}
    11be:	e8a0 503c 	stmia.w	r0!, {r2, r3, r4, r5, ip, lr}
    11c2:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    11c6:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    11ca:	e006      	b.n	11da <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xc4>
    11cc:	2000      	movs	r0, #0
    pub async fn animate(&mut self, data: &[u8], effect: AnimationEffect, duration: Duration) {
    11ce:	2800      	cmp	r0, #0
    11d0:	d1fc      	bne.n	11cc <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xb6>
    11d2:	e015      	b.n	1200 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xea>
            Timer::after(REFRESH_INTERVAL).await;
    11d4:	9806      	ldr	r0, [sp, #24]
    11d6:	902e      	str	r0, [sp, #184]	@ 0xb8
    11d8:	e018      	b.n	120c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xf6>
            match animation.next(Instant::now()) {
    11da:	9808      	ldr	r0, [sp, #32]
    11dc:	9003      	str	r0, [sp, #12]
    11de:	f005 fbdf 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
    11e2:	4602      	mov	r2, r0
    11e4:	460b      	mov	r3, r1
    11e6:	9903      	ldr	r1, [sp, #12]
    11e8:	a819      	add	r0, sp, #100	@ 0x64
    11ea:	f000 f9c3 	bl	1574 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E>
    11ee:	9819      	ldr	r0, [sp, #100]	@ 0x64
    11f0:	9004      	str	r0, [sp, #16]
    11f2:	b308      	cbz	r0, 1238 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x122>
    11f4:	e7ff      	b.n	11f6 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xe0>
    11f6:	9804      	ldr	r0, [sp, #16]
    11f8:	2801      	cmp	r0, #1
    11fa:	d039      	beq.n	1270 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x15a>
    11fc:	e7ff      	b.n	11fe <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xe8>
    11fe:	e052      	b.n	12a6 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x190>
    pub async fn animate(&mut self, data: &[u8], effect: AnimationEffect, duration: Duration) {
    1200:	f64b 50d8 	movw	r0, #48600	@ 0xbdd8
    1204:	f2c0 0000 	movt	r0, #0
    1208:	f00a f814 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
            Timer::after(REFRESH_INTERVAL).await;
    120c:	9808      	ldr	r0, [sp, #32]
    120e:	3030      	adds	r0, #48	@ 0x30
    1210:	9048      	str	r0, [sp, #288]	@ 0x120
    1212:	992e      	ldr	r1, [sp, #184]	@ 0xb8
    1214:	f005 fc70 	bl	6af8 <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE>
    1218:	b168      	cbz	r0, 1236 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x120>
    121a:	e7ff      	b.n	121c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x106>
    121c:	2001      	movs	r0, #1
    121e:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
    1222:	9908      	ldr	r1, [sp, #32]
    1224:	2003      	movs	r0, #3
    1226:	f881 0058 	strb.w	r0, [r1, #88]	@ 0x58
    122a:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
    122e:	b04a      	add	sp, #296	@ 0x128
    1230:	f85d bb04 	ldr.w	fp, [sp], #4
    1234:	bdf0      	pop	{r4, r5, r6, r7, pc}
        loop {
    1236:	e7d0      	b.n	11da <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xc4>
            self.render();
    1238:	9808      	ldr	r0, [sp, #32]
    123a:	6d00      	ldr	r0, [r0, #80]	@ 0x50
    123c:	f7ff fca7 	bl	b8e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6render17h38b0b998779ccae4E>
    1240:	a840      	add	r0, sp, #256	@ 0x100
    1242:	2211      	movs	r2, #17
    1244:	2300      	movs	r3, #0
            Timer::after(REFRESH_INTERVAL).await;
    1246:	f005 fc41 	bl	6acc <_ZN12embassy_time5timer5Timer5after17h90fc56a887000710E>
    124a:	9a40      	ldr	r2, [sp, #256]	@ 0x100
    124c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
    124e:	f89d 0108 	ldrb.w	r0, [sp, #264]	@ 0x108
    1252:	4669      	mov	r1, sp
    1254:	6008      	str	r0, [r1, #0]
    1256:	a844      	add	r0, sp, #272	@ 0x110
    1258:	f002 f871 	bl	333e <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17hb4b3c43807099097E>
    125c:	9a44      	ldr	r2, [sp, #272]	@ 0x110
    125e:	9b45      	ldr	r3, [sp, #276]	@ 0x114
    1260:	f89d 0118 	ldrb.w	r0, [sp, #280]	@ 0x118
    1264:	9908      	ldr	r1, [sp, #32]
    1266:	634b      	str	r3, [r1, #52]	@ 0x34
    1268:	630a      	str	r2, [r1, #48]	@ 0x30
    126a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
    126e:	e7cd      	b.n	120c <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0xf6>
    1270:	a819      	add	r0, sp, #100	@ 0x64
                AnimationState::Apply(f) => {
    1272:	1d01      	adds	r1, r0, #4
    1274:	ab24      	add	r3, sp, #144	@ 0x90
    1276:	4618      	mov	r0, r3
    1278:	e8b1 5034 	ldmia.w	r1!, {r2, r4, r5, ip, lr}
    127c:	e8a0 5034 	stmia.w	r0!, {r2, r4, r5, ip, lr}
    1280:	e891 5034 	ldmia.w	r1, {r2, r4, r5, ip, lr}
    1284:	e880 5034 	stmia.w	r0, {r2, r4, r5, ip, lr}
                    self.apply(f);
    1288:	9808      	ldr	r0, [sp, #32]
    128a:	6d00      	ldr	r0, [r0, #80]	@ 0x50
    128c:	a936      	add	r1, sp, #216	@ 0xd8
    128e:	460a      	mov	r2, r1
    1290:	e8b3 5070 	ldmia.w	r3!, {r4, r5, r6, ip, lr}
    1294:	e8a2 5070 	stmia.w	r2!, {r4, r5, r6, ip, lr}
    1298:	e893 5070 	ldmia.w	r3, {r4, r5, r6, ip, lr}
    129c:	e882 5070 	stmia.w	r2, {r4, r5, r6, ip, lr}
    12a0:	f7ff fc5d 	bl	b5e <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5apply17ha4d902a50f6e9c9dE>
    12a4:	e7c8      	b.n	1238 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7animate28_$u7b$$u7b$closure$u7d$$u7d$17hb06aa3ac67ad1877E+0x122>
        self.clear();
    12a6:	9808      	ldr	r0, [sp, #32]
    12a8:	6d00      	ldr	r0, [r0, #80]	@ 0x50
    12aa:	f7ff fc1f 	bl	aec <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$5clear17hb390533ac5a580c4E>
    12ae:	2000      	movs	r0, #0
    }
    12b0:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
    12b4:	9908      	ldr	r1, [sp, #32]
    12b6:	2001      	movs	r0, #1
    12b8:	f881 0058 	strb.w	r0, [r1, #88]	@ 0x58
    12bc:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
    12c0:	b04a      	add	sp, #296	@ 0x128
    12c2:	f85d bb04 	ldr.w	fp, [sp], #4
    12c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000012c8 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E>:
    Frames(&'a [Frame<XSIZE, YSIZE>]),
    Bytes(&'a [u8]),
}

impl<'a, const XSIZE: usize, const YSIZE: usize> AnimationData<'a, XSIZE, YSIZE> {
    fn len(&self) -> usize {
    12c8:	b580      	push	{r7, lr}
    12ca:	466f      	mov	r7, sp
    12cc:	b085      	sub	sp, #20
    12ce:	9000      	str	r0, [sp, #0]
    12d0:	9002      	str	r0, [sp, #8]
        match self {
    12d2:	6800      	ldr	r0, [r0, #0]
    12d4:	07c0      	lsls	r0, r0, #31
    12d6:	b130      	cbz	r0, 12e6 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E+0x1e>
    12d8:	e7ff      	b.n	12da <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E+0x12>
            AnimationData::Frames(f) => f.len(),
            AnimationData::Bytes(f) => f.len(),
    12da:	9800      	ldr	r0, [sp, #0]
    12dc:	1d01      	adds	r1, r0, #4
    12de:	9104      	str	r1, [sp, #16]
    12e0:	6880      	ldr	r0, [r0, #8]
    12e2:	9001      	str	r0, [sp, #4]
    12e4:	e005      	b.n	12f2 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E+0x2a>
            AnimationData::Frames(f) => f.len(),
    12e6:	9800      	ldr	r0, [sp, #0]
    12e8:	1d01      	adds	r1, r0, #4
    12ea:	9103      	str	r1, [sp, #12]
    12ec:	6880      	ldr	r0, [r0, #8]
    12ee:	9001      	str	r0, [sp, #4]
    12f0:	e7ff      	b.n	12f2 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E+0x2a>
        }
    }
    12f2:	9801      	ldr	r0, [sp, #4]
    12f4:	b005      	add	sp, #20
    12f6:	bd80      	pop	{r7, pc}

000012f8 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE>:

    fn frame(&self, idx: usize) -> Frame<XSIZE, YSIZE> {
    12f8:	b5d0      	push	{r4, r6, r7, lr}
    12fa:	af02      	add	r7, sp, #8
    12fc:	b08c      	sub	sp, #48	@ 0x30
    12fe:	9205      	str	r2, [sp, #20]
    1300:	9106      	str	r1, [sp, #24]
    1302:	9007      	str	r0, [sp, #28]
    1304:	9108      	str	r1, [sp, #32]
    1306:	9209      	str	r2, [sp, #36]	@ 0x24
        match self {
    1308:	6808      	ldr	r0, [r1, #0]
    130a:	07c0      	lsls	r0, r0, #31
    130c:	b158      	cbz	r0, 1326 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE+0x2e>
    130e:	e7ff      	b.n	1310 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE+0x18>
            AnimationData::Frames(f) => f[idx],
            AnimationData::Bytes(f) => f[idx].into(),
    1310:	9805      	ldr	r0, [sp, #20]
    1312:	9906      	ldr	r1, [sp, #24]
    1314:	1d0a      	adds	r2, r1, #4
    1316:	4613      	mov	r3, r2
    1318:	9303      	str	r3, [sp, #12]
    131a:	920b      	str	r2, [sp, #44]	@ 0x2c
    131c:	6889      	ldr	r1, [r1, #8]
    131e:	9104      	str	r1, [sp, #16]
    1320:	4288      	cmp	r0, r1
    1322:	d326      	bcc.n	1372 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE+0x7a>
    1324:	e02d      	b.n	1382 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE+0x8a>
            AnimationData::Frames(f) => f[idx],
    1326:	9805      	ldr	r0, [sp, #20]
    1328:	9906      	ldr	r1, [sp, #24]
    132a:	1d0a      	adds	r2, r1, #4
    132c:	4613      	mov	r3, r2
    132e:	9301      	str	r3, [sp, #4]
    1330:	920a      	str	r2, [sp, #40]	@ 0x28
    1332:	6889      	ldr	r1, [r1, #8]
    1334:	9102      	str	r1, [sp, #8]
    1336:	4288      	cmp	r0, r1
    1338:	d211      	bcs.n	135e <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE+0x66>
    133a:	e7ff      	b.n	133c <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE+0x44>
    133c:	9807      	ldr	r0, [sp, #28]
    133e:	9a05      	ldr	r2, [sp, #20]
    1340:	9901      	ldr	r1, [sp, #4]
    1342:	6809      	ldr	r1, [r1, #0]
    1344:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1348:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    134c:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    1350:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    1354:	e891 501c 	ldmia.w	r1, {r2, r3, r4, ip, lr}
    1358:	e880 501c 	stmia.w	r0, {r2, r3, r4, ip, lr}
    135c:	e007      	b.n	136e <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE+0x76>
    135e:	9902      	ldr	r1, [sp, #8]
    1360:	9805      	ldr	r0, [sp, #20]
    1362:	f64b 52e8 	movw	r2, #48616	@ 0xbde8
    1366:	f2c0 0200 	movt	r2, #0
    136a:	f009 f8c5 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
        }
    }
    136e:	b00c      	add	sp, #48	@ 0x30
    1370:	bdd0      	pop	{r4, r6, r7, pc}
            AnimationData::Bytes(f) => f[idx].into(),
    1372:	9807      	ldr	r0, [sp, #28]
    1374:	9a05      	ldr	r2, [sp, #20]
    1376:	9903      	ldr	r1, [sp, #12]
    1378:	6809      	ldr	r1, [r1, #0]
    137a:	5c89      	ldrb	r1, [r1, r2]
    137c:	f001 ff3b 	bl	31f6 <_ZN30microbit_async_display_example5fonts117_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$u8$GT$4into17h0b58ee4b162ed695E>
    1380:	e7f5      	b.n	136e <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE+0x76>
    1382:	9904      	ldr	r1, [sp, #16]
    1384:	9805      	ldr	r0, [sp, #20]
    1386:	f64b 52f8 	movw	r2, #48632	@ 0xbdf8
    138a:	f2c0 0200 	movt	r2, #0
    138e:	f009 f8b3 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

00001392 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E>:
    Apply(Frame<XSIZE, YSIZE>),
    Done,
}

impl<'a, const XSIZE: usize, const YSIZE: usize> Animation<'a, XSIZE, YSIZE> {
    pub fn new(
    1392:	b5f0      	push	{r4, r5, r6, r7, lr}
    1394:	af03      	add	r7, sp, #12
    1396:	f84d 8d04 	str.w	r8, [sp, #-4]!
    139a:	b0a2      	sub	sp, #136	@ 0x88
    139c:	4613      	mov	r3, r2
        frames: AnimationData<'a, XSIZE, YSIZE>,
    139e:	9106      	str	r1, [sp, #24]
    13a0:	4601      	mov	r1, r0
    13a2:	9806      	ldr	r0, [sp, #24]
    13a4:	9107      	str	r1, [sp, #28]
    13a6:	68fa      	ldr	r2, [r7, #12]
    13a8:	9208      	str	r2, [sp, #32]
    13aa:	68b9      	ldr	r1, [r7, #8]
    13ac:	9109      	str	r1, [sp, #36]	@ 0x24
    13ae:	469c      	mov	ip, r3
    13b0:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
    13b4:	f807 3c21 	strb.w	r3, [r7, #-33]
    13b8:	921f      	str	r2, [sp, #124]	@ 0x7c
    13ba:	911e      	str	r1, [sp, #120]	@ 0x78
        effect: AnimationEffect,
        duration: Duration,
    ) -> Result<Self, AnimationError> {
        assert!(frames.len() > 0);
    13bc:	f7ff ff84 	bl	12c8 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E>
    13c0:	b958      	cbnz	r0, 13da <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x48>
    13c2:	e7ff      	b.n	13c4 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x32>
    13c4:	f64b 6008 	movw	r0, #48648	@ 0xbe08
    13c8:	f2c0 0000 	movt	r0, #0
    13cc:	f64b 622c 	movw	r2, #48684	@ 0xbe2c
    13d0:	f2c0 0200 	movt	r2, #0
    13d4:	2122      	movs	r1, #34	@ 0x22
    13d6:	f009 f848 	bl	a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>
        let length = match effect {
    13da:	980a      	ldr	r0, [sp, #40]	@ 0x28
    13dc:	07c0      	lsls	r0, r0, #31
    13de:	b148      	cbz	r0, 13f4 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x62>
    13e0:	e7ff      	b.n	13e2 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x50>
            AnimationEffect::Slide => frames.len() * XSIZE,
    13e2:	9806      	ldr	r0, [sp, #24]
    13e4:	f7ff ff70 	bl	12c8 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E>
    13e8:	2105      	movs	r1, #5
    13ea:	fba0 0101 	umull	r0, r1, r0, r1
    13ee:	9005      	str	r0, [sp, #20]
    13f0:	b9a1      	cbnz	r1, 141c <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x8a>
    13f2:	e010      	b.n	1416 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x84>
            AnimationEffect::None => frames.len(),
    13f4:	9806      	ldr	r0, [sp, #24]
    13f6:	f7ff ff67 	bl	12c8 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E>
    13fa:	900b      	str	r0, [sp, #44]	@ 0x2c
    13fc:	e7ff      	b.n	13fe <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x6c>
        };

        if let Some(wait) = duration.checked_div(length as u32) {
    13fe:	9b08      	ldr	r3, [sp, #32]
    1400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    1402:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    1404:	4669      	mov	r1, sp
    1406:	6008      	str	r0, [r1, #0]
    1408:	a80c      	add	r0, sp, #48	@ 0x30
    140a:	f005 fa63 	bl	68d4 <_ZN12embassy_time8duration8Duration11checked_div17h687a26f6402f5c7eE>
    140e:	980c      	ldr	r0, [sp, #48]	@ 0x30
    1410:	07c0      	lsls	r0, r0, #31
    1412:	b948      	cbnz	r0, 1428 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x96>
    1414:	e03f      	b.n	1496 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x104>
            AnimationEffect::Slide => frames.len() * XSIZE,
    1416:	9805      	ldr	r0, [sp, #20]
    1418:	900b      	str	r0, [sp, #44]	@ 0x2c
    141a:	e7f0      	b.n	13fe <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x6c>
    141c:	f64b 603c 	movw	r0, #48700	@ 0xbe3c
    1420:	f2c0 0000 	movt	r0, #0
    1424:	f009 fea7 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
        if let Some(wait) = duration.checked_div(length as u32) {
    1428:	f8dd 8018 	ldr.w	r8, [sp, #24]
    142c:	980e      	ldr	r0, [sp, #56]	@ 0x38
    142e:	9003      	str	r0, [sp, #12]
    1430:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1432:	9102      	str	r1, [sp, #8]
    1434:	9121      	str	r1, [sp, #132]	@ 0x84
    1436:	9020      	str	r0, [sp, #128]	@ 0x80
            Ok(Self {
                frames,
                frame_index: 0,
                sequence: 0,
                index: 0,
                length,
    1438:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
                effect,
                wait,
                next: Instant::now(),
    143a:	f005 fab1 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
    143e:	f8dd c008 	ldr.w	ip, [sp, #8]
    1442:	9b03      	ldr	r3, [sp, #12]
    1444:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
    1448:	4602      	mov	r2, r0
    144a:	9807      	ldr	r0, [sp, #28]
    144c:	9204      	str	r2, [sp, #16]
    144e:	460a      	mov	r2, r1
            Ok(Self {
    1450:	9904      	ldr	r1, [sp, #16]
    1452:	f8d8 5000 	ldr.w	r5, [r8]
    1456:	f8d8 6004 	ldr.w	r6, [r8, #4]
    145a:	f8d8 8008 	ldr.w	r8, [r8, #8]
    145e:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
    1462:	9619      	str	r6, [sp, #100]	@ 0x64
    1464:	9518      	str	r5, [sp, #96]	@ 0x60
    1466:	2500      	movs	r5, #0
    1468:	9514      	str	r5, [sp, #80]	@ 0x50
    146a:	9515      	str	r5, [sp, #84]	@ 0x54
    146c:	9516      	str	r5, [sp, #88]	@ 0x58
    146e:	9417      	str	r4, [sp, #92]	@ 0x5c
    1470:	f00e 0e01 	and.w	lr, lr, #1
    1474:	f88d e06c 	strb.w	lr, [sp, #108]	@ 0x6c
    1478:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
    147c:	9310      	str	r3, [sp, #64]	@ 0x40
    147e:	9213      	str	r2, [sp, #76]	@ 0x4c
    1480:	9112      	str	r1, [sp, #72]	@ 0x48
    1482:	a910      	add	r1, sp, #64	@ 0x40
    1484:	e8b1 503c 	ldmia.w	r1!, {r2, r3, r4, r5, ip, lr}
    1488:	e8a0 503c 	stmia.w	r0!, {r2, r3, r4, r5, ip, lr}
    148c:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    1490:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
        if let Some(wait) = duration.checked_div(length as u32) {
    1494:	e003      	b.n	149e <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x10c>
    1496:	9907      	ldr	r1, [sp, #28]
    1498:	2002      	movs	r0, #2
            })
        } else {
            Err(AnimationError::TooFast)
    149a:	6208      	str	r0, [r1, #32]
        if let Some(wait) = duration.checked_div(length as u32) {
    149c:	e7ff      	b.n	149e <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$3new17hc349e1509ac35d71E+0x10c>
        }
    }
    149e:	b022      	add	sp, #136	@ 0x88
    14a0:	f85d 8b04 	ldr.w	r8, [sp], #4
    14a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000014a6 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE>:
    fn current(&self) -> Frame<XSIZE, YSIZE> {
    14a6:	b5d0      	push	{r4, r6, r7, lr}
    14a8:	af02      	add	r7, sp, #8
    14aa:	b0a0      	sub	sp, #128	@ 0x80
    14ac:	9107      	str	r1, [sp, #28]
    14ae:	4601      	mov	r1, r0
    14b0:	9807      	ldr	r0, [sp, #28]
    14b2:	9106      	str	r1, [sp, #24]
    14b4:	901f      	str	r0, [sp, #124]	@ 0x7c
        let mut current = self.frames.frame(self.frame_index);
    14b6:	f100 0120 	add.w	r1, r0, #32
    14ba:	9108      	str	r1, [sp, #32]
    14bc:	6942      	ldr	r2, [r0, #20]
    14be:	a80b      	add	r0, sp, #44	@ 0x2c
    14c0:	f7ff ff1a 	bl	12f8 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE>
    14c4:	9907      	ldr	r1, [sp, #28]
    14c6:	9808      	ldr	r0, [sp, #32]

        let mut next = if self.frame_index < self.frames.len() - 1 {
    14c8:	6949      	ldr	r1, [r1, #20]
    14ca:	9109      	str	r1, [sp, #36]	@ 0x24
    14cc:	f7ff fefc 	bl	12c8 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$3len17hdbb05d4ecc74d999E>
    14d0:	1e41      	subs	r1, r0, #1
    14d2:	910a      	str	r1, [sp, #40]	@ 0x28
    14d4:	b128      	cbz	r0, 14e2 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x3c>
    14d6:	e7ff      	b.n	14d8 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x32>
    14d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
    14da:	990a      	ldr	r1, [sp, #40]	@ 0x28
    14dc:	4288      	cmp	r0, r1
    14de:	d30a      	bcc.n	14f6 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x50>
    14e0:	e005      	b.n	14ee <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x48>
    14e2:	f64b 604c 	movw	r0, #48716	@ 0xbe4c
    14e6:	f2c0 0000 	movt	r0, #0
    14ea:	f009 fe31 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    14ee:	a815      	add	r0, sp, #84	@ 0x54
            self.frames.frame(self.frame_index + 1)
        } else {
            Frame::empty()
    14f0:	f001 fb45 	bl	2b7e <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5empty17h8a63f91ef58e935cE>
    14f4:	e009      	b.n	150a <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x64>
            self.frames.frame(self.frame_index + 1)
    14f6:	9807      	ldr	r0, [sp, #28]
    14f8:	f100 0120 	add.w	r1, r0, #32
    14fc:	9104      	str	r1, [sp, #16]
    14fe:	6941      	ldr	r1, [r0, #20]
    1500:	1c48      	adds	r0, r1, #1
    1502:	4288      	cmp	r0, r1
    1504:	9005      	str	r0, [sp, #20]
    1506:	d313      	bcc.n	1530 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x8a>
    1508:	e00c      	b.n	1524 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x7e>
        };

        current.shift_left(self.sequence);
    150a:	9807      	ldr	r0, [sp, #28]
    150c:	6901      	ldr	r1, [r0, #16]
    150e:	a80b      	add	r0, sp, #44	@ 0x2c
    1510:	f001 fbdf 	bl	2cd2 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$10shift_left17h5cb7b08e0f66087bE>
    1514:	9807      	ldr	r0, [sp, #28]
        next.shift_right(XSIZE - self.sequence);
    1516:	6900      	ldr	r0, [r0, #16]
    1518:	f1c0 0105 	rsb	r1, r0, #5
    151c:	9103      	str	r1, [sp, #12]
    151e:	2805      	cmp	r0, #5
    1520:	d822      	bhi.n	1568 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0xc2>
    1522:	e00b      	b.n	153c <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x96>
            self.frames.frame(self.frame_index + 1)
    1524:	9a05      	ldr	r2, [sp, #20]
    1526:	9904      	ldr	r1, [sp, #16]
    1528:	a815      	add	r0, sp, #84	@ 0x54
    152a:	f7ff fee5 	bl	12f8 <_ZN30microbit_async_display_example7display26AnimationData$LT$_$C$_$GT$5frame17h71c87e1aad83913bE>
    152e:	e7ec      	b.n	150a <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE+0x64>
    1530:	f64b 605c 	movw	r0, #48732	@ 0xbe5c
    1534:	f2c0 0000 	movt	r0, #0
    1538:	f009 fdf7 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
        next.shift_right(XSIZE - self.sequence);
    153c:	9903      	ldr	r1, [sp, #12]
    153e:	a815      	add	r0, sp, #84	@ 0x54
    1540:	9001      	str	r0, [sp, #4]
    1542:	f001 fbf5 	bl	2d30 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$11shift_right17h3a54ca669bd30064E>
    1546:	9901      	ldr	r1, [sp, #4]
    1548:	a80b      	add	r0, sp, #44	@ 0x2c

        current.or(&next);
    154a:	9002      	str	r0, [sp, #8]
    154c:	f001 fb82 	bl	2c54 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE>
    1550:	9806      	ldr	r0, [sp, #24]
    1552:	9902      	ldr	r1, [sp, #8]
        current
    1554:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    1558:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    155c:	e891 501c 	ldmia.w	r1, {r2, r3, r4, ip, lr}
    1560:	e880 501c 	stmia.w	r0, {r2, r3, r4, ip, lr}
    }
    1564:	b020      	add	sp, #128	@ 0x80
    1566:	bdd0      	pop	{r4, r6, r7, pc}
        next.shift_right(XSIZE - self.sequence);
    1568:	f64b 606c 	movw	r0, #48748	@ 0xbe6c
    156c:	f2c0 0000 	movt	r0, #0
    1570:	f009 fdee 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>

00001574 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E>:

    fn next(&mut self, now: Instant) -> AnimationState<XSIZE, YSIZE> {
    1574:	b5b0      	push	{r4, r5, r7, lr}
    1576:	af02      	add	r7, sp, #8
    1578:	b094      	sub	sp, #80	@ 0x50
    157a:	9104      	str	r1, [sp, #16]
    157c:	9005      	str	r0, [sp, #20]
    157e:	9307      	str	r3, [sp, #28]
    1580:	9206      	str	r2, [sp, #24]
    1582:	9113      	str	r1, [sp, #76]	@ 0x4c
        if self.next <= now {
    1584:	f101 0008 	add.w	r0, r1, #8
    1588:	a906      	add	r1, sp, #24
    158a:	f004 ffc9 	bl	6520 <_ZN4core3cmp10PartialOrd2le17hd86e12ae1182a6c9E>
    158e:	b920      	cbnz	r0, 159a <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x26>
    1590:	e7ff      	b.n	1592 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x1e>
    1592:	9905      	ldr	r1, [sp, #20]
    1594:	2000      	movs	r0, #0
                AnimationState::Apply(current)
            } else {
                AnimationState::Done
            }
        } else {
            AnimationState::Wait
    1596:	6008      	str	r0, [r1, #0]
        if self.next <= now {
    1598:	e005      	b.n	15a6 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x32>
            if self.index < self.length {
    159a:	9904      	ldr	r1, [sp, #16]
    159c:	6988      	ldr	r0, [r1, #24]
    159e:	69c9      	ldr	r1, [r1, #28]
    15a0:	4288      	cmp	r0, r1
    15a2:	d306      	bcc.n	15b2 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x3e>
    15a4:	e001      	b.n	15aa <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x36>
        }
    }
    15a6:	b014      	add	sp, #80	@ 0x50
    15a8:	bdb0      	pop	{r4, r5, r7, pc}
    15aa:	9905      	ldr	r1, [sp, #20]
    15ac:	2002      	movs	r0, #2
                AnimationState::Done
    15ae:	6008      	str	r0, [r1, #0]
            if self.index < self.length {
    15b0:	e7f9      	b.n	15a6 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x32>
                let current = self.current();
    15b2:	9904      	ldr	r1, [sp, #16]
    15b4:	a808      	add	r0, sp, #32
    15b6:	f7ff ff76 	bl	14a6 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$7current17h8c0c9b1294db6a9dE>
    15ba:	9804      	ldr	r0, [sp, #16]
                if self.sequence >= XSIZE - 1 {
    15bc:	6900      	ldr	r0, [r0, #16]
    15be:	2803      	cmp	r0, #3
    15c0:	d807      	bhi.n	15d2 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x5e>
    15c2:	e7ff      	b.n	15c4 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x50>
                    self.sequence += 1;
    15c4:	9804      	ldr	r0, [sp, #16]
    15c6:	6901      	ldr	r1, [r0, #16]
    15c8:	1c48      	adds	r0, r1, #1
    15ca:	4288      	cmp	r0, r1
    15cc:	9003      	str	r0, [sp, #12]
    15ce:	d30a      	bcc.n	15e6 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x72>
    15d0:	e005      	b.n	15de <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x6a>
                    self.sequence = match self.effect {
    15d2:	9804      	ldr	r0, [sp, #16]
    15d4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
    15d8:	07c0      	lsls	r0, r0, #31
    15da:	b988      	cbnz	r0, 1600 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x8c>
    15dc:	e013      	b.n	1606 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x92>
                    self.sequence += 1;
    15de:	9803      	ldr	r0, [sp, #12]
    15e0:	9904      	ldr	r1, [sp, #16]
    15e2:	6108      	str	r0, [r1, #16]
                if self.sequence >= XSIZE - 1 {
    15e4:	e005      	b.n	15f2 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x7e>
                    self.sequence += 1;
    15e6:	f64b 607c 	movw	r0, #48764	@ 0xbe7c
    15ea:	f2c0 0000 	movt	r0, #0
    15ee:	f009 fd9c 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
                self.index += 1;
    15f2:	9804      	ldr	r0, [sp, #16]
    15f4:	6981      	ldr	r1, [r0, #24]
    15f6:	1c48      	adds	r0, r1, #1
    15f8:	4288      	cmp	r0, r1
    15fa:	9002      	str	r0, [sp, #8]
    15fc:	d330      	bcc.n	1660 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0xec>
    15fe:	e018      	b.n	1632 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0xbe>
    1600:	2000      	movs	r0, #0
                        AnimationEffect::Slide => 0,
    1602:	9012      	str	r0, [sp, #72]	@ 0x48
    1604:	e002      	b.n	160c <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x98>
    1606:	2005      	movs	r0, #5
                        AnimationEffect::None => XSIZE,
    1608:	9012      	str	r0, [sp, #72]	@ 0x48
    160a:	e7ff      	b.n	160c <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x98>
                    self.sequence = match self.effect {
    160c:	9804      	ldr	r0, [sp, #16]
    160e:	9912      	ldr	r1, [sp, #72]	@ 0x48
    1610:	6101      	str	r1, [r0, #16]
                    self.frame_index += 1;
    1612:	6941      	ldr	r1, [r0, #20]
    1614:	1c48      	adds	r0, r1, #1
    1616:	4288      	cmp	r0, r1
    1618:	9001      	str	r0, [sp, #4]
    161a:	d304      	bcc.n	1626 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0xb2>
    161c:	e7ff      	b.n	161e <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0xaa>
    161e:	9801      	ldr	r0, [sp, #4]
    1620:	9904      	ldr	r1, [sp, #16]
    1622:	6148      	str	r0, [r1, #20]
                if self.sequence >= XSIZE - 1 {
    1624:	e7e5      	b.n	15f2 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x7e>
                    self.frame_index += 1;
    1626:	f64b 608c 	movw	r0, #48780	@ 0xbe8c
    162a:	f2c0 0000 	movt	r0, #0
    162e:	f009 fd7c 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
                self.index += 1;
    1632:	9904      	ldr	r1, [sp, #16]
    1634:	9802      	ldr	r0, [sp, #8]
    1636:	6188      	str	r0, [r1, #24]
                self.next += self.wait;
    1638:	f101 0008 	add.w	r0, r1, #8
    163c:	680a      	ldr	r2, [r1, #0]
    163e:	684b      	ldr	r3, [r1, #4]
    1640:	f005 fa32 	bl	6aa8 <_ZN118_$LT$embassy_time..instant..Instant$u20$as$u20$core..ops..arith..AddAssign$LT$embassy_time..duration..Duration$GT$$GT$10add_assign17hb58207f28b59a87eE>
    1644:	9905      	ldr	r1, [sp, #20]
                AnimationState::Apply(current)
    1646:	1d08      	adds	r0, r1, #4
    1648:	aa08      	add	r2, sp, #32
    164a:	e8b2 5038 	ldmia.w	r2!, {r3, r4, r5, ip, lr}
    164e:	e8a0 5038 	stmia.w	r0!, {r3, r4, r5, ip, lr}
    1652:	e892 5038 	ldmia.w	r2, {r3, r4, r5, ip, lr}
    1656:	e880 5038 	stmia.w	r0, {r3, r4, r5, ip, lr}
    165a:	2001      	movs	r0, #1
    165c:	6008      	str	r0, [r1, #0]
            if self.index < self.length {
    165e:	e7a2      	b.n	15a6 <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0x32>
                self.index += 1;
    1660:	f64b 609c 	movw	r0, #48796	@ 0xbe9c
    1664:	f2c0 0000 	movt	r0, #0
    1668:	f009 fd5f 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

0000166c <_ZN92_$LT$microbit_async_display_example..display..AnimationError$u20$as$u20$core..fmt..Debug$GT$3fmt17h7010a0dc922b15aeE>:
}

#[derive(Debug, Clone, Copy)]
    166c:	b580      	push	{r7, lr}
    166e:	466f      	mov	r7, sp
    1670:	b084      	sub	sp, #16
    1672:	9101      	str	r1, [sp, #4]
    1674:	4601      	mov	r1, r0
    1676:	9801      	ldr	r0, [sp, #4]
    1678:	9102      	str	r1, [sp, #8]
    167a:	9003      	str	r0, [sp, #12]
    167c:	f64b 61ac 	movw	r1, #48812	@ 0xbeac
    1680:	f2c0 0100 	movt	r1, #0
    1684:	2207      	movs	r2, #7
    1686:	f009 fa82 	bl	ab8e <_ZN4core3fmt9Formatter9write_str17hf2abd6d7d3a79bb2E>
    168a:	b004      	add	sp, #16
    168c:	bd80      	pop	{r7, pc}

0000168e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17ha6e9c427a1f032a9E>:
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_str_len", since = "1.39.0")]
    #[rustc_diagnostic_item = "str_len"]
    #[must_use]
    #[inline]
    pub const fn len(&self) -> usize {
    168e:	b580      	push	{r7, lr}
    1690:	466f      	mov	r7, sp
    1692:	b083      	sub	sp, #12
    1694:	9100      	str	r1, [sp, #0]
    1696:	4601      	mov	r1, r0
    1698:	9800      	ldr	r0, [sp, #0]
    169a:	9101      	str	r1, [sp, #4]
    169c:	9002      	str	r0, [sp, #8]
        self.as_bytes().len()
    }
    169e:	b003      	add	sp, #12
    16a0:	bd80      	pop	{r7, pc}
    16a2:	d4d4      	bmi.n	164e <_ZN30microbit_async_display_example7display22Animation$LT$_$C$_$GT$4next17ha1934380e637d722E+0xda>

000016a4 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE>:
}

#[inline]
#[cfg(target_has_atomic)]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
unsafe fn atomic_compare_exchange<T: Copy>(
    16a4:	b580      	push	{r7, lr}
    16a6:	466f      	mov	r7, sp
    16a8:	b0a4      	sub	sp, #144	@ 0x90
    16aa:	9207      	str	r2, [sp, #28]
    16ac:	9108      	str	r1, [sp, #32]
    16ae:	4684      	mov	ip, r0
    16b0:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
    16b4:	68b8      	ldr	r0, [r7, #8]
    16b6:	900a      	str	r0, [sp, #40]	@ 0x28
    16b8:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
    16bc:	911d      	str	r1, [sp, #116]	@ 0x74
    16be:	921e      	str	r2, [sp, #120]	@ 0x78
    16c0:	f807 3c12 	strb.w	r3, [r7, #-18]
    16c4:	f807 0c11 	strb.w	r0, [r7, #-17]
/// Used by the format_args!() macro to create a fmt::Arguments object.
#[doc(hidden)]
#[unstable(feature = "fmt_internals", issue = "none")]
impl<'a> Arguments<'a> {
    #[inline]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    16c8:	f64b 60e8 	movw	r0, #48872	@ 0xbee8
    16cc:	f2c0 0000 	movt	r0, #0
    16d0:	9020      	str	r0, [sp, #128]	@ 0x80
    16d2:	f64b 7030 	movw	r0, #48944	@ 0xbf30
    16d6:	f2c0 0000 	movt	r0, #0
    16da:	9021      	str	r0, [sp, #132]	@ 0x84
    success: Ordering,
    failure: Ordering,
) -> Result<T, T> {
    // SAFETY: the caller must uphold the safety contract for `atomic_compare_exchange`.
    let (val, ok) = unsafe {
        match (success, failure) {
    16dc:	b2d8      	uxtb	r0, r3
    16de:	900b      	str	r0, [sp, #44]	@ 0x2c
    16e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    16e2:	e8df f001 	tbb	[pc, r1]
    16e6:	1304      	.short	0x1304
    16e8:	00493725 	.word	0x00493725
    16ec:	defe      	udf	#254	@ 0xfe
    16ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
    16f0:	b2c0      	uxtb	r0, r0
    16f2:	4601      	mov	r1, r0
    16f4:	9106      	str	r1, [sp, #24]
    16f6:	2800      	cmp	r0, #0
    16f8:	d056      	beq.n	17a8 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x104>
    16fa:	e7ff      	b.n	16fc <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x58>
    16fc:	9806      	ldr	r0, [sp, #24]
    16fe:	2802      	cmp	r0, #2
    1700:	d066      	beq.n	17d0 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x12c>
    1702:	e7ff      	b.n	1704 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x60>
    1704:	9806      	ldr	r0, [sp, #24]
    1706:	2804      	cmp	r0, #4
    1708:	d078      	beq.n	17fc <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x158>
    170a:	e047      	b.n	179c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xf8>
    170c:	980a      	ldr	r0, [sp, #40]	@ 0x28
    170e:	b2c0      	uxtb	r0, r0
    1710:	4601      	mov	r1, r0
    1712:	9105      	str	r1, [sp, #20]
    1714:	2800      	cmp	r0, #0
    1716:	f000 8095 	beq.w	1844 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x1a0>
    171a:	e7ff      	b.n	171c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x78>
    171c:	9805      	ldr	r0, [sp, #20]
    171e:	2802      	cmp	r0, #2
    1720:	f000 80a6 	beq.w	1870 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x1cc>
    1724:	e7ff      	b.n	1726 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x82>
    1726:	9805      	ldr	r0, [sp, #20]
    1728:	2804      	cmp	r0, #4
    172a:	f000 80b9 	beq.w	18a0 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x1fc>
    172e:	e035      	b.n	179c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xf8>
    1730:	980a      	ldr	r0, [sp, #40]	@ 0x28
    1732:	b2c0      	uxtb	r0, r0
    1734:	4601      	mov	r1, r0
    1736:	9104      	str	r1, [sp, #16]
    1738:	2800      	cmp	r0, #0
    173a:	f000 80c9 	beq.w	18d0 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x22c>
    173e:	e7ff      	b.n	1740 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x9c>
    1740:	9804      	ldr	r0, [sp, #16]
    1742:	2802      	cmp	r0, #2
    1744:	f000 80da 	beq.w	18fc <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x258>
    1748:	e7ff      	b.n	174a <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xa6>
    174a:	9804      	ldr	r0, [sp, #16]
    174c:	2804      	cmp	r0, #4
    174e:	f000 80eb 	beq.w	1928 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x284>
    1752:	e023      	b.n	179c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xf8>
    1754:	980a      	ldr	r0, [sp, #40]	@ 0x28
    1756:	b2c0      	uxtb	r0, r0
    1758:	4601      	mov	r1, r0
    175a:	9103      	str	r1, [sp, #12]
    175c:	2800      	cmp	r0, #0
    175e:	f000 80fb 	beq.w	1958 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x2b4>
    1762:	e7ff      	b.n	1764 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xc0>
    1764:	9803      	ldr	r0, [sp, #12]
    1766:	2802      	cmp	r0, #2
    1768:	f000 810e 	beq.w	1988 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x2e4>
    176c:	e7ff      	b.n	176e <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xca>
    176e:	9803      	ldr	r0, [sp, #12]
    1770:	2804      	cmp	r0, #4
    1772:	f000 8121 	beq.w	19b8 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x314>
    1776:	e011      	b.n	179c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xf8>
    1778:	980a      	ldr	r0, [sp, #40]	@ 0x28
    177a:	b2c0      	uxtb	r0, r0
    177c:	4601      	mov	r1, r0
    177e:	9102      	str	r1, [sp, #8]
    1780:	2800      	cmp	r0, #0
    1782:	f000 8131 	beq.w	19e8 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x344>
    1786:	e7ff      	b.n	1788 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xe4>
    1788:	9802      	ldr	r0, [sp, #8]
    178a:	2802      	cmp	r0, #2
    178c:	f000 8144 	beq.w	1a18 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x374>
    1790:	e7ff      	b.n	1792 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xee>
    1792:	9802      	ldr	r0, [sp, #8]
    1794:	2804      	cmp	r0, #4
    1796:	f000 8157 	beq.w	1a48 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x3a4>
    179a:	e7ff      	b.n	179c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0xf8>
    179c:	980a      	ldr	r0, [sp, #40]	@ 0x28
    179e:	b2c0      	uxtb	r0, r0
    17a0:	2801      	cmp	r0, #1
    17a2:	f000 8177 	beq.w	1a94 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x3f0>
    17a6:	e18f      	b.n	1ac8 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x424>
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
    17a8:	9808      	ldr	r0, [sp, #32]
    17aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    17ac:	f8dd c01c 	ldr.w	ip, [sp, #28]
    17b0:	e853 1f00 	ldrex	r1, [r3]
    17b4:	4501      	cmp	r1, r0
    17b6:	d103      	bne.n	17c0 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x11c>
    17b8:	e843 c200 	strex	r2, ip, [r3]
    17bc:	2a00      	cmp	r2, #0
    17be:	d1f7      	bne.n	17b0 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x10c>
    17c0:	1a08      	subs	r0, r1, r0
    17c2:	fab0 f080 	clz	r0, r0
    17c6:	0940      	lsrs	r0, r0, #5
    17c8:	910e      	str	r1, [sp, #56]	@ 0x38
    17ca:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    17ce:	e02d      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
    17d0:	9808      	ldr	r0, [sp, #32]
    17d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    17d4:	f8dd c01c 	ldr.w	ip, [sp, #28]
    17d8:	e853 1f00 	ldrex	r1, [r3]
    17dc:	4501      	cmp	r1, r0
    17de:	d103      	bne.n	17e8 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x144>
    17e0:	e843 c200 	strex	r2, ip, [r3]
    17e4:	2a00      	cmp	r2, #0
    17e6:	d1f7      	bne.n	17d8 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x134>
    17e8:	1a08      	subs	r0, r1, r0
    17ea:	fab0 f080 	clz	r0, r0
    17ee:	0940      	lsrs	r0, r0, #5
    17f0:	f3bf 8f5f 	dmb	sy
    17f4:	910e      	str	r1, [sp, #56]	@ 0x38
    17f6:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    17fa:	e017      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
    17fc:	9808      	ldr	r0, [sp, #32]
    17fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    1800:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1804:	f3bf 8f5f 	dmb	sy
    1808:	e853 1f00 	ldrex	r1, [r3]
    180c:	4501      	cmp	r1, r0
    180e:	d103      	bne.n	1818 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x174>
    1810:	e843 c200 	strex	r2, ip, [r3]
    1814:	2a00      	cmp	r2, #0
    1816:	d1f7      	bne.n	1808 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x164>
    1818:	1a08      	subs	r0, r1, r0
    181a:	fab0 f080 	clz	r0, r0
    181e:	0940      	lsrs	r0, r0, #5
    1820:	f3bf 8f5f 	dmb	sy
    1824:	910e      	str	r1, [sp, #56]	@ 0x38
    1826:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    182a:	e7ff      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
    let (val, ok) = unsafe {
    182c:	980e      	ldr	r0, [sp, #56]	@ 0x38
    182e:	9001      	str	r0, [sp, #4]
    1830:	9022      	str	r0, [sp, #136]	@ 0x88
    1832:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
    1836:	f807 0c01 	strb.w	r0, [r7, #-1]
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
            (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
        }
    };
    if ok { Ok(val) } else { Err(val) }
    183a:	07c0      	lsls	r0, r0, #31
    183c:	2800      	cmp	r0, #0
    183e:	f040 8120 	bne.w	1a82 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x3de>
    1842:	e119      	b.n	1a78 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x3d4>
            (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),
    1844:	9808      	ldr	r0, [sp, #32]
    1846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    1848:	f8dd c01c 	ldr.w	ip, [sp, #28]
    184c:	f3bf 8f5f 	dmb	sy
    1850:	e853 1f00 	ldrex	r1, [r3]
    1854:	4501      	cmp	r1, r0
    1856:	d103      	bne.n	1860 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x1bc>
    1858:	e843 c200 	strex	r2, ip, [r3]
    185c:	2a00      	cmp	r2, #0
    185e:	d1f7      	bne.n	1850 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x1ac>
    1860:	1a08      	subs	r0, r1, r0
    1862:	fab0 f080 	clz	r0, r0
    1866:	0940      	lsrs	r0, r0, #5
    1868:	910e      	str	r1, [sp, #56]	@ 0x38
    186a:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    186e:	e7dd      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),
    1870:	9808      	ldr	r0, [sp, #32]
    1872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    1874:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1878:	f3bf 8f5f 	dmb	sy
    187c:	e853 1f00 	ldrex	r1, [r3]
    1880:	4501      	cmp	r1, r0
    1882:	d103      	bne.n	188c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x1e8>
    1884:	e843 c200 	strex	r2, ip, [r3]
    1888:	2a00      	cmp	r2, #0
    188a:	d1f7      	bne.n	187c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x1d8>
    188c:	1a08      	subs	r0, r1, r0
    188e:	fab0 f080 	clz	r0, r0
    1892:	0940      	lsrs	r0, r0, #5
    1894:	f3bf 8f5f 	dmb	sy
    1898:	910e      	str	r1, [sp, #56]	@ 0x38
    189a:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    189e:	e7c5      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),
    18a0:	9808      	ldr	r0, [sp, #32]
    18a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    18a4:	f8dd c01c 	ldr.w	ip, [sp, #28]
    18a8:	f3bf 8f5f 	dmb	sy
    18ac:	e853 1f00 	ldrex	r1, [r3]
    18b0:	4501      	cmp	r1, r0
    18b2:	d103      	bne.n	18bc <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x218>
    18b4:	e843 c200 	strex	r2, ip, [r3]
    18b8:	2a00      	cmp	r2, #0
    18ba:	d1f7      	bne.n	18ac <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x208>
    18bc:	1a08      	subs	r0, r1, r0
    18be:	fab0 f080 	clz	r0, r0
    18c2:	0940      	lsrs	r0, r0, #5
    18c4:	f3bf 8f5f 	dmb	sy
    18c8:	910e      	str	r1, [sp, #56]	@ 0x38
    18ca:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    18ce:	e7ad      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
    18d0:	9808      	ldr	r0, [sp, #32]
    18d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    18d4:	f8dd c01c 	ldr.w	ip, [sp, #28]
    18d8:	e853 1f00 	ldrex	r1, [r3]
    18dc:	4501      	cmp	r1, r0
    18de:	d103      	bne.n	18e8 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x244>
    18e0:	e843 c200 	strex	r2, ip, [r3]
    18e4:	2a00      	cmp	r2, #0
    18e6:	d1f7      	bne.n	18d8 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x234>
    18e8:	1a08      	subs	r0, r1, r0
    18ea:	fab0 f080 	clz	r0, r0
    18ee:	0940      	lsrs	r0, r0, #5
    18f0:	f3bf 8f5f 	dmb	sy
    18f4:	910e      	str	r1, [sp, #56]	@ 0x38
    18f6:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    18fa:	e797      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
    18fc:	9808      	ldr	r0, [sp, #32]
    18fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    1900:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1904:	e853 1f00 	ldrex	r1, [r3]
    1908:	4501      	cmp	r1, r0
    190a:	d103      	bne.n	1914 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x270>
    190c:	e843 c200 	strex	r2, ip, [r3]
    1910:	2a00      	cmp	r2, #0
    1912:	d1f7      	bne.n	1904 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x260>
    1914:	1a08      	subs	r0, r1, r0
    1916:	fab0 f080 	clz	r0, r0
    191a:	0940      	lsrs	r0, r0, #5
    191c:	f3bf 8f5f 	dmb	sy
    1920:	910e      	str	r1, [sp, #56]	@ 0x38
    1922:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    1926:	e781      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),
    1928:	9808      	ldr	r0, [sp, #32]
    192a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    192c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1930:	f3bf 8f5f 	dmb	sy
    1934:	e853 1f00 	ldrex	r1, [r3]
    1938:	4501      	cmp	r1, r0
    193a:	d103      	bne.n	1944 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x2a0>
    193c:	e843 c200 	strex	r2, ip, [r3]
    1940:	2a00      	cmp	r2, #0
    1942:	d1f7      	bne.n	1934 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x290>
    1944:	1a08      	subs	r0, r1, r0
    1946:	fab0 f080 	clz	r0, r0
    194a:	0940      	lsrs	r0, r0, #5
    194c:	f3bf 8f5f 	dmb	sy
    1950:	910e      	str	r1, [sp, #56]	@ 0x38
    1952:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    1956:	e769      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),
    1958:	9808      	ldr	r0, [sp, #32]
    195a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    195c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1960:	f3bf 8f5f 	dmb	sy
    1964:	e853 1f00 	ldrex	r1, [r3]
    1968:	4501      	cmp	r1, r0
    196a:	d103      	bne.n	1974 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x2d0>
    196c:	e843 c200 	strex	r2, ip, [r3]
    1970:	2a00      	cmp	r2, #0
    1972:	d1f7      	bne.n	1964 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x2c0>
    1974:	1a08      	subs	r0, r1, r0
    1976:	fab0 f080 	clz	r0, r0
    197a:	0940      	lsrs	r0, r0, #5
    197c:	f3bf 8f5f 	dmb	sy
    1980:	910e      	str	r1, [sp, #56]	@ 0x38
    1982:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    1986:	e751      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),
    1988:	9808      	ldr	r0, [sp, #32]
    198a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    198c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1990:	f3bf 8f5f 	dmb	sy
    1994:	e853 1f00 	ldrex	r1, [r3]
    1998:	4501      	cmp	r1, r0
    199a:	d103      	bne.n	19a4 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x300>
    199c:	e843 c200 	strex	r2, ip, [r3]
    19a0:	2a00      	cmp	r2, #0
    19a2:	d1f7      	bne.n	1994 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x2f0>
    19a4:	1a08      	subs	r0, r1, r0
    19a6:	fab0 f080 	clz	r0, r0
    19aa:	0940      	lsrs	r0, r0, #5
    19ac:	f3bf 8f5f 	dmb	sy
    19b0:	910e      	str	r1, [sp, #56]	@ 0x38
    19b2:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    19b6:	e739      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),
    19b8:	9808      	ldr	r0, [sp, #32]
    19ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    19bc:	f8dd c01c 	ldr.w	ip, [sp, #28]
    19c0:	f3bf 8f5f 	dmb	sy
    19c4:	e853 1f00 	ldrex	r1, [r3]
    19c8:	4501      	cmp	r1, r0
    19ca:	d103      	bne.n	19d4 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x330>
    19cc:	e843 c200 	strex	r2, ip, [r3]
    19d0:	2a00      	cmp	r2, #0
    19d2:	d1f7      	bne.n	19c4 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x320>
    19d4:	1a08      	subs	r0, r1, r0
    19d6:	fab0 f080 	clz	r0, r0
    19da:	0940      	lsrs	r0, r0, #5
    19dc:	f3bf 8f5f 	dmb	sy
    19e0:	910e      	str	r1, [sp, #56]	@ 0x38
    19e2:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    19e6:	e721      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),
    19e8:	9808      	ldr	r0, [sp, #32]
    19ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    19ec:	f8dd c01c 	ldr.w	ip, [sp, #28]
    19f0:	f3bf 8f5f 	dmb	sy
    19f4:	e853 1f00 	ldrex	r1, [r3]
    19f8:	4501      	cmp	r1, r0
    19fa:	d103      	bne.n	1a04 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x360>
    19fc:	e843 c200 	strex	r2, ip, [r3]
    1a00:	2a00      	cmp	r2, #0
    1a02:	d1f7      	bne.n	19f4 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x350>
    1a04:	1a08      	subs	r0, r1, r0
    1a06:	fab0 f080 	clz	r0, r0
    1a0a:	0940      	lsrs	r0, r0, #5
    1a0c:	f3bf 8f5f 	dmb	sy
    1a10:	910e      	str	r1, [sp, #56]	@ 0x38
    1a12:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    1a16:	e709      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),
    1a18:	9808      	ldr	r0, [sp, #32]
    1a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    1a1c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1a20:	f3bf 8f5f 	dmb	sy
    1a24:	e853 1f00 	ldrex	r1, [r3]
    1a28:	4501      	cmp	r1, r0
    1a2a:	d103      	bne.n	1a34 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x390>
    1a2c:	e843 c200 	strex	r2, ip, [r3]
    1a30:	2a00      	cmp	r2, #0
    1a32:	d1f7      	bne.n	1a24 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x380>
    1a34:	1a08      	subs	r0, r1, r0
    1a36:	fab0 f080 	clz	r0, r0
    1a3a:	0940      	lsrs	r0, r0, #5
    1a3c:	f3bf 8f5f 	dmb	sy
    1a40:	910e      	str	r1, [sp, #56]	@ 0x38
    1a42:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    1a46:	e6f1      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
    1a48:	9808      	ldr	r0, [sp, #32]
    1a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    1a4c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1a50:	f3bf 8f5f 	dmb	sy
    1a54:	e853 1f00 	ldrex	r1, [r3]
    1a58:	4501      	cmp	r1, r0
    1a5a:	d103      	bne.n	1a64 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x3c0>
    1a5c:	e843 c200 	strex	r2, ip, [r3]
    1a60:	2a00      	cmp	r2, #0
    1a62:	d1f7      	bne.n	1a54 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x3b0>
    1a64:	1a08      	subs	r0, r1, r0
    1a66:	fab0 f080 	clz	r0, r0
    1a6a:	0940      	lsrs	r0, r0, #5
    1a6c:	f3bf 8f5f 	dmb	sy
    1a70:	910e      	str	r1, [sp, #56]	@ 0x38
    1a72:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    1a76:	e6d9      	b.n	182c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x188>
    if ok { Ok(val) } else { Err(val) }
    1a78:	9801      	ldr	r0, [sp, #4]
    1a7a:	900d      	str	r0, [sp, #52]	@ 0x34
    1a7c:	2001      	movs	r0, #1
    1a7e:	900c      	str	r0, [sp, #48]	@ 0x30
    1a80:	e004      	b.n	1a8c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x3e8>
    1a82:	9801      	ldr	r0, [sp, #4]
    1a84:	900d      	str	r0, [sp, #52]	@ 0x34
    1a86:	2000      	movs	r0, #0
    1a88:	900c      	str	r0, [sp, #48]	@ 0x30
    1a8a:	e7ff      	b.n	1a8c <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE+0x3e8>
}
    1a8c:	980c      	ldr	r0, [sp, #48]	@ 0x30
    1a8e:	990d      	ldr	r1, [sp, #52]	@ 0x34
    1a90:	b024      	add	sp, #144	@ 0x90
    1a92:	bd80      	pop	{r7, pc}
        const { assert!(N <= 1) };
        Arguments { pieces, fmt: None, args: &[] }
    1a94:	f64b 60e8 	movw	r0, #48872	@ 0xbee8
    1a98:	f2c0 0000 	movt	r0, #0
    1a9c:	9016      	str	r0, [sp, #88]	@ 0x58
    1a9e:	2001      	movs	r0, #1
    1aa0:	9017      	str	r0, [sp, #92]	@ 0x5c
    1aa2:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    1aa6:	f2c0 0000 	movt	r0, #0
    1aaa:	6801      	ldr	r1, [r0, #0]
    1aac:	6840      	ldr	r0, [r0, #4]
    1aae:	911a      	str	r1, [sp, #104]	@ 0x68
    1ab0:	901b      	str	r0, [sp, #108]	@ 0x6c
    1ab2:	2004      	movs	r0, #4
    1ab4:	9018      	str	r0, [sp, #96]	@ 0x60
    1ab6:	2000      	movs	r0, #0
    1ab8:	9019      	str	r0, [sp, #100]	@ 0x64
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
    1aba:	f64b 71c8 	movw	r1, #49096	@ 0xbfc8
    1abe:	f2c0 0100 	movt	r1, #0
    1ac2:	a816      	add	r0, sp, #88	@ 0x58
    1ac4:	f008 fcb2 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    1ac8:	f64b 7030 	movw	r0, #48944	@ 0xbf30
    1acc:	f2c0 0000 	movt	r0, #0
    1ad0:	9010      	str	r0, [sp, #64]	@ 0x40
    1ad2:	2001      	movs	r0, #1
    1ad4:	9011      	str	r0, [sp, #68]	@ 0x44
    1ad6:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    1ada:	f2c0 0000 	movt	r0, #0
    1ade:	6801      	ldr	r1, [r0, #0]
    1ae0:	6840      	ldr	r0, [r0, #4]
    1ae2:	9114      	str	r1, [sp, #80]	@ 0x50
    1ae4:	9015      	str	r0, [sp, #84]	@ 0x54
    1ae6:	2004      	movs	r0, #4
    1ae8:	9012      	str	r0, [sp, #72]	@ 0x48
    1aea:	2000      	movs	r0, #0
    1aec:	9013      	str	r0, [sp, #76]	@ 0x4c
            (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
    1aee:	f64b 71d8 	movw	r1, #49112	@ 0xbfd8
    1af2:	f2c0 0100 	movt	r1, #0
    1af6:	a810      	add	r0, sp, #64	@ 0x40
    1af8:	f008 fc98 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

00001afc <_ZN90_$LT$microbit_async_display_example..board..Microbit$u20$as$u20$core..default..Default$GT$7default17h038694f592831baeE>:
    ///
    /// # Example
    /// ```no_run
    /// let board = Microbit::default();
    /// ```
    fn default() -> Self {
    1afc:	b580      	push	{r7, lr}
    1afe:	466f      	mov	r7, sp
    1b00:	b084      	sub	sp, #16
        Self::new(Default::default())
    1b02:	9000      	str	r0, [sp, #0]
    1b04:	1fb8      	subs	r0, r7, #6
    1b06:	9001      	str	r0, [sp, #4]
    1b08:	f004 fa0f 	bl	5f2a <_ZN70_$LT$embassy_nrf..config..Config$u20$as$u20$core..default..Default$GT$7default17hf5f331165a1fac15E>
    1b0c:	9800      	ldr	r0, [sp, #0]
    1b0e:	9901      	ldr	r1, [sp, #4]
    1b10:	f000 f802 	bl	1b18 <_ZN30microbit_async_display_example5board8Microbit3new17h648d50a28a9942e3E>
    }
    1b14:	b004      	add	sp, #16
    1b16:	bd80      	pop	{r7, pc}

00001b18 <_ZN30microbit_async_display_example5board8Microbit3new17h648d50a28a9942e3E>:
    /// ```no_run
    /// let mut config = embassy_nrf::config::Config::default();
    /// config.hfclk_source = embassy_nrf::config::HfclkSource::Internal;
    /// let board = Microbit::new(config);
    /// ```
    pub fn new(config: embassy_nrf::config::Config) -> Self {
    1b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1a:	af03      	add	r7, sp, #12
    1b1c:	f84d 8d04 	str.w	r8, [sp, #-4]!
    1b20:	b0a0      	sub	sp, #128	@ 0x80
    1b22:	9101      	str	r1, [sp, #4]
    1b24:	4601      	mov	r1, r0
        let p = embassy_nrf::init(config);
    1b26:	9801      	ldr	r0, [sp, #4]
    1b28:	910d      	str	r1, [sp, #52]	@ 0x34
    1b2a:	f002 fb3f 	bl	41ac <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE>
        // LED Matrix
        let rows = [
            output_pin(p.P0_21.degrade()),
    1b2e:	f003 f8d7 	bl	4ce0 <_ZN11embassy_nrf4gpio3Pin7degrade17hb30ccf8511e366e5E>
    1b32:	f000 f87f 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
            output_pin(p.P0_22.degrade()),
    1b36:	9002      	str	r0, [sp, #8]
    1b38:	f003 f8aa 	bl	4c90 <_ZN11embassy_nrf4gpio3Pin7degrade17h3ad8195b8553f21dE>
    1b3c:	f000 f87a 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
            output_pin(p.P0_15.degrade()),
    1b40:	9003      	str	r0, [sp, #12]
    1b42:	f003 f885 	bl	4c50 <_ZN11embassy_nrf4gpio3Pin7degrade17h046f9cf7caa18818E>
    1b46:	f000 f875 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
            output_pin(p.P0_24.degrade()),
    1b4a:	9004      	str	r0, [sp, #16]
    1b4c:	f003 f898 	bl	4c80 <_ZN11embassy_nrf4gpio3Pin7degrade17h38f6c5df68e9b4b2E>
    1b50:	f000 f870 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
            output_pin(p.P0_19.degrade()),
    1b54:	9005      	str	r0, [sp, #20]
    1b56:	f003 f8a3 	bl	4ca0 <_ZN11embassy_nrf4gpio3Pin7degrade17h42afd42e9c0dc241E>
    1b5a:	f000 f86b 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
    1b5e:	f8dd c008 	ldr.w	ip, [sp, #8]
    1b62:	9b03      	ldr	r3, [sp, #12]
    1b64:	9a04      	ldr	r2, [sp, #16]
    1b66:	9905      	ldr	r1, [sp, #20]
        let rows = [
    1b68:	f807 cc56 	strb.w	ip, [r7, #-86]
    1b6c:	f807 3c55 	strb.w	r3, [r7, #-85]
    1b70:	f807 2c54 	strb.w	r2, [r7, #-84]
    1b74:	f807 1c53 	strb.w	r1, [r7, #-83]
    1b78:	f807 0c52 	strb.w	r0, [r7, #-82]
        ];

        let cols = [
            output_pin(p.P0_28.degrade()),
    1b7c:	f003 f8b8 	bl	4cf0 <_ZN11embassy_nrf4gpio3Pin7degrade17hd389a42720d795eeE>
    1b80:	f000 f858 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
            output_pin(p.P0_11.degrade()),
    1b84:	9006      	str	r0, [sp, #24]
    1b86:	f003 f86b 	bl	4c60 <_ZN11embassy_nrf4gpio3Pin7degrade17h263a5ced7163a376E>
    1b8a:	f000 f853 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
            output_pin(p.P0_31.degrade()),
    1b8e:	9007      	str	r0, [sp, #28]
    1b90:	f003 f89e 	bl	4cd0 <_ZN11embassy_nrf4gpio3Pin7degrade17ha383c0f0d170054eE>
    1b94:	f000 f84e 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
            output_pin(p.P1_05.degrade()),
    1b98:	9008      	str	r0, [sp, #32]
    1b9a:	f003 f891 	bl	4cc0 <_ZN11embassy_nrf4gpio3Pin7degrade17h79bd1e0fe83ad1bcE>
    1b9e:	f000 f849 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
            output_pin(p.P0_30.degrade()),
    1ba2:	9009      	str	r0, [sp, #36]	@ 0x24
    1ba4:	f003 f864 	bl	4c70 <_ZN11embassy_nrf4gpio3Pin7degrade17h28ebe9bae66a1dd3E>
    1ba8:	f000 f844 	bl	1c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>
    1bac:	f8dd c018 	ldr.w	ip, [sp, #24]
    1bb0:	9b07      	ldr	r3, [sp, #28]
    1bb2:	9a08      	ldr	r2, [sp, #32]
    1bb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
        let cols = [
    1bb6:	f807 cc51 	strb.w	ip, [r7, #-81]
    1bba:	f807 3c50 	strb.w	r3, [r7, #-80]
    1bbe:	f807 2c4f 	strb.w	r2, [r7, #-79]
    1bc2:	f807 1c4e 	strb.w	r1, [r7, #-78]
    1bc6:	f807 0c4d 	strb.w	r0, [r7, #-77]
    1bca:	a811      	add	r0, sp, #68	@ 0x44
    1bcc:	900b      	str	r0, [sp, #44]	@ 0x2c
    1bce:	f1a7 0156 	sub.w	r1, r7, #86	@ 0x56
    1bd2:	f1a7 0251 	sub.w	r2, r7, #81	@ 0x51
        ];

        Self {
            display: LedMatrixDriver::new(rows, cols),
    1bd6:	f7fe ff56 	bl	a86 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$3new17hf46a222811fa3cf4E>
            btn_a: Input::new(p.P0_14.degrade(), Pull::None),
    1bda:	f003 f869 	bl	4cb0 <_ZN11embassy_nrf4gpio3Pin7degrade17h47017b31f21f41a4E>
    1bde:	2100      	movs	r1, #0
    1be0:	910a      	str	r1, [sp, #40]	@ 0x28
    1be2:	f807 1c13 	strb.w	r1, [r7, #-19]
    1be6:	f817 1c13 	ldrb.w	r1, [r7, #-19]
    1bea:	f001 fa49 	bl	3080 <_ZN11embassy_nrf4gpio5Input3new17h1bfec48e2faf3f52E>
            btn_b: Input::new(p.P0_23.degrade(), Pull::None),
    1bee:	900c      	str	r0, [sp, #48]	@ 0x30
    1bf0:	f003 f826 	bl	4c40 <_ZN11embassy_nrf4gpio3Pin7degrade17h01c132438600ad08E>
    1bf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
    1bf6:	f807 1c12 	strb.w	r1, [r7, #-18]
    1bfa:	f817 1c12 	ldrb.w	r1, [r7, #-18]
    1bfe:	f001 fa3f 	bl	3080 <_ZN11embassy_nrf4gpio5Input3new17h1bfec48e2faf3f52E>
    1c02:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
    1c06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    1c08:	990d      	ldr	r1, [sp, #52]	@ 0x34
        Self {
    1c0a:	460b      	mov	r3, r1
    1c0c:	e8bc 4070 	ldmia.w	ip!, {r4, r5, r6, lr}
    1c10:	e8a3 4070 	stmia.w	r3!, {r4, r5, r6, lr}
    1c14:	e8bc 4170 	ldmia.w	ip!, {r4, r5, r6, r8, lr}
    1c18:	e8a3 4170 	stmia.w	r3!, {r4, r5, r6, r8, lr}
    1c1c:	e89c 4170 	ldmia.w	ip, {r4, r5, r6, r8, lr}
    1c20:	e883 4170 	stmia.w	r3, {r4, r5, r6, r8, lr}
    1c24:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
    1c28:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
            pwm2: p.PWM2,
            pwm3: p.PWM3,
            rng: p.RNG,
            saadc: p.SAADC,
        }
    }
    1c2c:	b020      	add	sp, #128	@ 0x80
    1c2e:	f85d 8b04 	ldr.w	r8, [sp], #4
    1c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c34 <_ZN30microbit_async_display_example5board10output_pin17hb5e4c2b744808fb5E>:
/// # Returns
/// A configured `Output` pin ready for use
///
/// # Usage
/// This function is used internally to configure the LED matrix row and column pins.
fn output_pin(pin: AnyPin) -> Output<'static> {
    1c34:	b580      	push	{r7, lr}
    1c36:	466f      	mov	r7, sp
    1c38:	b082      	sub	sp, #8
    1c3a:	f807 0c01 	strb.w	r0, [r7, #-1]
    1c3e:	2100      	movs	r1, #0
    Output::new(pin, Level::Low, OutputDrive::Standard)
    1c40:	f807 1c03 	strb.w	r1, [r7, #-3]
    1c44:	f807 1c02 	strb.w	r1, [r7, #-2]
    1c48:	f817 1c03 	ldrb.w	r1, [r7, #-3]
    1c4c:	f817 2c02 	ldrb.w	r2, [r7, #-2]
    1c50:	f001 fa2a 	bl	30a8 <_ZN11embassy_nrf4gpio6Output3new17hd692aeb55207d18bE>
}
    1c54:	b002      	add	sp, #8
    1c56:	bd80      	pop	{r7, pc}

00001c58 <_ZN5defmt6export11into_result17hdf4031145057e60aE>:
pub fn into_result<T: traits::IntoResult>(x: T) -> Result<T::Ok, T::Error> {
    1c58:	b580      	push	{r7, lr}
    1c5a:	466f      	mov	r7, sp
    1c5c:	b082      	sub	sp, #8
    1c5e:	f807 0c01 	strb.w	r0, [r7, #-1]
    x.into_result()
    1c62:	f001 f8ab 	bl	2dbc <_ZN87_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$defmt..export..traits..IntoResult$GT$11into_result17h0a61fded342268acE>
}
    1c66:	b002      	add	sp, #8
    1c68:	bd80      	pop	{r7, pc}

00001c6a <_ZN5defmt6export3fmt17h656bee50977e5e37E>:
}

/// Implementation detail
pub fn fmt<T: Format + ?Sized>(f: &T) {
    1c6a:	b580      	push	{r7, lr}
    1c6c:	466f      	mov	r7, sp
    1c6e:	b084      	sub	sp, #16
    1c70:	9001      	str	r0, [sp, #4]
    1c72:	9003      	str	r0, [sp, #12]
    istr(&T::_format_tag());
    1c74:	f007 fe84 	bl	9980 <_ZN79_$LT$embassy_executor..spawner..SpawnError$u20$as$u20$defmt..traits..Format$GT$11_format_tag17hb60d30816bd64b53E>
    1c78:	f827 0c06 	strh.w	r0, [r7, #-6]
    1c7c:	1fb8      	subs	r0, r7, #6
    1c7e:	f008 f8d1 	bl	9e24 <_ZN5defmt6export4istr17h6a3148ca5bdcd2a2E>
    1c82:	9801      	ldr	r0, [sp, #4]
    f._format_data();
    1c84:	f007 fe85 	bl	9992 <_ZN79_$LT$embassy_executor..spawner..SpawnError$u20$as$u20$defmt..traits..Format$GT$12_format_data17ha405255581f7b4d4E>
}
    1c88:	b004      	add	sp, #16
    1c8a:	bd80      	pop	{r7, pc}

00001c8c <_ZN5defmt6export3fmt17hb6bcda53adefe2a9E>:
pub fn fmt<T: Format + ?Sized>(f: &T) {
    1c8c:	b580      	push	{r7, lr}
    1c8e:	466f      	mov	r7, sp
    1c90:	b084      	sub	sp, #16
    1c92:	9001      	str	r0, [sp, #4]
    1c94:	9003      	str	r0, [sp, #12]
    istr(&T::_format_tag());
    1c96:	f000 fc4f 	bl	2538 <_ZN5defmt5impls10primitives57_$LT$impl$u20$defmt..traits..Format$u20$for$u20$$RF$T$GT$11_format_tag17hdf571e4e0b25c09bE>
    1c9a:	f827 0c06 	strh.w	r0, [r7, #-6]
    1c9e:	1fb8      	subs	r0, r7, #6
    1ca0:	f008 f8c0 	bl	9e24 <_ZN5defmt6export4istr17h6a3148ca5bdcd2a2E>
    1ca4:	9801      	ldr	r0, [sp, #4]
    f._format_data();
    1ca6:	f000 fc4c 	bl	2542 <_ZN5defmt5impls10primitives57_$LT$impl$u20$defmt..traits..Format$u20$for$u20$$RF$T$GT$12_format_data17hf97a35e56888da7bE>
}
    1caa:	b004      	add	sp, #16
    1cac:	bd80      	pop	{r7, pc}
    1cae:	d4d4      	bmi.n	1c5a <_ZN5defmt6export11into_result17hdf4031145057e60aE+0x2>

00001cb0 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E>:
/// the entry point for the Embassy async runtime. The executor handles:
/// - Task scheduling and timing
/// - Interrupt-driven I/O
/// - Power management during idle periods
/// - Async/await coordination
#[embassy_executor::main]
    1cb0:	b5d0      	push	{r4, r6, r7, lr}
    1cb2:	af02      	add	r7, sp, #8
    1cb4:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
    1cb8:	910d      	str	r1, [sp, #52]	@ 0x34
    1cba:	900f      	str	r0, [sp, #60]	@ 0x3c
    1cbc:	f847 1c28 	str.w	r1, [r7, #-40]
    1cc0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1cc2:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
    1cc6:	900e      	str	r0, [sp, #56]	@ 0x38
    1cc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
    1cca:	e8df f001 	tbb	[pc, r1]
    1cce:	0405      	.short	0x0405
    1cd0:	4a464204 	.word	0x4a464204
    1cd4:	004e      	.short	0x004e
    1cd6:	defe      	udf	#254	@ 0xfe
    1cd8:	980d      	ldr	r0, [sp, #52]	@ 0x34
    1cda:	f847 0c2c 	str.w	r0, [r7, #-44]
async fn main(_spawner: Spawner) {
    1cde:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1ce0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
    1ce2:	f847 0c20 	str.w	r0, [r7, #-32]
    1ce6:	a811      	add	r0, sp, #68	@ 0x44
    let board = Microbit::default();
    1ce8:	900a      	str	r0, [sp, #40]	@ 0x28
    1cea:	f7ff ff07 	bl	1afc <_ZN90_$LT$microbit_async_display_example..board..Microbit$u20$as$u20$core..default..Default$GT$7default17h038694f592831baeE>
    1cee:	990a      	ldr	r1, [sp, #40]	@ 0x28

    let mut display = board.display;
    1cf0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1cf2:	e8b1 500c 	ldmia.w	r1!, {r2, r3, ip, lr}
    1cf6:	e8a0 500c 	stmia.w	r0!, {r2, r3, ip, lr}
    1cfa:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    1cfe:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    1d02:	e891 501c 	ldmia.w	r1, {r2, r3, r4, ip, lr}
    1d06:	e880 501c 	stmia.w	r0, {r2, r3, r4, ip, lr}
    let mut btn_a = board.btn_a;
    1d0a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1d0c:	f89d 007c 	ldrb.w	r0, [sp, #124]	@ 0x7c
    1d10:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
    let mut btn_b = board.btn_b;
    1d14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1d16:	f89d 007d 	ldrb.w	r0, [sp, #125]	@ 0x7d
    1d1a:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d

    display.set_brightness(Brightness::MAX);
    1d1e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1d20:	210a      	movs	r1, #10
    1d22:	f7fe ff2a 	bl	b7a <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$14set_brightness17h6b9aafaaf56ca5aaE>
    display.scroll("Hello, World!").await;
    1d26:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1d28:	f64b 72e8 	movw	r2, #49128	@ 0xbfe8
    1d2c:	f2c0 0200 	movt	r2, #0
    1d30:	a842      	add	r0, sp, #264	@ 0x108
    1d32:	900b      	str	r0, [sp, #44]	@ 0x2c
    1d34:	230d      	movs	r3, #13
    1d36:	f7ff f8c0 	bl	eba <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll17hb28bce8910432fa3E>
    1d3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    1d3c:	a820      	add	r0, sp, #128	@ 0x80
    1d3e:	900c      	str	r0, [sp, #48]	@ 0x30
    1d40:	f7fe fe95 	bl	a6e <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h90e0f18db2d5d939E>
    1d44:	990c      	ldr	r1, [sp, #48]	@ 0x30
    1d46:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1d48:	3040      	adds	r0, #64	@ 0x40
    1d4a:	2288      	movs	r2, #136	@ 0x88
    1d4c:	f009 fc75 	bl	b63a <__aeabi_memcpy8>
    1d50:	e00f      	b.n	1d72 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0xc2>
    1d52:	980d      	ldr	r0, [sp, #52]	@ 0x34
    1d54:	f847 0c2c 	str.w	r0, [r7, #-44]
    1d58:	e00b      	b.n	1d72 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0xc2>
    defmt::info!("Application started, press buttons!");
    loop {
        match select(btn_a.wait_for_low(), btn_b.wait_for_low()).await {
    1d5a:	980d      	ldr	r0, [sp, #52]	@ 0x34
    1d5c:	f847 0c2c 	str.w	r0, [r7, #-44]
    1d60:	e053      	b.n	1e0a <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x15a>
            Either::First(_) => {
                handle_button_a_press(&mut display).await;
    1d62:	980d      	ldr	r0, [sp, #52]	@ 0x34
    1d64:	f847 0c2c 	str.w	r0, [r7, #-44]
    1d68:	e05e      	b.n	1e28 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x178>
            }
            Either::Second(_) => {
                handle_button_b_press(&mut display).await;
    1d6a:	980d      	ldr	r0, [sp, #52]	@ 0x34
    1d6c:	f847 0c2c 	str.w	r0, [r7, #-44]
    1d70:	e065      	b.n	1e3e <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x18e>
    display.scroll("Hello, World!").await;
    1d72:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1d74:	3040      	adds	r0, #64	@ 0x40
    1d76:	f847 0c0c 	str.w	r0, [r7, #-12]
    1d7a:	f857 1c2c 	ldr.w	r1, [r7, #-44]
    1d7e:	f7ff f8ae 	bl	ede <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$6scroll28_$u7b$$u7b$closure$u7d$$u7d$17h10d4be5fd8465005E>
    1d82:	b160      	cbz	r0, 1d9e <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0xee>
    1d84:	e7ff      	b.n	1d86 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0xd6>
    1d86:	2001      	movs	r0, #1
    1d88:	f88d 0043 	strb.w	r0, [sp, #67]	@ 0x43
    1d8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1d8e:	2003      	movs	r0, #3
    1d90:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
    1d94:	f89d 0043 	ldrb.w	r0, [sp, #67]	@ 0x43
    1d98:	f50d 6d94 	add.w	sp, sp, #1184	@ 0x4a0
    1d9c:	bdd0      	pop	{r4, r6, r7, pc}
    1d9e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1da0:	3040      	adds	r0, #64	@ 0x40
    1da2:	f000 fcae 	bl	2702 <_ZN4core3ptr161drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll..$u7b$$u7b$closure$u7d$$u7d$$GT$17h85843f94cba3737aE>
    defmt::info!("Application started, press buttons!");
    1da6:	f240 0003 	movw	r0, #3
    1daa:	f2c0 0000 	movt	r0, #0
    1dae:	f008 f818 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    1db2:	f8ad 0192 	strh.w	r0, [sp, #402]	@ 0x192
    1db6:	f50d 70c9 	add.w	r0, sp, #402	@ 0x192
    1dba:	f008 f881 	bl	9ec0 <_ZN5defmt6export26acquire_header_and_release17h7ce8ef2ffd00dd1bE>
    1dbe:	e7ff      	b.n	1dc0 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x110>
        match select(btn_a.wait_for_low(), btn_b.wait_for_low()).await {
    1dc0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1dc2:	f100 013c 	add.w	r1, r0, #60	@ 0x3c
    1dc6:	a875      	add	r0, sp, #468	@ 0x1d4
    1dc8:	9006      	str	r0, [sp, #24]
    1dca:	f002 f8d8 	bl	3f7e <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low17hbef67e97154e93c2E>
    1dce:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1dd0:	f100 013d 	add.w	r1, r0, #61	@ 0x3d
    1dd4:	a879      	add	r0, sp, #484	@ 0x1e4
    1dd6:	9007      	str	r0, [sp, #28]
    1dd8:	f002 f8d1 	bl	3f7e <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low17hbef67e97154e93c2E>
    1ddc:	9906      	ldr	r1, [sp, #24]
    1dde:	9a07      	ldr	r2, [sp, #28]
    1de0:	a86d      	add	r0, sp, #436	@ 0x1b4
    1de2:	9008      	str	r0, [sp, #32]
    1de4:	f000 f94b 	bl	207e <_ZN15embassy_futures6select6select17hf183cd5b3a37f702E>
    1de8:	9908      	ldr	r1, [sp, #32]
    1dea:	a865      	add	r0, sp, #404	@ 0x194
    1dec:	9009      	str	r0, [sp, #36]	@ 0x24
    1dee:	f000 f966 	bl	20be <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h3559e0cd8cd639c6E>
    1df2:	9909      	ldr	r1, [sp, #36]	@ 0x24
    1df4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1df6:	3040      	adds	r0, #64	@ 0x40
    1df8:	e8b1 500c 	ldmia.w	r1!, {r2, r3, ip, lr}
    1dfc:	e8a0 500c 	stmia.w	r0!, {r2, r3, ip, lr}
    1e00:	e891 500c 	ldmia.w	r1, {r2, r3, ip, lr}
    1e04:	e880 500c 	stmia.w	r0, {r2, r3, ip, lr}
    1e08:	e7ff      	b.n	1e0a <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x15a>
    1e0a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1e0c:	3040      	adds	r0, #64	@ 0x40
    1e0e:	f847 0c10 	str.w	r0, [r7, #-16]
    1e12:	f857 1c2c 	ldr.w	r1, [r7, #-44]
    1e16:	f000 f95d 	bl	20d4 <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E>
    1e1a:	f88d 01f7 	strb.w	r0, [sp, #503]	@ 0x1f7
    1e1e:	f89d 01f7 	ldrb.w	r0, [sp, #503]	@ 0x1f7
    1e22:	2802      	cmp	r0, #2
    1e24:	d026      	beq.n	1e74 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x1c4>
    1e26:	e031      	b.n	1e8c <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x1dc>
                handle_button_a_press(&mut display).await;
    1e28:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1e2a:	3040      	adds	r0, #64	@ 0x40
    1e2c:	f847 0c14 	str.w	r0, [r7, #-20]
    1e30:	f857 1c2c 	ldr.w	r1, [r7, #-44]
    1e34:	f000 fa2e 	bl	2294 <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E>
    1e38:	2800      	cmp	r0, #0
    1e3a:	d156      	bne.n	1eea <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x23a>
    1e3c:	e061      	b.n	1f02 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x252>
                handle_button_b_press(&mut display).await;
    1e3e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1e40:	3040      	adds	r0, #64	@ 0x40
    1e42:	f847 0c18 	str.w	r0, [r7, #-24]
    1e46:	f857 1c2c 	ldr.w	r1, [r7, #-44]
    1e4a:	f000 fa93 	bl	2374 <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE>
    1e4e:	b160      	cbz	r0, 1e6a <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x1ba>
    1e50:	e7ff      	b.n	1e52 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x1a2>
    1e52:	2001      	movs	r0, #1
    1e54:	f88d 0043 	strb.w	r0, [sp, #67]	@ 0x43
    1e58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1e5a:	2006      	movs	r0, #6
    1e5c:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
    1e60:	f89d 0043 	ldrb.w	r0, [sp, #67]	@ 0x43
    1e64:	f50d 6d94 	add.w	sp, sp, #1184	@ 0x4a0
    1e68:	bdd0      	pop	{r4, r6, r7, pc}
    1e6a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1e6c:	3040      	adds	r0, #64	@ 0x40
    1e6e:	f000 fbf2 	bl	2656 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_b_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4fdc53954e00fc5dE>
    1e72:	e7a5      	b.n	1dc0 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x110>
    1e74:	2001      	movs	r0, #1
        match select(btn_a.wait_for_low(), btn_b.wait_for_low()).await {
    1e76:	f88d 0043 	strb.w	r0, [sp, #67]	@ 0x43
    1e7a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1e7c:	2004      	movs	r0, #4
    1e7e:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
    1e82:	f89d 0043 	ldrb.w	r0, [sp, #67]	@ 0x43
    1e86:	f50d 6d94 	add.w	sp, sp, #1184	@ 0x4a0
    1e8a:	bdd0      	pop	{r4, r6, r7, pc}
    1e8c:	f89d 01f7 	ldrb.w	r0, [sp, #503]	@ 0x1f7
    1e90:	9005      	str	r0, [sp, #20]
    1e92:	f807 0c19 	strb.w	r0, [r7, #-25]
    1e96:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1e98:	3040      	adds	r0, #64	@ 0x40
    1e9a:	f000 fc8c 	bl	27b6 <_ZN4core3ptr273drop_in_place$LT$embassy_futures..select..Select$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$C$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$17h39035fe5402c4c5aE>
    1e9e:	9805      	ldr	r0, [sp, #20]
    1ea0:	07c0      	lsls	r0, r0, #31
    1ea2:	b188      	cbz	r0, 1ec8 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x218>
    1ea4:	e7ff      	b.n	1ea6 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x1f6>
                handle_button_b_press(&mut display).await;
    1ea6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1ea8:	a8f6      	add	r0, sp, #984	@ 0x3d8
    1eaa:	9003      	str	r0, [sp, #12]
    1eac:	f000 ffba 	bl	2e24 <_ZN30microbit_async_display_example6button21handle_button_b_press17ha46feb442fbaf9a9E>
    1eb0:	9903      	ldr	r1, [sp, #12]
    1eb2:	a8ce      	add	r0, sp, #824	@ 0x338
    1eb4:	9004      	str	r0, [sp, #16]
    1eb6:	f000 f945 	bl	2144 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h56932797be1dea54E>
    1eba:	9904      	ldr	r1, [sp, #16]
    1ebc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1ebe:	3040      	adds	r0, #64	@ 0x40
    1ec0:	22a0      	movs	r2, #160	@ 0xa0
    1ec2:	f009 fbba 	bl	b63a <__aeabi_memcpy8>
    1ec6:	e7ba      	b.n	1e3e <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x18e>
                handle_button_a_press(&mut display).await;
    1ec8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1eca:	a8a6      	add	r0, sp, #664	@ 0x298
    1ecc:	9001      	str	r0, [sp, #4]
    1ece:	f000 ff9b 	bl	2e08 <_ZN30microbit_async_display_example6button21handle_button_a_press17hee6c5341e3c2e2baE>
    1ed2:	9901      	ldr	r1, [sp, #4]
    1ed4:	a87e      	add	r0, sp, #504	@ 0x1f8
    1ed6:	9002      	str	r0, [sp, #8]
    1ed8:	f000 f92e 	bl	2138 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h4688f24b45962794E>
    1edc:	9902      	ldr	r1, [sp, #8]
    1ede:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1ee0:	3040      	adds	r0, #64	@ 0x40
    1ee2:	22a0      	movs	r2, #160	@ 0xa0
    1ee4:	f009 fba9 	bl	b63a <__aeabi_memcpy8>
    1ee8:	e79e      	b.n	1e28 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x178>
    1eea:	2001      	movs	r0, #1
    1eec:	f88d 0043 	strb.w	r0, [sp, #67]	@ 0x43
    1ef0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    1ef2:	2005      	movs	r0, #5
    1ef4:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
    1ef8:	f89d 0043 	ldrb.w	r0, [sp, #67]	@ 0x43
    1efc:	f50d 6d94 	add.w	sp, sp, #1184	@ 0x4a0
    1f00:	bdd0      	pop	{r4, r6, r7, pc}
    1f02:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    1f04:	3040      	adds	r0, #64	@ 0x40
    1f06:	f000 fb8e 	bl	2626 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_a_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17ha00e66515095156bE>
    1f0a:	e759      	b.n	1dc0 <_ZN30microbit_async_display_example21____embassy_main_task28_$u7b$$u7b$closure$u7d$$u7d$17h5f7f56bc54b55794E+0x110>

00001f0c <_ZN30microbit_async_display_example14__embassy_main28_$u7b$$u7b$closure$u7d$$u7d$17h63f3b2467cca3291E>:
#[embassy_executor::main]
    1f0c:	b580      	push	{r7, lr}
    1f0e:	466f      	mov	r7, sp
    1f10:	b082      	sub	sp, #8
    1f12:	9101      	str	r1, [sp, #4]
    1f14:	f000 f815 	bl	1f42 <_ZN30microbit_async_display_example21____embassy_main_task17h310dce9c875c5abdE>
    1f18:	b002      	add	sp, #8
    1f1a:	bd80      	pop	{r7, pc}

00001f1c <_ZN30microbit_async_display_example18__cortex_m_rt_main13__make_static17hcd078f9d8ccbce0dE>:
    1f1c:	b580      	push	{r7, lr}
    1f1e:	466f      	mov	r7, sp
    1f20:	b081      	sub	sp, #4
    1f22:	9000      	str	r0, [sp, #0]
    1f24:	b001      	add	sp, #4
    1f26:	bd80      	pop	{r7, pc}

00001f28 <_ZN30microbit_async_display_example18__cortex_m_rt_main28_$u7b$$u7b$closure$u7d$$u7d$17h896f7c19bfe0cb50E>:
    1f28:	b580      	push	{r7, lr}
    1f2a:	466f      	mov	r7, sp
    1f2c:	b082      	sub	sp, #8
    1f2e:	9000      	str	r0, [sp, #0]
    1f30:	9800      	ldr	r0, [sp, #0]
    1f32:	f000 f813 	bl	1f5c <_ZN30microbit_async_display_example14__embassy_main17h3761b8d6293c33d6E>
    1f36:	4601      	mov	r1, r0
    1f38:	4668      	mov	r0, sp
    1f3a:	f000 ff91 	bl	2e60 <_ZN16embassy_executor7spawner7Spawner10must_spawn17hfa47033edf7cc1b8E>
    1f3e:	b002      	add	sp, #8
    1f40:	bd80      	pop	{r7, pc}

00001f42 <_ZN30microbit_async_display_example21____embassy_main_task17h310dce9c875c5abdE>:
    1f42:	b580      	push	{r7, lr}
    1f44:	466f      	mov	r7, sp
    1f46:	b082      	sub	sp, #8
    1f48:	9100      	str	r1, [sp, #0]
    1f4a:	4601      	mov	r1, r0
    1f4c:	9800      	ldr	r0, [sp, #0]
    1f4e:	9001      	str	r0, [sp, #4]
    1f50:	6388      	str	r0, [r1, #56]	@ 0x38
    1f52:	2000      	movs	r0, #0
    1f54:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
    1f58:	b002      	add	sp, #8
    1f5a:	bd80      	pop	{r7, pc}

00001f5c <_ZN30microbit_async_display_example14__embassy_main17h3761b8d6293c33d6E>:
    1f5c:	b580      	push	{r7, lr}
    1f5e:	466f      	mov	r7, sp
    1f60:	b084      	sub	sp, #16
    1f62:	9001      	str	r0, [sp, #4]
    1f64:	9003      	str	r0, [sp, #12]
    1f66:	f240 0050 	movw	r0, #80	@ 0x50
    1f6a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    1f6e:	f7fe fb86 	bl	67e <_ZN16embassy_executor7_export11TaskPoolRef3get17h2a7433025a7916ccE>
    1f72:	9901      	ldr	r1, [sp, #4]
    1f74:	9102      	str	r1, [sp, #8]
    1f76:	9902      	ldr	r1, [sp, #8]
    1f78:	f7fe fadd 	bl	536 <_ZN16embassy_executor3raw21TaskPool$LT$F$C$_$GT$15_spawn_async_fn17h1601693635614615E>
    1f7c:	b004      	add	sp, #16
    1f7e:	bd80      	pop	{r7, pc}

00001f80 <main>:
    1f80:	b580      	push	{r7, lr}
    1f82:	466f      	mov	r7, sp
    1f84:	f000 f800 	bl	1f88 <_ZN30microbit_async_display_example18__cortex_m_rt_main17h00ef583cce6b19d8E>

00001f88 <_ZN30microbit_async_display_example18__cortex_m_rt_main17h00ef583cce6b19d8E>:
    1f88:	b580      	push	{r7, lr}
    1f8a:	466f      	mov	r7, sp
    1f8c:	b084      	sub	sp, #16
    1f8e:	a801      	add	r0, sp, #4
    1f90:	9000      	str	r0, [sp, #0]
    1f92:	f007 fa8c 	bl	94ae <_ZN16embassy_executor4arch6thread8Executor3new17h270c35b6a8c0be72E>
    1f96:	9800      	ldr	r0, [sp, #0]
    1f98:	f7ff ffc0 	bl	1f1c <_ZN30microbit_async_display_example18__cortex_m_rt_main13__make_static17hcd078f9d8ccbce0dE>
    1f9c:	9003      	str	r0, [sp, #12]
    1f9e:	f7fe fa43 	bl	428 <_ZN16embassy_executor4arch6thread8Executor3run17h88665bb70e3781baE>

00001fa2 <_ZN5defmt5impls10primitives55_$LT$impl$u20$defmt..traits..Format$u20$for$u20$str$GT$11_format_tag17h283c06a84b929d89E>:
    ($ty:ty, $fmt: literal, $self_:ident, $write:expr) => {
        impl Format for $ty {
            default_format!();

            #[inline]
            fn _format_tag() -> Str {
    1fa2:	b580      	push	{r7, lr}
    1fa4:	466f      	mov	r7, sp
                internp!($fmt)
    1fa6:	f240 0002 	movw	r0, #2
    1faa:	f2c0 0000 	movt	r0, #0
    1fae:	f007 ff18 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
            }
    1fb2:	bd80      	pop	{r7, pc}

00001fb4 <_ZN5defmt5impls10primitives55_$LT$impl$u20$defmt..traits..Format$u20$for$u20$str$GT$12_format_data17h63ee45bd70361d5eE>:

            #[inline]
            fn _format_data(&$self_) {
    1fb4:	b580      	push	{r7, lr}
    1fb6:	466f      	mov	r7, sp
    1fb8:	b082      	sub	sp, #8
    1fba:	9000      	str	r0, [sp, #0]
    1fbc:	9101      	str	r1, [sp, #4]
prim!(u64, "{=u64}", self, export::u64(self));
prim!(u128, "{=u128}", self, export::u128(self));
prim!(usize, "{=usize}", self, export::usize(self));
prim!(f32, "{=f32}", self, export::f32(self));
prim!(f64, "{=f64}", self, export::f64(self));
prim!(str, "{=str}", self, export::str(self));
    1fbe:	f007 ff1a 	bl	9df6 <_ZN5defmt6export3str17h36a62e65d7ae988eE>
            }
    1fc2:	b002      	add	sp, #8
    1fc4:	bd80      	pop	{r7, pc}

00001fc6 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17hc90b318fc1832671E>:
            // LLVM on the other hand sees the constant branch, so if it's `false`, it can immediately delete it without
            // inlining the check. If it's `true`, it can inline it and get significantly better performance.
            #[rustc_no_mir_inline]
            #[inline]
            #[rustc_nounwind]
            const fn precondition_check($($name:$ty),*) {
    1fc6:	b580      	push	{r7, lr}
    1fc8:	466f      	mov	r7, sp
    1fca:	b082      	sub	sp, #8
    1fcc:	9000      	str	r0, [sp, #0]
    1fce:	9101      	str	r1, [sp, #4]
            "Layout::from_size_align_unchecked requires that align is a power of 2 \
            and the rounded-up allocation size does not exceed isize::MAX",
            (
                size: usize = size,
                align: usize = align,
            ) => Layout::is_size_align_valid(size, align)
    1fd0:	f009 f855 	bl	b07e <_ZN4core5alloc6layout6Layout19is_size_align_valid17ha9abfdd8dbd267f5E>
    1fd4:	b940      	cbnz	r0, 1fe8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17hc90b318fc1832671E+0x22>
    1fd6:	e7ff      	b.n	1fd8 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17hc90b318fc1832671E+0x12>
                if !$e {
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    1fd8:	f64b 70f5 	movw	r0, #49141	@ 0xbff5
    1fdc:	f2c0 0000 	movt	r0, #0
    1fe0:	f240 1119 	movw	r1, #281	@ 0x119
    1fe4:	f008 fa54 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
                        "\n\nThis indicates a bug in the program. \
                        This Undefined Behavior check is optional, and cannot be relied on for safety."));
                }
            }
    1fe8:	b002      	add	sp, #8
    1fea:	bd80      	pop	{r7, pc}

00001fec <_ZN4core5alloc6layout6Layout4size17h30fba2bb97d3f226E>:
    /// The minimum size in bytes for a memory block of this layout.
    #[stable(feature = "alloc_layout", since = "1.28.0")]
    #[rustc_const_stable(feature = "const_alloc_layout_size_align", since = "1.50.0")]
    #[must_use]
    #[inline]
    pub const fn size(&self) -> usize {
    1fec:	b580      	push	{r7, lr}
    1fee:	466f      	mov	r7, sp
    1ff0:	b081      	sub	sp, #4
    1ff2:	9000      	str	r0, [sp, #0]
        self.size
    1ff4:	6840      	ldr	r0, [r0, #4]
    }
    1ff6:	b001      	add	sp, #4
    1ff8:	bd80      	pop	{r7, pc}

00001ffa <_ZN4core5alloc6layout6Layout5align17heea29df1c3211099E>:
    #[stable(feature = "alloc_layout", since = "1.28.0")]
    #[rustc_const_stable(feature = "const_alloc_layout_size_align", since = "1.50.0")]
    #[must_use = "this returns the minimum alignment, \
                  without modifying the layout"]
    #[inline]
    pub const fn align(&self) -> usize {
    1ffa:	b580      	push	{r7, lr}
    1ffc:	466f      	mov	r7, sp
    1ffe:	b081      	sub	sp, #4
    2000:	9000      	str	r0, [sp, #0]
        self.align.as_usize()
    2002:	6800      	ldr	r0, [r0, #0]
    }
    2004:	b001      	add	sp, #4
    2006:	bd80      	pop	{r7, pc}

00002008 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8bae91d0affa80cfE>:
    /// # Panics
    ///
    /// Might panic if the index of the element overflows a `usize`.
    #[inline]
    #[rustc_inherit_overflow_checks]
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
    2008:	b580      	push	{r7, lr}
    200a:	466f      	mov	r7, sp
    200c:	b08e      	sub	sp, #56	@ 0x38
    200e:	9004      	str	r0, [sp, #16]
    2010:	9009      	str	r0, [sp, #36]	@ 0x24
        let a = self.iter.next()?;
    2012:	f7fe fcc8 	bl	9a6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0bfa23dedee62d01E>
    2016:	9008      	str	r0, [sp, #32]
        Some(output)
    }

    #[inline]
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
        match self {
    2018:	9808      	ldr	r0, [sp, #32]
    201a:	b180      	cbz	r0, 203e <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8bae91d0affa80cfE+0x36>
    201c:	e7ff      	b.n	201e <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8bae91d0affa80cfE+0x16>
            Some(v) => ControlFlow::Continue(v),
    201e:	9804      	ldr	r0, [sp, #16]
    2020:	9908      	ldr	r1, [sp, #32]
    2022:	910b      	str	r1, [sp, #44]	@ 0x2c
    2024:	9107      	str	r1, [sp, #28]
    2026:	9907      	ldr	r1, [sp, #28]
    2028:	9101      	str	r1, [sp, #4]
    202a:	910c      	str	r1, [sp, #48]	@ 0x30
        let i = self.count;
    202c:	6881      	ldr	r1, [r0, #8]
    202e:	9102      	str	r1, [sp, #8]
    2030:	910d      	str	r1, [sp, #52]	@ 0x34
        self.count += 1;
    2032:	6881      	ldr	r1, [r0, #8]
    2034:	1c48      	adds	r0, r1, #1
    2036:	4288      	cmp	r0, r1
    2038:	9003      	str	r0, [sp, #12]
    203a:	d30f      	bcc.n	205c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8bae91d0affa80cfE+0x54>
    203c:	e006      	b.n	204c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8bae91d0affa80cfE+0x44>
    203e:	2000      	movs	r0, #0
// https://github.com/rust-lang/rust/issues/99940
impl<T> ops::FromResidual<Option<convert::Infallible>> for Option<T> {
    #[inline]
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
        match residual {
            None => None,
    2040:	9006      	str	r0, [sp, #24]
        Some((i, a))
    }
    2042:	e7ff      	b.n	2044 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8bae91d0affa80cfE+0x3c>
    2044:	9805      	ldr	r0, [sp, #20]
    2046:	9906      	ldr	r1, [sp, #24]
    2048:	b00e      	add	sp, #56	@ 0x38
    204a:	bd80      	pop	{r7, pc}
        self.count += 1;
    204c:	9801      	ldr	r0, [sp, #4]
    204e:	9902      	ldr	r1, [sp, #8]
    2050:	9a03      	ldr	r2, [sp, #12]
    2052:	9b04      	ldr	r3, [sp, #16]
    2054:	609a      	str	r2, [r3, #8]
        Some((i, a))
    2056:	9105      	str	r1, [sp, #20]
    2058:	9006      	str	r0, [sp, #24]
    }
    205a:	e7f3      	b.n	2044 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8bae91d0affa80cfE+0x3c>
        self.count += 1;
    205c:	f24c 1090 	movw	r0, #49552	@ 0xc190
    2060:	f2c0 0000 	movt	r0, #0
    2064:	f009 f861 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00002068 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9839e29032e1f0c6E>:
    fn into_iter(self) -> I {
    2068:	b580      	push	{r7, lr}
    206a:	466f      	mov	r7, sp
    206c:	460b      	mov	r3, r1
    206e:	4601      	mov	r1, r0
        self
    2070:	6818      	ldr	r0, [r3, #0]
    2072:	685a      	ldr	r2, [r3, #4]
    2074:	689b      	ldr	r3, [r3, #8]
    2076:	608b      	str	r3, [r1, #8]
    2078:	604a      	str	r2, [r1, #4]
    207a:	6008      	str	r0, [r1, #0]
    }
    207c:	bd80      	pop	{r7, pc}

0000207e <_ZN15embassy_futures6select6select17hf183cd5b3a37f702E>:
///
/// This function returns a new future which polls all the futures.
/// When one of them completes, it will complete with its result value.
///
/// The other future is dropped.
pub fn select<A, B>(a: A, b: B) -> Select<A, B>
    207e:	b580      	push	{r7, lr}
    2080:	466f      	mov	r7, sp
    2082:	4694      	mov	ip, r2
    2084:	468e      	mov	lr, r1
    2086:	4601      	mov	r1, r0
where
    A: Future,
    B: Future,
{
    Select { a, b }
    2088:	f8de 0000 	ldr.w	r0, [lr]
    208c:	f8de 2004 	ldr.w	r2, [lr, #4]
    2090:	f8de 3008 	ldr.w	r3, [lr, #8]
    2094:	f8de e00c 	ldr.w	lr, [lr, #12]
    2098:	f8c1 e00c 	str.w	lr, [r1, #12]
    209c:	608b      	str	r3, [r1, #8]
    209e:	604a      	str	r2, [r1, #4]
    20a0:	6008      	str	r0, [r1, #0]
    20a2:	f8dc 0000 	ldr.w	r0, [ip]
    20a6:	f8dc 2004 	ldr.w	r2, [ip, #4]
    20aa:	f8dc 3008 	ldr.w	r3, [ip, #8]
    20ae:	f8dc c00c 	ldr.w	ip, [ip, #12]
    20b2:	f8c1 c01c 	str.w	ip, [r1, #28]
    20b6:	618b      	str	r3, [r1, #24]
    20b8:	614a      	str	r2, [r1, #20]
    20ba:	6108      	str	r0, [r1, #16]
}
    20bc:	bd80      	pop	{r7, pc}

000020be <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h3559e0cd8cd639c6E>:
    fn into_future(self) -> Self::IntoFuture {
    20be:	b580      	push	{r7, lr}
    20c0:	466f      	mov	r7, sp
        self
    20c2:	e8b1 500c 	ldmia.w	r1!, {r2, r3, ip, lr}
    20c6:	e8a0 500c 	stmia.w	r0!, {r2, r3, ip, lr}
    20ca:	e891 500c 	ldmia.w	r1, {r2, r3, ip, lr}
    20ce:	e880 500c 	stmia.w	r0, {r2, r3, ip, lr}
    }
    20d2:	bd80      	pop	{r7, pc}

000020d4 <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E>:
    A: Future,
    B: Future,
{
    type Output = Either<A::Output, B::Output>;

    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {
    20d4:	b580      	push	{r7, lr}
    20d6:	466f      	mov	r7, sp
    20d8:	b08c      	sub	sp, #48	@ 0x30
    20da:	9100      	str	r1, [sp, #0]
    20dc:	9003      	str	r0, [sp, #12]
    20de:	9104      	str	r1, [sp, #16]
    20e0:	900b      	str	r0, [sp, #44]	@ 0x2c
        let this = unsafe { self.get_unchecked_mut() };
    20e2:	9006      	str	r0, [sp, #24]
    20e4:	900a      	str	r0, [sp, #40]	@ 0x28
        let a = unsafe { Pin::new_unchecked(&mut this.a) };
    20e6:	9007      	str	r0, [sp, #28]
        let b = unsafe { Pin::new_unchecked(&mut this.b) };
    20e8:	f100 0210 	add.w	r2, r0, #16
    20ec:	4613      	mov	r3, r2
    20ee:	9301      	str	r3, [sp, #4]
    20f0:	9209      	str	r2, [sp, #36]	@ 0x24
    20f2:	9208      	str	r2, [sp, #32]
        if let Poll::Ready(x) = a.poll(cx) {
    20f4:	f000 fc39 	bl	296a <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE>
    20f8:	b130      	cbz	r0, 2108 <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E+0x34>
    20fa:	e7ff      	b.n	20fc <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E+0x28>
            return Poll::Ready(Either::First(x));
        }
        if let Poll::Ready(x) = b.poll(cx) {
    20fc:	9900      	ldr	r1, [sp, #0]
    20fe:	9801      	ldr	r0, [sp, #4]
    2100:	f000 fc33 	bl	296a <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE>
    2104:	b960      	cbnz	r0, 2120 <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E+0x4c>
    2106:	e00f      	b.n	2128 <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E+0x54>
    2108:	2000      	movs	r0, #0
            return Poll::Ready(Either::First(x));
    210a:	f807 0c26 	strb.w	r0, [r7, #-38]
    210e:	f817 0c26 	ldrb.w	r0, [r7, #-38]
    2112:	f807 0c27 	strb.w	r0, [r7, #-39]
    2116:	e7ff      	b.n	2118 <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E+0x44>
            return Poll::Ready(Either::Second(x));
        }
        Poll::Pending
    }
    2118:	f817 0c27 	ldrb.w	r0, [r7, #-39]
    211c:	b00c      	add	sp, #48	@ 0x30
    211e:	bd80      	pop	{r7, pc}
    2120:	2002      	movs	r0, #2
        Poll::Pending
    2122:	f807 0c27 	strb.w	r0, [r7, #-39]
    }
    2126:	e7f7      	b.n	2118 <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E+0x44>
    2128:	2001      	movs	r0, #1
            return Poll::Ready(Either::Second(x));
    212a:	f807 0c25 	strb.w	r0, [r7, #-37]
    212e:	f817 0c25 	ldrb.w	r0, [r7, #-37]
    2132:	f807 0c27 	strb.w	r0, [r7, #-39]
    2136:	e7ef      	b.n	2118 <_ZN93_$LT$embassy_futures..select..Select$LT$A$C$B$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hfc65bf7486977cc1E+0x44>

00002138 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h4688f24b45962794E>:
    fn into_future(self) -> Self::IntoFuture {
    2138:	b580      	push	{r7, lr}
    213a:	466f      	mov	r7, sp
    213c:	22a0      	movs	r2, #160	@ 0xa0
        self
    213e:	f009 fa7c 	bl	b63a <__aeabi_memcpy8>
    }
    2142:	bd80      	pop	{r7, pc}

00002144 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h56932797be1dea54E>:
    fn into_future(self) -> Self::IntoFuture {
    2144:	b580      	push	{r7, lr}
    2146:	466f      	mov	r7, sp
    2148:	22a0      	movs	r2, #160	@ 0xa0
        self
    214a:	f009 fa76 	bl	b63a <__aeabi_memcpy8>
    }
    214e:	bd80      	pop	{r7, pc}

00002150 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h904069b77dba90d6E>:
    fn into_future(self) -> Self::IntoFuture {
    2150:	b580      	push	{r7, lr}
    2152:	466f      	mov	r7, sp
    2154:	2298      	movs	r2, #152	@ 0x98
        self
    2156:	f009 fa70 	bl	b63a <__aeabi_memcpy8>
    }
    215a:	bd80      	pop	{r7, pc}

0000215c <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE>:
///
/// # Example
/// ```ignore
/// show_button_press(&mut display, "A", ARROW_LEFT).await;
/// ```
async fn show_button_press(display: &mut LedMatrix, button_name: &str, arrow: Frame<5, 5>) {
    215c:	b5f0      	push	{r4, r5, r6, r7, lr}
    215e:	af03      	add	r7, sp, #12
    2160:	e92d 0b00 	stmdb	sp!, {r8, r9, fp}
    2164:	b0d2      	sub	sp, #328	@ 0x148
    2166:	9107      	str	r1, [sp, #28]
    2168:	9009      	str	r0, [sp, #36]	@ 0x24
    216a:	9143      	str	r1, [sp, #268]	@ 0x10c
    216c:	9809      	ldr	r0, [sp, #36]	@ 0x24
    216e:	f890 0094 	ldrb.w	r0, [r0, #148]	@ 0x94
    2172:	4601      	mov	r1, r0
    2174:	9108      	str	r1, [sp, #32]
    2176:	b130      	cbz	r0, 2186 <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0x2a>
    2178:	e7ff      	b.n	217a <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0x1e>
    217a:	9808      	ldr	r0, [sp, #32]
    217c:	2801      	cmp	r0, #1
    217e:	d056      	beq.n	222e <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0xd2>
    2180:	e7ff      	b.n	2182 <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0x26>
    2182:	e058      	b.n	2236 <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0xda>
    2184:	defe      	udf	#254	@ 0xfe
    2186:	9807      	ldr	r0, [sp, #28]
    2188:	9042      	str	r0, [sp, #264]	@ 0x108
    218a:	9809      	ldr	r0, [sp, #36]	@ 0x24
    218c:	f8d0 0090 	ldr.w	r0, [r0, #144]	@ 0x90
    2190:	9004      	str	r0, [sp, #16]
    2192:	9045      	str	r0, [sp, #276]	@ 0x114
    2194:	9909      	ldr	r1, [sp, #36]	@ 0x24
    2196:	680a      	ldr	r2, [r1, #0]
    2198:	6848      	ldr	r0, [r1, #4]
    219a:	630a      	str	r2, [r1, #48]	@ 0x30
    219c:	6348      	str	r0, [r1, #52]	@ 0x34
    219e:	9809      	ldr	r0, [sp, #36]	@ 0x24
    21a0:	f100 0108 	add.w	r1, r0, #8
    21a4:	a80b      	add	r0, sp, #44	@ 0x2c
    21a6:	9003      	str	r0, [sp, #12]
    21a8:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    21ac:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    21b0:	e891 501c 	ldmia.w	r1, {r2, r3, r4, ip, lr}
    21b4:	e880 501c 	stmia.w	r0, {r2, r3, r4, ip, lr}
    defmt::info!("{} pressed", button_name);
    21b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
    21ba:	3030      	adds	r0, #48	@ 0x30
    21bc:	9002      	str	r0, [sp, #8]
    21be:	9046      	str	r0, [sp, #280]	@ 0x118
    21c0:	f240 0004 	movw	r0, #4
    21c4:	f2c0 0000 	movt	r0, #0
    21c8:	f007 fe0b 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    21cc:	f8ad 0056 	strh.w	r0, [sp, #86]	@ 0x56
    21d0:	f10d 0056 	add.w	r0, sp, #86	@ 0x56
    21d4:	f007 fe64 	bl	9ea0 <_ZN5defmt6export18acquire_and_header17h16cffd26e27c4a0bE>
    21d8:	9802      	ldr	r0, [sp, #8]
    21da:	f7ff fd57 	bl	1c8c <_ZN5defmt6export3fmt17hb6bcda53adefe2a9E>
    _defmt_release()
    21de:	f006 fa56 	bl	868e <_defmt_release>
    21e2:	2001      	movs	r0, #1
    21e4:	2100      	movs	r1, #0
    display.display(arrow, Duration::from_secs(1)).await;
    21e6:	f004 fb24 	bl	6832 <_ZN12embassy_time8duration8Duration9from_secs17h0d65bcb0ec475bedE>
    21ea:	f8dd e00c 	ldr.w	lr, [sp, #12]
    21ee:	468c      	mov	ip, r1
    21f0:	9904      	ldr	r1, [sp, #16]
    21f2:	aa47      	add	r2, sp, #284	@ 0x11c
    21f4:	4613      	mov	r3, r2
    21f6:	e8be 0370 	ldmia.w	lr!, {r4, r5, r6, r8, r9}
    21fa:	e8a3 0370 	stmia.w	r3!, {r4, r5, r6, r8, r9}
    21fe:	e89e 0370 	ldmia.w	lr, {r4, r5, r6, r8, r9}
    2202:	e883 0370 	stmia.w	r3, {r4, r5, r6, r8, r9}
    2206:	466b      	mov	r3, sp
    2208:	f8c3 c004 	str.w	ip, [r3, #4]
    220c:	6018      	str	r0, [r3, #0]
    220e:	a82c      	add	r0, sp, #176	@ 0xb0
    2210:	9005      	str	r0, [sp, #20]
    2212:	f7fe fd8d 	bl	d30 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display17h2bca18fd9dbaada7E>
    2216:	9905      	ldr	r1, [sp, #20]
    2218:	a816      	add	r0, sp, #88	@ 0x58
    221a:	9006      	str	r0, [sp, #24]
    221c:	f7fe fc21 	bl	a62 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h896d1013a979303dE>
    2220:	9906      	ldr	r1, [sp, #24]
    2222:	9809      	ldr	r0, [sp, #36]	@ 0x24
    2224:	3038      	adds	r0, #56	@ 0x38
    2226:	2258      	movs	r2, #88	@ 0x58
    2228:	f009 fa07 	bl	b63a <__aeabi_memcpy8>
    222c:	e006      	b.n	223c <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0xe0>
    222e:	2000      	movs	r0, #0
async fn show_button_press(display: &mut LedMatrix, button_name: &str, arrow: Frame<5, 5>) {
    2230:	2800      	cmp	r0, #0
    2232:	d1fc      	bne.n	222e <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0xd2>
    2234:	e00a      	b.n	224c <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0xf0>
    display.display(arrow, Duration::from_secs(1)).await;
    2236:	9807      	ldr	r0, [sp, #28]
    2238:	9042      	str	r0, [sp, #264]	@ 0x108
    223a:	e7ff      	b.n	223c <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0xe0>
    223c:	9809      	ldr	r0, [sp, #36]	@ 0x24
    223e:	3038      	adds	r0, #56	@ 0x38
    2240:	9051      	str	r0, [sp, #324]	@ 0x144
    2242:	9942      	ldr	r1, [sp, #264]	@ 0x108
    2244:	f7fe fd94 	bl	d70 <_ZN30microbit_async_display_example7display26LedMatrix$LT$P$C$_$C$_$GT$7display28_$u7b$$u7b$closure$u7d$$u7d$17he7ca901caa01f5a9E>
    2248:	b930      	cbnz	r0, 2258 <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0xfc>
    224a:	e012      	b.n	2272 <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE+0x116>
async fn show_button_press(display: &mut LedMatrix, button_name: &str, arrow: Frame<5, 5>) {
    224c:	f24c 10b0 	movw	r0, #49584	@ 0xc1b0
    2250:	f2c0 0000 	movt	r0, #0
    2254:	f008 ffee 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
    2258:	2001      	movs	r0, #1
    display.display(arrow, Duration::from_secs(1)).await;
    225a:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
    225e:	9909      	ldr	r1, [sp, #36]	@ 0x24
    2260:	2003      	movs	r0, #3
    2262:	f881 0094 	strb.w	r0, [r1, #148]	@ 0x94
    2266:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
    226a:	b052      	add	sp, #328	@ 0x148
    226c:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    2270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2272:	9809      	ldr	r0, [sp, #36]	@ 0x24
    2274:	3038      	adds	r0, #56	@ 0x38
    2276:	f000 fa71 	bl	275c <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..display..$u7b$$u7b$closure$u7d$$u7d$$GT$17hbd06fe710c393648E>
    227a:	2000      	movs	r0, #0
}
    227c:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
    2280:	9909      	ldr	r1, [sp, #36]	@ 0x24
    2282:	2001      	movs	r0, #1
    2284:	f881 0094 	strb.w	r0, [r1, #148]	@ 0x94
    2288:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
    228c:	b052      	add	sp, #328	@ 0x148
    228e:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    2292:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002294 <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E>:
/// ```ignore
/// if button_a_pressed {
///     handle_button_a_press(&mut display).await;
/// }
/// ```
pub async fn handle_button_a_press(display: &mut LedMatrix) {
    2294:	b5f0      	push	{r4, r5, r6, r7, lr}
    2296:	af03      	add	r7, sp, #12
    2298:	f84d bd04 	str.w	fp, [sp, #-4]!
    229c:	b0e4      	sub	sp, #400	@ 0x190
    229e:	9104      	str	r1, [sp, #16]
    22a0:	9006      	str	r0, [sp, #24]
    22a2:	9156      	str	r1, [sp, #344]	@ 0x158
    22a4:	9806      	ldr	r0, [sp, #24]
    22a6:	f890 009c 	ldrb.w	r0, [r0, #156]	@ 0x9c
    22aa:	4601      	mov	r1, r0
    22ac:	9105      	str	r1, [sp, #20]
    22ae:	b130      	cbz	r0, 22be <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x2a>
    22b0:	e7ff      	b.n	22b2 <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x1e>
    22b2:	9805      	ldr	r0, [sp, #20]
    22b4:	2801      	cmp	r0, #1
    22b6:	d02c      	beq.n	2312 <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x7e>
    22b8:	e7ff      	b.n	22ba <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x26>
    22ba:	e02e      	b.n	231a <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x86>
    22bc:	defe      	udf	#254	@ 0xfe
    22be:	9804      	ldr	r0, [sp, #16]
    22c0:	9055      	str	r0, [sp, #340]	@ 0x154
    22c2:	9806      	ldr	r0, [sp, #24]
    22c4:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
    22c8:	9158      	str	r1, [sp, #352]	@ 0x160
    show_button_press(display, "A", ARROW_LEFT).await;
    22ca:	f24c 13c4 	movw	r3, #49604	@ 0xc1c4
    22ce:	f2c0 0300 	movt	r3, #0
    22d2:	a859      	add	r0, sp, #356	@ 0x164
    22d4:	4602      	mov	r2, r0
    22d6:	e8b3 5070 	ldmia.w	r3!, {r4, r5, r6, ip, lr}
    22da:	e8a2 5070 	stmia.w	r2!, {r4, r5, r6, ip, lr}
    22de:	e893 5070 	ldmia.w	r3, {r4, r5, r6, ip, lr}
    22e2:	e882 5070 	stmia.w	r2, {r4, r5, r6, ip, lr}
    22e6:	466a      	mov	r2, sp
    22e8:	6010      	str	r0, [r2, #0]
    22ea:	f24c 12c0 	movw	r2, #49600	@ 0xc1c0
    22ee:	f2c0 0200 	movt	r2, #0
    22f2:	a82e      	add	r0, sp, #184	@ 0xb8
    22f4:	9002      	str	r0, [sp, #8]
    22f6:	2301      	movs	r3, #1
    22f8:	f000 fd67 	bl	2dca <_ZN30microbit_async_display_example6button17show_button_press17h858d11b7128cd875E>
    22fc:	9902      	ldr	r1, [sp, #8]
    22fe:	a808      	add	r0, sp, #32
    2300:	9003      	str	r0, [sp, #12]
    2302:	f7ff ff25 	bl	2150 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h904069b77dba90d6E>
    2306:	9903      	ldr	r1, [sp, #12]
    2308:	9806      	ldr	r0, [sp, #24]
    230a:	2298      	movs	r2, #152	@ 0x98
    230c:	f009 f995 	bl	b63a <__aeabi_memcpy8>
    2310:	e006      	b.n	2320 <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x8c>
    2312:	2000      	movs	r0, #0
pub async fn handle_button_a_press(display: &mut LedMatrix) {
    2314:	2800      	cmp	r0, #0
    2316:	d1fc      	bne.n	2312 <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x7e>
    2318:	e009      	b.n	232e <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x9a>
    show_button_press(display, "A", ARROW_LEFT).await;
    231a:	9804      	ldr	r0, [sp, #16]
    231c:	9055      	str	r0, [sp, #340]	@ 0x154
    231e:	e7ff      	b.n	2320 <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0x8c>
    2320:	9806      	ldr	r0, [sp, #24]
    2322:	9063      	str	r0, [sp, #396]	@ 0x18c
    2324:	9955      	ldr	r1, [sp, #340]	@ 0x154
    2326:	f7ff ff19 	bl	215c <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE>
    232a:	b930      	cbnz	r0, 233a <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0xa6>
    232c:	e012      	b.n	2354 <_ZN30microbit_async_display_example6button21handle_button_a_press28_$u7b$$u7b$closure$u7d$$u7d$17h0cdeba80cc131c84E+0xc0>
pub async fn handle_button_a_press(display: &mut LedMatrix) {
    232e:	f24c 10ec 	movw	r0, #49644	@ 0xc1ec
    2332:	f2c0 0000 	movt	r0, #0
    2336:	f008 ff7d 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
    233a:	2001      	movs	r0, #1
    show_button_press(display, "A", ARROW_LEFT).await;
    233c:	f88d 001f 	strb.w	r0, [sp, #31]
    2340:	9906      	ldr	r1, [sp, #24]
    2342:	2003      	movs	r0, #3
    2344:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
    2348:	f89d 001f 	ldrb.w	r0, [sp, #31]
    234c:	b064      	add	sp, #400	@ 0x190
    234e:	f85d bb04 	ldr.w	fp, [sp], #4
    2352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2354:	9806      	ldr	r0, [sp, #24]
    2356:	f000 f94d 	bl	25f4 <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E>
    235a:	2000      	movs	r0, #0
}
    235c:	f88d 001f 	strb.w	r0, [sp, #31]
    2360:	9906      	ldr	r1, [sp, #24]
    2362:	2001      	movs	r0, #1
    2364:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
    2368:	f89d 001f 	ldrb.w	r0, [sp, #31]
    236c:	b064      	add	sp, #400	@ 0x190
    236e:	f85d bb04 	ldr.w	fp, [sp], #4
    2372:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002374 <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE>:
/// ```ignore
/// if button_b_pressed {
///     handle_button_b_press(&mut display).await;
/// }
/// ```
pub async fn handle_button_b_press(display: &mut LedMatrix) {
    2374:	b5f0      	push	{r4, r5, r6, r7, lr}
    2376:	af03      	add	r7, sp, #12
    2378:	f84d bd04 	str.w	fp, [sp, #-4]!
    237c:	b0e4      	sub	sp, #400	@ 0x190
    237e:	9104      	str	r1, [sp, #16]
    2380:	9006      	str	r0, [sp, #24]
    2382:	9156      	str	r1, [sp, #344]	@ 0x158
    2384:	9806      	ldr	r0, [sp, #24]
    2386:	f890 009c 	ldrb.w	r0, [r0, #156]	@ 0x9c
    238a:	4601      	mov	r1, r0
    238c:	9105      	str	r1, [sp, #20]
    238e:	b130      	cbz	r0, 239e <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x2a>
    2390:	e7ff      	b.n	2392 <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x1e>
    2392:	9805      	ldr	r0, [sp, #20]
    2394:	2801      	cmp	r0, #1
    2396:	d02c      	beq.n	23f2 <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x7e>
    2398:	e7ff      	b.n	239a <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x26>
    239a:	e02e      	b.n	23fa <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x86>
    239c:	defe      	udf	#254	@ 0xfe
    239e:	9804      	ldr	r0, [sp, #16]
    23a0:	9055      	str	r0, [sp, #340]	@ 0x154
    23a2:	9806      	ldr	r0, [sp, #24]
    23a4:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
    23a8:	9158      	str	r1, [sp, #352]	@ 0x160
    show_button_press(display, "B", ARROW_RIGHT).await;
    23aa:	f24c 2300 	movw	r3, #49664	@ 0xc200
    23ae:	f2c0 0300 	movt	r3, #0
    23b2:	a859      	add	r0, sp, #356	@ 0x164
    23b4:	4602      	mov	r2, r0
    23b6:	e8b3 5070 	ldmia.w	r3!, {r4, r5, r6, ip, lr}
    23ba:	e8a2 5070 	stmia.w	r2!, {r4, r5, r6, ip, lr}
    23be:	e893 5070 	ldmia.w	r3, {r4, r5, r6, ip, lr}
    23c2:	e882 5070 	stmia.w	r2, {r4, r5, r6, ip, lr}
    23c6:	466a      	mov	r2, sp
    23c8:	6010      	str	r0, [r2, #0]
    23ca:	f24c 12fc 	movw	r2, #49660	@ 0xc1fc
    23ce:	f2c0 0200 	movt	r2, #0
    23d2:	a82e      	add	r0, sp, #184	@ 0xb8
    23d4:	9002      	str	r0, [sp, #8]
    23d6:	2301      	movs	r3, #1
    23d8:	f000 fcf7 	bl	2dca <_ZN30microbit_async_display_example6button17show_button_press17h858d11b7128cd875E>
    23dc:	9902      	ldr	r1, [sp, #8]
    23de:	a808      	add	r0, sp, #32
    23e0:	9003      	str	r0, [sp, #12]
    23e2:	f7ff feb5 	bl	2150 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h904069b77dba90d6E>
    23e6:	9903      	ldr	r1, [sp, #12]
    23e8:	9806      	ldr	r0, [sp, #24]
    23ea:	2298      	movs	r2, #152	@ 0x98
    23ec:	f009 f925 	bl	b63a <__aeabi_memcpy8>
    23f0:	e006      	b.n	2400 <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x8c>
    23f2:	2000      	movs	r0, #0
pub async fn handle_button_b_press(display: &mut LedMatrix) {
    23f4:	2800      	cmp	r0, #0
    23f6:	d1fc      	bne.n	23f2 <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x7e>
    23f8:	e009      	b.n	240e <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x9a>
    show_button_press(display, "B", ARROW_RIGHT).await;
    23fa:	9804      	ldr	r0, [sp, #16]
    23fc:	9055      	str	r0, [sp, #340]	@ 0x154
    23fe:	e7ff      	b.n	2400 <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0x8c>
    2400:	9806      	ldr	r0, [sp, #24]
    2402:	9063      	str	r0, [sp, #396]	@ 0x18c
    2404:	9955      	ldr	r1, [sp, #340]	@ 0x154
    2406:	f7ff fea9 	bl	215c <_ZN30microbit_async_display_example6button17show_button_press28_$u7b$$u7b$closure$u7d$$u7d$17heb53b11ae83934dcE>
    240a:	b930      	cbnz	r0, 241a <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0xa6>
    240c:	e012      	b.n	2434 <_ZN30microbit_async_display_example6button21handle_button_b_press28_$u7b$$u7b$closure$u7d$$u7d$17hd71b09cbe5d58a5dE+0xc0>
pub async fn handle_button_b_press(display: &mut LedMatrix) {
    240e:	f24c 2028 	movw	r0, #49704	@ 0xc228
    2412:	f2c0 0000 	movt	r0, #0
    2416:	f008 ff0d 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
    241a:	2001      	movs	r0, #1
    show_button_press(display, "B", ARROW_RIGHT).await;
    241c:	f88d 001f 	strb.w	r0, [sp, #31]
    2420:	9906      	ldr	r1, [sp, #24]
    2422:	2003      	movs	r0, #3
    2424:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
    2428:	f89d 001f 	ldrb.w	r0, [sp, #31]
    242c:	b064      	add	sp, #400	@ 0x190
    242e:	f85d bb04 	ldr.w	fp, [sp], #4
    2432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2434:	9806      	ldr	r0, [sp, #24]
    2436:	f000 f8dd 	bl	25f4 <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E>
    243a:	2000      	movs	r0, #0
}
    243c:	f88d 001f 	strb.w	r0, [sp, #31]
    2440:	9906      	ldr	r1, [sp, #24]
    2442:	2001      	movs	r0, #1
    2444:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
    2448:	f89d 001f 	ldrb.w	r0, [sp, #31]
    244c:	b064      	add	sp, #400	@ 0x190
    244e:	f85d bb04 	ldr.w	fp, [sp], #4
    2452:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002454 <_ZN4core4task4wake7Context10from_waker17hb97e09dee403d1d5E>:
    /// Creates a new `Context` from a [`&Waker`](Waker).
    #[stable(feature = "futures_api", since = "1.36.0")]
    #[rustc_const_stable(feature = "const_waker", since = "1.82.0")]
    #[must_use]
    #[inline]
    pub const fn from_waker(waker: &'a Waker) -> Self {
    2454:	b580      	push	{r7, lr}
    2456:	466f      	mov	r7, sp
    2458:	b082      	sub	sp, #8
    245a:	9100      	str	r1, [sp, #0]
    245c:	4601      	mov	r1, r0
    245e:	9800      	ldr	r0, [sp, #0]
    2460:	9001      	str	r0, [sp, #4]
    /// Builds the `Context`.
    #[inline]
    #[unstable(feature = "local_waker", issue = "118959")]
    pub const fn build(self) -> Context<'a> {
        let ContextBuilder { waker, local_waker, ext, _marker, _marker2 } = self;
        Context { waker, local_waker, ext: AssertUnwindSafe(ext), _marker, _marker2 }
    2462:	6008      	str	r0, [r1, #0]
    2464:	6048      	str	r0, [r1, #4]
    2466:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    246a:	f2c0 0000 	movt	r0, #0
    246e:	6802      	ldr	r2, [r0, #0]
    2470:	6840      	ldr	r0, [r0, #4]
    2472:	608a      	str	r2, [r1, #8]
    2474:	60c8      	str	r0, [r1, #12]
    }
    2476:	b002      	add	sp, #8
    2478:	bd80      	pop	{r7, pc}

0000247a <_ZN11embassy_nrf4gpio4Flex12set_as_input17h65c3916afa65d5b7E>:
        Self { pin: pin.map_into() }
    }

    /// Put the pin into input mode.
    #[inline]
    pub fn set_as_input(&mut self, pull: Pull) {
    247a:	b580      	push	{r7, lr}
    247c:	466f      	mov	r7, sp
    247e:	b08c      	sub	sp, #48	@ 0x30
    2480:	9100      	str	r1, [sp, #0]
    2482:	9003      	str	r0, [sp, #12]
    2484:	f807 1c1d 	strb.w	r1, [r7, #-29]
        self.pin.conf().write(|w| {
    2488:	f003 fec5 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    248c:	f001 f8ea 	bl	3664 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E>
    2490:	4601      	mov	r1, r0
    2492:	9800      	ldr	r0, [sp, #0]
    2494:	9102      	str	r1, [sp, #8]
    2496:	a902      	add	r1, sp, #8
    2498:	9101      	str	r1, [sp, #4]
    249a:	9106      	str	r1, [sp, #24]
    249c:	f807 0c11 	strb.w	r0, [r7, #-17]
    24a0:	2100      	movs	r1, #0
        }
    }
    impl<T: Default + Copy, A: Write> Reg<T, A> {
        #[inline(always)]
        pub fn write<R>(&self, f: impl FnOnce(&mut T) -> R) -> R {
            let mut val = Default::default();
    24a2:	9105      	str	r1, [sp, #20]
    24a4:	a905      	add	r1, sp, #20
            let res = f(&mut val);
    24a6:	f000 fd37 	bl	2f18 <_ZN11embassy_nrf4gpio4Flex12set_as_input28_$u7b$$u7b$closure$u7d$$u7d$17h78ecabd4ec162755E>
    24aa:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    24ac:	9905      	ldr	r1, [sp, #20]
    24ae:	9008      	str	r0, [sp, #32]
    24b0:	9109      	str	r1, [sp, #36]	@ 0x24
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    24b2:	9802      	ldr	r0, [sp, #8]
    24b4:	900a      	str	r0, [sp, #40]	@ 0x28
    24b6:	910b      	str	r1, [sp, #44]	@ 0x2c
        unsafe { write_volatile(self, val) }
    24b8:	f002 fa9e 	bl	49f8 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E>
            w.set_input(vals::Input::CONNECT);
            w.set_pull(convert_pull(pull));
            convert_drive(w, OutputDrive::Standard);
            w.set_sense(vals::Sense::DISABLED);
        });
    }
    24bc:	b00c      	add	sp, #48	@ 0x30
    24be:	bd80      	pop	{r7, pc}

000024c0 <_ZN11embassy_nrf4gpio4Flex13set_as_output17h566bd5c4dfe7f7e6E>:
    /// Put the pin into output mode.
    ///
    /// The pin level will be whatever was set before (or low by default). If you want it to begin
    /// at a specific level, call `set_high`/`set_low` on the pin first.
    #[inline]
    pub fn set_as_output(&mut self, drive: OutputDrive) {
    24c0:	b580      	push	{r7, lr}
    24c2:	466f      	mov	r7, sp
    24c4:	b08c      	sub	sp, #48	@ 0x30
    24c6:	f807 1c25 	strb.w	r1, [r7, #-37]
    24ca:	9004      	str	r0, [sp, #16]
        self.pin.conf().write(|w| {
    24cc:	f003 fea3 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    24d0:	f001 f8c8 	bl	3664 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E>
    24d4:	9003      	str	r0, [sp, #12]
    24d6:	a803      	add	r0, sp, #12
    24d8:	9001      	str	r0, [sp, #4]
    24da:	9006      	str	r0, [sp, #24]
    24dc:	f1a7 0025 	sub.w	r0, r7, #37	@ 0x25
    24e0:	9007      	str	r0, [sp, #28]
    24e2:	2100      	movs	r1, #0
            let mut val = Default::default();
    24e4:	9105      	str	r1, [sp, #20]
    24e6:	a905      	add	r1, sp, #20
            let res = f(&mut val);
    24e8:	f000 fd6b 	bl	2fc2 <_ZN11embassy_nrf4gpio4Flex13set_as_output28_$u7b$$u7b$closure$u7d$$u7d$17h703a1e8664381b5aE>
    24ec:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    24ee:	9905      	ldr	r1, [sp, #20]
    24f0:	9008      	str	r0, [sp, #32]
    24f2:	9109      	str	r1, [sp, #36]	@ 0x24
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    24f4:	9803      	ldr	r0, [sp, #12]
    24f6:	900a      	str	r0, [sp, #40]	@ 0x28
    24f8:	910b      	str	r1, [sp, #44]	@ 0x2c
    24fa:	f002 fa7d 	bl	49f8 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E>
            w.set_input(vals::Input::DISCONNECT);
            w.set_pull(vals::Pull::DISABLED);
            convert_drive(w, drive);
            w.set_sense(vals::Sense::DISABLED);
        });
    }
    24fe:	b00c      	add	sp, #48	@ 0x30
    2500:	bd80      	pop	{r7, pc}

00002502 <_ZN11embassy_nrf4gpio4Flex7set_low17h1ee4eef4c91d7346E>:
        self.pin.set_high()
    }

    /// Set the output as low.
    #[inline]
    pub fn set_low(&mut self) {
    2502:	b580      	push	{r7, lr}
    2504:	466f      	mov	r7, sp
    2506:	b082      	sub	sp, #8
    2508:	9001      	str	r0, [sp, #4]
        self.pin.set_low()
    250a:	f003 fe84 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    250e:	f001 f960 	bl	37d2 <_ZN11embassy_nrf4gpio9SealedPin7set_low17h501ef9dd8766358fE>
    }
    2512:	b002      	add	sp, #8
    2514:	bd80      	pop	{r7, pc}

00002516 <_ZN11embassy_nrf4gpio4Flex8set_high17hca85bf3df5ae8d49E>:
    pub fn set_high(&mut self) {
    2516:	b580      	push	{r7, lr}
    2518:	466f      	mov	r7, sp
    251a:	b082      	sub	sp, #8
    251c:	9001      	str	r0, [sp, #4]
        self.pin.set_high()
    251e:	f003 fe7a 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    2522:	f001 f8e1 	bl	36e8 <_ZN11embassy_nrf4gpio9SealedPin8set_high17hb709c3117f361c5eE>
    }
    2526:	b002      	add	sp, #8
    2528:	bd80      	pop	{r7, pc}

0000252a <_ZN90_$LT$embassy_nrf..gpio..AnyPin$u20$as$u20$embassy_hal_internal..peripheral..Peripheral$GT$15clone_unchecked17hefbc872d95c0faafE>:
    ($type:ident) => {
        impl $crate::Peripheral for $type {
            type P = $type;

            #[inline]
            unsafe fn clone_unchecked(&self) -> Self::P {
    252a:	b580      	push	{r7, lr}
    252c:	466f      	mov	r7, sp
    252e:	b081      	sub	sp, #4
    2530:	9000      	str	r0, [sp, #0]
                #[allow(clippy::needless_update)]
                $type { ..*self }
            }
    2532:	7800      	ldrb	r0, [r0, #0]
    2534:	b001      	add	sp, #4
    2536:	bd80      	pop	{r7, pc}

00002538 <_ZN5defmt5impls10primitives57_$LT$impl$u20$defmt..traits..Format$u20$for$u20$$RF$T$GT$11_format_tag17hdf571e4e0b25c09bE>:
        fn format(&$self_, fmt: Formatter) {
            <$ty as Format>::format($val, fmt)
        }

        #[inline]
        fn _format_tag() -> Str {
    2538:	b580      	push	{r7, lr}
    253a:	466f      	mov	r7, sp
            <$ty as Format>::_format_tag()
    253c:	f7ff fd31 	bl	1fa2 <_ZN5defmt5impls10primitives55_$LT$impl$u20$defmt..traits..Format$u20$for$u20$str$GT$11_format_tag17h283c06a84b929d89E>
        }
    2540:	bd80      	pop	{r7, pc}

00002542 <_ZN5defmt5impls10primitives57_$LT$impl$u20$defmt..traits..Format$u20$for$u20$$RF$T$GT$12_format_data17hf97a35e56888da7bE>:

        #[inline]
        fn _format_data(&$self_) {
    2542:	b580      	push	{r7, lr}
    2544:	466f      	mov	r7, sp
    2546:	b082      	sub	sp, #8
    2548:	4601      	mov	r1, r0
    254a:	9101      	str	r1, [sp, #4]

impl<T> Format for &'_ T
where
    T: Format + ?Sized,
{
    delegate_format!(T, self, self);
    254c:	6808      	ldr	r0, [r1, #0]
    254e:	6849      	ldr	r1, [r1, #4]
            <$ty as Format>::_format_data($val)
    2550:	f7ff fd30 	bl	1fb4 <_ZN5defmt5impls10primitives55_$LT$impl$u20$defmt..traits..Format$u20$for$u20$str$GT$12_format_data17h63ee45bd70361d5eE>
        }
    2554:	b002      	add	sp, #8
    2556:	bd80      	pop	{r7, pc}

00002558 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h9c4595d49df83306E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    2558:	b580      	push	{r7, lr}
    255a:	466f      	mov	r7, sp
    255c:	b081      	sub	sp, #4
    255e:	9000      	str	r0, [sp, #0]
    }
    2560:	b001      	add	sp, #4
    2562:	bd80      	pop	{r7, pc}

00002564 <_ZN90_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$T$GT$$GT$4from17hb6b6b95f3e6c2b63E>:
impl<T: ?Sized> From<&T> for NonNull<T> {
    /// Converts a `&T` to a `NonNull<T>`.
    ///
    /// This conversion is safe and infallible since references cannot be null.
    #[inline]
    fn from(r: &T) -> Self {
    2564:	b580      	push	{r7, lr}
    2566:	466f      	mov	r7, sp
    2568:	b081      	sub	sp, #4
    256a:	9000      	str	r0, [sp, #0]
        NonNull::from_ref(r)
    }
    256c:	b001      	add	sp, #4
    256e:	bd80      	pop	{r7, pc}

00002570 <_ZN4core3ops8function5FnMut8call_mut17h8c995993caba2854E>:
#[must_use = "closures are lazy and do nothing unless called"]
// FIXME(const_trait_impl) #[const_trait]
pub trait FnMut<Args: Tuple>: FnOnce<Args> {
    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_mut(&mut self, args: Args) -> Self::Output;
    2570:	b580      	push	{r7, lr}
    2572:	466f      	mov	r7, sp
    2574:	b082      	sub	sp, #8
    2576:	9100      	str	r1, [sp, #0]
    2578:	9001      	str	r0, [sp, #4]
    257a:	9800      	ldr	r0, [sp, #0]
    257c:	f7fe f824 	bl	5c8 <_ZN16embassy_executor3raw22AvailableTask$LT$F$GT$5claim17h480f478892374325E>
    2580:	b002      	add	sp, #8
    2582:	bd80      	pop	{r7, pc}

00002584 <_ZN4core3ptr103drop_in_place$LT$microbit_async_display_example..____embassy_main_task..$u7b$$u7b$closure$u7d$$u7d$$GT$17h34d488bf9b5b1562E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    2584:	b580      	push	{r7, lr}
    2586:	466f      	mov	r7, sp
    2588:	b084      	sub	sp, #16
    258a:	9000      	str	r0, [sp, #0]
    258c:	9002      	str	r0, [sp, #8]
//!   size)` (note that this requires `a < base + size`, not `a <= base + size`)
    258e:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
    2592:	4601      	mov	r1, r0
    2594:	9101      	str	r1, [sp, #4]
    2596:	2806      	cmp	r0, #6
    2598:	d806      	bhi.n	25a8 <_ZN4core3ptr103drop_in_place$LT$microbit_async_display_example..____embassy_main_task..$u7b$$u7b$closure$u7d$$u7d$$GT$17h34d488bf9b5b1562E+0x24>
    259a:	9901      	ldr	r1, [sp, #4]
    259c:	e8df f001 	tbb	[pc, r1]
    25a0:	08040406 	.word	0x08040406
    25a4:	0017120d 	.word	0x0017120d
    25a8:	b004      	add	sp, #16
    25aa:	bd80      	pop	{r7, pc}
    25ac:	b004      	add	sp, #16
    25ae:	bd80      	pop	{r7, pc}
    display.scroll("Hello, World!").await;
    25b0:	9800      	ldr	r0, [sp, #0]
    25b2:	3040      	adds	r0, #64	@ 0x40
    25b4:	f000 f8a5 	bl	2702 <_ZN4core3ptr161drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll..$u7b$$u7b$closure$u7d$$u7d$$GT$17h85843f94cba3737aE>
    25b8:	e00e      	b.n	25d8 <_ZN4core3ptr103drop_in_place$LT$microbit_async_display_example..____embassy_main_task..$u7b$$u7b$closure$u7d$$u7d$$GT$17h34d488bf9b5b1562E+0x54>
        match select(btn_a.wait_for_low(), btn_b.wait_for_low()).await {
    25ba:	9800      	ldr	r0, [sp, #0]
    25bc:	3040      	adds	r0, #64	@ 0x40
    25be:	f000 f8fa 	bl	27b6 <_ZN4core3ptr273drop_in_place$LT$embassy_futures..select..Select$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$C$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$17h39035fe5402c4c5aE>
    25c2:	e016      	b.n	25f2 <_ZN4core3ptr103drop_in_place$LT$microbit_async_display_example..____embassy_main_task..$u7b$$u7b$closure$u7d$$u7d$$GT$17h34d488bf9b5b1562E+0x6e>
                handle_button_a_press(&mut display).await;
    25c4:	9800      	ldr	r0, [sp, #0]
    25c6:	3040      	adds	r0, #64	@ 0x40
    25c8:	f000 f82d 	bl	2626 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_a_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17ha00e66515095156bE>
    25cc:	e011      	b.n	25f2 <_ZN4core3ptr103drop_in_place$LT$microbit_async_display_example..____embassy_main_task..$u7b$$u7b$closure$u7d$$u7d$$GT$17h34d488bf9b5b1562E+0x6e>
                handle_button_b_press(&mut display).await;
    25ce:	9800      	ldr	r0, [sp, #0]
    25d0:	3040      	adds	r0, #64	@ 0x40
    25d2:	f000 f840 	bl	2656 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_b_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4fdc53954e00fc5dE>
    25d6:	e00c      	b.n	25f2 <_ZN4core3ptr103drop_in_place$LT$microbit_async_display_example..____embassy_main_task..$u7b$$u7b$closure$u7d$$u7d$$GT$17h34d488bf9b5b1562E+0x6e>
#[embassy_executor::main]
    25d8:	9800      	ldr	r0, [sp, #0]
    25da:	303d      	adds	r0, #61	@ 0x3d
    25dc:	f000 f900 	bl	27e0 <_ZN4core3ptr45drop_in_place$LT$embassy_nrf..gpio..Input$GT$17hcd4a4d5430efcce3E>
    25e0:	9800      	ldr	r0, [sp, #0]
    25e2:	303c      	adds	r0, #60	@ 0x3c
    25e4:	f000 f8fc 	bl	27e0 <_ZN4core3ptr45drop_in_place$LT$embassy_nrf..gpio..Input$GT$17hcd4a4d5430efcce3E>
    25e8:	9800      	ldr	r0, [sp, #0]
    25ea:	f000 f84c 	bl	2686 <_ZN4core3ptr124drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$$GT$17hafe72f622a6480cbE>
    25ee:	b004      	add	sp, #16
    25f0:	bd80      	pop	{r7, pc}
    25f2:	e7f1      	b.n	25d8 <_ZN4core3ptr103drop_in_place$LT$microbit_async_display_example..____embassy_main_task..$u7b$$u7b$closure$u7d$$u7d$$GT$17h34d488bf9b5b1562E+0x54>

000025f4 <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    25f4:	b580      	push	{r7, lr}
    25f6:	466f      	mov	r7, sp
    25f8:	b084      	sub	sp, #16
    25fa:	9000      	str	r0, [sp, #0]
    25fc:	9002      	str	r0, [sp, #8]
//! [`NonNull::dangling`] in such cases.
    25fe:	f890 0094 	ldrb.w	r0, [r0, #148]	@ 0x94
    2602:	4601      	mov	r1, r0
    2604:	9101      	str	r1, [sp, #4]
    2606:	b130      	cbz	r0, 2616 <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E+0x22>
    2608:	e7ff      	b.n	260a <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E+0x16>
    260a:	9801      	ldr	r0, [sp, #4]
    260c:	2803      	cmp	r0, #3
    260e:	d004      	beq.n	261a <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E+0x26>
    2610:	e7ff      	b.n	2612 <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E+0x1e>
    2612:	b004      	add	sp, #16
    2614:	bd80      	pop	{r7, pc}
    2616:	b004      	add	sp, #16
    2618:	bd80      	pop	{r7, pc}
    display.display(arrow, Duration::from_secs(1)).await;
    261a:	9800      	ldr	r0, [sp, #0]
    261c:	3038      	adds	r0, #56	@ 0x38
    261e:	f000 f89d 	bl	275c <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..display..$u7b$$u7b$closure$u7d$$u7d$$GT$17hbd06fe710c393648E>
    2622:	b004      	add	sp, #16
    2624:	bd80      	pop	{r7, pc}

00002626 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_a_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17ha00e66515095156bE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    2626:	b580      	push	{r7, lr}
    2628:	466f      	mov	r7, sp
    262a:	b084      	sub	sp, #16
    262c:	9000      	str	r0, [sp, #0]
    262e:	9002      	str	r0, [sp, #8]
//! it is, the only safe approach is to ensure that they are indeed initialized.)
    2630:	f890 009c 	ldrb.w	r0, [r0, #156]	@ 0x9c
    2634:	4601      	mov	r1, r0
    2636:	9101      	str	r1, [sp, #4]
    2638:	b130      	cbz	r0, 2648 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_a_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17ha00e66515095156bE+0x22>
    263a:	e7ff      	b.n	263c <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_a_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17ha00e66515095156bE+0x16>
    263c:	9801      	ldr	r0, [sp, #4]
    263e:	2803      	cmp	r0, #3
    2640:	d004      	beq.n	264c <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_a_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17ha00e66515095156bE+0x26>
    2642:	e7ff      	b.n	2644 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_a_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17ha00e66515095156bE+0x1e>
    2644:	b004      	add	sp, #16
    2646:	bd80      	pop	{r7, pc}
    2648:	b004      	add	sp, #16
    264a:	bd80      	pop	{r7, pc}
    show_button_press(display, "A", ARROW_LEFT).await;
    264c:	9800      	ldr	r0, [sp, #0]
    264e:	f7ff ffd1 	bl	25f4 <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E>
    2652:	b004      	add	sp, #16
    2654:	bd80      	pop	{r7, pc}

00002656 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_b_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4fdc53954e00fc5dE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    2656:	b580      	push	{r7, lr}
    2658:	466f      	mov	r7, sp
    265a:	b084      	sub	sp, #16
    265c:	9000      	str	r0, [sp, #0]
    265e:	9002      	str	r0, [sp, #8]
//!
    2660:	f890 009c 	ldrb.w	r0, [r0, #156]	@ 0x9c
    2664:	4601      	mov	r1, r0
    2666:	9101      	str	r1, [sp, #4]
    2668:	b130      	cbz	r0, 2678 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_b_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4fdc53954e00fc5dE+0x22>
    266a:	e7ff      	b.n	266c <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_b_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4fdc53954e00fc5dE+0x16>
    266c:	9801      	ldr	r0, [sp, #4]
    266e:	2803      	cmp	r0, #3
    2670:	d004      	beq.n	267c <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_b_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4fdc53954e00fc5dE+0x26>
    2672:	e7ff      	b.n	2674 <_ZN4core3ptr111drop_in_place$LT$microbit_async_display_example..button..handle_button_b_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4fdc53954e00fc5dE+0x1e>
    2674:	b004      	add	sp, #16
    2676:	bd80      	pop	{r7, pc}
    2678:	b004      	add	sp, #16
    267a:	bd80      	pop	{r7, pc}
    show_button_press(display, "B", ARROW_RIGHT).await;
    267c:	9800      	ldr	r0, [sp, #0]
    267e:	f7ff ffb9 	bl	25f4 <_ZN4core3ptr107drop_in_place$LT$microbit_async_display_example..button..show_button_press..$u7b$$u7b$closure$u7d$$u7d$$GT$17h71455d588d482409E>
    2682:	b004      	add	sp, #16
    2684:	bd80      	pop	{r7, pc}

00002686 <_ZN4core3ptr124drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$$GT$17hafe72f622a6480cbE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    2686:	b580      	push	{r7, lr}
    2688:	466f      	mov	r7, sp
    268a:	b082      	sub	sp, #8
    268c:	9000      	str	r0, [sp, #0]
    268e:	9001      	str	r0, [sp, #4]
    2690:	302c      	adds	r0, #44	@ 0x2c
    2692:	f000 f8bd 	bl	2810 <_ZN4core3ptr67drop_in_place$LT$$u5b$embassy_nrf..gpio..Output$u3b$$u20$5$u5d$$GT$17h1a1120b6b564e74dE>
    2696:	9800      	ldr	r0, [sp, #0]
    2698:	3031      	adds	r0, #49	@ 0x31
    269a:	f000 f8b9 	bl	2810 <_ZN4core3ptr67drop_in_place$LT$$u5b$embassy_nrf..gpio..Output$u3b$$u20$5$u5d$$GT$17h1a1120b6b564e74dE>
    269e:	b002      	add	sp, #8
    26a0:	bd80      	pop	{r7, pc}

000026a2 <_ZN4core3ptr125drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Flex$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h498afd1fb67bb777E>:
    26a2:	b580      	push	{r7, lr}
    26a4:	466f      	mov	r7, sp
    26a6:	b084      	sub	sp, #16
    26a8:	9000      	str	r0, [sp, #0]
    26aa:	9002      	str	r0, [sp, #8]
#[stable(feature = "nonnull", since = "1.25.0")]
    26ac:	7940      	ldrb	r0, [r0, #5]
    26ae:	4601      	mov	r1, r0
    26b0:	9101      	str	r1, [sp, #4]
    26b2:	b130      	cbz	r0, 26c2 <_ZN4core3ptr125drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Flex$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h498afd1fb67bb777E+0x20>
    26b4:	e7ff      	b.n	26b6 <_ZN4core3ptr125drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Flex$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h498afd1fb67bb777E+0x14>
    26b6:	9801      	ldr	r0, [sp, #4]
    26b8:	2803      	cmp	r0, #3
    26ba:	d004      	beq.n	26c6 <_ZN4core3ptr125drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Flex$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h498afd1fb67bb777E+0x24>
    26bc:	e7ff      	b.n	26be <_ZN4core3ptr125drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Flex$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h498afd1fb67bb777E+0x1c>
    26be:	b004      	add	sp, #16
    26c0:	bd80      	pop	{r7, pc}
    26c2:	b004      	add	sp, #16
    26c4:	bd80      	pop	{r7, pc}
    }

    /// Wait until the pin is low. If it is already low, return immediately.
    pub async fn wait_for_low(&mut self) {
        self.pin.conf().modify(|w| w.set_sense(Sense::LOW));
        PortInputFuture::new(&mut self.pin).await
    26c6:	9800      	ldr	r0, [sp, #0]
    26c8:	3004      	adds	r0, #4
    26ca:	f000 f899 	bl	2800 <_ZN4core3ptr57drop_in_place$LT$embassy_nrf..gpiote..PortInputFuture$GT$17h81713ec0a2a8a8f3E>
    26ce:	b004      	add	sp, #16
    26d0:	bd80      	pop	{r7, pc}

000026d2 <_ZN4core3ptr126drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h3f570073102ce1e6E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    26d2:	b580      	push	{r7, lr}
    26d4:	466f      	mov	r7, sp
    26d6:	b084      	sub	sp, #16
    26d8:	9000      	str	r0, [sp, #0]
    26da:	9002      	str	r0, [sp, #8]
// There are many unsafe functions taking pointers that don't dereference them.
    26dc:	7b00      	ldrb	r0, [r0, #12]
    26de:	4601      	mov	r1, r0
    26e0:	9101      	str	r1, [sp, #4]
    26e2:	b130      	cbz	r0, 26f2 <_ZN4core3ptr126drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h3f570073102ce1e6E+0x20>
    26e4:	e7ff      	b.n	26e6 <_ZN4core3ptr126drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h3f570073102ce1e6E+0x14>
    26e6:	9801      	ldr	r0, [sp, #4]
    26e8:	2803      	cmp	r0, #3
    26ea:	d004      	beq.n	26f6 <_ZN4core3ptr126drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h3f570073102ce1e6E+0x24>
    26ec:	e7ff      	b.n	26ee <_ZN4core3ptr126drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h3f570073102ce1e6E+0x1c>
    26ee:	b004      	add	sp, #16
    26f0:	bd80      	pop	{r7, pc}
    26f2:	b004      	add	sp, #16
    26f4:	bd80      	pop	{r7, pc}
        self.pin.wait_for_low().await
    26f6:	9800      	ldr	r0, [sp, #0]
    26f8:	3004      	adds	r0, #4
    26fa:	f7ff ffd2 	bl	26a2 <_ZN4core3ptr125drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Flex$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h498afd1fb67bb777E>
    26fe:	b004      	add	sp, #16
    2700:	bd80      	pop	{r7, pc}

00002702 <_ZN4core3ptr161drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll..$u7b$$u7b$closure$u7d$$u7d$$GT$17h85843f94cba3737aE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    2702:	b580      	push	{r7, lr}
    2704:	466f      	mov	r7, sp
    2706:	b084      	sub	sp, #16
    2708:	9000      	str	r0, [sp, #0]
    270a:	9002      	str	r0, [sp, #8]
//!   returned pointer will be used, the program has undefined behavior.
    270c:	f890 0084 	ldrb.w	r0, [r0, #132]	@ 0x84
    2710:	4601      	mov	r1, r0
    2712:	9101      	str	r1, [sp, #4]
    2714:	b130      	cbz	r0, 2724 <_ZN4core3ptr161drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll..$u7b$$u7b$closure$u7d$$u7d$$GT$17h85843f94cba3737aE+0x22>
    2716:	e7ff      	b.n	2718 <_ZN4core3ptr161drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll..$u7b$$u7b$closure$u7d$$u7d$$GT$17h85843f94cba3737aE+0x16>
    2718:	9801      	ldr	r0, [sp, #4]
    271a:	2803      	cmp	r0, #3
    271c:	d004      	beq.n	2728 <_ZN4core3ptr161drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll..$u7b$$u7b$closure$u7d$$u7d$$GT$17h85843f94cba3737aE+0x26>
    271e:	e7ff      	b.n	2720 <_ZN4core3ptr161drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll..$u7b$$u7b$closure$u7d$$u7d$$GT$17h85843f94cba3737aE+0x1e>
    2720:	b004      	add	sp, #16
    2722:	bd80      	pop	{r7, pc}
    2724:	b004      	add	sp, #16
    2726:	bd80      	pop	{r7, pc}
            .await;
    2728:	9800      	ldr	r0, [sp, #0]
    272a:	3008      	adds	r0, #8
    272c:	f000 f82a 	bl	2784 <_ZN4core3ptr172drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll_with_speed..$u7b$$u7b$closure$u7d$$u7d$$GT$17h16dab7023a742d18E>
    2730:	b004      	add	sp, #16
    2732:	bd80      	pop	{r7, pc}

00002734 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..animate..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4f3b2f4d8ed6f4fbE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    2734:	b580      	push	{r7, lr}
    2736:	466f      	mov	r7, sp
    2738:	b083      	sub	sp, #12
    273a:	9001      	str	r0, [sp, #4]
//! [allocated object]: #allocated-object
    273c:	f890 0058 	ldrb.w	r0, [r0, #88]	@ 0x58
    2740:	4601      	mov	r1, r0
    2742:	9100      	str	r1, [sp, #0]
    2744:	b130      	cbz	r0, 2754 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..animate..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4f3b2f4d8ed6f4fbE+0x20>
    2746:	e7ff      	b.n	2748 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..animate..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4f3b2f4d8ed6f4fbE+0x14>
    2748:	9800      	ldr	r0, [sp, #0]
    274a:	2803      	cmp	r0, #3
    274c:	d004      	beq.n	2758 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..animate..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4f3b2f4d8ed6f4fbE+0x24>
    274e:	e7ff      	b.n	2750 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..animate..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4f3b2f4d8ed6f4fbE+0x1c>
    2750:	b003      	add	sp, #12
    2752:	bd80      	pop	{r7, pc}
    2754:	b003      	add	sp, #12
    2756:	bd80      	pop	{r7, pc}
    2758:	b003      	add	sp, #12
    275a:	bd80      	pop	{r7, pc}

0000275c <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..display..$u7b$$u7b$closure$u7d$$u7d$$GT$17hbd06fe710c393648E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    275c:	b580      	push	{r7, lr}
    275e:	466f      	mov	r7, sp
    2760:	b083      	sub	sp, #12
    2762:	9001      	str	r0, [sp, #4]
//!   tools like [Miri].)
    2764:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
    2768:	4601      	mov	r1, r0
    276a:	9100      	str	r1, [sp, #0]
    276c:	b130      	cbz	r0, 277c <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..display..$u7b$$u7b$closure$u7d$$u7d$$GT$17hbd06fe710c393648E+0x20>
    276e:	e7ff      	b.n	2770 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..display..$u7b$$u7b$closure$u7d$$u7d$$GT$17hbd06fe710c393648E+0x14>
    2770:	9800      	ldr	r0, [sp, #0]
    2772:	2803      	cmp	r0, #3
    2774:	d004      	beq.n	2780 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..display..$u7b$$u7b$closure$u7d$$u7d$$GT$17hbd06fe710c393648E+0x24>
    2776:	e7ff      	b.n	2778 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..display..$u7b$$u7b$closure$u7d$$u7d$$GT$17hbd06fe710c393648E+0x1c>
    2778:	b003      	add	sp, #12
    277a:	bd80      	pop	{r7, pc}
    277c:	b003      	add	sp, #12
    277e:	bd80      	pop	{r7, pc}
    2780:	b003      	add	sp, #12
    2782:	bd80      	pop	{r7, pc}

00002784 <_ZN4core3ptr172drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll_with_speed..$u7b$$u7b$closure$u7d$$u7d$$GT$17h16dab7023a742d18E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    2784:	b580      	push	{r7, lr}
    2786:	466f      	mov	r7, sp
    2788:	b084      	sub	sp, #16
    278a:	9000      	str	r0, [sp, #0]
    278c:	9002      	str	r0, [sp, #8]
//! is not always possible, and offer Exposed Provenance as a way to explicit "opt out" of the
    278e:	f890 0074 	ldrb.w	r0, [r0, #116]	@ 0x74
    2792:	4601      	mov	r1, r0
    2794:	9101      	str	r1, [sp, #4]
    2796:	b130      	cbz	r0, 27a6 <_ZN4core3ptr172drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll_with_speed..$u7b$$u7b$closure$u7d$$u7d$$GT$17h16dab7023a742d18E+0x22>
    2798:	e7ff      	b.n	279a <_ZN4core3ptr172drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll_with_speed..$u7b$$u7b$closure$u7d$$u7d$$GT$17h16dab7023a742d18E+0x16>
    279a:	9801      	ldr	r0, [sp, #4]
    279c:	2803      	cmp	r0, #3
    279e:	d004      	beq.n	27aa <_ZN4core3ptr172drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll_with_speed..$u7b$$u7b$closure$u7d$$u7d$$GT$17h16dab7023a742d18E+0x26>
    27a0:	e7ff      	b.n	27a2 <_ZN4core3ptr172drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..scroll_with_speed..$u7b$$u7b$closure$u7d$$u7d$$GT$17h16dab7023a742d18E+0x1e>
    27a2:	b004      	add	sp, #16
    27a4:	bd80      	pop	{r7, pc}
    27a6:	b004      	add	sp, #16
    27a8:	bd80      	pop	{r7, pc}
        self.animate(text.as_bytes(), AnimationEffect::Slide, speed).await;
    27aa:	9800      	ldr	r0, [sp, #0]
    27ac:	3010      	adds	r0, #16
    27ae:	f7ff ffc1 	bl	2734 <_ZN4core3ptr162drop_in_place$LT$microbit_async_display_example..display..LedMatrix$LT$embassy_nrf..gpio..Output$C$5_usize$C$5_usize$GT$..animate..$u7b$$u7b$closure$u7d$$u7d$$GT$17h4f3b2f4d8ed6f4fbE>
    27b2:	b004      	add	sp, #16
    27b4:	bd80      	pop	{r7, pc}

000027b6 <_ZN4core3ptr273drop_in_place$LT$embassy_futures..select..Select$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$C$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$17h39035fe5402c4c5aE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    27b6:	b580      	push	{r7, lr}
    27b8:	466f      	mov	r7, sp
    27ba:	b082      	sub	sp, #8
    27bc:	9000      	str	r0, [sp, #0]
    27be:	9001      	str	r0, [sp, #4]
    27c0:	f7ff ff87 	bl	26d2 <_ZN4core3ptr126drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h3f570073102ce1e6E>
    27c4:	9800      	ldr	r0, [sp, #0]
    27c6:	3010      	adds	r0, #16
    27c8:	f7ff ff83 	bl	26d2 <_ZN4core3ptr126drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Input$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h3f570073102ce1e6E>
    27cc:	b002      	add	sp, #8
    27ce:	bd80      	pop	{r7, pc}

000027d0 <_ZN4core3ptr44drop_in_place$LT$embassy_nrf..gpio..Flex$GT$17h908fde96a0227d1cE>:
    27d0:	b580      	push	{r7, lr}
    27d2:	466f      	mov	r7, sp
    27d4:	b082      	sub	sp, #8
    27d6:	9001      	str	r0, [sp, #4]
    27d8:	f000 ff12 	bl	3600 <_ZN65_$LT$embassy_nrf..gpio..Flex$u20$as$u20$core..ops..drop..Drop$GT$4drop17h24d312eb7c1f2aacE>
    27dc:	b002      	add	sp, #8
    27de:	bd80      	pop	{r7, pc}

000027e0 <_ZN4core3ptr45drop_in_place$LT$embassy_nrf..gpio..Input$GT$17hcd4a4d5430efcce3E>:
    27e0:	b580      	push	{r7, lr}
    27e2:	466f      	mov	r7, sp
    27e4:	b082      	sub	sp, #8
    27e6:	9001      	str	r0, [sp, #4]
    27e8:	f7ff fff2 	bl	27d0 <_ZN4core3ptr44drop_in_place$LT$embassy_nrf..gpio..Flex$GT$17h908fde96a0227d1cE>
    27ec:	b002      	add	sp, #8
    27ee:	bd80      	pop	{r7, pc}

000027f0 <_ZN4core3ptr46drop_in_place$LT$embassy_nrf..gpio..Output$GT$17ha988fba2f40c2f04E>:
    27f0:	b580      	push	{r7, lr}
    27f2:	466f      	mov	r7, sp
    27f4:	b082      	sub	sp, #8
    27f6:	9001      	str	r0, [sp, #4]
    27f8:	f7ff ffea 	bl	27d0 <_ZN4core3ptr44drop_in_place$LT$embassy_nrf..gpio..Flex$GT$17h908fde96a0227d1cE>
    27fc:	b002      	add	sp, #8
    27fe:	bd80      	pop	{r7, pc}

00002800 <_ZN4core3ptr57drop_in_place$LT$embassy_nrf..gpiote..PortInputFuture$GT$17h81713ec0a2a8a8f3E>:
    2800:	b580      	push	{r7, lr}
    2802:	466f      	mov	r7, sp
    2804:	b082      	sub	sp, #8
    2806:	9001      	str	r0, [sp, #4]
    2808:	f001 fb26 	bl	3e58 <_ZN78_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..ops..drop..Drop$GT$4drop17h678e283db9915948E>
    280c:	b002      	add	sp, #8
    280e:	bd80      	pop	{r7, pc}

00002810 <_ZN4core3ptr67drop_in_place$LT$$u5b$embassy_nrf..gpio..Output$u3b$$u20$5$u5d$$GT$17h1a1120b6b564e74dE>:
    2810:	b580      	push	{r7, lr}
    2812:	466f      	mov	r7, sp
    2814:	b084      	sub	sp, #16
    2816:	9001      	str	r0, [sp, #4]
    2818:	9003      	str	r0, [sp, #12]
    281a:	2000      	movs	r0, #0
    281c:	9002      	str	r0, [sp, #8]
    281e:	e7ff      	b.n	2820 <_ZN4core3ptr67drop_in_place$LT$$u5b$embassy_nrf..gpio..Output$u3b$$u20$5$u5d$$GT$17h1a1120b6b564e74dE+0x10>
    2820:	9802      	ldr	r0, [sp, #8]
    2822:	2805      	cmp	r0, #5
    2824:	d008      	beq.n	2838 <_ZN4core3ptr67drop_in_place$LT$$u5b$embassy_nrf..gpio..Output$u3b$$u20$5$u5d$$GT$17h1a1120b6b564e74dE+0x28>
    2826:	e7ff      	b.n	2828 <_ZN4core3ptr67drop_in_place$LT$$u5b$embassy_nrf..gpio..Output$u3b$$u20$5$u5d$$GT$17h1a1120b6b564e74dE+0x18>
    2828:	9801      	ldr	r0, [sp, #4]
    282a:	9902      	ldr	r1, [sp, #8]
    282c:	4408      	add	r0, r1
    282e:	3101      	adds	r1, #1
    2830:	9102      	str	r1, [sp, #8]
    2832:	f7ff ffdd 	bl	27f0 <_ZN4core3ptr46drop_in_place$LT$embassy_nrf..gpio..Output$GT$17ha988fba2f40c2f04E>
    2836:	e7f3      	b.n	2820 <_ZN4core3ptr67drop_in_place$LT$$u5b$embassy_nrf..gpio..Output$u3b$$u20$5$u5d$$GT$17h1a1120b6b564e74dE+0x10>
    2838:	b004      	add	sp, #16
    283a:	bd80      	pop	{r7, pc}

0000283c <_ZN4core3mem6forget17h1c783cea6f02fee8E>:
/// [ub]: ../../reference/behavior-considered-undefined.html
#[inline]
#[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_diagnostic_item = "mem_forget"]
pub const fn forget<T>(t: T) {
    283c:	b580      	push	{r7, lr}
    283e:	466f      	mov	r7, sp
    2840:	b082      	sub	sp, #8
    2842:	9000      	str	r0, [sp, #0]
    2844:	9101      	str	r1, [sp, #4]
    let _ = ManuallyDrop::new(t);
}
    2846:	b002      	add	sp, #8
    2848:	bd80      	pop	{r7, pc}

0000284a <_ZN4core3mem6forget17h2c57308c447e7258E>:
pub const fn forget<T>(t: T) {
    284a:	b580      	push	{r7, lr}
    284c:	466f      	mov	r7, sp
    284e:	b081      	sub	sp, #4
    2850:	9000      	str	r0, [sp, #0]
}
    2852:	b001      	add	sp, #4
    2854:	bd80      	pop	{r7, pc}

00002856 <_ZN11embassy_nrf6gpiote15PortInputFuture3new17h2511a8c6ec13a049E>:
    fn new(pin: impl Peripheral<P = impl GpioPin> + 'a) -> Self {
    2856:	b580      	push	{r7, lr}
    2858:	466f      	mov	r7, sp
    285a:	b082      	sub	sp, #8
    285c:	9001      	str	r0, [sp, #4]
            pin: pin.into_ref().map_into(),
    285e:	f000 fd3e 	bl	32de <_ZN20embassy_hal_internal10peripheral10Peripheral8into_ref17h33e1102632a9a9bbE>
    2862:	f000 fd4e 	bl	3302 <_ZN20embassy_hal_internal10peripheral22PeripheralRef$LT$T$GT$8map_into17head8db7c9afbb958E>
    }
    2866:	b002      	add	sp, #8
    2868:	bd80      	pop	{r7, pc}

0000286a <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE>:
    pub async fn wait_for_low(&mut self) {
    286a:	b580      	push	{r7, lr}
    286c:	466f      	mov	r7, sp
    286e:	b094      	sub	sp, #80	@ 0x50
    2870:	9102      	str	r1, [sp, #8]
    2872:	9004      	str	r0, [sp, #16]
    2874:	9108      	str	r1, [sp, #32]
    2876:	9804      	ldr	r0, [sp, #16]
    2878:	7940      	ldrb	r0, [r0, #5]
    287a:	4601      	mov	r1, r0
    287c:	9103      	str	r1, [sp, #12]
    287e:	b130      	cbz	r0, 288e <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x24>
    2880:	e7ff      	b.n	2882 <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x18>
    2882:	9803      	ldr	r0, [sp, #12]
    2884:	2801      	cmp	r0, #1
    2886:	d02a      	beq.n	28de <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x74>
    2888:	e7ff      	b.n	288a <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x20>
    288a:	e02c      	b.n	28e6 <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x7c>
    288c:	defe      	udf	#254	@ 0xfe
    288e:	9802      	ldr	r0, [sp, #8]
    2890:	9007      	str	r0, [sp, #28]
    2892:	9804      	ldr	r0, [sp, #16]
    2894:	6800      	ldr	r0, [r0, #0]
    2896:	9001      	str	r0, [sp, #4]
    2898:	900a      	str	r0, [sp, #40]	@ 0x28
        self.pin.conf().modify(|w| w.set_sense(Sense::LOW));
    289a:	f003 fcbc 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    289e:	f000 fee1 	bl	3664 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E>
    28a2:	9006      	str	r0, [sp, #24]
    28a4:	a806      	add	r0, sp, #24
    28a6:	9000      	str	r0, [sp, #0]
    28a8:	900d      	str	r0, [sp, #52]	@ 0x34
    28aa:	9012      	str	r0, [sp, #72]	@ 0x48
            unsafe { (self.ptr as *mut T).read_volatile() }
    28ac:	9806      	ldr	r0, [sp, #24]
    28ae:	9013      	str	r0, [sp, #76]	@ 0x4c
        unsafe { read_volatile(self) }
    28b0:	f002 f80d 	bl	48ce <_ZN4core3ptr13read_volatile17hd522fb4e1ffa191fE>
        }
    }
    impl<T: Copy, A: Read + Write> Reg<T, A> {
        #[inline(always)]
        pub fn modify<R>(&self, f: impl FnOnce(&mut T) -> R) -> R {
            let mut val = self.read();
    28b4:	900c      	str	r0, [sp, #48]	@ 0x30
    28b6:	a80c      	add	r0, sp, #48	@ 0x30
            let res = f(&mut val);
    28b8:	f000 f83e 	bl	2938 <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h50b0b5805d768ae4E>
    28bc:	9800      	ldr	r0, [sp, #0]
            self.write_value(val);
    28be:	990c      	ldr	r1, [sp, #48]	@ 0x30
    28c0:	900e      	str	r0, [sp, #56]	@ 0x38
    28c2:	910f      	str	r1, [sp, #60]	@ 0x3c
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    28c4:	9806      	ldr	r0, [sp, #24]
    28c6:	9010      	str	r0, [sp, #64]	@ 0x40
    28c8:	9111      	str	r1, [sp, #68]	@ 0x44
        unsafe { write_volatile(self, val) }
    28ca:	f002 f895 	bl	49f8 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E>
    28ce:	9801      	ldr	r0, [sp, #4]
        PortInputFuture::new(&mut self.pin).await
    28d0:	f7ff ffc1 	bl	2856 <_ZN11embassy_nrf6gpiote15PortInputFuture3new17h2511a8c6ec13a049E>
    28d4:	f000 f8a4 	bl	2a20 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17he34ff32b5337e15fE>
    28d8:	9904      	ldr	r1, [sp, #16]
    28da:	7108      	strb	r0, [r1, #4]
    28dc:	e006      	b.n	28ec <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x82>
    28de:	2000      	movs	r0, #0
    pub async fn wait_for_low(&mut self) {
    28e0:	2800      	cmp	r0, #0
    28e2:	d1fc      	bne.n	28de <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x74>
    28e4:	e00a      	b.n	28fc <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x92>
        PortInputFuture::new(&mut self.pin).await
    28e6:	9802      	ldr	r0, [sp, #8]
    28e8:	9007      	str	r0, [sp, #28]
    28ea:	e7ff      	b.n	28ec <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x82>
    28ec:	9804      	ldr	r0, [sp, #16]
    28ee:	3004      	adds	r0, #4
    28f0:	900b      	str	r0, [sp, #44]	@ 0x2c
    28f2:	9907      	ldr	r1, [sp, #28]
    28f4:	f001 fae9 	bl	3eca <_ZN85_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..future..future..Future$GT$4poll17h8fbbf83609b7505aE>
    28f8:	b930      	cbnz	r0, 2908 <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0x9e>
    28fa:	e00f      	b.n	291c <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE+0xb2>
    pub async fn wait_for_low(&mut self) {
    28fc:	f24c 20a0 	movw	r0, #49824	@ 0xc2a0
    2900:	f2c0 0000 	movt	r0, #0
    2904:	f008 fc96 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
    2908:	2001      	movs	r0, #1
        PortInputFuture::new(&mut self.pin).await
    290a:	f807 0c39 	strb.w	r0, [r7, #-57]
    290e:	9904      	ldr	r1, [sp, #16]
    2910:	2003      	movs	r0, #3
    2912:	7148      	strb	r0, [r1, #5]
    2914:	f817 0c39 	ldrb.w	r0, [r7, #-57]
    2918:	b014      	add	sp, #80	@ 0x50
    291a:	bd80      	pop	{r7, pc}
    291c:	9804      	ldr	r0, [sp, #16]
    291e:	3004      	adds	r0, #4
    2920:	f7ff ff6e 	bl	2800 <_ZN4core3ptr57drop_in_place$LT$embassy_nrf..gpiote..PortInputFuture$GT$17h81713ec0a2a8a8f3E>
    2924:	2000      	movs	r0, #0
    }
    2926:	f807 0c39 	strb.w	r0, [r7, #-57]
    292a:	9904      	ldr	r1, [sp, #16]
    292c:	2001      	movs	r0, #1
    292e:	7148      	strb	r0, [r1, #5]
    2930:	f817 0c39 	ldrb.w	r0, [r7, #-57]
    2934:	b014      	add	sp, #80	@ 0x50
    2936:	bd80      	pop	{r7, pc}

00002938 <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h50b0b5805d768ae4E>:
        self.pin.conf().modify(|w| w.set_sense(Sense::LOW));
    2938:	b580      	push	{r7, lr}
    293a:	466f      	mov	r7, sp
    293c:	b084      	sub	sp, #16
    293e:	4601      	mov	r1, r0
    2940:	9101      	str	r1, [sp, #4]
    2942:	2003      	movs	r0, #3
    2944:	f807 0c0e 	strb.w	r0, [r7, #-14]
    2948:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    294c:	9102      	str	r1, [sp, #8]
    294e:	f807 2c02 	strb.w	r2, [r7, #-2]
            }
            #[doc = "Pin sensing mechanism"]
            #[inline(always)]
            pub fn set_sense(&mut self, val: super::vals::Sense) {
                self.0 =
                    (self.0 & !(0x03 << 16usize)) | (((val.to_bits() as u32) & 0x03) << 16usize);
    2952:	6808      	ldr	r0, [r1, #0]
    2954:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
    2958:	f807 2c01 	strb.w	r2, [r7, #-1]
    295c:	f002 0203 	and.w	r2, r2, #3
                self.0 =
    2960:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    2964:	6008      	str	r0, [r1, #0]
    2966:	b004      	add	sp, #16
    2968:	bd80      	pop	{r7, pc}

0000296a <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE>:
    pub async fn wait_for_low(&mut self) {
    296a:	b580      	push	{r7, lr}
    296c:	466f      	mov	r7, sp
    296e:	b08e      	sub	sp, #56	@ 0x38
    2970:	9101      	str	r1, [sp, #4]
    2972:	9003      	str	r0, [sp, #12]
    2974:	910a      	str	r1, [sp, #40]	@ 0x28
    2976:	9803      	ldr	r0, [sp, #12]
    2978:	7b00      	ldrb	r0, [r0, #12]
    297a:	4601      	mov	r1, r0
    297c:	9102      	str	r1, [sp, #8]
    297e:	b130      	cbz	r0, 298e <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x24>
    2980:	e7ff      	b.n	2982 <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x18>
    2982:	9802      	ldr	r0, [sp, #8]
    2984:	2801      	cmp	r0, #1
    2986:	d015      	beq.n	29b4 <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x4a>
    2988:	e7ff      	b.n	298a <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x20>
    298a:	e017      	b.n	29bc <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x52>
    298c:	defe      	udf	#254	@ 0xfe
    298e:	9801      	ldr	r0, [sp, #4]
    2990:	9009      	str	r0, [sp, #36]	@ 0x24
    2992:	9803      	ldr	r0, [sp, #12]
    2994:	6801      	ldr	r1, [r0, #0]
    2996:	910c      	str	r1, [sp, #48]	@ 0x30
    2998:	a807      	add	r0, sp, #28
        self.pin.wait_for_low().await
    299a:	9000      	str	r0, [sp, #0]
    299c:	f001 fafb 	bl	3f96 <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low17hda7114f5a0e980eaE>
    29a0:	9900      	ldr	r1, [sp, #0]
    29a2:	a805      	add	r0, sp, #20
    29a4:	f000 f833 	bl	2a0e <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h71c96032ece9205aE>
    29a8:	9903      	ldr	r1, [sp, #12]
    29aa:	9805      	ldr	r0, [sp, #20]
    29ac:	9a06      	ldr	r2, [sp, #24]
    29ae:	608a      	str	r2, [r1, #8]
    29b0:	6048      	str	r0, [r1, #4]
    29b2:	e006      	b.n	29c2 <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x58>
    29b4:	2000      	movs	r0, #0
    pub async fn wait_for_low(&mut self) {
    29b6:	2800      	cmp	r0, #0
    29b8:	d1fc      	bne.n	29b4 <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x4a>
    29ba:	e00a      	b.n	29d2 <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x68>
        self.pin.wait_for_low().await
    29bc:	9801      	ldr	r0, [sp, #4]
    29be:	9009      	str	r0, [sp, #36]	@ 0x24
    29c0:	e7ff      	b.n	29c2 <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x58>
    29c2:	9803      	ldr	r0, [sp, #12]
    29c4:	3004      	adds	r0, #4
    29c6:	900d      	str	r0, [sp, #52]	@ 0x34
    29c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
    29ca:	f7ff ff4e 	bl	286a <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17hc1cde9240cf3c9ccE>
    29ce:	b930      	cbnz	r0, 29de <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x74>
    29d0:	e00f      	b.n	29f2 <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low28_$u7b$$u7b$closure$u7d$$u7d$17h8ee9a3f34df9471fE+0x88>
    pub async fn wait_for_low(&mut self) {
    29d2:	f24c 20b0 	movw	r0, #49840	@ 0xc2b0
    29d6:	f2c0 0000 	movt	r0, #0
    29da:	f008 fc2b 	bl	b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>
    29de:	2001      	movs	r0, #1
        self.pin.wait_for_low().await
    29e0:	f807 0c25 	strb.w	r0, [r7, #-37]
    29e4:	9903      	ldr	r1, [sp, #12]
    29e6:	2003      	movs	r0, #3
    29e8:	7308      	strb	r0, [r1, #12]
    29ea:	f817 0c25 	ldrb.w	r0, [r7, #-37]
    29ee:	b00e      	add	sp, #56	@ 0x38
    29f0:	bd80      	pop	{r7, pc}
    29f2:	9803      	ldr	r0, [sp, #12]
    29f4:	3004      	adds	r0, #4
    29f6:	f7ff fe54 	bl	26a2 <_ZN4core3ptr125drop_in_place$LT$embassy_nrf..gpiote..$LT$impl$u20$embassy_nrf..gpio..Flex$GT$..wait_for_low..$u7b$$u7b$closure$u7d$$u7d$$GT$17h498afd1fb67bb777E>
    29fa:	2000      	movs	r0, #0
    }
    29fc:	f807 0c25 	strb.w	r0, [r7, #-37]
    2a00:	9903      	ldr	r1, [sp, #12]
    2a02:	2001      	movs	r0, #1
    2a04:	7308      	strb	r0, [r1, #12]
    2a06:	f817 0c25 	ldrb.w	r0, [r7, #-37]
    2a0a:	b00e      	add	sp, #56	@ 0x38
    2a0c:	bd80      	pop	{r7, pc}

00002a0e <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17h71c96032ece9205aE>:
    fn into_future(self) -> Self::IntoFuture {
    2a0e:	b580      	push	{r7, lr}
    2a10:	466f      	mov	r7, sp
    2a12:	460a      	mov	r2, r1
    2a14:	4601      	mov	r1, r0
        self
    2a16:	6810      	ldr	r0, [r2, #0]
    2a18:	6852      	ldr	r2, [r2, #4]
    2a1a:	604a      	str	r2, [r1, #4]
    2a1c:	6008      	str	r0, [r1, #0]
    }
    2a1e:	bd80      	pop	{r7, pc}

00002a20 <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17he34ff32b5337e15fE>:
    fn into_future(self) -> Self::IntoFuture {
    2a20:	b580      	push	{r7, lr}
    2a22:	466f      	mov	r7, sp
    2a24:	b081      	sub	sp, #4
    2a26:	f807 0c01 	strb.w	r0, [r7, #-1]
    }
    2a2a:	b001      	add	sp, #4
    2a2c:	bd80      	pop	{r7, pc}

00002a2e <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$10as_mut_ptr17h1e501050c13a6452E>:
impl<T> UninitCell<T> {
    pub const fn uninit() -> Self {
        Self(MaybeUninit::uninit())
    }

    pub unsafe fn as_mut_ptr(&self) -> *mut T {
    2a2e:	b580      	push	{r7, lr}
    2a30:	466f      	mov	r7, sp
    2a32:	b083      	sub	sp, #12
    2a34:	9000      	str	r0, [sp, #0]
    2a36:	9001      	str	r0, [sp, #4]
    2a38:	9002      	str	r0, [sp, #8]
        (*self.0.as_ptr()).get()
    }
    2a3a:	b003      	add	sp, #12
    2a3c:	bd80      	pop	{r7, pc}

00002a3e <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$13drop_in_place17hcaf4ca6de9f39e37E>:
    #[inline(never)]
    pub unsafe fn write_in_place(&self, func: impl FnOnce() -> T) {
        ptr::write(self.as_mut_ptr(), func())
    }

    pub unsafe fn drop_in_place(&self) {
    2a3e:	b580      	push	{r7, lr}
    2a40:	466f      	mov	r7, sp
    2a42:	b082      	sub	sp, #8
    2a44:	9001      	str	r0, [sp, #4]
        ptr::drop_in_place(self.as_mut_ptr())
    2a46:	f7ff fff2 	bl	2a2e <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$10as_mut_ptr17h1e501050c13a6452E>
    2a4a:	f7ff fd9b 	bl	2584 <_ZN4core3ptr103drop_in_place$LT$microbit_async_display_example..____embassy_main_task..$u7b$$u7b$closure$u7d$$u7d$$GT$17h34d488bf9b5b1562E>
    }
    2a4e:	b002      	add	sp, #8
    2a50:	bd80      	pop	{r7, pc}

00002a52 <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$14write_in_place17hfca5611d46463744E>:
    pub unsafe fn write_in_place(&self, func: impl FnOnce() -> T) {
    2a52:	b580      	push	{r7, lr}
    2a54:	466f      	mov	r7, sp
    2a56:	b0be      	sub	sp, #248	@ 0xf8
    2a58:	9101      	str	r1, [sp, #4]
    2a5a:	903c      	str	r0, [sp, #240]	@ 0xf0
    2a5c:	913d      	str	r1, [sp, #244]	@ 0xf4
        ptr::write(self.as_mut_ptr(), func())
    2a5e:	f7ff ffe6 	bl	2a2e <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$10as_mut_ptr17h1e501050c13a6452E>
    2a62:	9901      	ldr	r1, [sp, #4]
    2a64:	9002      	str	r0, [sp, #8]
    2a66:	a804      	add	r0, sp, #16
    2a68:	9003      	str	r0, [sp, #12]
    2a6a:	f7ff fa4f 	bl	1f0c <_ZN30microbit_async_display_example14__embassy_main28_$u7b$$u7b$closure$u7d$$u7d$17h63f3b2467cca3291E>
    2a6e:	9802      	ldr	r0, [sp, #8]
    2a70:	9903      	ldr	r1, [sp, #12]
    2a72:	f7fd fdfb 	bl	66c <_ZN4core3ptr5write17h05e94e16f97cc45cE>
    }
    2a76:	b03e      	add	sp, #248	@ 0xf8
    2a78:	bd80      	pop	{r7, pc}

00002a7a <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$6as_mut17hdd982ef03b686451E>:
    pub unsafe fn as_mut(&self) -> &mut T {
    2a7a:	b580      	push	{r7, lr}
    2a7c:	466f      	mov	r7, sp
    2a7e:	b082      	sub	sp, #8
    2a80:	9001      	str	r0, [sp, #4]
        &mut *self.as_mut_ptr()
    2a82:	f7ff ffd4 	bl	2a2e <_ZN16embassy_executor3raw4util19UninitCell$LT$T$GT$10as_mut_ptr17h1e501050c13a6452E>
    }
    2a86:	b002      	add	sp, #8
    2a88:	bd80      	pop	{r7, pc}

00002a8a <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3set17h518a18d14392673eE>:
        Self {
            value: UnsafeCell::new(value),
        }
    }

    pub unsafe fn set(&self, value: T) {
    2a8a:	b580      	push	{r7, lr}
    2a8c:	466f      	mov	r7, sp
    2a8e:	b083      	sub	sp, #12
    2a90:	9000      	str	r0, [sp, #0]
    2a92:	9101      	str	r1, [sp, #4]
    2a94:	9002      	str	r0, [sp, #8]
        *self.value.get() = value;
    2a96:	6001      	str	r1, [r0, #0]
    }
    2a98:	b003      	add	sp, #12
    2a9a:	bd80      	pop	{r7, pc}

00002a9c <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E>:
        #[rustc_const_stable(feature = "int_roundings1", since = "1.73.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        #[rustc_inherit_overflow_checks]
        pub const fn next_multiple_of(self, rhs: Self) -> Self {
    2a9c:	b580      	push	{r7, lr}
    2a9e:	466f      	mov	r7, sp
    2aa0:	b08a      	sub	sp, #40	@ 0x28
    2aa2:	9104      	str	r1, [sp, #16]
    2aa4:	9005      	str	r0, [sp, #20]
    2aa6:	9007      	str	r0, [sp, #28]
    2aa8:	9108      	str	r1, [sp, #32]
            match self % rhs {
    2aaa:	b159      	cbz	r1, 2ac4 <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x28>
    2aac:	e7ff      	b.n	2aae <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x12>
    2aae:	9904      	ldr	r1, [sp, #16]
    2ab0:	9a05      	ldr	r2, [sp, #20]
    2ab2:	fbb2 f0f1 	udiv	r0, r2, r1
    2ab6:	fb00 2011 	mls	r0, r0, r1, r2
    2aba:	4601      	mov	r1, r0
    2abc:	9103      	str	r1, [sp, #12]
    2abe:	9009      	str	r0, [sp, #36]	@ 0x24
    2ac0:	b130      	cbz	r0, 2ad0 <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x34>
    2ac2:	e008      	b.n	2ad6 <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x3a>
    2ac4:	f24c 3034 	movw	r0, #49972	@ 0xc334
    2ac8:	f2c0 0000 	movt	r0, #0
    2acc:	f008 fb9f 	bl	b20e <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h94d69846dc90841aE>
                0 => self,
    2ad0:	9805      	ldr	r0, [sp, #20]
    2ad2:	9006      	str	r0, [sp, #24]
    2ad4:	e006      	b.n	2ae4 <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x48>
                r => self + (rhs - r)
    2ad6:	9804      	ldr	r0, [sp, #16]
    2ad8:	9903      	ldr	r1, [sp, #12]
    2ada:	1a42      	subs	r2, r0, r1
    2adc:	9202      	str	r2, [sp, #8]
    2ade:	4288      	cmp	r0, r1
    2ae0:	d30a      	bcc.n	2af8 <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x5c>
    2ae2:	e002      	b.n	2aea <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x4e>
            }
        }
    2ae4:	9806      	ldr	r0, [sp, #24]
    2ae6:	b00a      	add	sp, #40	@ 0x28
    2ae8:	bd80      	pop	{r7, pc}
                r => self + (rhs - r)
    2aea:	9905      	ldr	r1, [sp, #20]
    2aec:	9802      	ldr	r0, [sp, #8]
    2aee:	4408      	add	r0, r1
    2af0:	4288      	cmp	r0, r1
    2af2:	9001      	str	r0, [sp, #4]
    2af4:	d309      	bcc.n	2b0a <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x6e>
    2af6:	e005      	b.n	2b04 <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x68>
    2af8:	f24c 3034 	movw	r0, #49972	@ 0xc334
    2afc:	f2c0 0000 	movt	r0, #0
    2b00:	f008 fb26 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    2b04:	9801      	ldr	r0, [sp, #4]
    2b06:	9006      	str	r0, [sp, #24]
    2b08:	e7ec      	b.n	2ae4 <_ZN4core3num23_$LT$impl$u20$usize$GT$16next_multiple_of17h71629f7c2fa77519E+0x48>
    2b0a:	f24c 3034 	movw	r0, #49972	@ 0xc334
    2b0e:	f2c0 0000 	movt	r0, #0
    2b12:	f008 fb0a 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00002b16 <_ZN16critical_section5mutex14Mutex$LT$T$GT$6borrow17h77d965106c134d4bE>:
        self.inner.into_inner()
    }

    /// Borrows the data for the duration of the critical section.
    #[inline]
    pub fn borrow<'cs>(&'cs self, _cs: CriticalSection<'cs>) -> &'cs T {
    2b16:	b580      	push	{r7, lr}
    2b18:	466f      	mov	r7, sp
    2b1a:	b083      	sub	sp, #12
    2b1c:	9000      	str	r0, [sp, #0]
    2b1e:	9002      	str	r0, [sp, #8]
        unsafe { &*self.inner.get() }
    }
    2b20:	b003      	add	sp, #12
    2b22:	bd80      	pop	{r7, pc}

00002b24 <_ZN16critical_section5mutex14Mutex$LT$T$GT$6borrow17he86f423c40f64adeE>:
    pub fn borrow<'cs>(&'cs self, _cs: CriticalSection<'cs>) -> &'cs T {
    2b24:	b580      	push	{r7, lr}
    2b26:	466f      	mov	r7, sp
    2b28:	b083      	sub	sp, #12
    2b2a:	9000      	str	r0, [sp, #0]
    2b2c:	9002      	str	r0, [sp, #8]
    }
    2b2e:	b003      	add	sp, #12
    2b30:	bd80      	pop	{r7, pc}

00002b32 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc47244a84bb37139E>:
    pub const fn is_null(self) -> bool {
    2b32:	b580      	push	{r7, lr}
    2b34:	466f      	mov	r7, sp
    2b36:	b081      	sub	sp, #4
    2b38:	9000      	str	r0, [sp, #0]
                    // know whether the pointer is null or not.
                    // We can *not* return `false` here, that would be unsound in `NonNull::new`!
                    None => panic!("null-ness of this pointer cannot be determined in const context"),
                }
            } else {
                ptr.addr() == 0
    2b3a:	fab0 f080 	clz	r0, r0
    2b3e:	0940      	lsrs	r0, r0, #5
    }
    2b40:	b001      	add	sp, #4
    2b42:	bd80      	pop	{r7, pc}

00002b44 <_ZN4core4bool22_$LT$impl$u20$bool$GT$4then17he2b205a9f9b5d805E>:
    /// ```
    #[doc(alias = "then_with")]
    #[stable(feature = "lazy_bool_to_option", since = "1.50.0")]
    #[rustc_diagnostic_item = "bool_then"]
    #[inline]
    pub fn then<T, F: FnOnce() -> T>(self, f: F) -> Option<T> {
    2b44:	b580      	push	{r7, lr}
    2b46:	466f      	mov	r7, sp
    2b48:	b084      	sub	sp, #16
    2b4a:	9100      	str	r1, [sp, #0]
    2b4c:	f807 0c05 	strb.w	r0, [r7, #-5]
    2b50:	9103      	str	r1, [sp, #12]
        if self { Some(f()) } else { None }
    2b52:	b918      	cbnz	r0, 2b5c <_ZN4core4bool22_$LT$impl$u20$bool$GT$4then17he2b205a9f9b5d805E+0x18>
    2b54:	e7ff      	b.n	2b56 <_ZN4core4bool22_$LT$impl$u20$bool$GT$4then17he2b205a9f9b5d805E+0x12>
    2b56:	2000      	movs	r0, #0
    2b58:	9001      	str	r0, [sp, #4]
    }
    2b5a:	e004      	b.n	2b66 <_ZN4core4bool22_$LT$impl$u20$bool$GT$4then17he2b205a9f9b5d805E+0x22>
        if self { Some(f()) } else { None }
    2b5c:	9800      	ldr	r0, [sp, #0]
    2b5e:	f7fd fd6a 	bl	636 <_ZN16embassy_executor3raw22AvailableTask$LT$F$GT$5claim28_$u7b$$u7b$closure$u7d$$u7d$17h192ea2556efaa5fbE>
    2b62:	9001      	str	r0, [sp, #4]
    2b64:	e7ff      	b.n	2b66 <_ZN4core4bool22_$LT$impl$u20$bool$GT$4then17he2b205a9f9b5d805E+0x22>
    }
    2b66:	9801      	ldr	r0, [sp, #4]
    2b68:	b004      	add	sp, #16
    2b6a:	bd80      	pop	{r7, pc}

00002b6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h1d3ab3faf84c56bcE>:
    /// }
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    2b6c:	b580      	push	{r7, lr}
    2b6e:	466f      	mov	r7, sp
    2b70:	b082      	sub	sp, #8
    2b72:	9000      	str	r0, [sp, #0]
    2b74:	9101      	str	r1, [sp, #4]
        IterMut::new(self)
    2b76:	f7fd fe9b 	bl	8b0 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hfd0a6c09fb961270E>
    }
    2b7a:	b002      	add	sp, #8
    2b7c:	bd80      	pop	{r7, pc}

00002b7e <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5empty17h8a63f91ef58e935cE>:
    pub const fn empty() -> Self {
    2b7e:	b5d0      	push	{r4, r6, r7, lr}
    2b80:	af02      	add	r7, sp, #8
    2b82:	b090      	sub	sp, #64	@ 0x40
            bitmap: [Bitmap::empty(XSIZE); YSIZE],
    2b84:	9002      	str	r0, [sp, #8]
    2b86:	a80e      	add	r0, sp, #56	@ 0x38
    2b88:	2105      	movs	r1, #5
    2b8a:	f7fd fb24 	bl	1d6 <_ZN30microbit_async_display_example5types6Bitmap5empty17h671b31d8a4f10c17E>
    2b8e:	2000      	movs	r0, #0
    2b90:	9003      	str	r0, [sp, #12]
    2b92:	e7ff      	b.n	2b94 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5empty17h8a63f91ef58e935cE+0x16>
    2b94:	9803      	ldr	r0, [sp, #12]
    2b96:	9001      	str	r0, [sp, #4]
    2b98:	2804      	cmp	r0, #4
    2b9a:	d80d      	bhi.n	2bb8 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5empty17h8a63f91ef58e935cE+0x3a>
    2b9c:	e7ff      	b.n	2b9e <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5empty17h8a63f91ef58e935cE+0x20>
    2b9e:	9801      	ldr	r0, [sp, #4]
    2ba0:	f10d 0c10 	add.w	ip, sp, #16
    2ba4:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
    2ba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    2baa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    2bac:	f84c 3030 	str.w	r3, [ip, r0, lsl #3]
    2bb0:	6051      	str	r1, [r2, #4]
    2bb2:	3001      	adds	r0, #1
    2bb4:	9003      	str	r0, [sp, #12]
    2bb6:	e7ed      	b.n	2b94 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5empty17h8a63f91ef58e935cE+0x16>
    2bb8:	9802      	ldr	r0, [sp, #8]
    2bba:	a904      	add	r1, sp, #16
        Self {
    2bbc:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    2bc0:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    2bc4:	e891 501c 	ldmia.w	r1, {r2, r3, r4, ip, lr}
    2bc8:	e880 501c 	stmia.w	r0, {r2, r3, r4, ip, lr}
    }
    2bcc:	b010      	add	sp, #64	@ 0x40
    2bce:	bdd0      	pop	{r4, r6, r7, pc}

00002bd0 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$3new17h549354db15c6f16eE>:
    pub const fn new(bitmap: [Bitmap; YSIZE]) -> Self {
    2bd0:	b5d0      	push	{r4, r6, r7, lr}
    2bd2:	af02      	add	r7, sp, #8
        Self { bitmap }
    2bd4:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    2bd8:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    2bdc:	e891 501c 	ldmia.w	r1, {r2, r3, r4, ip, lr}
    2be0:	e880 501c 	stmia.w	r0, {r2, r3, r4, ip, lr}
    }
    2be4:	bdd0      	pop	{r4, r6, r7, pc}

00002be6 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5clear17h7095c9faaf3a5846E>:
    pub fn clear(&mut self) {
    2be6:	b580      	push	{r7, lr}
    2be8:	466f      	mov	r7, sp
    2bea:	b086      	sub	sp, #24
    2bec:	9004      	str	r0, [sp, #16]
    2bee:	2105      	movs	r1, #5
        for m in self.bitmap.iter_mut() {
    2bf0:	f7ff ffbc 	bl	2b6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h1d3ab3faf84c56bcE>
    2bf4:	f7fd fe81 	bl	8fa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfe3c64bb99cfde94E>
    2bf8:	9001      	str	r0, [sp, #4]
    2bfa:	9102      	str	r1, [sp, #8]
    2bfc:	e7ff      	b.n	2bfe <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5clear17h7095c9faaf3a5846E+0x18>
    2bfe:	a801      	add	r0, sp, #4
    2c00:	f7fd fefd 	bl	9fe <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7eb9ceb88457eba8E>
    2c04:	9003      	str	r0, [sp, #12]
    2c06:	9803      	ldr	r0, [sp, #12]
    2c08:	b128      	cbz	r0, 2c16 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5clear17h7095c9faaf3a5846E+0x30>
    2c0a:	e7ff      	b.n	2c0c <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5clear17h7095c9faaf3a5846E+0x26>
    2c0c:	9803      	ldr	r0, [sp, #12]
    2c0e:	9005      	str	r0, [sp, #20]
            m.clear_all();
    2c10:	f7fd faee 	bl	1f0 <_ZN30microbit_async_display_example5types6Bitmap9clear_all17h8a2ff72cfaf55b17E>
    2c14:	e7f3      	b.n	2bfe <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$5clear17h7095c9faaf3a5846E+0x18>
    }
    2c16:	b006      	add	sp, #24
    2c18:	bd80      	pop	{r7, pc}

00002c1a <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$6is_set17hf08d897d8d086efdE>:
    pub fn is_set(&self, x: usize, y: usize) -> bool {
    2c1a:	b580      	push	{r7, lr}
    2c1c:	466f      	mov	r7, sp
    2c1e:	b086      	sub	sp, #24
    2c20:	9200      	str	r2, [sp, #0]
    2c22:	9101      	str	r1, [sp, #4]
    2c24:	9002      	str	r0, [sp, #8]
    2c26:	9003      	str	r0, [sp, #12]
    2c28:	9104      	str	r1, [sp, #16]
    2c2a:	9205      	str	r2, [sp, #20]
        self.bitmap[y].is_set(x)
    2c2c:	2a04      	cmp	r2, #4
    2c2e:	d809      	bhi.n	2c44 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$6is_set17hf08d897d8d086efdE+0x2a>
    2c30:	e7ff      	b.n	2c32 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$6is_set17hf08d897d8d086efdE+0x18>
    2c32:	9901      	ldr	r1, [sp, #4]
    2c34:	9802      	ldr	r0, [sp, #8]
    2c36:	9a00      	ldr	r2, [sp, #0]
    2c38:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
    2c3c:	f7fd fb02 	bl	244 <_ZN30microbit_async_display_example5types6Bitmap6is_set17h5aea258f4b7982f1E>
    }
    2c40:	b006      	add	sp, #24
    2c42:	bd80      	pop	{r7, pc}
        self.bitmap[y].is_set(x)
    2c44:	9800      	ldr	r0, [sp, #0]
    2c46:	f24c 3250 	movw	r2, #50000	@ 0xc350
    2c4a:	f2c0 0200 	movt	r2, #0
    2c4e:	2105      	movs	r1, #5
    2c50:	f007 fc52 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

00002c54 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE>:
    pub fn or(&mut self, other: &Frame<XSIZE, YSIZE>) {
    2c54:	b580      	push	{r7, lr}
    2c56:	466f      	mov	r7, sp
    2c58:	b08c      	sub	sp, #48	@ 0x30
    2c5a:	9103      	str	r1, [sp, #12]
    2c5c:	9004      	str	r0, [sp, #16]
    2c5e:	9009      	str	r0, [sp, #36]	@ 0x24
    2c60:	910a      	str	r1, [sp, #40]	@ 0x28
    2c62:	2000      	movs	r0, #0
    2c64:	2105      	movs	r1, #5
        for i in 0..self.bitmap.len() {
    2c66:	f007 fa9d 	bl	a1a4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0afde0faa91357dbE>
    2c6a:	9005      	str	r0, [sp, #20]
    2c6c:	9106      	str	r1, [sp, #24]
    2c6e:	e7ff      	b.n	2c70 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE+0x1c>
    2c70:	a805      	add	r0, sp, #20
    2c72:	f007 fa8f 	bl	a194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd1eed7027fe23b7aE>
    2c76:	9007      	str	r0, [sp, #28]
    2c78:	9108      	str	r1, [sp, #32]
    2c7a:	9807      	ldr	r0, [sp, #28]
    2c7c:	07c0      	lsls	r0, r0, #31
    2c7e:	b130      	cbz	r0, 2c8e <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE+0x3a>
    2c80:	e7ff      	b.n	2c82 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE+0x2e>
    2c82:	9808      	ldr	r0, [sp, #32]
    2c84:	9002      	str	r0, [sp, #8]
    2c86:	900b      	str	r0, [sp, #44]	@ 0x2c
            self.bitmap[i].or(&other.bitmap[i]);
    2c88:	2805      	cmp	r0, #5
    2c8a:	d302      	bcc.n	2c92 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE+0x3e>
    2c8c:	e009      	b.n	2ca2 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE+0x4e>
    }
    2c8e:	b00c      	add	sp, #48	@ 0x30
    2c90:	bd80      	pop	{r7, pc}
            self.bitmap[i].or(&other.bitmap[i]);
    2c92:	9802      	ldr	r0, [sp, #8]
    2c94:	9904      	ldr	r1, [sp, #16]
    2c96:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2c9a:	9101      	str	r1, [sp, #4]
    2c9c:	2805      	cmp	r0, #5
    2c9e:	d308      	bcc.n	2cb2 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE+0x5e>
    2ca0:	e00f      	b.n	2cc2 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE+0x6e>
    2ca2:	9802      	ldr	r0, [sp, #8]
    2ca4:	f24c 3260 	movw	r2, #50016	@ 0xc360
    2ca8:	f2c0 0200 	movt	r2, #0
    2cac:	2105      	movs	r1, #5
    2cae:	f007 fc23 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
    2cb2:	9801      	ldr	r0, [sp, #4]
    2cb4:	9903      	ldr	r1, [sp, #12]
    2cb6:	9a02      	ldr	r2, [sp, #8]
    2cb8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    2cbc:	f7fd fb6c 	bl	398 <_ZN30microbit_async_display_example5types6Bitmap2or17h018d5e962f7263c6E>
    2cc0:	e7d6      	b.n	2c70 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$2or17h2a9318b29343ef4fE+0x1c>
    2cc2:	9802      	ldr	r0, [sp, #8]
    2cc4:	f24c 3270 	movw	r2, #50032	@ 0xc370
    2cc8:	f2c0 0200 	movt	r2, #0
    2ccc:	2105      	movs	r1, #5
    2cce:	f007 fc13 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

00002cd2 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$10shift_left17h5cb7b08e0f66087bE>:
    pub fn shift_left(&mut self, nbits: usize) {
    2cd2:	b580      	push	{r7, lr}
    2cd4:	466f      	mov	r7, sp
    2cd6:	b08a      	sub	sp, #40	@ 0x28
    2cd8:	9101      	str	r1, [sp, #4]
    2cda:	9002      	str	r0, [sp, #8]
    2cdc:	9007      	str	r0, [sp, #28]
    2cde:	9108      	str	r1, [sp, #32]
    2ce0:	2000      	movs	r0, #0
    2ce2:	2105      	movs	r1, #5
        for i in 0..self.bitmap.len() {
    2ce4:	f007 fa5e 	bl	a1a4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0afde0faa91357dbE>
    2ce8:	9003      	str	r0, [sp, #12]
    2cea:	9104      	str	r1, [sp, #16]
    2cec:	e7ff      	b.n	2cee <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$10shift_left17h5cb7b08e0f66087bE+0x1c>
    2cee:	a803      	add	r0, sp, #12
    2cf0:	f007 fa50 	bl	a194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd1eed7027fe23b7aE>
    2cf4:	9005      	str	r0, [sp, #20]
    2cf6:	9106      	str	r1, [sp, #24]
    2cf8:	9805      	ldr	r0, [sp, #20]
    2cfa:	07c0      	lsls	r0, r0, #31
    2cfc:	b130      	cbz	r0, 2d0c <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$10shift_left17h5cb7b08e0f66087bE+0x3a>
    2cfe:	e7ff      	b.n	2d00 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$10shift_left17h5cb7b08e0f66087bE+0x2e>
    2d00:	9806      	ldr	r0, [sp, #24]
    2d02:	9000      	str	r0, [sp, #0]
    2d04:	9009      	str	r0, [sp, #36]	@ 0x24
            self.bitmap[i].shift_left(nbits);
    2d06:	2805      	cmp	r0, #5
    2d08:	d302      	bcc.n	2d10 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$10shift_left17h5cb7b08e0f66087bE+0x3e>
    2d0a:	e009      	b.n	2d20 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$10shift_left17h5cb7b08e0f66087bE+0x4e>
    }
    2d0c:	b00a      	add	sp, #40	@ 0x28
    2d0e:	bd80      	pop	{r7, pc}
            self.bitmap[i].shift_left(nbits);
    2d10:	9901      	ldr	r1, [sp, #4]
    2d12:	9802      	ldr	r0, [sp, #8]
    2d14:	9a00      	ldr	r2, [sp, #0]
    2d16:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
    2d1a:	f7fd fae3 	bl	2e4 <_ZN30microbit_async_display_example5types6Bitmap10shift_left17h5fb52be716cf284fE>
    2d1e:	e7e6      	b.n	2cee <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$10shift_left17h5cb7b08e0f66087bE+0x1c>
    2d20:	9800      	ldr	r0, [sp, #0]
    2d22:	f24c 3280 	movw	r2, #50048	@ 0xc380
    2d26:	f2c0 0200 	movt	r2, #0
    2d2a:	2105      	movs	r1, #5
    2d2c:	f007 fbe4 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

00002d30 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$11shift_right17h3a54ca669bd30064E>:
    pub fn shift_right(&mut self, nbits: usize) {
    2d30:	b580      	push	{r7, lr}
    2d32:	466f      	mov	r7, sp
    2d34:	b08a      	sub	sp, #40	@ 0x28
    2d36:	9101      	str	r1, [sp, #4]
    2d38:	9002      	str	r0, [sp, #8]
    2d3a:	9007      	str	r0, [sp, #28]
    2d3c:	9108      	str	r1, [sp, #32]
    2d3e:	2000      	movs	r0, #0
    2d40:	2105      	movs	r1, #5
        for i in 0..self.bitmap.len() {
    2d42:	f007 fa2f 	bl	a1a4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0afde0faa91357dbE>
    2d46:	9003      	str	r0, [sp, #12]
    2d48:	9104      	str	r1, [sp, #16]
    2d4a:	e7ff      	b.n	2d4c <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$11shift_right17h3a54ca669bd30064E+0x1c>
    2d4c:	a803      	add	r0, sp, #12
    2d4e:	f007 fa21 	bl	a194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd1eed7027fe23b7aE>
    2d52:	9005      	str	r0, [sp, #20]
    2d54:	9106      	str	r1, [sp, #24]
    2d56:	9805      	ldr	r0, [sp, #20]
    2d58:	07c0      	lsls	r0, r0, #31
    2d5a:	b130      	cbz	r0, 2d6a <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$11shift_right17h3a54ca669bd30064E+0x3a>
    2d5c:	e7ff      	b.n	2d5e <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$11shift_right17h3a54ca669bd30064E+0x2e>
    2d5e:	9806      	ldr	r0, [sp, #24]
    2d60:	9000      	str	r0, [sp, #0]
    2d62:	9009      	str	r0, [sp, #36]	@ 0x24
            self.bitmap[i].shift_right(nbits);
    2d64:	2805      	cmp	r0, #5
    2d66:	d302      	bcc.n	2d6e <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$11shift_right17h3a54ca669bd30064E+0x3e>
    2d68:	e009      	b.n	2d7e <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$11shift_right17h3a54ca669bd30064E+0x4e>
    }
    2d6a:	b00a      	add	sp, #40	@ 0x28
    2d6c:	bd80      	pop	{r7, pc}
            self.bitmap[i].shift_right(nbits);
    2d6e:	9901      	ldr	r1, [sp, #4]
    2d70:	9802      	ldr	r0, [sp, #8]
    2d72:	9a00      	ldr	r2, [sp, #0]
    2d74:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
    2d78:	f7fd fae1 	bl	33e <_ZN30microbit_async_display_example5types6Bitmap11shift_right17h116d0bbee2ff2972E>
    2d7c:	e7e6      	b.n	2d4c <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$11shift_right17h3a54ca669bd30064E+0x1c>
    2d7e:	9800      	ldr	r0, [sp, #0]
    2d80:	f24c 3290 	movw	r2, #50064	@ 0xc390
    2d84:	f2c0 0200 	movt	r2, #0
    2d88:	2105      	movs	r1, #5
    2d8a:	f007 fbb5 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

00002d8e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E>:
    pub fn ok(self) -> Option<T> {
    2d8e:	b580      	push	{r7, lr}
    2d90:	466f      	mov	r7, sp
    2d92:	b081      	sub	sp, #4
        match self {
    2d94:	e7ff      	b.n	2d96 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E+0x8>
    2d96:	2001      	movs	r0, #1
            Ok(x) => Some(x),
    2d98:	f807 0c03 	strb.w	r0, [r7, #-3]
    2d9c:	e7ff      	b.n	2d9e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E+0x10>
    }
    2d9e:	e7ff      	b.n	2da0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h56b6b61e96f771c7E+0x12>
    2da0:	f817 0c03 	ldrb.w	r0, [r7, #-3]
    2da4:	b001      	add	sp, #4
    2da6:	bd80      	pop	{r7, pc}

00002da8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h6b8f9933727becb9E>:
    pub const fn is_ok(&self) -> bool {
    2da8:	b580      	push	{r7, lr}
    2daa:	466f      	mov	r7, sp
    2dac:	b081      	sub	sp, #4
    2dae:	9000      	str	r0, [sp, #0]
        matches!(*self, Ok(_))
    2db0:	6800      	ldr	r0, [r0, #0]
#[macro_export]
#[stable(feature = "matches_macro", since = "1.42.0")]
#[rustc_diagnostic_item = "matches_macro"]
macro_rules! matches {
    ($expression:expr, $pattern:pat $(if $guard:expr)? $(,)?) => {
        match $expression {
    2db2:	fab0 f080 	clz	r0, r0
    2db6:	0940      	lsrs	r0, r0, #5
    }
    2db8:	b001      	add	sp, #4
    2dba:	bd80      	pop	{r7, pc}

00002dbc <_ZN87_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$defmt..export..traits..IntoResult$GT$11into_result17h0a61fded342268acE>:
impl<T, E> IntoResult for Result<T, E> {
    type Ok = T;
    type Error = E;

    #[inline]
    fn into_result(self) -> Self {
    2dbc:	b580      	push	{r7, lr}
    2dbe:	466f      	mov	r7, sp
    2dc0:	b081      	sub	sp, #4
    2dc2:	f807 0c01 	strb.w	r0, [r7, #-1]
        self
    }
    2dc6:	b001      	add	sp, #4
    2dc8:	bd80      	pop	{r7, pc}

00002dca <_ZN30microbit_async_display_example6button17show_button_press17h858d11b7128cd875E>:
async fn show_button_press(display: &mut LedMatrix, button_name: &str, arrow: Frame<5, 5>) {
    2dca:	b5b0      	push	{r4, r5, r7, lr}
    2dcc:	af02      	add	r7, sp, #8
    2dce:	b084      	sub	sp, #16
    2dd0:	9200      	str	r2, [sp, #0]
    2dd2:	468c      	mov	ip, r1
    2dd4:	4601      	mov	r1, r0
    2dd6:	9800      	ldr	r0, [sp, #0]
    2dd8:	68ba      	ldr	r2, [r7, #8]
    2dda:	f8cd c004 	str.w	ip, [sp, #4]
    2dde:	9002      	str	r0, [sp, #8]
    2de0:	9303      	str	r3, [sp, #12]
    2de2:	f8c1 c090 	str.w	ip, [r1, #144]	@ 0x90
    2de6:	6008      	str	r0, [r1, #0]
    2de8:	604b      	str	r3, [r1, #4]
    2dea:	f101 0008 	add.w	r0, r1, #8
    2dee:	e8b2 5038 	ldmia.w	r2!, {r3, r4, r5, ip, lr}
    2df2:	e8a0 5038 	stmia.w	r0!, {r3, r4, r5, ip, lr}
    2df6:	e892 5038 	ldmia.w	r2, {r3, r4, r5, ip, lr}
    2dfa:	e880 5038 	stmia.w	r0, {r3, r4, r5, ip, lr}
    2dfe:	2000      	movs	r0, #0
    2e00:	f881 0094 	strb.w	r0, [r1, #148]	@ 0x94
}
    2e04:	b004      	add	sp, #16
    2e06:	bdb0      	pop	{r4, r5, r7, pc}

00002e08 <_ZN30microbit_async_display_example6button21handle_button_a_press17hee6c5341e3c2e2baE>:
pub async fn handle_button_a_press(display: &mut LedMatrix) {
    2e08:	b580      	push	{r7, lr}
    2e0a:	466f      	mov	r7, sp
    2e0c:	b082      	sub	sp, #8
    2e0e:	9100      	str	r1, [sp, #0]
    2e10:	4601      	mov	r1, r0
    2e12:	9800      	ldr	r0, [sp, #0]
    2e14:	9001      	str	r0, [sp, #4]
    2e16:	f8c1 0098 	str.w	r0, [r1, #152]	@ 0x98
    2e1a:	2000      	movs	r0, #0
    2e1c:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
}
    2e20:	b002      	add	sp, #8
    2e22:	bd80      	pop	{r7, pc}

00002e24 <_ZN30microbit_async_display_example6button21handle_button_b_press17ha46feb442fbaf9a9E>:
pub async fn handle_button_b_press(display: &mut LedMatrix) {
    2e24:	b580      	push	{r7, lr}
    2e26:	466f      	mov	r7, sp
    2e28:	b082      	sub	sp, #8
    2e2a:	9100      	str	r1, [sp, #0]
    2e2c:	4601      	mov	r1, r0
    2e2e:	9800      	ldr	r0, [sp, #0]
    2e30:	9001      	str	r0, [sp, #4]
    2e32:	f8c1 0098 	str.w	r0, [r1, #152]	@ 0x98
    2e36:	2000      	movs	r0, #0
    2e38:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
}
    2e3c:	b002      	add	sp, #8
    2e3e:	bd80      	pop	{r7, pc}

00002e40 <_ZN16embassy_executor7spawner19SpawnToken$LT$S$GT$10new_failed17h14713d30cecec555E>:
            phantom: PhantomData,
        }
    }

    /// Return a SpawnToken that represents a failed spawn.
    pub fn new_failed() -> Self {
    2e40:	b580      	push	{r7, lr}
    2e42:	466f      	mov	r7, sp
    2e44:	b081      	sub	sp, #4
    2e46:	2000      	movs	r0, #0
        Self {
            raw_task: None,
    2e48:	9000      	str	r0, [sp, #0]
        Self {
    2e4a:	9800      	ldr	r0, [sp, #0]
            phantom: PhantomData,
        }
    }
    2e4c:	b001      	add	sp, #4
    2e4e:	bd80      	pop	{r7, pc}

00002e50 <_ZN16embassy_executor7spawner19SpawnToken$LT$S$GT$3new17h7e8bfa4500b6e3ffE>:
    pub(crate) unsafe fn new(raw_task: raw::TaskRef) -> Self {
    2e50:	b580      	push	{r7, lr}
    2e52:	466f      	mov	r7, sp
    2e54:	b082      	sub	sp, #8
    2e56:	9001      	str	r0, [sp, #4]
            raw_task: Some(raw_task),
    2e58:	9000      	str	r0, [sp, #0]
        Self {
    2e5a:	9800      	ldr	r0, [sp, #0]
    }
    2e5c:	b002      	add	sp, #8
    2e5e:	bd80      	pop	{r7, pc}

00002e60 <_ZN16embassy_executor7spawner7Spawner10must_spawn17hfa47033edf7cc1b8E>:
    /// Spawn a task into an executor, panicking on failure.
    ///
    /// # Panics
    ///
    /// Panics if the spawning fails.
    pub fn must_spawn<S>(&self, token: SpawnToken<S>) {
    2e60:	b580      	push	{r7, lr}
    2e62:	466f      	mov	r7, sp
    2e64:	b086      	sub	sp, #24
    2e66:	9002      	str	r0, [sp, #8]
    2e68:	9103      	str	r1, [sp, #12]
        unwrap!(self.spawn(token));
    2e6a:	f000 f81d 	bl	2ea8 <_ZN16embassy_executor7spawner7Spawner5spawn17hc2fd789850740ad9E>
    2e6e:	f7fe fef3 	bl	1c58 <_ZN5defmt6export11into_result17hdf4031145057e60aE>
    2e72:	b1b8      	cbz	r0, 2ea4 <_ZN16embassy_executor7spawner7Spawner10must_spawn17hfa47033edf7cc1b8E+0x44>
    2e74:	e7ff      	b.n	2e76 <_ZN16embassy_executor7spawner7Spawner10must_spawn17hfa47033edf7cc1b8E+0x16>
    2e76:	f1a7 0013 	sub.w	r0, r7, #19
    2e7a:	9000      	str	r0, [sp, #0]
    2e7c:	9005      	str	r0, [sp, #20]
    2e7e:	f240 0009 	movw	r0, #9
    2e82:	f2c0 0000 	movt	r0, #0
    2e86:	f006 ffac 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    2e8a:	f827 0c12 	strh.w	r0, [r7, #-18]
    2e8e:	f1a7 0012 	sub.w	r0, r7, #18
    2e92:	f007 f805 	bl	9ea0 <_ZN5defmt6export18acquire_and_header17h16cffd26e27c4a0bE>
    2e96:	9800      	ldr	r0, [sp, #0]
    2e98:	f7fe fee7 	bl	1c6a <_ZN5defmt6export3fmt17h656bee50977e5e37E>
    2e9c:	f005 fbf7 	bl	868e <_defmt_release>
    unsafe { _defmt_panic() }
    2ea0:	f007 f83e 	bl	9f20 <__defmt_default_panic>
    }
    2ea4:	b006      	add	sp, #24
    2ea6:	bd80      	pop	{r7, pc}

00002ea8 <_ZN16embassy_executor7spawner7Spawner5spawn17hc2fd789850740ad9E>:
    pub fn spawn<S>(&self, token: SpawnToken<S>) -> Result<(), SpawnError> {
    2ea8:	b580      	push	{r7, lr}
    2eaa:	466f      	mov	r7, sp
    2eac:	b088      	sub	sp, #32
    2eae:	9101      	str	r1, [sp, #4]
    2eb0:	4601      	mov	r1, r0
    2eb2:	9801      	ldr	r0, [sp, #4]
    2eb4:	9102      	str	r1, [sp, #8]
    2eb6:	9105      	str	r1, [sp, #20]
    2eb8:	9006      	str	r0, [sp, #24]
        let task = token.raw_task;
    2eba:	9004      	str	r0, [sp, #16]
        mem::forget(token);
    2ebc:	f7ff fcc5 	bl	284a <_ZN4core3mem6forget17h2c57308c447e7258E>
        match task {
    2ec0:	9804      	ldr	r0, [sp, #16]
    2ec2:	b150      	cbz	r0, 2eda <_ZN16embassy_executor7spawner7Spawner5spawn17hc2fd789850740ad9E+0x32>
    2ec4:	e7ff      	b.n	2ec6 <_ZN16embassy_executor7spawner7Spawner5spawn17hc2fd789850740ad9E+0x1e>
            Some(task) => {
    2ec6:	9802      	ldr	r0, [sp, #8]
    2ec8:	9904      	ldr	r1, [sp, #16]
    2eca:	9107      	str	r1, [sp, #28]
                unsafe { self.executor.spawn(task) };
    2ecc:	6800      	ldr	r0, [r0, #0]
    2ece:	f006 fcc5 	bl	985c <_ZN16embassy_executor3raw8Executor5spawn17h8099ca7172178bb6E>
    2ed2:	2000      	movs	r0, #0
                Ok(())
    2ed4:	f807 0c11 	strb.w	r0, [r7, #-17]
            }
    2ed8:	e003      	b.n	2ee2 <_ZN16embassy_executor7spawner7Spawner5spawn17hc2fd789850740ad9E+0x3a>
    2eda:	2001      	movs	r0, #1
            None => Err(SpawnError::Busy),
    2edc:	f807 0c11 	strb.w	r0, [r7, #-17]
    2ee0:	e7ff      	b.n	2ee2 <_ZN16embassy_executor7spawner7Spawner5spawn17hc2fd789850740ad9E+0x3a>
    }
    2ee2:	f817 0c11 	ldrb.w	r0, [r7, #-17]
    2ee6:	b008      	add	sp, #32
    2ee8:	bd80      	pop	{r7, pc}

00002eea <_ZN16critical_section4with17had406faee0062bd7E>:
/// # Panics
///
/// This function panics if the given closure `f` panics. In this case
/// the critical section is released before unwinding.
#[inline]
pub fn with<R>(f: impl FnOnce(CriticalSection) -> R) -> R {
    2eea:	b580      	push	{r7, lr}
    2eec:	466f      	mov	r7, sp
    2eee:	b086      	sub	sp, #24
    2ef0:	9001      	str	r0, [sp, #4]
    2ef2:	9004      	str	r0, [sp, #16]
    RestoreState(_critical_section_1_0_acquire())
    2ef4:	f007 f9cc 	bl	a290 <_critical_section_1_0_acquire>
    2ef8:	4601      	mov	r1, r0
        fn drop(&mut self) {
            unsafe { release(self.state) }
        }
    }

    let state = unsafe { acquire() };
    2efa:	9801      	ldr	r0, [sp, #4]
    2efc:	f807 1c01 	strb.w	r1, [r7, #-1]
    let _guard = Guard { state };
    2f00:	f807 1c09 	strb.w	r1, [r7, #-9]

    unsafe { f(CriticalSection::new()) }
    2f04:	f7fd fbc3 	bl	68e <_ZN16embassy_executor7_export11TaskPoolRef3get28_$u7b$$u7b$closure$u7d$$u7d$17h51e2099415bbea6fE>
}
    2f08:	9002      	str	r0, [sp, #8]
    2f0a:	f1a7 0009 	sub.w	r0, r7, #9
    2f0e:	f004 f915 	bl	713c <_ZN4core3ptr50drop_in_place$LT$critical_section..with..Guard$GT$17h82a7466148a2f4a1E>
    2f12:	9802      	ldr	r0, [sp, #8]
    2f14:	b006      	add	sp, #24
    2f16:	bd80      	pop	{r7, pc}

00002f18 <_ZN11embassy_nrf4gpio4Flex12set_as_input28_$u7b$$u7b$closure$u7d$$u7d$17h78ecabd4ec162755E>:
        self.pin.conf().write(|w| {
    2f18:	b580      	push	{r7, lr}
    2f1a:	466f      	mov	r7, sp
    2f1c:	b08e      	sub	sp, #56	@ 0x38
    2f1e:	460a      	mov	r2, r1
    2f20:	9201      	str	r2, [sp, #4]
    2f22:	f807 0c29 	strb.w	r0, [r7, #-41]
    2f26:	9204      	str	r2, [sp, #16]
    2f28:	2100      	movs	r1, #0
            w.set_dir(vals::Dir::INPUT);
    2f2a:	9100      	str	r1, [sp, #0]
    2f2c:	f807 1c2d 	strb.w	r1, [r7, #-45]
    2f30:	f817 cc2d 	ldrb.w	ip, [r7, #-45]
    2f34:	9205      	str	r2, [sp, #20]
    2f36:	f807 cc1d 	strb.w	ip, [r7, #-29]
                self.0 = (self.0 & !(0x01 << 0usize)) | (((val.to_bits() as u32) & 0x01) << 0usize);
    2f3a:	6813      	ldr	r3, [r2, #0]
    2f3c:	f023 0301 	bic.w	r3, r3, #1
    2f40:	f88d c034 	strb.w	ip, [sp, #52]	@ 0x34
    2f44:	ea43 030c 	orr.w	r3, r3, ip
    2f48:	6013      	str	r3, [r2, #0]
            w.set_input(vals::Input::CONNECT);
    2f4a:	f88d 100c 	strb.w	r1, [sp, #12]
    2f4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2f52:	9209      	str	r2, [sp, #36]	@ 0x24
    2f54:	f807 3c0d 	strb.w	r3, [r7, #-13]
                self.0 = (self.0 & !(0x01 << 1usize)) | (((val.to_bits() as u32) & 0x01) << 1usize);
    2f58:	6811      	ldr	r1, [r2, #0]
    2f5a:	f021 0102 	bic.w	r1, r1, #2
    2f5e:	f807 3c02 	strb.w	r3, [r7, #-2]
    2f62:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
    2f66:	6011      	str	r1, [r2, #0]
            w.set_pull(convert_pull(pull));
    2f68:	f000 fae3 	bl	3532 <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E>
    2f6c:	9900      	ldr	r1, [sp, #0]
    2f6e:	4603      	mov	r3, r0
    2f70:	9801      	ldr	r0, [sp, #4]
    2f72:	9007      	str	r0, [sp, #28]
    2f74:	f807 3c15 	strb.w	r3, [r7, #-21]
                self.0 = (self.0 & !(0x03 << 2usize)) | (((val.to_bits() as u32) & 0x03) << 2usize);
    2f78:	6802      	ldr	r2, [r0, #0]
    2f7a:	f022 020c 	bic.w	r2, r2, #12
    2f7e:	f807 3c03 	strb.w	r3, [r7, #-3]
    2f82:	f003 0303 	and.w	r3, r3, #3
    2f86:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
    2f8a:	6002      	str	r2, [r0, #0]
            convert_drive(w, OutputDrive::Standard);
    2f8c:	f807 1c2b 	strb.w	r1, [r7, #-43]
    2f90:	f817 1c2b 	ldrb.w	r1, [r7, #-43]
    2f94:	f000 fa8a 	bl	34ac <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E>
    2f98:	9800      	ldr	r0, [sp, #0]
    2f9a:	9901      	ldr	r1, [sp, #4]
            w.set_sense(vals::Sense::DISABLED);
    2f9c:	f807 0c2a 	strb.w	r0, [r7, #-42]
    2fa0:	f817 2c2a 	ldrb.w	r2, [r7, #-42]
    2fa4:	910b      	str	r1, [sp, #44]	@ 0x2c
    2fa6:	f807 2c05 	strb.w	r2, [r7, #-5]
                    (self.0 & !(0x03 << 16usize)) | (((val.to_bits() as u32) & 0x03) << 16usize);
    2faa:	6808      	ldr	r0, [r1, #0]
    2fac:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
    2fb0:	f807 2c01 	strb.w	r2, [r7, #-1]
    2fb4:	f002 0203 	and.w	r2, r2, #3
                self.0 =
    2fb8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    2fbc:	6008      	str	r0, [r1, #0]
        });
    2fbe:	b00e      	add	sp, #56	@ 0x38
    2fc0:	bd80      	pop	{r7, pc}

00002fc2 <_ZN11embassy_nrf4gpio4Flex13set_as_output28_$u7b$$u7b$closure$u7d$$u7d$17h703a1e8664381b5aE>:
        self.pin.conf().write(|w| {
    2fc2:	b580      	push	{r7, lr}
    2fc4:	466f      	mov	r7, sp
    2fc6:	b08e      	sub	sp, #56	@ 0x38
    2fc8:	9101      	str	r1, [sp, #4]
    2fca:	4601      	mov	r1, r0
    2fcc:	9801      	ldr	r0, [sp, #4]
    2fce:	9102      	str	r1, [sp, #8]
    2fd0:	9004      	str	r0, [sp, #16]
    2fd2:	2101      	movs	r1, #1
            w.set_dir(vals::Dir::OUTPUT);
    2fd4:	f88d 100c 	strb.w	r1, [sp, #12]
    2fd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2fdc:	9005      	str	r0, [sp, #20]
    2fde:	f807 3c1d 	strb.w	r3, [r7, #-29]
                self.0 = (self.0 & !(0x01 << 0usize)) | (((val.to_bits() as u32) & 0x01) << 0usize);
    2fe2:	6802      	ldr	r2, [r0, #0]
    2fe4:	f022 0201 	bic.w	r2, r2, #1
    2fe8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
    2fec:	431a      	orrs	r2, r3
    2fee:	6002      	str	r2, [r0, #0]
            w.set_input(vals::Input::DISCONNECT);
    2ff0:	f807 1c2b 	strb.w	r1, [r7, #-43]
    2ff4:	f817 2c2b 	ldrb.w	r2, [r7, #-43]
    2ff8:	9009      	str	r0, [sp, #36]	@ 0x24
    2ffa:	f807 2c0d 	strb.w	r2, [r7, #-13]
                self.0 = (self.0 & !(0x01 << 1usize)) | (((val.to_bits() as u32) & 0x01) << 1usize);
    2ffe:	6801      	ldr	r1, [r0, #0]
    3000:	f021 0102 	bic.w	r1, r1, #2
    3004:	f807 2c02 	strb.w	r2, [r7, #-2]
    3008:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    300c:	6001      	str	r1, [r0, #0]
    300e:	2100      	movs	r1, #0
            w.set_pull(vals::Pull::DISABLED);
    3010:	9100      	str	r1, [sp, #0]
    3012:	f807 1c2a 	strb.w	r1, [r7, #-42]
    3016:	f817 2c2a 	ldrb.w	r2, [r7, #-42]
    301a:	9007      	str	r0, [sp, #28]
    301c:	f807 2c15 	strb.w	r2, [r7, #-21]
                self.0 = (self.0 & !(0x03 << 2usize)) | (((val.to_bits() as u32) & 0x03) << 2usize);
    3020:	6801      	ldr	r1, [r0, #0]
    3022:	f021 010c 	bic.w	r1, r1, #12
    3026:	f807 2c03 	strb.w	r2, [r7, #-3]
    302a:	f002 0203 	and.w	r2, r2, #3
    302e:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3032:	6001      	str	r1, [r0, #0]
            convert_drive(w, drive);
    3034:	9902      	ldr	r1, [sp, #8]
    3036:	7809      	ldrb	r1, [r1, #0]
    3038:	f000 fa38 	bl	34ac <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E>
    303c:	9800      	ldr	r0, [sp, #0]
    303e:	9901      	ldr	r1, [sp, #4]
            w.set_sense(vals::Sense::DISABLED);
    3040:	f807 0c29 	strb.w	r0, [r7, #-41]
    3044:	f817 2c29 	ldrb.w	r2, [r7, #-41]
    3048:	910b      	str	r1, [sp, #44]	@ 0x2c
    304a:	f807 2c05 	strb.w	r2, [r7, #-5]
                    (self.0 & !(0x03 << 16usize)) | (((val.to_bits() as u32) & 0x03) << 16usize);
    304e:	6808      	ldr	r0, [r1, #0]
    3050:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
    3054:	f807 2c01 	strb.w	r2, [r7, #-1]
    3058:	f002 0203 	and.w	r2, r2, #3
                self.0 =
    305c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    3060:	6008      	str	r0, [r1, #0]
        });
    3062:	b00e      	add	sp, #56	@ 0x38
    3064:	bd80      	pop	{r7, pc}

00003066 <_ZN11embassy_nrf4gpio4Flex3new17hb5ba73ecdff41566E>:
    pub fn new(pin: impl Peripheral<P = impl Pin> + 'd) -> Self {
    3066:	b580      	push	{r7, lr}
    3068:	466f      	mov	r7, sp
    306a:	b082      	sub	sp, #8
    306c:	f807 0c02 	strb.w	r0, [r7, #-2]
        into_ref!(pin);
    3070:	f000 f83d 	bl	30ee <_ZN20embassy_hal_internal10peripheral10Peripheral8into_ref17hbeca4ff3406c5260E>
    3074:	f807 0c01 	strb.w	r0, [r7, #-1]
        Self { pin: pin.map_into() }
    3078:	f000 f943 	bl	3302 <_ZN20embassy_hal_internal10peripheral22PeripheralRef$LT$T$GT$8map_into17head8db7c9afbb958E>
    }
    307c:	b002      	add	sp, #8
    307e:	bd80      	pop	{r7, pc}

00003080 <_ZN11embassy_nrf4gpio5Input3new17h1bfec48e2faf3f52E>:
    pub fn new(pin: impl Peripheral<P = impl Pin> + 'd, pull: Pull) -> Self {
    3080:	b580      	push	{r7, lr}
    3082:	466f      	mov	r7, sp
    3084:	b082      	sub	sp, #8
    3086:	9100      	str	r1, [sp, #0]
    3088:	f807 0c02 	strb.w	r0, [r7, #-2]
    308c:	f807 1c01 	strb.w	r1, [r7, #-1]
        let mut pin = Flex::new(pin);
    3090:	f7ff ffe9 	bl	3066 <_ZN11embassy_nrf4gpio4Flex3new17hb5ba73ecdff41566E>
    3094:	9900      	ldr	r1, [sp, #0]
    3096:	f807 0c03 	strb.w	r0, [r7, #-3]
    309a:	1ef8      	subs	r0, r7, #3
        pin.set_as_input(pull);
    309c:	f7ff f9ed 	bl	247a <_ZN11embassy_nrf4gpio4Flex12set_as_input17h65c3916afa65d5b7E>
    }
    30a0:	f817 0c03 	ldrb.w	r0, [r7, #-3]
    30a4:	b002      	add	sp, #8
    30a6:	bd80      	pop	{r7, pc}

000030a8 <_ZN11embassy_nrf4gpio6Output3new17hd692aeb55207d18bE>:
    pub fn new(pin: impl Peripheral<P = impl Pin> + 'd, initial_output: Level, drive: OutputDrive) -> Self {
    30a8:	b580      	push	{r7, lr}
    30aa:	466f      	mov	r7, sp
    30ac:	b084      	sub	sp, #16
    30ae:	9102      	str	r1, [sp, #8]
    30b0:	4613      	mov	r3, r2
    30b2:	9301      	str	r3, [sp, #4]
    30b4:	f807 0c03 	strb.w	r0, [r7, #-3]
    30b8:	f807 1c02 	strb.w	r1, [r7, #-2]
    30bc:	f807 2c01 	strb.w	r2, [r7, #-1]
        let mut pin = Flex::new(pin);
    30c0:	f7ff ffd1 	bl	3066 <_ZN11embassy_nrf4gpio4Flex3new17hb5ba73ecdff41566E>
    30c4:	9902      	ldr	r1, [sp, #8]
    30c6:	f88d 000c 	strb.w	r0, [sp, #12]
        match initial_output {
    30ca:	b121      	cbz	r1, 30d6 <_ZN11embassy_nrf4gpio6Output3new17hd692aeb55207d18bE+0x2e>
    30cc:	e7ff      	b.n	30ce <_ZN11embassy_nrf4gpio6Output3new17hd692aeb55207d18bE+0x26>
    30ce:	a803      	add	r0, sp, #12
            Level::High => pin.set_high(),
    30d0:	f7ff fa21 	bl	2516 <_ZN11embassy_nrf4gpio4Flex8set_high17hca85bf3df5ae8d49E>
    30d4:	e003      	b.n	30de <_ZN11embassy_nrf4gpio6Output3new17hd692aeb55207d18bE+0x36>
    30d6:	a803      	add	r0, sp, #12
            Level::Low => pin.set_low(),
    30d8:	f7ff fa13 	bl	2502 <_ZN11embassy_nrf4gpio4Flex7set_low17h1ee4eef4c91d7346E>
    30dc:	e7ff      	b.n	30de <_ZN11embassy_nrf4gpio6Output3new17hd692aeb55207d18bE+0x36>
        pin.set_as_output(drive);
    30de:	9901      	ldr	r1, [sp, #4]
    30e0:	a803      	add	r0, sp, #12
    30e2:	f7ff f9ed 	bl	24c0 <_ZN11embassy_nrf4gpio4Flex13set_as_output17h566bd5c4dfe7f7e6E>
    }
    30e6:	f89d 000c 	ldrb.w	r0, [sp, #12]
    30ea:	b004      	add	sp, #16
    30ec:	bd80      	pop	{r7, pc}

000030ee <_ZN20embassy_hal_internal10peripheral10Peripheral8into_ref17hbeca4ff3406c5260E>:
    /// Convert a value into a `PeripheralRef`.
    ///
    /// When called on an owned `T`, yields a `PeripheralRef<'static, T>`.
    /// When called on an `&'a mut T`, yields a `PeripheralRef<'a, T>`.
    #[inline]
    fn into_ref<'a>(self) -> PeripheralRef<'a, Self::P>
    30ee:	b580      	push	{r7, lr}
    30f0:	466f      	mov	r7, sp
    30f2:	b082      	sub	sp, #8
    30f4:	f807 0c01 	strb.w	r0, [r7, #-1]
    30f8:	1e78      	subs	r0, r7, #1
    where
        Self: 'a,
    {
        PeripheralRef::new(unsafe { self.clone_unchecked() })
    30fa:	f7ff fa16 	bl	252a <_ZN90_$LT$embassy_nrf..gpio..AnyPin$u20$as$u20$embassy_hal_internal..peripheral..Peripheral$GT$15clone_unchecked17hefbc872d95c0faafE>
    30fe:	f000 f8f9 	bl	32f4 <_ZN20embassy_hal_internal10peripheral22PeripheralRef$LT$T$GT$3new17h2d543c4c247c72b7E>
    }
    3102:	b002      	add	sp, #8
    3104:	bd80      	pop	{r7, pc}

00003106 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h2b28b071caa8b06cE>:
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    3106:	b580      	push	{r7, lr}
    3108:	466f      	mov	r7, sp
    310a:	b082      	sub	sp, #8
    310c:	9000      	str	r0, [sp, #0]
    310e:	9101      	str	r1, [sp, #4]
        IterMut::new(self)
    3110:	f7fd fbb8 	bl	884 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hd287c3811530aa19E>
    }
    3114:	b002      	add	sp, #8
    3116:	bd80      	pop	{r7, pc}

00003118 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h00f2eeabab1f54d6E>:
    ///
    /// That is, this conversion is whatever the implementation of
    /// <code>[From]&lt;T&gt; for U</code> chooses to do.
    #[inline]
    #[track_caller]
    fn into(self) -> U {
    3118:	b580      	push	{r7, lr}
    311a:	466f      	mov	r7, sp
    311c:	b081      	sub	sp, #4
    311e:	f807 0c02 	strb.w	r0, [r7, #-2]
    3122:	f807 0c01 	strb.w	r0, [r7, #-1]
        U::from(self)
    }
    3126:	b001      	add	sp, #4
    3128:	bd80      	pop	{r7, pc}

0000312a <_ZN30microbit_async_display_example5fonts9frame_5x517h98f96d1f25d21acfE>:
///     0b01110,  // ·▪▪▪·
///     0b00100,  // ··▪··
/// ]);
/// display.display(heart, Duration::from_secs(2)).await;
/// ```
pub const fn frame_5x5<const XSIZE: usize, const YSIZE: usize>(input: &[u8; 5]) -> Frame<XSIZE, YSIZE> {
    312a:	b5f0      	push	{r4, r5, r6, r7, lr}
    312c:	af03      	add	r7, sp, #12
    312e:	f84d bd04 	str.w	fp, [sp, #-4]!
    3132:	b0a6      	sub	sp, #152	@ 0x98
    3134:	9102      	str	r1, [sp, #8]
    3136:	9003      	str	r0, [sp, #12]
    3138:	9125      	str	r1, [sp, #148]	@ 0x94
    313a:	a80f      	add	r0, sp, #60	@ 0x3c
    313c:	2105      	movs	r1, #5
    let mut data = [Bitmap::empty(5); YSIZE];
    313e:	f7fd f84a 	bl	1d6 <_ZN30microbit_async_display_example5types6Bitmap5empty17h671b31d8a4f10c17E>
    3142:	2000      	movs	r0, #0
    3144:	9004      	str	r0, [sp, #16]
    3146:	e7ff      	b.n	3148 <_ZN30microbit_async_display_example5fonts9frame_5x517h98f96d1f25d21acfE+0x1e>
    3148:	9804      	ldr	r0, [sp, #16]
    314a:	9001      	str	r0, [sp, #4]
    314c:	2804      	cmp	r0, #4
    314e:	d80d      	bhi.n	316c <_ZN30microbit_async_display_example5fonts9frame_5x517h98f96d1f25d21acfE+0x42>
    3150:	e7ff      	b.n	3152 <_ZN30microbit_async_display_example5fonts9frame_5x517h98f96d1f25d21acfE+0x28>
    3152:	9801      	ldr	r0, [sp, #4]
    3154:	f10d 0c14 	add.w	ip, sp, #20
    3158:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
    315c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    315e:	9910      	ldr	r1, [sp, #64]	@ 0x40
    3160:	f84c 3030 	str.w	r3, [ip, r0, lsl #3]
    3164:	6051      	str	r1, [r2, #4]
    3166:	3001      	adds	r0, #1
    3168:	9004      	str	r0, [sp, #16]
    316a:	e7ed      	b.n	3148 <_ZN30microbit_async_display_example5fonts9frame_5x517h98f96d1f25d21acfE+0x1e>
    data[0] = Bitmap::new(input[0], 5);
    316c:	9802      	ldr	r0, [sp, #8]
    316e:	7801      	ldrb	r1, [r0, #0]
    3170:	a811      	add	r0, sp, #68	@ 0x44
    3172:	2205      	movs	r2, #5
    3174:	9200      	str	r2, [sp, #0]
    3176:	f7fc ffef 	bl	158 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E>
    317a:	9802      	ldr	r0, [sp, #8]
    317c:	9a00      	ldr	r2, [sp, #0]
    317e:	9911      	ldr	r1, [sp, #68]	@ 0x44
    3180:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    3182:	9306      	str	r3, [sp, #24]
    3184:	9105      	str	r1, [sp, #20]
    data[1] = Bitmap::new(input[1], 5);
    3186:	7841      	ldrb	r1, [r0, #1]
    3188:	a813      	add	r0, sp, #76	@ 0x4c
    318a:	f7fc ffe5 	bl	158 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E>
    318e:	9802      	ldr	r0, [sp, #8]
    3190:	9a00      	ldr	r2, [sp, #0]
    3192:	9913      	ldr	r1, [sp, #76]	@ 0x4c
    3194:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    3196:	9308      	str	r3, [sp, #32]
    3198:	9107      	str	r1, [sp, #28]
    data[2] = Bitmap::new(input[2], 5);
    319a:	7881      	ldrb	r1, [r0, #2]
    319c:	a815      	add	r0, sp, #84	@ 0x54
    319e:	f7fc ffdb 	bl	158 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E>
    31a2:	9802      	ldr	r0, [sp, #8]
    31a4:	9a00      	ldr	r2, [sp, #0]
    31a6:	9915      	ldr	r1, [sp, #84]	@ 0x54
    31a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
    31aa:	930a      	str	r3, [sp, #40]	@ 0x28
    31ac:	9109      	str	r1, [sp, #36]	@ 0x24
    data[3] = Bitmap::new(input[3], 5);
    31ae:	78c1      	ldrb	r1, [r0, #3]
    31b0:	a817      	add	r0, sp, #92	@ 0x5c
    31b2:	f7fc ffd1 	bl	158 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E>
    31b6:	9802      	ldr	r0, [sp, #8]
    31b8:	9a00      	ldr	r2, [sp, #0]
    31ba:	9917      	ldr	r1, [sp, #92]	@ 0x5c
    31bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
    31be:	930c      	str	r3, [sp, #48]	@ 0x30
    31c0:	910b      	str	r1, [sp, #44]	@ 0x2c
    data[4] = Bitmap::new(input[4], 5);
    31c2:	7901      	ldrb	r1, [r0, #4]
    31c4:	a819      	add	r0, sp, #100	@ 0x64
    31c6:	f7fc ffc7 	bl	158 <_ZN30microbit_async_display_example5types6Bitmap3new17h79fbfbb6e6733313E>
    31ca:	9803      	ldr	r0, [sp, #12]
    31cc:	9919      	ldr	r1, [sp, #100]	@ 0x64
    31ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
    31d0:	920e      	str	r2, [sp, #56]	@ 0x38
    31d2:	910d      	str	r1, [sp, #52]	@ 0x34
    31d4:	ab05      	add	r3, sp, #20
    31d6:	a91b      	add	r1, sp, #108	@ 0x6c
    Frame::new(data)
    31d8:	460a      	mov	r2, r1
    31da:	e8b3 5070 	ldmia.w	r3!, {r4, r5, r6, ip, lr}
    31de:	e8a2 5070 	stmia.w	r2!, {r4, r5, r6, ip, lr}
    31e2:	e893 5070 	ldmia.w	r3, {r4, r5, r6, ip, lr}
    31e6:	e882 5070 	stmia.w	r2, {r4, r5, r6, ip, lr}
    31ea:	f7ff fcf1 	bl	2bd0 <_ZN30microbit_async_display_example5types18Frame$LT$_$C$_$GT$3new17h549354db15c6f16eE>
}
    31ee:	b026      	add	sp, #152	@ 0x98
    31f0:	f85d bb04 	ldr.w	fp, [sp], #4
    31f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000031f6 <_ZN30microbit_async_display_example5fonts117_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$u8$GT$4into17h0b58ee4b162ed695E>:
///
/// # Note
/// This is primarily used for ASCII character codes (0-255).
/// Non-printable characters display as blank frames.
impl<const XSIZE: usize, const YSIZE: usize> Into<Frame<XSIZE, YSIZE>> for u8 {
    fn into(self) -> Frame<XSIZE, YSIZE> {
    31f6:	b580      	push	{r7, lr}
    31f8:	466f      	mov	r7, sp
    31fa:	b082      	sub	sp, #8
    31fc:	f807 1c01 	strb.w	r1, [r7, #-1]
        (self as char).into()
    3200:	b2c9      	uxtb	r1, r1
    3202:	f000 f802 	bl	320a <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE>
    }
    3206:	b002      	add	sp, #8
    3208:	bd80      	pop	{r7, pc}

0000320a <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE>:
/// let a_frame: Frame<5, 5> = 'A'.into();
/// let space_frame: Frame<5, 5> = ' '.into();
/// let digit_frame: Frame<5, 5> = '7'.into();
/// ```
impl<const XSIZE: usize, const YSIZE: usize> Into<Frame<XSIZE, YSIZE>> for char {
    fn into(self) -> Frame<XSIZE, YSIZE> {
    320a:	b580      	push	{r7, lr}
    320c:	466f      	mov	r7, sp
    320e:	b086      	sub	sp, #24
    3210:	9102      	str	r1, [sp, #8]
    3212:	9003      	str	r0, [sp, #12]
    3214:	9104      	str	r1, [sp, #16]
        assert!(XSIZE == 5);
    3216:	e7ff      	b.n	3218 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0xe>
        assert!(YSIZE == 5);
    3218:	e7ff      	b.n	321a <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x10>

        let n = self as usize;
    321a:	9802      	ldr	r0, [sp, #8]
    321c:	9005      	str	r0, [sp, #20]
        if n > PRINTABLE_START && n < PRINTABLE_START + PRINTABLE_COUNT {
    321e:	2820      	cmp	r0, #32
    3220:	d808      	bhi.n	3234 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x2a>
    3222:	e7ff      	b.n	3224 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x1a>
            frame_5x5(&PENDOLINO3[n - PRINTABLE_START])
        } else {
            frame_5x5(&[0, 0, 0, 0, 0])
    3224:	9803      	ldr	r0, [sp, #12]
    3226:	f24c 31bc 	movw	r1, #50108	@ 0xc3bc
    322a:	f2c0 0100 	movt	r1, #0
    322e:	f7ff ff7c 	bl	312a <_ZN30microbit_async_display_example5fonts9frame_5x517h98f96d1f25d21acfE>
    3232:	e016      	b.n	3262 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x58>
    3234:	207f      	movs	r0, #127	@ 0x7f
    3236:	9001      	str	r0, [sp, #4]
    3238:	2000      	movs	r0, #0
        if n > PRINTABLE_START && n < PRINTABLE_START + PRINTABLE_COUNT {
    323a:	b928      	cbnz	r0, 3248 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x3e>
    323c:	e7ff      	b.n	323e <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x34>
    323e:	9802      	ldr	r0, [sp, #8]
    3240:	9901      	ldr	r1, [sp, #4]
    3242:	4288      	cmp	r0, r1
    3244:	d306      	bcc.n	3254 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x4a>
    3246:	e7ed      	b.n	3224 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x1a>
    3248:	f24c 30ac 	movw	r0, #50092	@ 0xc3ac
    324c:	f2c0 0000 	movt	r0, #0
    3250:	f007 ff6b 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
            frame_5x5(&PENDOLINO3[n - PRINTABLE_START])
    3254:	9802      	ldr	r0, [sp, #8]
    3256:	f1a0 0120 	sub.w	r1, r0, #32
    325a:	9100      	str	r1, [sp, #0]
    325c:	2820      	cmp	r0, #32
    325e:	d306      	bcc.n	326e <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x64>
    3260:	e001      	b.n	3266 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x5c>
        }
    }
    3262:	b006      	add	sp, #24
    3264:	bd80      	pop	{r7, pc}
            frame_5x5(&PENDOLINO3[n - PRINTABLE_START])
    3266:	9800      	ldr	r0, [sp, #0]
    3268:	285f      	cmp	r0, #95	@ 0x5f
    326a:	d306      	bcc.n	327a <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x70>
    326c:	e011      	b.n	3292 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x88>
    326e:	f24c 30c4 	movw	r0, #50116	@ 0xc3c4
    3272:	f2c0 0000 	movt	r0, #0
    3276:	f007 ff6b 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    327a:	9803      	ldr	r0, [sp, #12]
    327c:	9900      	ldr	r1, [sp, #0]
    327e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    3282:	f24c 31e4 	movw	r1, #50148	@ 0xc3e4
    3286:	f2c0 0100 	movt	r1, #0
    328a:	4411      	add	r1, r2
    328c:	f7ff ff4d 	bl	312a <_ZN30microbit_async_display_example5fonts9frame_5x517h98f96d1f25d21acfE>
    3290:	e7e7      	b.n	3262 <_ZN30microbit_async_display_example5fonts119_$LT$impl$u20$core..convert..Into$LT$microbit_async_display_example..types..Frame$LT$_$C$_$GT$$GT$$u20$for$u20$char$GT$4into17h0ed2a7425f60260fE+0x58>
    3292:	9800      	ldr	r0, [sp, #0]
    3294:	f24c 32d4 	movw	r2, #50132	@ 0xc3d4
    3298:	f2c0 0200 	movt	r2, #0
    329c:	215f      	movs	r1, #95	@ 0x5f
    329e:	f007 f92b 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

000032a2 <_ZN4core5alloc6layout6Layout3new17h392af1b5063bfc40E>:
    /// Constructs a `Layout` suitable for holding a value of type `T`.
    #[stable(feature = "alloc_layout", since = "1.28.0")]
    #[rustc_const_stable(feature = "alloc_layout_const_new", since = "1.42.0")]
    #[must_use]
    #[inline]
    pub const fn new<T>() -> Self {
    32a2:	b580      	push	{r7, lr}
    32a4:	466f      	mov	r7, sp
    32a6:	b082      	sub	sp, #8
    32a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_promotable]
#[rustc_const_stable(feature = "const_mem_size_of", since = "1.24.0")]
#[rustc_diagnostic_item = "mem_size_of"]
pub const fn size_of<T>() -> usize {
    intrinsics::size_of::<T>()
    32ac:	9000      	str	r0, [sp, #0]
    32ae:	2008      	movs	r0, #8
#[must_use]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_promotable]
#[rustc_const_stable(feature = "const_align_of", since = "1.24.0")]
pub const fn align_of<T>() -> usize {
    intrinsics::min_align_of::<T>()
    32b0:	9001      	str	r0, [sp, #4]

            if ::core::ub_checks::$kind() {
    32b2:	e7ff      	b.n	32b4 <_ZN4core5alloc6layout6Layout3new17h392af1b5063bfc40E+0x12>
    32b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
    32b8:	2108      	movs	r1, #8
                precondition_check($($arg,)*);
    32ba:	f7fe fe84 	bl	1fc6 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17hc90b318fc1832671E>
    32be:	e7ff      	b.n	32c0 <_ZN4core5alloc6layout6Layout3new17h392af1b5063bfc40E+0x1e>
    32c0:	2008      	movs	r0, #8
    32c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
        let (size, align) = size_align::<T>();
        // SAFETY: if the type is instantiated, rustc already ensures that its
        // layout is valid. Use the unchecked constructor to avoid inserting a
        // panicking codepath that needs to be optimized out.
        unsafe { Layout::from_size_align_unchecked(size, align) }
    }
    32c6:	b002      	add	sp, #8
    32c8:	bd80      	pop	{r7, pc}

000032ca <_ZN121_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$embassy_hal_internal..peripheral..Peripheral$GT$15clone_unchecked17ha94899275fed16e8E>:

impl<'b, T: Peripheral> Peripheral for PeripheralRef<'_, T> {
    type P = T::P;

    #[inline]
    unsafe fn clone_unchecked(&self) -> Self::P {
    32ca:	b580      	push	{r7, lr}
    32cc:	466f      	mov	r7, sp
    32ce:	b082      	sub	sp, #8
    32d0:	9001      	str	r0, [sp, #4]
        T::clone_unchecked(self)
    32d2:	f002 ffa0 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    32d6:	f7ff f928 	bl	252a <_ZN90_$LT$embassy_nrf..gpio..AnyPin$u20$as$u20$embassy_hal_internal..peripheral..Peripheral$GT$15clone_unchecked17hefbc872d95c0faafE>
    }
    32da:	b002      	add	sp, #8
    32dc:	bd80      	pop	{r7, pc}

000032de <_ZN20embassy_hal_internal10peripheral10Peripheral8into_ref17h33e1102632a9a9bbE>:
    fn into_ref<'a>(self) -> PeripheralRef<'a, Self::P>
    32de:	b580      	push	{r7, lr}
    32e0:	466f      	mov	r7, sp
    32e2:	b082      	sub	sp, #8
    32e4:	9001      	str	r0, [sp, #4]
    32e6:	a801      	add	r0, sp, #4
        PeripheralRef::new(unsafe { self.clone_unchecked() })
    32e8:	f000 f81f 	bl	332a <_ZN66_$LT$T$u20$as$u20$embassy_hal_internal..peripheral..Peripheral$GT$15clone_unchecked17h97aec751cd94acfaE>
    32ec:	f000 f802 	bl	32f4 <_ZN20embassy_hal_internal10peripheral22PeripheralRef$LT$T$GT$3new17h2d543c4c247c72b7E>
    }
    32f0:	b002      	add	sp, #8
    32f2:	bd80      	pop	{r7, pc}

000032f4 <_ZN20embassy_hal_internal10peripheral22PeripheralRef$LT$T$GT$3new17h2d543c4c247c72b7E>:
    pub fn new(inner: T) -> Self {
    32f4:	b580      	push	{r7, lr}
    32f6:	466f      	mov	r7, sp
    32f8:	b081      	sub	sp, #4
    32fa:	f807 0c01 	strb.w	r0, [r7, #-1]
    }
    32fe:	b001      	add	sp, #4
    3300:	bd80      	pop	{r7, pc}

00003302 <_ZN20embassy_hal_internal10peripheral22PeripheralRef$LT$T$GT$8map_into17head8db7c9afbb958E>:
    pub fn map_into<U>(self) -> PeripheralRef<'a, U>
    3302:	b580      	push	{r7, lr}
    3304:	466f      	mov	r7, sp
    3306:	b082      	sub	sp, #8
    3308:	f807 0c01 	strb.w	r0, [r7, #-1]
            inner: self.inner.into(),
    330c:	f24c 6134 	movw	r1, #50740	@ 0xc634
    3310:	f2c0 0100 	movt	r1, #0
    3314:	f7ff ff00 	bl	3118 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h00f2eeabab1f54d6E>
    }
    3318:	b002      	add	sp, #8
    331a:	bd80      	pop	{r7, pc}

0000331c <_ZN57_$LT$$RF$mut$u20$T$u20$as$u20$core..ops..deref..Deref$GT$5deref17h407ef373732b9ff8E>:
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_deref", issue = "88955")]
impl<T: ?Sized> const Deref for &mut T {
    type Target = T;

    fn deref(&self) -> &T {
    331c:	b580      	push	{r7, lr}
    331e:	466f      	mov	r7, sp
    3320:	b081      	sub	sp, #4
    3322:	9000      	str	r0, [sp, #0]
        *self
    3324:	6800      	ldr	r0, [r0, #0]
    }
    3326:	b001      	add	sp, #4
    3328:	bd80      	pop	{r7, pc}

0000332a <_ZN66_$LT$T$u20$as$u20$embassy_hal_internal..peripheral..Peripheral$GT$15clone_unchecked17h97aec751cd94acfaE>:
    unsafe fn clone_unchecked(&self) -> Self::P {
    332a:	b580      	push	{r7, lr}
    332c:	466f      	mov	r7, sp
    332e:	b082      	sub	sp, #8
    3330:	9001      	str	r0, [sp, #4]
        T::Target::clone_unchecked(self)
    3332:	f7ff fff3 	bl	331c <_ZN57_$LT$$RF$mut$u20$T$u20$as$u20$core..ops..deref..Deref$GT$5deref17h407ef373732b9ff8E>
    3336:	f7ff ffc8 	bl	32ca <_ZN121_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$embassy_hal_internal..peripheral..Peripheral$GT$15clone_unchecked17ha94899275fed16e8E>
    }
    333a:	b002      	add	sp, #8
    333c:	bd80      	pop	{r7, pc}

0000333e <_ZN59_$LT$F$u20$as$u20$core..future..into_future..IntoFuture$GT$11into_future17hb4b3c43807099097E>:
    fn into_future(self) -> Self::IntoFuture {
    333e:	b580      	push	{r7, lr}
    3340:	466f      	mov	r7, sp
    3342:	b084      	sub	sp, #16
    3344:	4601      	mov	r1, r0
    3346:	68b8      	ldr	r0, [r7, #8]
    3348:	9301      	str	r3, [sp, #4]
    334a:	9200      	str	r2, [sp, #0]
    334c:	f88d 0008 	strb.w	r0, [sp, #8]
        self
    3350:	604b      	str	r3, [r1, #4]
    3352:	600a      	str	r2, [r1, #0]
    3354:	7208      	strb	r0, [r1, #8]
    }
    3356:	b004      	add	sp, #16
    3358:	bd80      	pop	{r7, pc}

0000335a <_ZN4core4cell13Cell$LT$T$GT$3get17h3beb6b66500aa087E>:
    /// let five = c.get();
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_cell", issue = "131283")]
    pub const fn get(&self) -> T {
    335a:	b580      	push	{r7, lr}
    335c:	466f      	mov	r7, sp
    335e:	b081      	sub	sp, #4
    3360:	9000      	str	r0, [sp, #0]
        // SAFETY: This can cause data races if called from a separate thread,
        // but `Cell` is `!Sync` so this won't happen.
        unsafe { *self.value.get() }
    3362:	6800      	ldr	r0, [r0, #0]
    }
    3364:	b001      	add	sp, #4
    3366:	bd80      	pop	{r7, pc}

00003368 <_ZN4core4cell13Cell$LT$T$GT$3get17h5a4f70328894023eE>:
    pub const fn get(&self) -> T {
    3368:	b580      	push	{r7, lr}
    336a:	466f      	mov	r7, sp
    336c:	b081      	sub	sp, #4
    336e:	9000      	str	r0, [sp, #0]
        unsafe { *self.value.get() }
    3370:	6800      	ldr	r0, [r0, #0]
    }
    3372:	b001      	add	sp, #4
    3374:	bd80      	pop	{r7, pc}

00003376 <_ZN4core4cell13Cell$LT$T$GT$3set17h7fa06842796ee4c0E>:
    pub fn set(&self, val: T) {
    3376:	b580      	push	{r7, lr}
    3378:	466f      	mov	r7, sp
    337a:	b082      	sub	sp, #8
    337c:	9000      	str	r0, [sp, #0]
    337e:	9101      	str	r1, [sp, #4]
        // `ptr` methods introduces two unnecessary UbChecks, so until we can
        // remove those for pointers that come from references, this uses the
        // intrinsics instead so this stays very cheap in MIR (and debug).

        let result = crate::intrinsics::read_via_copy(dest);
        crate::intrinsics::write_via_move(dest, src);
    3380:	6001      	str	r1, [r0, #0]
    }
    3382:	b002      	add	sp, #8
    3384:	bd80      	pop	{r7, pc}

00003386 <_ZN4core4cell13Cell$LT$T$GT$3set17hbd924c25cd1bf402E>:
    pub fn set(&self, val: T) {
    3386:	b580      	push	{r7, lr}
    3388:	466f      	mov	r7, sp
    338a:	b082      	sub	sp, #8
    338c:	9000      	str	r0, [sp, #0]
    338e:	9101      	str	r1, [sp, #4]
    3390:	6001      	str	r1, [r0, #0]
    }
    3392:	b002      	add	sp, #8
    3394:	bd80      	pop	{r7, pc}

00003396 <_ZN4core4sync6atomic10AtomicBool5store17hde2be9a0f56795adE>:
    pub fn store(&self, val: bool, order: Ordering) {
    3396:	b580      	push	{r7, lr}
    3398:	466f      	mov	r7, sp
    339a:	b084      	sub	sp, #16
    339c:	9001      	str	r0, [sp, #4]
    339e:	f807 1c06 	strb.w	r1, [r7, #-6]
    33a2:	f807 2c05 	strb.w	r2, [r7, #-5]
            atomic_store(self.v.get(), val as u8, order);
    33a6:	9003      	str	r0, [sp, #12]
    33a8:	f004 f8da 	bl	7560 <_ZN4core4sync6atomic12atomic_store17h2047fd04c7112c94E>
    }
    33ac:	b004      	add	sp, #16
    33ae:	bd80      	pop	{r7, pc}

000033b0 <_ZN4core4sync6atomic14compiler_fence17h02052c57d8d5e9d5E>:
/// ```
#[inline]
#[stable(feature = "compiler_fences", since = "1.21.0")]
#[rustc_diagnostic_item = "compiler_fence"]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
pub fn compiler_fence(order: Ordering) {
    33b0:	b580      	push	{r7, lr}
    33b2:	466f      	mov	r7, sp
    33b4:	b08a      	sub	sp, #40	@ 0x28
    33b6:	f807 0c05 	strb.w	r0, [r7, #-5]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    33ba:	f24c 6178 	movw	r1, #50808	@ 0xc678
    33be:	f2c0 0100 	movt	r1, #0
    33c2:	9109      	str	r1, [sp, #36]	@ 0x24
    // SAFETY: using an atomic fence is safe.
    unsafe {
        match order {
    33c4:	b2c0      	uxtb	r0, r0
    33c6:	9001      	str	r0, [sp, #4]
    33c8:	9901      	ldr	r1, [sp, #4]
    33ca:	e8df f001 	tbb	[pc, r1]
    33ce:	1e04      	.short	0x1e04
    33d0:	0021201f 	.word	0x0021201f
    33d4:	defe      	udf	#254	@ 0xfe
        Arguments { pieces, fmt: None, args: &[] }
    33d6:	f24c 6078 	movw	r0, #50808	@ 0xc678
    33da:	f2c0 0000 	movt	r0, #0
    33de:	9002      	str	r0, [sp, #8]
    33e0:	2001      	movs	r0, #1
    33e2:	9003      	str	r0, [sp, #12]
    33e4:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    33e8:	f2c0 0000 	movt	r0, #0
    33ec:	6801      	ldr	r1, [r0, #0]
    33ee:	6840      	ldr	r0, [r0, #4]
    33f0:	9106      	str	r1, [sp, #24]
    33f2:	9007      	str	r0, [sp, #28]
    33f4:	2004      	movs	r0, #4
    33f6:	9004      	str	r0, [sp, #16]
    33f8:	2000      	movs	r0, #0
    33fa:	9005      	str	r0, [sp, #20]
            Acquire => intrinsics::atomic_singlethreadfence_acquire(),
            Release => intrinsics::atomic_singlethreadfence_release(),
            AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
            SeqCst => intrinsics::atomic_singlethreadfence_seqcst(),
            Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
    33fc:	f24c 61f8 	movw	r1, #50936	@ 0xc6f8
    3400:	f2c0 0100 	movt	r1, #0
    3404:	a802      	add	r0, sp, #8
    3406:	f007 f811 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Release => intrinsics::atomic_singlethreadfence_release(),
    340a:	e002      	b.n	3412 <_ZN4core4sync6atomic14compiler_fence17h02052c57d8d5e9d5E+0x62>
            Acquire => intrinsics::atomic_singlethreadfence_acquire(),
    340c:	e001      	b.n	3412 <_ZN4core4sync6atomic14compiler_fence17h02052c57d8d5e9d5E+0x62>
            AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
    340e:	e000      	b.n	3412 <_ZN4core4sync6atomic14compiler_fence17h02052c57d8d5e9d5E+0x62>
            SeqCst => intrinsics::atomic_singlethreadfence_seqcst(),
    3410:	e7ff      	b.n	3412 <_ZN4core4sync6atomic14compiler_fence17h02052c57d8d5e9d5E+0x62>
        }
    }
}
    3412:	b00a      	add	sp, #40	@ 0x28
    3414:	bd80      	pop	{r7, pc}

00003416 <_ZN4core4sync6atomic9AtomicU3216compare_exchange17h08b568de30730aa7E>:
            pub fn compare_exchange(&self,
    3416:	b580      	push	{r7, lr}
    3418:	466f      	mov	r7, sp
    341a:	b086      	sub	sp, #24
    341c:	f8d7 c008 	ldr.w	ip, [r7, #8]
    3420:	9001      	str	r0, [sp, #4]
    3422:	9102      	str	r1, [sp, #8]
    3424:	9203      	str	r2, [sp, #12]
    3426:	f807 3c06 	strb.w	r3, [r7, #-6]
    342a:	f807 cc05 	strb.w	ip, [r7, #-5]
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
    342e:	9005      	str	r0, [sp, #20]
    3430:	46ee      	mov	lr, sp
    3432:	f8ce c000 	str.w	ip, [lr]
    3436:	f7fe f935 	bl	16a4 <_ZN4core4sync6atomic23atomic_compare_exchange17h00bdad4426f09d8aE>
            }
    343a:	b006      	add	sp, #24
    343c:	bd80      	pop	{r7, pc}

0000343e <_ZN12embassy_sync14blocking_mutex75Mutex$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$C$T$GT$6borrow17h1e5f41b1877ff8d1E>:
/// **This Mutex is only safe within a single executor.**
pub type NoopMutex<T> = Mutex<raw::NoopRawMutex, T>;

impl<T> Mutex<raw::CriticalSectionRawMutex, T> {
    /// Borrows the data for the duration of the critical section
    pub fn borrow<'cs>(&'cs self, _cs: critical_section::CriticalSection<'cs>) -> &'cs T {
    343e:	b580      	push	{r7, lr}
    3440:	466f      	mov	r7, sp
    3442:	b084      	sub	sp, #16
    3444:	9000      	str	r0, [sp, #0]
    3446:	9003      	str	r0, [sp, #12]
        let ptr = self.data.get() as *const T;
    3448:	9002      	str	r0, [sp, #8]
        unsafe { &*ptr }
    }
    344a:	b004      	add	sp, #16
    344c:	bd80      	pop	{r7, pc}

0000344e <_ZN12embassy_sync14blocking_mutex75Mutex$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$C$T$GT$6borrow17h7d19149fad415fa7E>:
    pub fn borrow<'cs>(&'cs self, _cs: critical_section::CriticalSection<'cs>) -> &'cs T {
    344e:	b580      	push	{r7, lr}
    3450:	466f      	mov	r7, sp
    3452:	b084      	sub	sp, #16
    3454:	9000      	str	r0, [sp, #0]
    3456:	9003      	str	r0, [sp, #12]
        let ptr = self.data.get() as *const T;
    3458:	9002      	str	r0, [sp, #8]
    }
    345a:	b004      	add	sp, #16
    345c:	bd80      	pop	{r7, pc}

0000345e <_ZN57_$LT$$RF$mut$u20$T$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7a759c789a315bdbE>:
    fn deref(&self) -> &T {
    345e:	b580      	push	{r7, lr}
    3460:	466f      	mov	r7, sp
    3462:	b081      	sub	sp, #4
    3464:	9000      	str	r0, [sp, #0]
        *self
    3466:	6800      	ldr	r0, [r0, #0]
    }
    3468:	b001      	add	sp, #4
    346a:	bd80      	pop	{r7, pc}

0000346c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h5dcfb84cb40c63f0E>:
    fn into_iter(self) -> I {
    346c:	b580      	push	{r7, lr}
    346e:	466f      	mov	r7, sp
    3470:	b081      	sub	sp, #4
    3472:	9000      	str	r0, [sp, #0]
    }
    3474:	b001      	add	sp, #4
    3476:	bd80      	pop	{r7, pc}

00003478 <_ZN69_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbfffb8d36e7273b9E>:
}

#[stable(feature = "pin", since = "1.33.0")]
impl<Ptr: Deref> Deref for Pin<Ptr> {
    type Target = Ptr::Target;
    fn deref(&self) -> &Ptr::Target {
    3478:	b580      	push	{r7, lr}
    347a:	466f      	mov	r7, sp
    347c:	b084      	sub	sp, #16
    347e:	9001      	str	r0, [sp, #4]
        unsafe { Pin::new_unchecked(&*self.__pointer) }
    3480:	f7ff ffed 	bl	345e <_ZN57_$LT$$RF$mut$u20$T$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7a759c789a315bdbE>
    3484:	9002      	str	r0, [sp, #8]
        Pin { __pointer: pointer }
    3486:	9003      	str	r0, [sp, #12]
        Pin::get_ref(Pin::as_ref(self))
    }
    3488:	b004      	add	sp, #16
    348a:	bd80      	pop	{r7, pc}

0000348c <_ZN11embassy_nrf4gpio6Output8set_high17hc7c753ddba9f9a3fE>:
    pub fn set_high(&mut self) {
    348c:	b580      	push	{r7, lr}
    348e:	466f      	mov	r7, sp
    3490:	b082      	sub	sp, #8
    3492:	9001      	str	r0, [sp, #4]
        self.pin.set_high()
    3494:	f000 f8a0 	bl	35d8 <_ZN11embassy_nrf4gpio4Flex8set_high17h4538f540fa1203b7E>
    }
    3498:	b002      	add	sp, #8
    349a:	bd80      	pop	{r7, pc}

0000349c <_ZN11embassy_nrf4gpio6Output7set_low17h116907f774bab9e6E>:
    pub fn set_low(&mut self) {
    349c:	b580      	push	{r7, lr}
    349e:	466f      	mov	r7, sp
    34a0:	b082      	sub	sp, #8
    34a2:	9001      	str	r0, [sp, #4]
        self.pin.set_low()
    34a4:	f000 f8a2 	bl	35ec <_ZN11embassy_nrf4gpio4Flex7set_low17h9138ebdb8ee0479aE>
    }
    34a8:	b002      	add	sp, #8
    34aa:	bd80      	pop	{r7, pc}

000034ac <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E>:
pub(crate) fn convert_drive(w: &mut pac::gpio::regs::PinCnf, drive: OutputDrive) {
    34ac:	b580      	push	{r7, lr}
    34ae:	466f      	mov	r7, sp
    34b0:	b087      	sub	sp, #28
    34b2:	9000      	str	r0, [sp, #0]
    34b4:	9003      	str	r0, [sp, #12]
    34b6:	f807 1c09 	strb.w	r1, [r7, #-9]
        let drive = match drive {
    34ba:	b2c8      	uxtb	r0, r1
    34bc:	9001      	str	r0, [sp, #4]
    34be:	9901      	ldr	r1, [sp, #4]
    34c0:	e8df f001 	tbb	[pc, r1]
    34c4:	110d0905 	.word	0x110d0905
    34c8:	211d1915 	.word	0x211d1915
    34cc:	defe      	udf	#254	@ 0xfe
    34ce:	2000      	movs	r0, #0
            OutputDrive::Standard => vals::Drive::S0S1,
    34d0:	f807 0c11 	strb.w	r0, [r7, #-17]
    34d4:	e01b      	b.n	350e <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E+0x62>
    34d6:	2001      	movs	r0, #1
            OutputDrive::HighDrive0Standard1 => vals::Drive::H0S1,
    34d8:	f807 0c11 	strb.w	r0, [r7, #-17]
    34dc:	e017      	b.n	350e <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E+0x62>
    34de:	2002      	movs	r0, #2
            OutputDrive::Standard0HighDrive1 => vals::Drive::S0H1,
    34e0:	f807 0c11 	strb.w	r0, [r7, #-17]
    34e4:	e013      	b.n	350e <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E+0x62>
    34e6:	2003      	movs	r0, #3
            OutputDrive::HighDrive => vals::Drive::H0H1,
    34e8:	f807 0c11 	strb.w	r0, [r7, #-17]
    34ec:	e00f      	b.n	350e <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E+0x62>
    34ee:	2004      	movs	r0, #4
            OutputDrive::Disconnect0Standard1 => vals::Drive::D0S1,
    34f0:	f807 0c11 	strb.w	r0, [r7, #-17]
    34f4:	e00b      	b.n	350e <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E+0x62>
    34f6:	2005      	movs	r0, #5
            OutputDrive::Disconnect0HighDrive1 => vals::Drive::D0H1,
    34f8:	f807 0c11 	strb.w	r0, [r7, #-17]
    34fc:	e007      	b.n	350e <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E+0x62>
    34fe:	2006      	movs	r0, #6
            OutputDrive::Standard0Disconnect1 => vals::Drive::S0D1,
    3500:	f807 0c11 	strb.w	r0, [r7, #-17]
    3504:	e003      	b.n	350e <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E+0x62>
    3506:	2007      	movs	r0, #7
            OutputDrive::HighDrive0Disconnect1 => vals::Drive::H0D1,
    3508:	f807 0c11 	strb.w	r0, [r7, #-17]
    350c:	e7ff      	b.n	350e <_ZN11embassy_nrf4gpio13convert_drive17h3eb434d07b49dcd4E+0x62>
        w.set_drive(drive);
    350e:	9900      	ldr	r1, [sp, #0]
    3510:	f817 2c11 	ldrb.w	r2, [r7, #-17]
    3514:	9105      	str	r1, [sp, #20]
    3516:	f807 2c02 	strb.w	r2, [r7, #-2]
                self.0 = (self.0 & !(0x07 << 8usize)) | (((val.to_bits() as u32) & 0x07) << 8usize);
    351a:	6808      	ldr	r0, [r1, #0]
    351c:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
    3520:	f807 2c01 	strb.w	r2, [r7, #-1]
    3524:	f002 0207 	and.w	r2, r2, #7
    3528:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    352c:	6008      	str	r0, [r1, #0]
}
    352e:	b007      	add	sp, #28
    3530:	bd80      	pop	{r7, pc}

00003532 <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E>:
fn convert_pull(pull: Pull) -> vals::Pull {
    3532:	b580      	push	{r7, lr}
    3534:	466f      	mov	r7, sp
    3536:	b082      	sub	sp, #8
    3538:	f807 0c01 	strb.w	r0, [r7, #-1]
    353c:	b2c0      	uxtb	r0, r0
    match pull {
    353e:	4601      	mov	r1, r0
    3540:	9100      	str	r1, [sp, #0]
    3542:	b130      	cbz	r0, 3552 <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E+0x20>
    3544:	e7ff      	b.n	3546 <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E+0x14>
    3546:	9800      	ldr	r0, [sp, #0]
    3548:	2801      	cmp	r0, #1
    354a:	d006      	beq.n	355a <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E+0x28>
    354c:	e7ff      	b.n	354e <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E+0x1c>
    354e:	e008      	b.n	3562 <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E+0x30>
    3550:	defe      	udf	#254	@ 0xfe
    3552:	2000      	movs	r0, #0
        Pull::None => vals::Pull::DISABLED,
    3554:	f807 0c02 	strb.w	r0, [r7, #-2]
    3558:	e007      	b.n	356a <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E+0x38>
    355a:	2003      	movs	r0, #3
        Pull::Up => vals::Pull::PULLUP,
    355c:	f807 0c02 	strb.w	r0, [r7, #-2]
    3560:	e003      	b.n	356a <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E+0x38>
    3562:	2001      	movs	r0, #1
        Pull::Down => vals::Pull::PULLDOWN,
    3564:	f807 0c02 	strb.w	r0, [r7, #-2]
    3568:	e7ff      	b.n	356a <_ZN11embassy_nrf4gpio12convert_pull17hab0fd26784caef35E+0x38>
}
    356a:	f817 0c02 	ldrb.w	r0, [r7, #-2]
    356e:	b002      	add	sp, #8
    3570:	bd80      	pop	{r7, pc}

00003572 <_ZN11embassy_nrf4gpio4Flex19set_as_disconnected17h119bb2b76b7dc3c6E>:
    pub fn set_as_disconnected(&mut self) {
    3572:	b580      	push	{r7, lr}
    3574:	466f      	mov	r7, sp
    3576:	b08a      	sub	sp, #40	@ 0x28
    3578:	9003      	str	r0, [sp, #12]
        self.pin.conf().write(|w| {
    357a:	f002 fe4c 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    357e:	f000 f871 	bl	3664 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E>
    3582:	9002      	str	r0, [sp, #8]
    3584:	a802      	add	r0, sp, #8
    3586:	9001      	str	r0, [sp, #4]
    3588:	9005      	str	r0, [sp, #20]
    358a:	2000      	movs	r0, #0
            let mut val = Default::default();
    358c:	9004      	str	r0, [sp, #16]
    358e:	a804      	add	r0, sp, #16
            let res = f(&mut val);
    3590:	f000 f80b 	bl	35aa <_ZN11embassy_nrf4gpio4Flex19set_as_disconnected28_$u7b$$u7b$closure$u7d$$u7d$17hbdd07436a3650c52E>
    3594:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    3596:	9904      	ldr	r1, [sp, #16]
    3598:	9006      	str	r0, [sp, #24]
    359a:	9107      	str	r1, [sp, #28]
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    359c:	9802      	ldr	r0, [sp, #8]
    359e:	9008      	str	r0, [sp, #32]
    35a0:	9109      	str	r1, [sp, #36]	@ 0x24
        unsafe { write_volatile(self, val) }
    35a2:	f001 fa29 	bl	49f8 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E>
    }
    35a6:	b00a      	add	sp, #40	@ 0x28
    35a8:	bd80      	pop	{r7, pc}

000035aa <_ZN11embassy_nrf4gpio4Flex19set_as_disconnected28_$u7b$$u7b$closure$u7d$$u7d$17hbdd07436a3650c52E>:
        self.pin.conf().write(|w| {
    35aa:	b580      	push	{r7, lr}
    35ac:	466f      	mov	r7, sp
    35ae:	b084      	sub	sp, #16
    35b0:	4601      	mov	r1, r0
    35b2:	9101      	str	r1, [sp, #4]
    35b4:	2001      	movs	r0, #1
            w.set_input(vals::Input::DISCONNECT);
    35b6:	f807 0c0e 	strb.w	r0, [r7, #-14]
    35ba:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    35be:	9102      	str	r1, [sp, #8]
    35c0:	f807 2c02 	strb.w	r2, [r7, #-2]
                self.0 = (self.0 & !(0x01 << 1usize)) | (((val.to_bits() as u32) & 0x01) << 1usize);
    35c4:	6808      	ldr	r0, [r1, #0]
    35c6:	f020 0002 	bic.w	r0, r0, #2
    35ca:	f807 2c01 	strb.w	r2, [r7, #-1]
    35ce:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    35d2:	6008      	str	r0, [r1, #0]
        });
    35d4:	b004      	add	sp, #16
    35d6:	bd80      	pop	{r7, pc}

000035d8 <_ZN11embassy_nrf4gpio4Flex8set_high17h4538f540fa1203b7E>:
    pub fn set_high(&mut self) {
    35d8:	b580      	push	{r7, lr}
    35da:	466f      	mov	r7, sp
    35dc:	b082      	sub	sp, #8
    35de:	9001      	str	r0, [sp, #4]
        self.pin.set_high()
    35e0:	f002 fe19 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    35e4:	f000 f880 	bl	36e8 <_ZN11embassy_nrf4gpio9SealedPin8set_high17hb709c3117f361c5eE>
    }
    35e8:	b002      	add	sp, #8
    35ea:	bd80      	pop	{r7, pc}

000035ec <_ZN11embassy_nrf4gpio4Flex7set_low17h9138ebdb8ee0479aE>:
    pub fn set_low(&mut self) {
    35ec:	b580      	push	{r7, lr}
    35ee:	466f      	mov	r7, sp
    35f0:	b082      	sub	sp, #8
    35f2:	9001      	str	r0, [sp, #4]
        self.pin.set_low()
    35f4:	f002 fe0f 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    35f8:	f000 f8eb 	bl	37d2 <_ZN11embassy_nrf4gpio9SealedPin7set_low17h501ef9dd8766358fE>
    }
    35fc:	b002      	add	sp, #8
    35fe:	bd80      	pop	{r7, pc}

00003600 <_ZN65_$LT$embassy_nrf..gpio..Flex$u20$as$u20$core..ops..drop..Drop$GT$4drop17h24d312eb7c1f2aacE>:
        self.is_set_high().into()
    }
}

impl<'d> Drop for Flex<'d> {
    fn drop(&mut self) {
    3600:	b580      	push	{r7, lr}
    3602:	466f      	mov	r7, sp
    3604:	b082      	sub	sp, #8
    3606:	9001      	str	r0, [sp, #4]
        self.set_as_disconnected();
    3608:	f7ff ffb3 	bl	3572 <_ZN11embassy_nrf4gpio4Flex19set_as_disconnected17h119bb2b76b7dc3c6E>
    }
    360c:	b002      	add	sp, #8
    360e:	bd80      	pop	{r7, pc}

00003610 <_ZN11embassy_nrf4gpio9SealedPin4_pin17h86f18ac308589defE>:

pub(crate) trait SealedPin {
    fn pin_port(&self) -> u8;

    #[inline]
    fn _pin(&self) -> u8 {
    3610:	b580      	push	{r7, lr}
    3612:	466f      	mov	r7, sp
    3614:	b082      	sub	sp, #8
    3616:	9001      	str	r0, [sp, #4]
        cfg_if! {
            if #[cfg(feature = "_gpio-p1")] {
                self.pin_port() % 32
    3618:	f000 f950 	bl	38bc <_ZN74_$LT$embassy_nrf..gpio..AnyPin$u20$as$u20$embassy_nrf..gpio..SealedPin$GT$8pin_port17h7eaa23fbf0d9f281E>
            } else {
                self.pin_port()
            }
        }
    }
    361c:	f000 001f 	and.w	r0, r0, #31
    3620:	b002      	add	sp, #8
    3622:	bd80      	pop	{r7, pc}

00003624 <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE>:

    #[inline]
    fn block(&self) -> gpio::Gpio {
    3624:	b580      	push	{r7, lr}
    3626:	466f      	mov	r7, sp
    3628:	b084      	sub	sp, #16
    362a:	9003      	str	r0, [sp, #12]
        match self.pin_port() / 32 {
    362c:	f000 f946 	bl	38bc <_ZN74_$LT$embassy_nrf..gpio..AnyPin$u20$as$u20$embassy_nrf..gpio..SealedPin$GT$8pin_port17h7eaa23fbf0d9f281E>
    3630:	f3c0 1042 	ubfx	r0, r0, #5, #3
    3634:	4601      	mov	r1, r0
    3636:	9101      	str	r1, [sp, #4]
    3638:	b138      	cbz	r0, 364a <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE+0x26>
    363a:	e7ff      	b.n	363c <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE+0x18>
    363c:	9801      	ldr	r0, [sp, #4]
    363e:	b2c0      	uxtb	r0, r0
    3640:	2801      	cmp	r0, #1
    3642:	d006      	beq.n	3652 <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE+0x2e>
    3644:	e7ff      	b.n	3646 <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE+0x22>
            0 => pac::P0,
            #[cfg(feature = "_gpio-p1")]
            1 => pac::P1,
            #[cfg(feature = "_gpio-p2")]
            2 => pac::P2,
            _ => unsafe { unreachable_unchecked() },
    3646:	f001 fedb 	bl	5400 <_ZN4core4hint21unreachable_unchecked17hf59fb41359edf49fE>
    364a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
            0 => pac::P0,
    364e:	9002      	str	r0, [sp, #8]
    3650:	e005      	b.n	365e <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE+0x3a>
    3652:	f240 3000 	movw	r0, #768	@ 0x300
    3656:	f2c5 0000 	movt	r0, #20480	@ 0x5000
            1 => pac::P1,
    365a:	9002      	str	r0, [sp, #8]
    365c:	e7ff      	b.n	365e <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE+0x3a>
        }
    }
    365e:	9802      	ldr	r0, [sp, #8]
    3660:	b004      	add	sp, #16
    3662:	bd80      	pop	{r7, pc}

00003664 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E>:

    #[inline]
    fn conf(&self) -> Reg<gpio::regs::PinCnf, RW> {
    3664:	b580      	push	{r7, lr}
    3666:	466f      	mov	r7, sp
    3668:	b08c      	sub	sp, #48	@ 0x30
    366a:	9002      	str	r0, [sp, #8]
    366c:	9006      	str	r0, [sp, #24]
        self.block().pin_cnf(self._pin() as usize)
    366e:	f7ff ffd9 	bl	3624 <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE>
    3672:	4601      	mov	r1, r0
    3674:	9802      	ldr	r0, [sp, #8]
    3676:	9104      	str	r1, [sp, #16]
    3678:	9103      	str	r1, [sp, #12]
    367a:	f7ff ffc9 	bl	3610 <_ZN11embassy_nrf4gpio9SealedPin4_pin17h86f18ac308589defE>
    367e:	9904      	ldr	r1, [sp, #16]
    3680:	b2c0      	uxtb	r0, r0
    3682:	4602      	mov	r2, r0
    3684:	9205      	str	r2, [sp, #20]
    3686:	9107      	str	r1, [sp, #28]
    3688:	9008      	str	r0, [sp, #32]
            assert!(n < 32usize);
    368a:	2820      	cmp	r0, #32
    368c:	d30b      	bcc.n	36a6 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E+0x42>
    368e:	e7ff      	b.n	3690 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E+0x2c>
    3690:	f24c 7008 	movw	r0, #50952	@ 0xc708
    3694:	f2c0 0000 	movt	r0, #0
    3698:	f24c 7298 	movw	r2, #51096	@ 0xc798
    369c:	f2c0 0200 	movt	r2, #0
    36a0:	211d      	movs	r1, #29
    36a2:	f006 fee2 	bl	a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>
            unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0700usize + n * 4usize) as _) }
    36a6:	9905      	ldr	r1, [sp, #20]
    36a8:	0088      	lsls	r0, r1, #2
    36aa:	0f89      	lsrs	r1, r1, #30
    36ac:	9001      	str	r0, [sp, #4]
    36ae:	b939      	cbnz	r1, 36c0 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E+0x5c>
    36b0:	e7ff      	b.n	36b2 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E+0x4e>
    36b2:	9901      	ldr	r1, [sp, #4]
    36b4:	f501 60e0 	add.w	r0, r1, #1792	@ 0x700
    36b8:	4288      	cmp	r0, r1
    36ba:	9000      	str	r0, [sp, #0]
    36bc:	d306      	bcc.n	36cc <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E+0x68>
    36be:	e00b      	b.n	36d8 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E+0x74>
    36c0:	f24c 70a8 	movw	r0, #51112	@ 0xc7a8
    36c4:	f2c0 0000 	movt	r0, #0
    36c8:	f007 fd55 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
    36cc:	f24c 70b8 	movw	r0, #51128	@ 0xc7b8
    36d0:	f2c0 0000 	movt	r0, #0
    36d4:	f007 fd29 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    36d8:	9803      	ldr	r0, [sp, #12]
    36da:	9900      	ldr	r1, [sp, #0]
    36dc:	9009      	str	r0, [sp, #36]	@ 0x24
    36de:	910a      	str	r1, [sp, #40]	@ 0x28
        unsafe { intrinsics::offset(self, count) }
    36e0:	4408      	add	r0, r1
    36e2:	900b      	str	r0, [sp, #44]	@ 0x2c
    }
    36e4:	b00c      	add	sp, #48	@ 0x30
    36e6:	bd80      	pop	{r7, pc}

000036e8 <_ZN11embassy_nrf4gpio9SealedPin8set_high17hb709c3117f361c5eE>:

    /// Set the output as high.
    #[inline]
    fn set_high(&self) {
    36e8:	b580      	push	{r7, lr}
    36ea:	466f      	mov	r7, sp
    36ec:	b090      	sub	sp, #64	@ 0x40
    36ee:	9001      	str	r0, [sp, #4]
    36f0:	9004      	str	r0, [sp, #16]
        self.block().outset().write(|w| w.set_pin(self._pin() as _, true))
    36f2:	f7ff ff97 	bl	3624 <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE>
    36f6:	4601      	mov	r1, r0
    36f8:	9801      	ldr	r0, [sp, #4]
    36fa:	9105      	str	r1, [sp, #20]
    36fc:	9106      	str	r1, [sp, #24]
    36fe:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
    3702:	9207      	str	r2, [sp, #28]
    3704:	f501 61a1 	add.w	r1, r1, #1288	@ 0x508
    3708:	910f      	str	r1, [sp, #60]	@ 0x3c
    370a:	9103      	str	r1, [sp, #12]
    370c:	a903      	add	r1, sp, #12
    370e:	9102      	str	r1, [sp, #8]
    3710:	9109      	str	r1, [sp, #36]	@ 0x24
    3712:	900a      	str	r0, [sp, #40]	@ 0x28
    3714:	2100      	movs	r1, #0
            let mut val = Default::default();
    3716:	9108      	str	r1, [sp, #32]
    3718:	a908      	add	r1, sp, #32
            let res = f(&mut val);
    371a:	f000 f80b 	bl	3734 <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE>
    371e:	9802      	ldr	r0, [sp, #8]
            self.write_value(val);
    3720:	9908      	ldr	r1, [sp, #32]
    3722:	900b      	str	r0, [sp, #44]	@ 0x2c
    3724:	910c      	str	r1, [sp, #48]	@ 0x30
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    3726:	9803      	ldr	r0, [sp, #12]
    3728:	900d      	str	r0, [sp, #52]	@ 0x34
    372a:	910e      	str	r1, [sp, #56]	@ 0x38
        unsafe { write_volatile(self, val) }
    372c:	f001 f98a 	bl	4a44 <_ZN4core3ptr14write_volatile17h43eb50fae70d6160E>
    }
    3730:	b010      	add	sp, #64	@ 0x40
    3732:	bd80      	pop	{r7, pc}

00003734 <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE>:
        self.block().outset().write(|w| w.set_pin(self._pin() as _, true))
    3734:	b580      	push	{r7, lr}
    3736:	466f      	mov	r7, sp
    3738:	b08c      	sub	sp, #48	@ 0x30
    373a:	9104      	str	r1, [sp, #16]
    373c:	9006      	str	r0, [sp, #24]
    373e:	9107      	str	r1, [sp, #28]
    3740:	9806      	ldr	r0, [sp, #24]
    3742:	f7ff ff65 	bl	3610 <_ZN11embassy_nrf4gpio9SealedPin4_pin17h86f18ac308589defE>
    3746:	9904      	ldr	r1, [sp, #16]
    3748:	b2c0      	uxtb	r0, r0
    374a:	4602      	mov	r2, r0
    374c:	9205      	str	r2, [sp, #20]
    374e:	9108      	str	r1, [sp, #32]
    3750:	9009      	str	r0, [sp, #36]	@ 0x24
    3752:	2101      	movs	r1, #1
    3754:	f807 1c05 	strb.w	r1, [r7, #-5]
                assert!(n < 32usize);
    3758:	2820      	cmp	r0, #32
    375a:	d30b      	bcc.n	3774 <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE+0x40>
    375c:	e7ff      	b.n	375e <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE+0x2a>
    375e:	f24c 7008 	movw	r0, #50952	@ 0xc708
    3762:	f2c0 0000 	movt	r0, #0
    3766:	f64c 0208 	movw	r2, #51208	@ 0xc808
    376a:	f2c0 0200 	movt	r2, #0
    376e:	211d      	movs	r1, #29
    3770:	f006 fe7b 	bl	a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>
                let offs = 0usize + n * 1usize;
    3774:	9805      	ldr	r0, [sp, #20]
    3776:	9003      	str	r0, [sp, #12]
    3778:	2000      	movs	r0, #0
    377a:	b928      	cbnz	r0, 3788 <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE+0x54>
    377c:	e7ff      	b.n	377e <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE+0x4a>
    377e:	9803      	ldr	r0, [sp, #12]
    3780:	9002      	str	r0, [sp, #8]
    3782:	2000      	movs	r0, #0
    3784:	b970      	cbnz	r0, 37a4 <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE+0x70>
    3786:	e005      	b.n	3794 <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE+0x60>
    3788:	f64c 0018 	movw	r0, #51224	@ 0xc818
    378c:	f2c0 0000 	movt	r0, #0
    3790:	f007 fcf1 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
    3794:	9802      	ldr	r0, [sp, #8]
    3796:	9904      	ldr	r1, [sp, #16]
    3798:	900b      	str	r0, [sp, #44]	@ 0x2c
                self.0 = (self.0 & !(0x01 << offs)) | (((val as u32) & 0x01) << offs);
    379a:	6809      	ldr	r1, [r1, #0]
    379c:	9101      	str	r1, [sp, #4]
    379e:	2820      	cmp	r0, #32
    37a0:	d30c      	bcc.n	37bc <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE+0x88>
    37a2:	e005      	b.n	37b0 <_ZN11embassy_nrf4gpio9SealedPin8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h8303a562360cbe0bE+0x7c>
                let offs = 0usize + n * 1usize;
    37a4:	f64c 0028 	movw	r0, #51240	@ 0xc828
    37a8:	f2c0 0000 	movt	r0, #0
    37ac:	f007 fcbd 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
                self.0 = (self.0 & !(0x01 << offs)) | (((val as u32) & 0x01) << offs);
    37b0:	f64c 0038 	movw	r0, #51256	@ 0xc838
    37b4:	f2c0 0000 	movt	r0, #0
    37b8:	f007 fd03 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>
    37bc:	9904      	ldr	r1, [sp, #16]
    37be:	9801      	ldr	r0, [sp, #4]
    37c0:	9a02      	ldr	r2, [sp, #8]
    37c2:	f002 031f 	and.w	r3, r2, #31
    37c6:	2201      	movs	r2, #1
    37c8:	409a      	lsls	r2, r3
    37ca:	4310      	orrs	r0, r2
    37cc:	6008      	str	r0, [r1, #0]
    37ce:	b00c      	add	sp, #48	@ 0x30
    37d0:	bd80      	pop	{r7, pc}

000037d2 <_ZN11embassy_nrf4gpio9SealedPin7set_low17h501ef9dd8766358fE>:

    /// Set the output as low.
    #[inline]
    fn set_low(&self) {
    37d2:	b580      	push	{r7, lr}
    37d4:	466f      	mov	r7, sp
    37d6:	b090      	sub	sp, #64	@ 0x40
    37d8:	9001      	str	r0, [sp, #4]
    37da:	9004      	str	r0, [sp, #16]
        self.block().outclr().write(|w| w.set_pin(self._pin() as _, true))
    37dc:	f7ff ff22 	bl	3624 <_ZN11embassy_nrf4gpio9SealedPin5block17h8fbf887b0e8ca04fE>
    37e0:	4601      	mov	r1, r0
    37e2:	9801      	ldr	r0, [sp, #4]
    37e4:	9105      	str	r1, [sp, #20]
    37e6:	9106      	str	r1, [sp, #24]
    37e8:	f240 520c 	movw	r2, #1292	@ 0x50c
    37ec:	9207      	str	r2, [sp, #28]
        unsafe { intrinsics::offset(self, count) }
    37ee:	f201 510c 	addw	r1, r1, #1292	@ 0x50c
    37f2:	910f      	str	r1, [sp, #60]	@ 0x3c
    37f4:	9103      	str	r1, [sp, #12]
    37f6:	a903      	add	r1, sp, #12
    37f8:	9102      	str	r1, [sp, #8]
    37fa:	9109      	str	r1, [sp, #36]	@ 0x24
    37fc:	900a      	str	r0, [sp, #40]	@ 0x28
    37fe:	2100      	movs	r1, #0
            let mut val = Default::default();
    3800:	9108      	str	r1, [sp, #32]
    3802:	a908      	add	r1, sp, #32
            let res = f(&mut val);
    3804:	f000 f80b 	bl	381e <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E>
    3808:	9802      	ldr	r0, [sp, #8]
            self.write_value(val);
    380a:	9908      	ldr	r1, [sp, #32]
    380c:	900b      	str	r0, [sp, #44]	@ 0x2c
    380e:	910c      	str	r1, [sp, #48]	@ 0x30
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    3810:	9803      	ldr	r0, [sp, #12]
    3812:	900d      	str	r0, [sp, #52]	@ 0x34
    3814:	910e      	str	r1, [sp, #56]	@ 0x38
        unsafe { write_volatile(self, val) }
    3816:	f001 f94e 	bl	4ab6 <_ZN4core3ptr14write_volatile17hb9b5ca8782afd235E>
    }
    381a:	b010      	add	sp, #64	@ 0x40
    381c:	bd80      	pop	{r7, pc}

0000381e <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E>:
        self.block().outclr().write(|w| w.set_pin(self._pin() as _, true))
    381e:	b580      	push	{r7, lr}
    3820:	466f      	mov	r7, sp
    3822:	b08c      	sub	sp, #48	@ 0x30
    3824:	9104      	str	r1, [sp, #16]
    3826:	9006      	str	r0, [sp, #24]
    3828:	9107      	str	r1, [sp, #28]
    382a:	9806      	ldr	r0, [sp, #24]
    382c:	f7ff fef0 	bl	3610 <_ZN11embassy_nrf4gpio9SealedPin4_pin17h86f18ac308589defE>
    3830:	9904      	ldr	r1, [sp, #16]
    3832:	b2c0      	uxtb	r0, r0
    3834:	4602      	mov	r2, r0
    3836:	9205      	str	r2, [sp, #20]
    3838:	9108      	str	r1, [sp, #32]
    383a:	9009      	str	r0, [sp, #36]	@ 0x24
    383c:	2101      	movs	r1, #1
    383e:	f807 1c05 	strb.w	r1, [r7, #-5]
                assert!(n < 32usize);
    3842:	2820      	cmp	r0, #32
    3844:	d30b      	bcc.n	385e <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E+0x40>
    3846:	e7ff      	b.n	3848 <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E+0x2a>
    3848:	f24c 7008 	movw	r0, #50952	@ 0xc708
    384c:	f2c0 0000 	movt	r0, #0
    3850:	f24c 72c8 	movw	r2, #51144	@ 0xc7c8
    3854:	f2c0 0200 	movt	r2, #0
    3858:	211d      	movs	r1, #29
    385a:	f006 fe06 	bl	a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>
                let offs = 0usize + n * 1usize;
    385e:	9805      	ldr	r0, [sp, #20]
    3860:	9003      	str	r0, [sp, #12]
    3862:	2000      	movs	r0, #0
    3864:	b928      	cbnz	r0, 3872 <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E+0x54>
    3866:	e7ff      	b.n	3868 <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E+0x4a>
    3868:	9803      	ldr	r0, [sp, #12]
    386a:	9002      	str	r0, [sp, #8]
    386c:	2000      	movs	r0, #0
    386e:	b970      	cbnz	r0, 388e <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E+0x70>
    3870:	e005      	b.n	387e <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E+0x60>
    3872:	f24c 70d8 	movw	r0, #51160	@ 0xc7d8
    3876:	f2c0 0000 	movt	r0, #0
    387a:	f007 fc7c 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
    387e:	9802      	ldr	r0, [sp, #8]
    3880:	9904      	ldr	r1, [sp, #16]
    3882:	900b      	str	r0, [sp, #44]	@ 0x2c
                self.0 = (self.0 & !(0x01 << offs)) | (((val as u32) & 0x01) << offs);
    3884:	6809      	ldr	r1, [r1, #0]
    3886:	9101      	str	r1, [sp, #4]
    3888:	2820      	cmp	r0, #32
    388a:	d30c      	bcc.n	38a6 <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E+0x88>
    388c:	e005      	b.n	389a <_ZN11embassy_nrf4gpio9SealedPin7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h17a3364455462179E+0x7c>
                let offs = 0usize + n * 1usize;
    388e:	f24c 70e8 	movw	r0, #51176	@ 0xc7e8
    3892:	f2c0 0000 	movt	r0, #0
    3896:	f007 fc48 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
                self.0 = (self.0 & !(0x01 << offs)) | (((val as u32) & 0x01) << offs);
    389a:	f24c 70f8 	movw	r0, #51192	@ 0xc7f8
    389e:	f2c0 0000 	movt	r0, #0
    38a2:	f007 fc8e 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>
    38a6:	9904      	ldr	r1, [sp, #16]
    38a8:	9801      	ldr	r0, [sp, #4]
    38aa:	9a02      	ldr	r2, [sp, #8]
    38ac:	f002 031f 	and.w	r3, r2, #31
    38b0:	2201      	movs	r2, #1
    38b2:	409a      	lsls	r2, r3
    38b4:	4310      	orrs	r0, r2
    38b6:	6008      	str	r0, [r1, #0]
    38b8:	b00c      	add	sp, #48	@ 0x30
    38ba:	bd80      	pop	{r7, pc}

000038bc <_ZN74_$LT$embassy_nrf..gpio..AnyPin$u20$as$u20$embassy_nrf..gpio..SealedPin$GT$8pin_port17h7eaa23fbf0d9f281E>:

impl_peripheral!(AnyPin);
impl Pin for AnyPin {}
impl SealedPin for AnyPin {
    #[inline]
    fn pin_port(&self) -> u8 {
    38bc:	b580      	push	{r7, lr}
    38be:	466f      	mov	r7, sp
    38c0:	b081      	sub	sp, #4
    38c2:	9000      	str	r0, [sp, #0]
        self.pin_port
    }
    38c4:	7800      	ldrb	r0, [r0, #0]
    38c6:	b001      	add	sp, #4
    38c8:	bd80      	pop	{r7, pc}

000038ca <_ZN78_$LT$embassy_nrf..gpio..Output$u20$as$u20$embedded_hal..digital..OutputPin$GT$8set_high17hb140d5bce220f12aE>:
impl<'d> embedded_hal_1::digital::ErrorType for Output<'d> {
    type Error = Infallible;
}

impl<'d> embedded_hal_1::digital::OutputPin for Output<'d> {
    fn set_high(&mut self) -> Result<(), Self::Error> {
    38ca:	b580      	push	{r7, lr}
    38cc:	466f      	mov	r7, sp
    38ce:	b082      	sub	sp, #8
    38d0:	9001      	str	r0, [sp, #4]
        self.set_high();
    38d2:	f7ff fddb 	bl	348c <_ZN11embassy_nrf4gpio6Output8set_high17hc7c753ddba9f9a3fE>
        Ok(())
    }
    38d6:	b002      	add	sp, #8
    38d8:	bd80      	pop	{r7, pc}

000038da <_ZN78_$LT$embassy_nrf..gpio..Output$u20$as$u20$embedded_hal..digital..OutputPin$GT$7set_low17h0a9fb674b5f9e687E>:

    fn set_low(&mut self) -> Result<(), Self::Error> {
    38da:	b580      	push	{r7, lr}
    38dc:	466f      	mov	r7, sp
    38de:	b082      	sub	sp, #8
    38e0:	9001      	str	r0, [sp, #4]
        self.set_low();
    38e2:	f7ff fddb 	bl	349c <_ZN11embassy_nrf4gpio6Output7set_low17h116907f774bab9e6E>
        Ok(())
    }
    38e6:	b002      	add	sp, #8
    38e8:	bd80      	pop	{r7, pc}

000038ea <_ZN11embassy_nrf6gpiote4regs17hed8d2a49325f5b4fE>:
fn regs() -> pac::gpiote::Gpiote {
    38ea:	b580      	push	{r7, lr}
    38ec:	466f      	mov	r7, sp
    38ee:	f246 0000 	movw	r0, #24576	@ 0x6000
    38f2:	f2c4 0000 	movt	r0, #16384	@ 0x4000
}
    38f6:	bd80      	pop	{r7, pc}

000038f8 <_ZN11embassy_nrf6gpiote4init17hd504f0475aa8367eE>:
pub(crate) fn init(irq_prio: crate::interrupt::Priority) {
    38f8:	b580      	push	{r7, lr}
    38fa:	466f      	mov	r7, sp
    38fc:	b0b0      	sub	sp, #192	@ 0xc0
    38fe:	4601      	mov	r1, r0
    3900:	9106      	str	r1, [sp, #24]
    3902:	f807 0c85 	strb.w	r0, [r7, #-133]
        let ports = &[pac::P0, pac::P1];
    3906:	f64b 7038 	movw	r0, #48952	@ 0xbf38
    390a:	f2c0 0000 	movt	r0, #0
    390e:	900f      	str	r0, [sp, #60]	@ 0x3c
        for &p in ports {
    3910:	f002 fcf1 	bl	62f6 <_ZN4core5array98_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u3b$$u20$N$u5d$$GT$9into_iter17h3124a1a8f2a235caE>
    3914:	9007      	str	r0, [sp, #28]
    3916:	9108      	str	r1, [sp, #32]
    3918:	e7ff      	b.n	391a <_ZN11embassy_nrf6gpiote4init17hd504f0475aa8367eE+0x22>
    391a:	a807      	add	r0, sp, #28
    391c:	f001 fe07 	bl	552e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE>
    3920:	9009      	str	r0, [sp, #36]	@ 0x24
    3922:	9809      	ldr	r0, [sp, #36]	@ 0x24
    3924:	b3d8      	cbz	r0, 399e <_ZN11embassy_nrf6gpiote4init17hd504f0475aa8367eE+0xa6>
    3926:	e7ff      	b.n	3928 <_ZN11embassy_nrf6gpiote4init17hd504f0475aa8367eE+0x30>
    3928:	9809      	ldr	r0, [sp, #36]	@ 0x24
    392a:	6800      	ldr	r0, [r0, #0]
    392c:	9003      	str	r0, [sp, #12]
    392e:	9011      	str	r0, [sp, #68]	@ 0x44
    3930:	9012      	str	r0, [sp, #72]	@ 0x48
    3932:	9013      	str	r0, [sp, #76]	@ 0x4c
    3934:	f240 5124 	movw	r1, #1316	@ 0x524
    3938:	9114      	str	r1, [sp, #80]	@ 0x50
        unsafe { intrinsics::offset(self, count) }
    393a:	f200 5024 	addw	r0, r0, #1316	@ 0x524
    393e:	902a      	str	r0, [sp, #168]	@ 0xa8
            p.detectmode().write(|w| w.set_detectmode(Detectmode::LDETECT));
    3940:	900a      	str	r0, [sp, #40]	@ 0x28
    3942:	a80a      	add	r0, sp, #40	@ 0x28
    3944:	9002      	str	r0, [sp, #8]
    3946:	901f      	str	r0, [sp, #124]	@ 0x7c
    3948:	2000      	movs	r0, #0
            let mut val = Default::default();
    394a:	9004      	str	r0, [sp, #16]
    394c:	901e      	str	r0, [sp, #120]	@ 0x78
    394e:	a81e      	add	r0, sp, #120	@ 0x78
            let res = f(&mut val);
    3950:	f000 f854 	bl	39fc <_ZN11embassy_nrf6gpiote4init28_$u7b$$u7b$closure$u7d$$u7d$17haf4c64173f1fff3dE>
    3954:	9802      	ldr	r0, [sp, #8]
            self.write_value(val);
    3956:	991e      	ldr	r1, [sp, #120]	@ 0x78
    3958:	9020      	str	r0, [sp, #128]	@ 0x80
    395a:	9121      	str	r1, [sp, #132]	@ 0x84
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    395c:	980a      	ldr	r0, [sp, #40]	@ 0x28
    395e:	9022      	str	r0, [sp, #136]	@ 0x88
    3960:	9123      	str	r1, [sp, #140]	@ 0x8c
        unsafe { write_volatile(self, val) }
    3962:	f001 f895 	bl	4a90 <_ZN4core3ptr14write_volatile17h81ddc699e7059b82E>
    3966:	9903      	ldr	r1, [sp, #12]
    3968:	9804      	ldr	r0, [sp, #16]
    396a:	9115      	str	r1, [sp, #84]	@ 0x54
    396c:	9116      	str	r1, [sp, #88]	@ 0x58
    396e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
    3972:	9217      	str	r2, [sp, #92]	@ 0x5c
        unsafe { intrinsics::offset(self, count) }
    3974:	f501 61a4 	add.w	r1, r1, #1312	@ 0x520
    3978:	912b      	str	r1, [sp, #172]	@ 0xac
            p.latch().write(|w| w.0 = 0xFFFFFFFF)
    397a:	910b      	str	r1, [sp, #44]	@ 0x2c
    397c:	a90b      	add	r1, sp, #44	@ 0x2c
    397e:	9105      	str	r1, [sp, #20]
    3980:	9119      	str	r1, [sp, #100]	@ 0x64
            let mut val = Default::default();
    3982:	9018      	str	r0, [sp, #96]	@ 0x60
    3984:	a818      	add	r0, sp, #96	@ 0x60
            let res = f(&mut val);
    3986:	f000 f84f 	bl	3a28 <_ZN11embassy_nrf6gpiote4init28_$u7b$$u7b$closure$u7d$$u7d$17h635d77e67bbbffbdE>
    398a:	9805      	ldr	r0, [sp, #20]
            self.write_value(val);
    398c:	9918      	ldr	r1, [sp, #96]	@ 0x60
    398e:	901a      	str	r0, [sp, #104]	@ 0x68
    3990:	911b      	str	r1, [sp, #108]	@ 0x6c
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    3992:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    3994:	901c      	str	r0, [sp, #112]	@ 0x70
    3996:	911d      	str	r1, [sp, #116]	@ 0x74
        unsafe { write_volatile(self, val) }
    3998:	f001 f867 	bl	4a6a <_ZN4core3ptr14write_volatile17h6955a4c7eac4c302E>
    399c:	e7bd      	b.n	391a <_ZN11embassy_nrf6gpiote4init17hd504f0475aa8367eE+0x22>
    399e:	2006      	movs	r0, #6
    let irq = interrupt::GPIOTE;
    39a0:	f807 0c8d 	strb.w	r0, [r7, #-141]
    irq.unpend();
    39a4:	f817 0c8d 	ldrb.w	r0, [r7, #-141]
    39a8:	f002 fc95 	bl	62d6 <_ZN20embassy_hal_internal9interrupt12InterruptExt6unpend17h23de27ba4d6271c3E>
    39ac:	9906      	ldr	r1, [sp, #24]
    irq.set_priority(irq_prio);
    39ae:	f817 0c8d 	ldrb.w	r0, [r7, #-141]
    39b2:	f002 fc66 	bl	6282 <_ZN20embassy_hal_internal9interrupt12InterruptExt12set_priority17h1d99e41214a8ae7aE>
    unsafe { irq.enable() };
    39b6:	f817 0c8d 	ldrb.w	r0, [r7, #-141]
    39ba:	f002 fc7a 	bl	62b2 <_ZN20embassy_hal_internal9interrupt12InterruptExt6enable17h3f30f9bbb4a7389fE>
    let g = regs();
    39be:	f7ff ff94 	bl	38ea <_ZN11embassy_nrf6gpiote4regs17hed8d2a49325f5b4fE>
    39c2:	9010      	str	r0, [sp, #64]	@ 0x40
    39c4:	902c      	str	r0, [sp, #176]	@ 0xb0
    39c6:	902d      	str	r0, [sp, #180]	@ 0xb4
    39c8:	f44f 7141 	mov.w	r1, #772	@ 0x304
    39cc:	912e      	str	r1, [sp, #184]	@ 0xb8
        unsafe { intrinsics::offset(self, count) }
    39ce:	f500 7041 	add.w	r0, r0, #772	@ 0x304
    39d2:	902f      	str	r0, [sp, #188]	@ 0xbc
    g.intenset().write(|w| w.set_port(true));
    39d4:	900d      	str	r0, [sp, #52]	@ 0x34
    39d6:	a80d      	add	r0, sp, #52	@ 0x34
    39d8:	9001      	str	r0, [sp, #4]
    39da:	9025      	str	r0, [sp, #148]	@ 0x94
    39dc:	2000      	movs	r0, #0
            let mut val = Default::default();
    39de:	9024      	str	r0, [sp, #144]	@ 0x90
    39e0:	a824      	add	r0, sp, #144	@ 0x90
            let res = f(&mut val);
    39e2:	f000 f82b 	bl	3a3c <_ZN11embassy_nrf6gpiote4init28_$u7b$$u7b$closure$u7d$$u7d$17h845b094dcf585a76E>
    39e6:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    39e8:	9924      	ldr	r1, [sp, #144]	@ 0x90
    39ea:	9026      	str	r0, [sp, #152]	@ 0x98
    39ec:	9127      	str	r1, [sp, #156]	@ 0x9c
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    39ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
    39f0:	9028      	str	r0, [sp, #160]	@ 0xa0
    39f2:	9129      	str	r1, [sp, #164]	@ 0xa4
        unsafe { write_volatile(self, val) }
    39f4:	f001 f813 	bl	4a1e <_ZN4core3ptr14write_volatile17h3e20ee04c6afb4ffE>
}
    39f8:	b030      	add	sp, #192	@ 0xc0
    39fa:	bd80      	pop	{r7, pc}

000039fc <_ZN11embassy_nrf6gpiote4init28_$u7b$$u7b$closure$u7d$$u7d$17haf4c64173f1fff3dE>:
            p.detectmode().write(|w| w.set_detectmode(Detectmode::LDETECT));
    39fc:	b580      	push	{r7, lr}
    39fe:	466f      	mov	r7, sp
    3a00:	b084      	sub	sp, #16
    3a02:	4601      	mov	r1, r0
    3a04:	9101      	str	r1, [sp, #4]
    3a06:	2001      	movs	r0, #1
    3a08:	f807 0c0e 	strb.w	r0, [r7, #-14]
    3a0c:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    3a10:	9102      	str	r1, [sp, #8]
    3a12:	f807 2c02 	strb.w	r2, [r7, #-2]
                self.0 = (self.0 & !(0x01 << 0usize)) | (((val.to_bits() as u32) & 0x01) << 0usize);
    3a16:	6808      	ldr	r0, [r1, #0]
    3a18:	f020 0001 	bic.w	r0, r0, #1
    3a1c:	f807 2c01 	strb.w	r2, [r7, #-1]
    3a20:	4310      	orrs	r0, r2
    3a22:	6008      	str	r0, [r1, #0]
    3a24:	b004      	add	sp, #16
    3a26:	bd80      	pop	{r7, pc}

00003a28 <_ZN11embassy_nrf6gpiote4init28_$u7b$$u7b$closure$u7d$$u7d$17h635d77e67bbbffbdE>:
            p.latch().write(|w| w.0 = 0xFFFFFFFF)
    3a28:	b580      	push	{r7, lr}
    3a2a:	466f      	mov	r7, sp
    3a2c:	b082      	sub	sp, #8
    3a2e:	4601      	mov	r1, r0
    3a30:	9101      	str	r1, [sp, #4]
    3a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    3a36:	6008      	str	r0, [r1, #0]
    3a38:	b002      	add	sp, #8
    3a3a:	bd80      	pop	{r7, pc}

00003a3c <_ZN11embassy_nrf6gpiote4init28_$u7b$$u7b$closure$u7d$$u7d$17h845b094dcf585a76E>:
    g.intenset().write(|w| w.set_port(true));
    3a3c:	b580      	push	{r7, lr}
    3a3e:	466f      	mov	r7, sp
    3a40:	b084      	sub	sp, #16
    3a42:	4601      	mov	r1, r0
    3a44:	9101      	str	r1, [sp, #4]
    3a46:	9102      	str	r1, [sp, #8]
    3a48:	2001      	movs	r0, #1
    3a4a:	f807 0c01 	strb.w	r0, [r7, #-1]
                val != 0
            }
            #[doc = "Write '1' to disable interrupt for event PORT"]
            #[inline(always)]
            pub fn set_port(&mut self, val: bool) {
                self.0 = (self.0 & !(0x01 << 31usize)) | (((val as u32) & 0x01) << 31usize);
    3a4e:	6808      	ldr	r0, [r1, #0]
    3a50:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
    3a54:	6008      	str	r0, [r1, #0]
    3a56:	b004      	add	sp, #16
    3a58:	bd80      	pop	{r7, pc}

00003a5a <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E>:
unsafe fn handle_gpiote_interrupt() {
    3a5a:	b580      	push	{r7, lr}
    3a5c:	466f      	mov	r7, sp
    3a5e:	b0ee      	sub	sp, #440	@ 0x1b8
    let g = regs();
    3a60:	f7ff ff43 	bl	38ea <_ZN11embassy_nrf6gpiote4regs17hed8d2a49325f5b4fE>
    3a64:	4601      	mov	r1, r0
    3a66:	910f      	str	r1, [sp, #60]	@ 0x3c
    3a68:	902b      	str	r0, [sp, #172]	@ 0xac
    3a6a:	2000      	movs	r0, #0
    3a6c:	2108      	movs	r1, #8
    for i in 0..CHANNEL_COUNT {
    3a6e:	f006 fb99 	bl	a1a4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0afde0faa91357dbE>
    3a72:	9010      	str	r0, [sp, #64]	@ 0x40
    3a74:	9111      	str	r1, [sp, #68]	@ 0x44
    3a76:	e7ff      	b.n	3a78 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1e>
    3a78:	a810      	add	r0, sp, #64	@ 0x40
    3a7a:	f006 fb8b 	bl	a194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd1eed7027fe23b7aE>
    3a7e:	9012      	str	r0, [sp, #72]	@ 0x48
    3a80:	9113      	str	r1, [sp, #76]	@ 0x4c
    3a82:	9812      	ldr	r0, [sp, #72]	@ 0x48
    3a84:	07c0      	lsls	r0, r0, #31
    3a86:	2800      	cmp	r0, #0
    3a88:	d03e      	beq.n	3b08 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0xae>
    3a8a:	e7ff      	b.n	3a8c <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x32>
    3a8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    3a8e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
    3a90:	9014      	str	r0, [sp, #80]	@ 0x50
        if g.events_in(i).read() != 0 {
    3a92:	9814      	ldr	r0, [sp, #80]	@ 0x50
    3a94:	900e      	str	r0, [sp, #56]	@ 0x38
    3a96:	9169      	str	r1, [sp, #420]	@ 0x1a4
    3a98:	906a      	str	r0, [sp, #424]	@ 0x1a8
            assert!(n < 8usize);
    3a9a:	2808      	cmp	r0, #8
    3a9c:	d30b      	bcc.n	3ab6 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x5c>
    3a9e:	e7ff      	b.n	3aa0 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x46>
    3aa0:	f64c 0048 	movw	r0, #51272	@ 0xc848
    3aa4:	f2c0 0000 	movt	r0, #0
    3aa8:	f64c 0264 	movw	r2, #51300	@ 0xc864
    3aac:	f2c0 0200 	movt	r2, #0
    3ab0:	211c      	movs	r1, #28
    3ab2:	f006 fcda 	bl	a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>
            unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0100usize + n * 4usize) as _) }
    3ab6:	990e      	ldr	r1, [sp, #56]	@ 0x38
    3ab8:	0088      	lsls	r0, r1, #2
    3aba:	0f89      	lsrs	r1, r1, #30
    3abc:	900d      	str	r0, [sp, #52]	@ 0x34
    3abe:	b939      	cbnz	r1, 3ad0 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x76>
    3ac0:	e7ff      	b.n	3ac2 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x68>
    3ac2:	990d      	ldr	r1, [sp, #52]	@ 0x34
    3ac4:	f501 7080 	add.w	r0, r1, #256	@ 0x100
    3ac8:	4288      	cmp	r0, r1
    3aca:	900c      	str	r0, [sp, #48]	@ 0x30
    3acc:	d306      	bcc.n	3adc <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x82>
    3ace:	e00b      	b.n	3ae8 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x8e>
    3ad0:	f64c 0074 	movw	r0, #51316	@ 0xc874
    3ad4:	f2c0 0000 	movt	r0, #0
    3ad8:	f007 fb4d 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
    3adc:	f64c 0084 	movw	r0, #51332	@ 0xc884
    3ae0:	f2c0 0000 	movt	r0, #0
    3ae4:	f007 fb21 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    3ae8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    3aea:	990c      	ldr	r1, [sp, #48]	@ 0x30
    3aec:	906b      	str	r0, [sp, #428]	@ 0x1ac
    3aee:	916c      	str	r1, [sp, #432]	@ 0x1b0
        unsafe { intrinsics::offset(self, count) }
    3af0:	4408      	add	r0, r1
    3af2:	906d      	str	r0, [sp, #436]	@ 0x1b4
    3af4:	9015      	str	r0, [sp, #84]	@ 0x54
    3af6:	a815      	add	r0, sp, #84	@ 0x54
    3af8:	9040      	str	r0, [sp, #256]	@ 0x100
            unsafe { (self.ptr as *mut T).read_volatile() }
    3afa:	9815      	ldr	r0, [sp, #84]	@ 0x54
    3afc:	9041      	str	r0, [sp, #260]	@ 0x104
        unsafe { read_volatile(self) }
    3afe:	f006 fa54 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    3b02:	2800      	cmp	r0, #0
    3b04:	d0b8      	beq.n	3a78 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1e>
    3b06:	e105      	b.n	3d14 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x2ba>
    3b08:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    3b0a:	9061      	str	r0, [sp, #388]	@ 0x184
    3b0c:	9062      	str	r0, [sp, #392]	@ 0x188
    3b0e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
    3b12:	9163      	str	r1, [sp, #396]	@ 0x18c
        unsafe { intrinsics::offset(self, count) }
    3b14:	f500 70be 	add.w	r0, r0, #380	@ 0x17c
    3b18:	9064      	str	r0, [sp, #400]	@ 0x190
    if g.events_port().read() != 0 {
    3b1a:	9017      	str	r0, [sp, #92]	@ 0x5c
    3b1c:	a817      	add	r0, sp, #92	@ 0x5c
    3b1e:	9042      	str	r0, [sp, #264]	@ 0x108
    3b20:	9817      	ldr	r0, [sp, #92]	@ 0x5c
    3b22:	9043      	str	r0, [sp, #268]	@ 0x10c
        unsafe { read_volatile(self) }
    3b24:	f006 fa41 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    3b28:	b910      	cbnz	r0, 3b30 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0xd6>
    3b2a:	e7ff      	b.n	3b2c <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0xd2>
}
    3b2c:	b06e      	add	sp, #440	@ 0x1b8
    3b2e:	bd80      	pop	{r7, pc}
    3b30:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    3b32:	905d      	str	r0, [sp, #372]	@ 0x174
    3b34:	905e      	str	r0, [sp, #376]	@ 0x178
    3b36:	f44f 71be 	mov.w	r1, #380	@ 0x17c
    3b3a:	915f      	str	r1, [sp, #380]	@ 0x17c
        unsafe { intrinsics::offset(self, count) }
    3b3c:	f500 70be 	add.w	r0, r0, #380	@ 0x17c
    3b40:	9060      	str	r0, [sp, #384]	@ 0x180
        g.events_port().write_value(0);
    3b42:	9018      	str	r0, [sp, #96]	@ 0x60
    3b44:	a818      	add	r0, sp, #96	@ 0x60
    3b46:	903a      	str	r0, [sp, #232]	@ 0xe8
    3b48:	2100      	movs	r1, #0
    3b4a:	913b      	str	r1, [sp, #236]	@ 0xec
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    3b4c:	9818      	ldr	r0, [sp, #96]	@ 0x60
    3b4e:	903c      	str	r0, [sp, #240]	@ 0xf0
    3b50:	913d      	str	r1, [sp, #244]	@ 0xf4
        unsafe { write_volatile(self, val) }
    3b52:	f006 faae 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
        let ports = &[pac::P0, pac::P1];
    3b56:	f64b 7038 	movw	r0, #48952	@ 0xbf38
    3b5a:	f2c0 0000 	movt	r0, #0
    3b5e:	902c      	str	r0, [sp, #176]	@ 0xb0
    3b60:	2102      	movs	r1, #2
        for (port, &p) in ports.iter().enumerate() {
    3b62:	f002 fbe0 	bl	6326 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h0faac5c71319660dE>
    3b66:	900a      	str	r0, [sp, #40]	@ 0x28
    3b68:	460a      	mov	r2, r1
    3b6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
    3b6c:	a81c      	add	r0, sp, #112	@ 0x70
    3b6e:	900b      	str	r0, [sp, #44]	@ 0x2c
    3b70:	f001 fc54 	bl	541c <_ZN4core4iter6traits8iterator8Iterator9enumerate17hcffa451ee7b61e2aE>
    3b74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    3b76:	a819      	add	r0, sp, #100	@ 0x64
    3b78:	f002 fbde 	bl	6338 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha172f06b816b1a2fE>
    3b7c:	9819      	ldr	r0, [sp, #100]	@ 0x64
    3b7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
    3b80:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
    3b82:	9221      	str	r2, [sp, #132]	@ 0x84
    3b84:	9120      	str	r1, [sp, #128]	@ 0x80
    3b86:	901f      	str	r0, [sp, #124]	@ 0x7c
    3b88:	e7ff      	b.n	3b8a <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x130>
    3b8a:	a81f      	add	r0, sp, #124	@ 0x7c
    3b8c:	f002 fb49 	bl	6222 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2ad050da4e1a0e9aE>
    3b90:	9022      	str	r0, [sp, #136]	@ 0x88
    3b92:	9123      	str	r1, [sp, #140]	@ 0x8c
    3b94:	9823      	ldr	r0, [sp, #140]	@ 0x8c
    3b96:	2800      	cmp	r0, #0
    3b98:	d0c8      	beq.n	3b2c <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0xd2>
    3b9a:	e7ff      	b.n	3b9c <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x142>
    3b9c:	9822      	ldr	r0, [sp, #136]	@ 0x88
    3b9e:	9008      	str	r0, [sp, #32]
    3ba0:	902d      	str	r0, [sp, #180]	@ 0xb4
    3ba2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
    3ba4:	6800      	ldr	r0, [r0, #0]
    3ba6:	9009      	str	r0, [sp, #36]	@ 0x24
    3ba8:	902e      	str	r0, [sp, #184]	@ 0xb8
    3baa:	9033      	str	r0, [sp, #204]	@ 0xcc
    3bac:	9034      	str	r0, [sp, #208]	@ 0xd0
    3bae:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
    3bb2:	9135      	str	r1, [sp, #212]	@ 0xd4
        unsafe { intrinsics::offset(self, count) }
    3bb4:	f500 60a4 	add.w	r0, r0, #1312	@ 0x520
    3bb8:	905b      	str	r0, [sp, #364]	@ 0x16c
            let bits = p.latch().read().0;
    3bba:	9025      	str	r0, [sp, #148]	@ 0x94
    3bbc:	a825      	add	r0, sp, #148	@ 0x94
    3bbe:	903e      	str	r0, [sp, #248]	@ 0xf8
            unsafe { (self.ptr as *mut T).read_volatile() }
    3bc0:	9825      	ldr	r0, [sp, #148]	@ 0x94
    3bc2:	903f      	str	r0, [sp, #252]	@ 0xfc
        unsafe { read_volatile(self) }
    3bc4:	f000 fe5f 	bl	4886 <_ZN4core3ptr13read_volatile17h7db4f2efd8efd2bcE>
    3bc8:	9024      	str	r0, [sp, #144]	@ 0x90
            for pin in BitIter(bits) {
    3bca:	9824      	ldr	r0, [sp, #144]	@ 0x90
    3bcc:	f7ff fc4e 	bl	346c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h5dcfb84cb40c63f0E>
    3bd0:	9026      	str	r0, [sp, #152]	@ 0x98
    3bd2:	e7ff      	b.n	3bd4 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x17a>
    3bd4:	a826      	add	r0, sp, #152	@ 0x98
    3bd6:	f000 f90e 	bl	3df6 <_ZN87_$LT$embassy_nrf..gpiote..BitIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd78d2ea2b33259f0E>
    3bda:	9027      	str	r0, [sp, #156]	@ 0x9c
    3bdc:	9128      	str	r1, [sp, #160]	@ 0xa0
    3bde:	9827      	ldr	r0, [sp, #156]	@ 0x9c
    3be0:	07c0      	lsls	r0, r0, #31
    3be2:	2800      	cmp	r0, #0
    3be4:	d04f      	beq.n	3c86 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x22c>
    3be6:	e7ff      	b.n	3be8 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x18e>
    3be8:	9909      	ldr	r1, [sp, #36]	@ 0x24
    3bea:	9828      	ldr	r0, [sp, #160]	@ 0xa0
    3bec:	9007      	str	r0, [sp, #28]
    3bee:	902f      	str	r0, [sp, #188]	@ 0xbc
    3bf0:	9136      	str	r1, [sp, #216]	@ 0xd8
    3bf2:	9037      	str	r0, [sp, #220]	@ 0xdc
            assert!(n < 32usize);
    3bf4:	2820      	cmp	r0, #32
    3bf6:	d30b      	bcc.n	3c10 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1b6>
    3bf8:	e7ff      	b.n	3bfa <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1a0>
    3bfa:	f24c 7008 	movw	r0, #50952	@ 0xc708
    3bfe:	f2c0 0000 	movt	r0, #0
    3c02:	f24c 7298 	movw	r2, #51096	@ 0xc798
    3c06:	f2c0 0200 	movt	r2, #0
    3c0a:	211d      	movs	r1, #29
    3c0c:	f006 fc2d 	bl	a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>
            unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0700usize + n * 4usize) as _) }
    3c10:	9907      	ldr	r1, [sp, #28]
    3c12:	0088      	lsls	r0, r1, #2
    3c14:	0f89      	lsrs	r1, r1, #30
    3c16:	9006      	str	r0, [sp, #24]
    3c18:	b939      	cbnz	r1, 3c2a <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1d0>
    3c1a:	e7ff      	b.n	3c1c <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1c2>
    3c1c:	9906      	ldr	r1, [sp, #24]
    3c1e:	f501 60e0 	add.w	r0, r1, #1792	@ 0x700
    3c22:	4288      	cmp	r0, r1
    3c24:	9005      	str	r0, [sp, #20]
    3c26:	d306      	bcc.n	3c36 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1dc>
    3c28:	e00b      	b.n	3c42 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1e8>
    3c2a:	f24c 70a8 	movw	r0, #51112	@ 0xc7a8
    3c2e:	f2c0 0000 	movt	r0, #0
    3c32:	f007 faa0 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
    3c36:	f24c 70b8 	movw	r0, #51128	@ 0xc7b8
    3c3a:	f2c0 0000 	movt	r0, #0
    3c3e:	f007 fa74 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    3c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
    3c44:	9905      	ldr	r1, [sp, #20]
    3c46:	9038      	str	r0, [sp, #224]	@ 0xe0
    3c48:	9139      	str	r1, [sp, #228]	@ 0xe4
        unsafe { intrinsics::offset(self, count) }
    3c4a:	4408      	add	r0, r1
    3c4c:	905a      	str	r0, [sp, #360]	@ 0x168
                p.pin_cnf(pin as usize).modify(|w| w.set_sense(Sense::DISABLED));
    3c4e:	9029      	str	r0, [sp, #164]	@ 0xa4
    3c50:	a829      	add	r0, sp, #164	@ 0xa4
    3c52:	9003      	str	r0, [sp, #12]
    3c54:	9053      	str	r0, [sp, #332]	@ 0x14c
    3c56:	9058      	str	r0, [sp, #352]	@ 0x160
            unsafe { (self.ptr as *mut T).read_volatile() }
    3c58:	9829      	ldr	r0, [sp, #164]	@ 0xa4
    3c5a:	9059      	str	r0, [sp, #356]	@ 0x164
        unsafe { read_volatile(self) }
    3c5c:	f000 fe37 	bl	48ce <_ZN4core3ptr13read_volatile17hd522fb4e1ffa191fE>
            let mut val = self.read();
    3c60:	9052      	str	r0, [sp, #328]	@ 0x148
    3c62:	a852      	add	r0, sp, #328	@ 0x148
            let res = f(&mut val);
    3c64:	f000 f8a4 	bl	3db0 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17h8eca5793e8dc4c89E>
    3c68:	9803      	ldr	r0, [sp, #12]
            self.write_value(val);
    3c6a:	9952      	ldr	r1, [sp, #328]	@ 0x148
    3c6c:	9054      	str	r0, [sp, #336]	@ 0x150
    3c6e:	9155      	str	r1, [sp, #340]	@ 0x154
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    3c70:	9829      	ldr	r0, [sp, #164]	@ 0xa4
    3c72:	9056      	str	r0, [sp, #344]	@ 0x158
    3c74:	9157      	str	r1, [sp, #348]	@ 0x15c
        unsafe { write_volatile(self, val) }
    3c76:	f000 febf 	bl	49f8 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E>
    3c7a:	9908      	ldr	r1, [sp, #32]
                PORT_WAKERS[port * 32 + pin as usize].wake();
    3c7c:	0148      	lsls	r0, r1, #5
    3c7e:	0ec9      	lsrs	r1, r1, #27
    3c80:	9004      	str	r0, [sp, #16]
    3c82:	bb29      	cbnz	r1, 3cd0 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x276>
    3c84:	e01d      	b.n	3cc2 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x268>
    3c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
    3c88:	9030      	str	r0, [sp, #192]	@ 0xc0
    3c8a:	9031      	str	r0, [sp, #196]	@ 0xc4
    3c8c:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
    3c90:	9132      	str	r1, [sp, #200]	@ 0xc8
        unsafe { intrinsics::offset(self, count) }
    3c92:	f500 60a4 	add.w	r0, r0, #1312	@ 0x520
    3c96:	905c      	str	r0, [sp, #368]	@ 0x170
            p.latch().write(|w| w.0 = bits);
    3c98:	902a      	str	r0, [sp, #168]	@ 0xa8
    3c9a:	a82a      	add	r0, sp, #168	@ 0xa8
    3c9c:	9002      	str	r0, [sp, #8]
    3c9e:	904c      	str	r0, [sp, #304]	@ 0x130
    3ca0:	a824      	add	r0, sp, #144	@ 0x90
    3ca2:	904d      	str	r0, [sp, #308]	@ 0x134
    3ca4:	2100      	movs	r1, #0
            let mut val = Default::default();
    3ca6:	914b      	str	r1, [sp, #300]	@ 0x12c
    3ca8:	a94b      	add	r1, sp, #300	@ 0x12c
            let res = f(&mut val);
    3caa:	f000 f89a 	bl	3de2 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17h79ee774a9b5eb5c0E>
    3cae:	9802      	ldr	r0, [sp, #8]
            self.write_value(val);
    3cb0:	994b      	ldr	r1, [sp, #300]	@ 0x12c
    3cb2:	904e      	str	r0, [sp, #312]	@ 0x138
    3cb4:	914f      	str	r1, [sp, #316]	@ 0x13c
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    3cb6:	982a      	ldr	r0, [sp, #168]	@ 0xa8
    3cb8:	9050      	str	r0, [sp, #320]	@ 0x140
    3cba:	9151      	str	r1, [sp, #324]	@ 0x144
        unsafe { write_volatile(self, val) }
    3cbc:	f000 fed5 	bl	4a6a <_ZN4core3ptr14write_volatile17h6955a4c7eac4c302E>
    3cc0:	e763      	b.n	3b8a <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x130>
                PORT_WAKERS[port * 32 + pin as usize].wake();
    3cc2:	9904      	ldr	r1, [sp, #16]
    3cc4:	9807      	ldr	r0, [sp, #28]
    3cc6:	4408      	add	r0, r1
    3cc8:	4288      	cmp	r0, r1
    3cca:	9001      	str	r0, [sp, #4]
    3ccc:	d30a      	bcc.n	3ce4 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x28a>
    3cce:	e005      	b.n	3cdc <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x282>
    3cd0:	f64c 00fc 	movw	r0, #51452	@ 0xc8fc
    3cd4:	f2c0 0000 	movt	r0, #0
    3cd8:	f007 fa4d 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
    3cdc:	9801      	ldr	r0, [sp, #4]
    3cde:	2830      	cmp	r0, #48	@ 0x30
    3ce0:	d306      	bcc.n	3cf0 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x296>
    3ce2:	e00f      	b.n	3d04 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x2aa>
    3ce4:	f64c 00fc 	movw	r0, #51452	@ 0xc8fc
    3ce8:	f2c0 0000 	movt	r0, #0
    3cec:	f007 fa1d 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    3cf0:	9901      	ldr	r1, [sp, #4]
    3cf2:	f240 0094 	movw	r0, #148	@ 0x94
    3cf6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    3cfa:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3cfe:	f003 fb7b 	bl	73f8 <_ZN12embassy_sync9waitqueue12atomic_waker11AtomicWaker4wake17h8492fb69456d8b05E>
    3d02:	e767      	b.n	3bd4 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x17a>
    3d04:	9801      	ldr	r0, [sp, #4]
    3d06:	f64c 120c 	movw	r2, #51468	@ 0xc90c
    3d0a:	f2c0 0200 	movt	r2, #0
    3d0e:	2130      	movs	r1, #48	@ 0x30
    3d10:	f006 fbf2 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
    3d14:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    3d16:	9065      	str	r0, [sp, #404]	@ 0x194
    3d18:	9066      	str	r0, [sp, #408]	@ 0x198
    3d1a:	f44f 7142 	mov.w	r1, #776	@ 0x308
    3d1e:	9167      	str	r1, [sp, #412]	@ 0x19c
        unsafe { intrinsics::offset(self, count) }
    3d20:	f500 7042 	add.w	r0, r0, #776	@ 0x308
    3d24:	9068      	str	r0, [sp, #416]	@ 0x1a0
            g.intenclr().write(|w| w.0 = 1 << i);
    3d26:	9016      	str	r0, [sp, #88]	@ 0x58
    3d28:	a816      	add	r0, sp, #88	@ 0x58
    3d2a:	9000      	str	r0, [sp, #0]
    3d2c:	9045      	str	r0, [sp, #276]	@ 0x114
    3d2e:	a814      	add	r0, sp, #80	@ 0x50
    3d30:	9046      	str	r0, [sp, #280]	@ 0x118
    3d32:	2100      	movs	r1, #0
            let mut val = Default::default();
    3d34:	9144      	str	r1, [sp, #272]	@ 0x110
    3d36:	a944      	add	r1, sp, #272	@ 0x110
            let res = f(&mut val);
    3d38:	f000 f81f 	bl	3d7a <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17hb38ee3fb2b6a1f6eE>
    3d3c:	9800      	ldr	r0, [sp, #0]
            self.write_value(val);
    3d3e:	9944      	ldr	r1, [sp, #272]	@ 0x110
    3d40:	9047      	str	r0, [sp, #284]	@ 0x11c
    3d42:	9148      	str	r1, [sp, #288]	@ 0x120
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    3d44:	9816      	ldr	r0, [sp, #88]	@ 0x58
    3d46:	9049      	str	r0, [sp, #292]	@ 0x124
    3d48:	914a      	str	r1, [sp, #296]	@ 0x128
        unsafe { write_volatile(self, val) }
    3d4a:	f000 fe68 	bl	4a1e <_ZN4core3ptr14write_volatile17h3e20ee04c6afb4ffE>
            CHANNEL_WAKERS[i].wake();
    3d4e:	9814      	ldr	r0, [sp, #80]	@ 0x50
    3d50:	2807      	cmp	r0, #7
    3d52:	d80a      	bhi.n	3d6a <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x310>
    3d54:	e7ff      	b.n	3d56 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x2fc>
    3d56:	9914      	ldr	r1, [sp, #80]	@ 0x50
    3d58:	f240 0054 	movw	r0, #84	@ 0x54
    3d5c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    3d60:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3d64:	f003 fb48 	bl	73f8 <_ZN12embassy_sync9waitqueue12atomic_waker11AtomicWaker4wake17h8492fb69456d8b05E>
    3d68:	e686      	b.n	3a78 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E+0x1e>
    3d6a:	9814      	ldr	r0, [sp, #80]	@ 0x50
    3d6c:	f64c 121c 	movw	r2, #51484	@ 0xc91c
    3d70:	f2c0 0200 	movt	r2, #0
    3d74:	2108      	movs	r1, #8
    3d76:	f006 fbbf 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

00003d7a <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17hb38ee3fb2b6a1f6eE>:
            g.intenclr().write(|w| w.0 = 1 << i);
    3d7a:	b580      	push	{r7, lr}
    3d7c:	466f      	mov	r7, sp
    3d7e:	b084      	sub	sp, #16
    3d80:	9100      	str	r1, [sp, #0]
    3d82:	9002      	str	r0, [sp, #8]
    3d84:	9103      	str	r1, [sp, #12]
    3d86:	9802      	ldr	r0, [sp, #8]
    3d88:	6800      	ldr	r0, [r0, #0]
    3d8a:	9001      	str	r0, [sp, #4]
    3d8c:	281f      	cmp	r0, #31
    3d8e:	d809      	bhi.n	3da4 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17hb38ee3fb2b6a1f6eE+0x2a>
    3d90:	e7ff      	b.n	3d92 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17hb38ee3fb2b6a1f6eE+0x18>
    3d92:	9900      	ldr	r1, [sp, #0]
    3d94:	9801      	ldr	r0, [sp, #4]
    3d96:	f000 021f 	and.w	r2, r0, #31
    3d9a:	2001      	movs	r0, #1
    3d9c:	4090      	lsls	r0, r2
    3d9e:	6008      	str	r0, [r1, #0]
    3da0:	b004      	add	sp, #16
    3da2:	bd80      	pop	{r7, pc}
    3da4:	f64c 102c 	movw	r0, #51500	@ 0xc92c
    3da8:	f2c0 0000 	movt	r0, #0
    3dac:	f007 fa09 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

00003db0 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17h8eca5793e8dc4c89E>:
                p.pin_cnf(pin as usize).modify(|w| w.set_sense(Sense::DISABLED));
    3db0:	b580      	push	{r7, lr}
    3db2:	466f      	mov	r7, sp
    3db4:	b084      	sub	sp, #16
    3db6:	4601      	mov	r1, r0
    3db8:	9101      	str	r1, [sp, #4]
    3dba:	2000      	movs	r0, #0
    3dbc:	f807 0c0e 	strb.w	r0, [r7, #-14]
    3dc0:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    3dc4:	9102      	str	r1, [sp, #8]
    3dc6:	f807 2c02 	strb.w	r2, [r7, #-2]
                    (self.0 & !(0x03 << 16usize)) | (((val.to_bits() as u32) & 0x03) << 16usize);
    3dca:	6808      	ldr	r0, [r1, #0]
    3dcc:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
    3dd0:	f807 2c01 	strb.w	r2, [r7, #-1]
    3dd4:	f002 0203 	and.w	r2, r2, #3
                self.0 =
    3dd8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    3ddc:	6008      	str	r0, [r1, #0]
    3dde:	b004      	add	sp, #16
    3de0:	bd80      	pop	{r7, pc}

00003de2 <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17h79ee774a9b5eb5c0E>:
            p.latch().write(|w| w.0 = bits);
    3de2:	b580      	push	{r7, lr}
    3de4:	466f      	mov	r7, sp
    3de6:	b082      	sub	sp, #8
    3de8:	9000      	str	r0, [sp, #0]
    3dea:	9101      	str	r1, [sp, #4]
    3dec:	9800      	ldr	r0, [sp, #0]
    3dee:	6800      	ldr	r0, [r0, #0]
    3df0:	6008      	str	r0, [r1, #0]
    3df2:	b002      	add	sp, #8
    3df4:	bd80      	pop	{r7, pc}

00003df6 <_ZN87_$LT$embassy_nrf..gpiote..BitIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd78d2ea2b33259f0E>:
    fn next(&mut self) -> Option<Self::Item> {
    3df6:	b580      	push	{r7, lr}
    3df8:	466f      	mov	r7, sp
    3dfa:	b088      	sub	sp, #32
    3dfc:	9000      	str	r0, [sp, #0]
    3dfe:	9004      	str	r0, [sp, #16]
        match self.0.trailing_zeros() {
    3e00:	6800      	ldr	r0, [r0, #0]
    3e02:	9006      	str	r0, [sp, #24]
            return intrinsics::cttz(self);
    3e04:	fa90 f0a0 	rbit	r0, r0
    3e08:	fab0 f080 	clz	r0, r0
    3e0c:	9007      	str	r0, [sp, #28]
    3e0e:	9807      	ldr	r0, [sp, #28]
    3e10:	9001      	str	r0, [sp, #4]
    3e12:	9005      	str	r0, [sp, #20]
    3e14:	2820      	cmp	r0, #32
    3e16:	d103      	bne.n	3e20 <_ZN87_$LT$embassy_nrf..gpiote..BitIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd78d2ea2b33259f0E+0x2a>
    3e18:	e7ff      	b.n	3e1a <_ZN87_$LT$embassy_nrf..gpiote..BitIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd78d2ea2b33259f0E+0x24>
    3e1a:	2000      	movs	r0, #0
            32 => None,
    3e1c:	9002      	str	r0, [sp, #8]
    3e1e:	e003      	b.n	3e28 <_ZN87_$LT$embassy_nrf..gpiote..BitIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd78d2ea2b33259f0E+0x32>
                self.0 &= !(1 << b);
    3e20:	9801      	ldr	r0, [sp, #4]
    3e22:	2820      	cmp	r0, #32
    3e24:	d304      	bcc.n	3e30 <_ZN87_$LT$embassy_nrf..gpiote..BitIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd78d2ea2b33259f0E+0x3a>
    3e26:	e011      	b.n	3e4c <_ZN87_$LT$embassy_nrf..gpiote..BitIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd78d2ea2b33259f0E+0x56>
    }
    3e28:	9802      	ldr	r0, [sp, #8]
    3e2a:	9903      	ldr	r1, [sp, #12]
    3e2c:	b008      	add	sp, #32
    3e2e:	bd80      	pop	{r7, pc}
                self.0 &= !(1 << b);
    3e30:	9901      	ldr	r1, [sp, #4]
    3e32:	9b00      	ldr	r3, [sp, #0]
    3e34:	f001 021f 	and.w	r2, r1, #31
    3e38:	2001      	movs	r0, #1
    3e3a:	fa00 fc02 	lsl.w	ip, r0, r2
    3e3e:	681a      	ldr	r2, [r3, #0]
    3e40:	ea22 020c 	bic.w	r2, r2, ip
    3e44:	601a      	str	r2, [r3, #0]
                Some(b)
    3e46:	9103      	str	r1, [sp, #12]
    3e48:	9002      	str	r0, [sp, #8]
            }
    3e4a:	e7ed      	b.n	3e28 <_ZN87_$LT$embassy_nrf..gpiote..BitIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd78d2ea2b33259f0E+0x32>
                self.0 &= !(1 << b);
    3e4c:	f64c 103c 	movw	r0, #51516	@ 0xc93c
    3e50:	f2c0 0000 	movt	r0, #0
    3e54:	f007 f9b5 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

00003e58 <_ZN78_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..ops..drop..Drop$GT$4drop17h678e283db9915948E>:
    fn drop(&mut self) {
    3e58:	b580      	push	{r7, lr}
    3e5a:	466f      	mov	r7, sp
    3e5c:	b08c      	sub	sp, #48	@ 0x30
    3e5e:	9003      	str	r0, [sp, #12]
        self.pin.conf().modify(|w| w.set_sense(Sense::DISABLED));
    3e60:	f002 f9d9 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    3e64:	f7ff fbfe 	bl	3664 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E>
    3e68:	9002      	str	r0, [sp, #8]
    3e6a:	a802      	add	r0, sp, #8
    3e6c:	9001      	str	r0, [sp, #4]
    3e6e:	9005      	str	r0, [sp, #20]
    3e70:	900a      	str	r0, [sp, #40]	@ 0x28
            unsafe { (self.ptr as *mut T).read_volatile() }
    3e72:	9802      	ldr	r0, [sp, #8]
    3e74:	900b      	str	r0, [sp, #44]	@ 0x2c
        unsafe { read_volatile(self) }
    3e76:	f000 fd2a 	bl	48ce <_ZN4core3ptr13read_volatile17hd522fb4e1ffa191fE>
            let mut val = self.read();
    3e7a:	9004      	str	r0, [sp, #16]
    3e7c:	a804      	add	r0, sp, #16
            let res = f(&mut val);
    3e7e:	f000 f80b 	bl	3e98 <_ZN78_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..ops..drop..Drop$GT$4drop28_$u7b$$u7b$closure$u7d$$u7d$17h518974b3ed3634eaE>
    3e82:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    3e84:	9904      	ldr	r1, [sp, #16]
    3e86:	9006      	str	r0, [sp, #24]
    3e88:	9107      	str	r1, [sp, #28]
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    3e8a:	9802      	ldr	r0, [sp, #8]
    3e8c:	9008      	str	r0, [sp, #32]
    3e8e:	9109      	str	r1, [sp, #36]	@ 0x24
        unsafe { write_volatile(self, val) }
    3e90:	f000 fdb2 	bl	49f8 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E>
    }
    3e94:	b00c      	add	sp, #48	@ 0x30
    3e96:	bd80      	pop	{r7, pc}

00003e98 <_ZN78_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..ops..drop..Drop$GT$4drop28_$u7b$$u7b$closure$u7d$$u7d$17h518974b3ed3634eaE>:
        self.pin.conf().modify(|w| w.set_sense(Sense::DISABLED));
    3e98:	b580      	push	{r7, lr}
    3e9a:	466f      	mov	r7, sp
    3e9c:	b084      	sub	sp, #16
    3e9e:	4601      	mov	r1, r0
    3ea0:	9101      	str	r1, [sp, #4]
    3ea2:	2000      	movs	r0, #0
    3ea4:	f807 0c0e 	strb.w	r0, [r7, #-14]
    3ea8:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    3eac:	9102      	str	r1, [sp, #8]
    3eae:	f807 2c02 	strb.w	r2, [r7, #-2]
                    (self.0 & !(0x03 << 16usize)) | (((val.to_bits() as u32) & 0x03) << 16usize);
    3eb2:	6808      	ldr	r0, [r1, #0]
    3eb4:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
    3eb8:	f807 2c01 	strb.w	r2, [r7, #-1]
    3ebc:	f002 0203 	and.w	r2, r2, #3
                self.0 =
    3ec0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    3ec4:	6008      	str	r0, [r1, #0]
    3ec6:	b004      	add	sp, #16
    3ec8:	bd80      	pop	{r7, pc}

00003eca <_ZN85_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..future..future..Future$GT$4poll17h8fbbf83609b7505aE>:
    fn poll(self: core::pin::Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {
    3eca:	b580      	push	{r7, lr}
    3ecc:	466f      	mov	r7, sp
    3ece:	b08e      	sub	sp, #56	@ 0x38
    3ed0:	9102      	str	r1, [sp, #8]
    3ed2:	9004      	str	r0, [sp, #16]
    3ed4:	9108      	str	r1, [sp, #32]
    3ed6:	a804      	add	r0, sp, #16
        PORT_WAKERS[self.pin.pin_port() as usize].register(cx.waker());
    3ed8:	f7ff face 	bl	3478 <_ZN69_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbfffb8d36e7273b9E>
    3edc:	f002 f99b 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    3ee0:	f7ff fcec 	bl	38bc <_ZN74_$LT$embassy_nrf..gpio..AnyPin$u20$as$u20$embassy_nrf..gpio..SealedPin$GT$8pin_port17h7eaa23fbf0d9f281E>
    3ee4:	b2c0      	uxtb	r0, r0
    3ee6:	4601      	mov	r1, r0
    3ee8:	9103      	str	r1, [sp, #12]
    3eea:	282f      	cmp	r0, #47	@ 0x2f
    3eec:	d833      	bhi.n	3f56 <_ZN85_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..future..future..Future$GT$4poll17h8fbbf83609b7505aE+0x8c>
    3eee:	e7ff      	b.n	3ef0 <_ZN85_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..future..future..Future$GT$4poll17h8fbbf83609b7505aE+0x26>
    3ef0:	9802      	ldr	r0, [sp, #8]
    3ef2:	9a03      	ldr	r2, [sp, #12]
    3ef4:	f240 0194 	movw	r1, #148	@ 0x94
    3ef8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    3efc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    3f00:	9101      	str	r1, [sp, #4]
    3f02:	f002 f9f1 	bl	62e8 <_ZN4core4task4wake7Context5waker17h30a7fb56ee4286efE>
    3f06:	4601      	mov	r1, r0
    3f08:	9801      	ldr	r0, [sp, #4]
    3f0a:	f003 fa6c 	bl	73e6 <_ZN12embassy_sync9waitqueue12atomic_waker11AtomicWaker8register17hf17cf2d6985e8e98E>
    3f0e:	a804      	add	r0, sp, #16
        if self.pin.conf().read().sense() == Sense::DISABLED {
    3f10:	f7ff fab2 	bl	3478 <_ZN69_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbfffb8d36e7273b9E>
    3f14:	f002 f97f 	bl	6216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>
    3f18:	f7ff fba4 	bl	3664 <_ZN11embassy_nrf4gpio9SealedPin4conf17hac50075134d28c97E>
    3f1c:	9007      	str	r0, [sp, #28]
    3f1e:	a807      	add	r0, sp, #28
    3f20:	900c      	str	r0, [sp, #48]	@ 0x30
            unsafe { (self.ptr as *mut T).read_volatile() }
    3f22:	9807      	ldr	r0, [sp, #28]
    3f24:	900d      	str	r0, [sp, #52]	@ 0x34
        unsafe { read_volatile(self) }
    3f26:	f000 fcd2 	bl	48ce <_ZN4core3ptr13read_volatile17hd522fb4e1ffa191fE>
    3f2a:	9006      	str	r0, [sp, #24]
    3f2c:	a806      	add	r0, sp, #24
    3f2e:	9009      	str	r0, [sp, #36]	@ 0x24
                let val = (self.0 >> 16usize) & 0x03;
    3f30:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    3f34:	f000 0003 	and.w	r0, r0, #3
    3f38:	900a      	str	r0, [sp, #40]	@ 0x28
    3f3a:	f807 0c09 	strb.w	r0, [r7, #-9]
    3f3e:	f807 0c21 	strb.w	r0, [r7, #-33]
    3f42:	f64c 115c 	movw	r1, #51548	@ 0xc95c
    3f46:	f2c0 0100 	movt	r1, #0
    3f4a:	f1a7 0021 	sub.w	r0, r7, #33	@ 0x21
    3f4e:	f000 fe5c 	bl	4c0a <_ZN74_$LT$nrf_pac..inner..gpio..vals..Sense$u20$as$u20$core..cmp..PartialEq$GT$2eq17h381631bc75c37fabE>
    3f52:	b960      	cbnz	r0, 3f6e <_ZN85_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..future..future..Future$GT$4poll17h8fbbf83609b7505aE+0xa4>
    3f54:	e007      	b.n	3f66 <_ZN85_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..future..future..Future$GT$4poll17h8fbbf83609b7505aE+0x9c>
        PORT_WAKERS[self.pin.pin_port() as usize].register(cx.waker());
    3f56:	9803      	ldr	r0, [sp, #12]
    3f58:	f64c 124c 	movw	r2, #51532	@ 0xc94c
    3f5c:	f2c0 0200 	movt	r2, #0
    3f60:	2130      	movs	r1, #48	@ 0x30
    3f62:	f006 fac9 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
    3f66:	2001      	movs	r0, #1
            Poll::Pending
    3f68:	f807 0c22 	strb.w	r0, [r7, #-34]
        if self.pin.conf().read().sense() == Sense::DISABLED {
    3f6c:	e003      	b.n	3f76 <_ZN85_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..future..future..Future$GT$4poll17h8fbbf83609b7505aE+0xac>
    3f6e:	2000      	movs	r0, #0
            Poll::Ready(())
    3f70:	f807 0c22 	strb.w	r0, [r7, #-34]
        if self.pin.conf().read().sense() == Sense::DISABLED {
    3f74:	e7ff      	b.n	3f76 <_ZN85_$LT$embassy_nrf..gpiote..PortInputFuture$u20$as$u20$core..future..future..Future$GT$4poll17h8fbbf83609b7505aE+0xac>
    }
    3f76:	f817 0c22 	ldrb.w	r0, [r7, #-34]
    3f7a:	b00e      	add	sp, #56	@ 0x38
    3f7c:	bd80      	pop	{r7, pc}

00003f7e <_ZN11embassy_nrf6gpiote42_$LT$impl$u20$embassy_nrf..gpio..Input$GT$12wait_for_low17hbef67e97154e93c2E>:
    pub async fn wait_for_low(&mut self) {
    3f7e:	b580      	push	{r7, lr}
    3f80:	466f      	mov	r7, sp
    3f82:	b082      	sub	sp, #8
    3f84:	9100      	str	r1, [sp, #0]
    3f86:	4601      	mov	r1, r0
    3f88:	9800      	ldr	r0, [sp, #0]
    3f8a:	9001      	str	r0, [sp, #4]
    3f8c:	6008      	str	r0, [r1, #0]
    3f8e:	2000      	movs	r0, #0
    3f90:	7308      	strb	r0, [r1, #12]
    }
    3f92:	b002      	add	sp, #8
    3f94:	bd80      	pop	{r7, pc}

00003f96 <_ZN11embassy_nrf6gpiote41_$LT$impl$u20$embassy_nrf..gpio..Flex$GT$12wait_for_low17hda7114f5a0e980eaE>:
    pub async fn wait_for_low(&mut self) {
    3f96:	b580      	push	{r7, lr}
    3f98:	466f      	mov	r7, sp
    3f9a:	b082      	sub	sp, #8
    3f9c:	9100      	str	r1, [sp, #0]
    3f9e:	4601      	mov	r1, r0
    3fa0:	9800      	ldr	r0, [sp, #0]
    3fa2:	9001      	str	r0, [sp, #4]
    3fa4:	6008      	str	r0, [r1, #0]
    3fa6:	2000      	movs	r0, #0
    3fa8:	7148      	strb	r0, [r1, #5]
    }
    3faa:	b002      	add	sp, #8
    3fac:	bd80      	pop	{r7, pc}

00003fae <_ZN11embassy_nrf10uicr_write17h4a6af9e289b36357E>:
    /// Word is already set to something else, we couldn't write the desired value.
    Failed,
}

#[cfg(not(any(feature = "_nrf51", feature = "_nrf54l")))]
unsafe fn uicr_write(address: *mut u32, value: u32) -> WriteResult {
    3fae:	b580      	push	{r7, lr}
    3fb0:	466f      	mov	r7, sp
    3fb2:	b082      	sub	sp, #8
    3fb4:	9000      	str	r0, [sp, #0]
    3fb6:	9101      	str	r1, [sp, #4]
    3fb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
    uicr_write_masked(address, value, 0xFFFF_FFFF)
    3fbc:	f000 f802 	bl	3fc4 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE>
}
    3fc0:	b002      	add	sp, #8
    3fc2:	bd80      	pop	{r7, pc}

00003fc4 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE>:

#[cfg(not(any(feature = "_nrf51", feature = "_nrf54l")))]
unsafe fn uicr_write_masked(address: *mut u32, value: u32, mask: u32) -> WriteResult {
    3fc4:	b580      	push	{r7, lr}
    3fc6:	466f      	mov	r7, sp
    3fc8:	b0c4      	sub	sp, #272	@ 0x110
    3fca:	9204      	str	r2, [sp, #16]
    3fcc:	9105      	str	r1, [sp, #20]
    3fce:	9003      	str	r0, [sp, #12]
    3fd0:	9010      	str	r0, [sp, #64]	@ 0x40
    3fd2:	9111      	str	r1, [sp, #68]	@ 0x44
    3fd4:	9212      	str	r2, [sp, #72]	@ 0x48
    3fd6:	9015      	str	r0, [sp, #84]	@ 0x54
    3fd8:	f005 ffe7 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    3fdc:	9a04      	ldr	r2, [sp, #16]
    3fde:	9905      	ldr	r1, [sp, #20]
    3fe0:	4603      	mov	r3, r0
    let curr_val = address.read_volatile();
    3fe2:	9306      	str	r3, [sp, #24]
    3fe4:	9013      	str	r0, [sp, #76]	@ 0x4c
    if curr_val & mask == value & mask {
    3fe6:	4010      	ands	r0, r2
    3fe8:	4011      	ands	r1, r2
    3fea:	4288      	cmp	r0, r1
    3fec:	d008      	beq.n	4000 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x3c>
    3fee:	e7ff      	b.n	3ff0 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x2c>
        return WriteResult::Noop;
    }

    // We can only change `1` bits to `0` bits.
    if curr_val & value & mask != value & mask {
    3ff0:	9806      	ldr	r0, [sp, #24]
    3ff2:	9905      	ldr	r1, [sp, #20]
    3ff4:	9a04      	ldr	r2, [sp, #16]
    3ff6:	4011      	ands	r1, r2
    3ff8:	4008      	ands	r0, r1
    3ffa:	4288      	cmp	r0, r1
    3ffc:	d126      	bne.n	404c <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x88>
    3ffe:	e003      	b.n	4008 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x44>
    4000:	2001      	movs	r0, #1
        return WriteResult::Noop;
    4002:	f807 0cf1 	strb.w	r0, [r7, #-241]
    4006:	e0b1      	b.n	416c <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x1a8>
    4008:	f24e 0000 	movw	r0, #57344	@ 0xe000
    400c:	f2c4 0001 	movt	r0, #16385	@ 0x4001
        return WriteResult::Failed;
    }

    let nvmc = pac::NVMC;
    4010:	9014      	str	r0, [sp, #80]	@ 0x50
    4012:	9024      	str	r0, [sp, #144]	@ 0x90
    4014:	9025      	str	r0, [sp, #148]	@ 0x94
    4016:	f240 5004 	movw	r0, #1284	@ 0x504
    401a:	9026      	str	r0, [sp, #152]	@ 0x98
    401c:	f24e 5004 	movw	r0, #58628	@ 0xe504
    4020:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    4024:	903f      	str	r0, [sp, #252]	@ 0xfc
    nvmc.config().write(|w| w.set_wen(pac::nvmc::vals::Wen::WEN));
    4026:	9008      	str	r0, [sp, #32]
    4028:	a808      	add	r0, sp, #32
    402a:	9002      	str	r0, [sp, #8]
    402c:	903a      	str	r0, [sp, #232]	@ 0xe8
    402e:	2000      	movs	r0, #0
            let mut val = Default::default();
    4030:	9039      	str	r0, [sp, #228]	@ 0xe4
    4032:	a839      	add	r0, sp, #228	@ 0xe4
            let res = f(&mut val);
    4034:	f000 f89e 	bl	4174 <_ZN11embassy_nrf17uicr_write_masked28_$u7b$$u7b$closure$u7d$$u7d$17h74b6a6b2947ed2deE>
    4038:	9802      	ldr	r0, [sp, #8]
            self.write_value(val);
    403a:	9939      	ldr	r1, [sp, #228]	@ 0xe4
    403c:	903b      	str	r0, [sp, #236]	@ 0xec
    403e:	913c      	str	r1, [sp, #240]	@ 0xf0
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    4040:	9808      	ldr	r0, [sp, #32]
    4042:	903d      	str	r0, [sp, #244]	@ 0xf4
    4044:	913e      	str	r1, [sp, #248]	@ 0xf8
        unsafe { write_volatile(self, val) }
    4046:	f000 fd49 	bl	4adc <_ZN4core3ptr14write_volatile17hc505c8aa9701cd5eE>
    404a:	e003      	b.n	4054 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x90>
    404c:	2002      	movs	r0, #2
        return WriteResult::Failed;
    404e:	f807 0cf1 	strb.w	r0, [r7, #-241]
    4052:	e08b      	b.n	416c <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x1a8>
    4054:	f24e 0000 	movw	r0, #57344	@ 0xe000
    4058:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    405c:	901e      	str	r0, [sp, #120]	@ 0x78
    405e:	901f      	str	r0, [sp, #124]	@ 0x7c
    4060:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    4064:	9020      	str	r0, [sp, #128]	@ 0x80
    4066:	f24e 4000 	movw	r0, #58368	@ 0xe400
    406a:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    406e:	9041      	str	r0, [sp, #260]	@ 0x104
    while !nvmc.ready().read().ready() {}
    4070:	900a      	str	r0, [sp, #40]	@ 0x28
    4072:	a80a      	add	r0, sp, #40	@ 0x28
    4074:	9031      	str	r0, [sp, #196]	@ 0xc4
            unsafe { (self.ptr as *mut T).read_volatile() }
    4076:	980a      	ldr	r0, [sp, #40]	@ 0x28
    4078:	9032      	str	r0, [sp, #200]	@ 0xc8
        unsafe { read_volatile(self) }
    407a:	f000 fbf2 	bl	4862 <_ZN4core3ptr13read_volatile17h22ace042caa896b9E>
    407e:	9009      	str	r0, [sp, #36]	@ 0x24
    4080:	a809      	add	r0, sp, #36	@ 0x24
    4082:	902b      	str	r0, [sp, #172]	@ 0xac
        pub struct Ready(pub u32);
        impl Ready {
            #[doc = "NVMC is ready or busy"]
            #[inline(always)]
            pub const fn ready(&self) -> bool {
                let val = (self.0 >> 0usize) & 0x01;
    4084:	9809      	ldr	r0, [sp, #36]	@ 0x24
    4086:	f000 0001 	and.w	r0, r0, #1
    408a:	902c      	str	r0, [sp, #176]	@ 0xb0
    408c:	2800      	cmp	r0, #0
    408e:	d0e1      	beq.n	4054 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x90>
    4090:	e7ff      	b.n	4092 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0xce>
    address.write_volatile(value | !mask);
    4092:	9803      	ldr	r0, [sp, #12]
    4094:	9905      	ldr	r1, [sp, #20]
    4096:	9a04      	ldr	r2, [sp, #16]
    4098:	ea61 0102 	orn	r1, r1, r2
    409c:	9016      	str	r0, [sp, #88]	@ 0x58
    409e:	9117      	str	r1, [sp, #92]	@ 0x5c
        unsafe { write_volatile(self, val) }
    40a0:	f006 f807 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    40a4:	e7ff      	b.n	40a6 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0xe2>
    40a6:	f24e 0000 	movw	r0, #57344	@ 0xe000
    40aa:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    40ae:	901b      	str	r0, [sp, #108]	@ 0x6c
    40b0:	901c      	str	r0, [sp, #112]	@ 0x70
    40b2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    40b6:	901d      	str	r0, [sp, #116]	@ 0x74
    40b8:	f24e 4000 	movw	r0, #58368	@ 0xe400
    40bc:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    40c0:	9042      	str	r0, [sp, #264]	@ 0x108
    while !nvmc.ready().read().ready() {}
    40c2:	900c      	str	r0, [sp, #48]	@ 0x30
    40c4:	a80c      	add	r0, sp, #48	@ 0x30
    40c6:	902f      	str	r0, [sp, #188]	@ 0xbc
            unsafe { (self.ptr as *mut T).read_volatile() }
    40c8:	980c      	ldr	r0, [sp, #48]	@ 0x30
    40ca:	9030      	str	r0, [sp, #192]	@ 0xc0
        unsafe { read_volatile(self) }
    40cc:	f000 fbc9 	bl	4862 <_ZN4core3ptr13read_volatile17h22ace042caa896b9E>
    40d0:	900b      	str	r0, [sp, #44]	@ 0x2c
    40d2:	a80b      	add	r0, sp, #44	@ 0x2c
    40d4:	9029      	str	r0, [sp, #164]	@ 0xa4
                let val = (self.0 >> 0usize) & 0x01;
    40d6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    40d8:	f000 0001 	and.w	r0, r0, #1
    40dc:	902a      	str	r0, [sp, #168]	@ 0xa8
    40de:	2800      	cmp	r0, #0
    40e0:	d0e1      	beq.n	40a6 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0xe2>
    40e2:	e7ff      	b.n	40e4 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x120>
    40e4:	f24e 0000 	movw	r0, #57344	@ 0xe000
    40e8:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    40ec:	9021      	str	r0, [sp, #132]	@ 0x84
    40ee:	9022      	str	r0, [sp, #136]	@ 0x88
    40f0:	f240 5004 	movw	r0, #1284	@ 0x504
    40f4:	9023      	str	r0, [sp, #140]	@ 0x8c
    40f6:	f24e 5004 	movw	r0, #58628	@ 0xe504
    40fa:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    40fe:	9040      	str	r0, [sp, #256]	@ 0x100
    nvmc.config().write(|_| {});
    4100:	900d      	str	r0, [sp, #52]	@ 0x34
    4102:	a80d      	add	r0, sp, #52	@ 0x34
    4104:	9001      	str	r0, [sp, #4]
    4106:	9034      	str	r0, [sp, #208]	@ 0xd0
    4108:	2000      	movs	r0, #0
            let mut val = Default::default();
    410a:	9033      	str	r0, [sp, #204]	@ 0xcc
    410c:	a833      	add	r0, sp, #204	@ 0xcc
            let res = f(&mut val);
    410e:	f000 f846 	bl	419e <_ZN11embassy_nrf17uicr_write_masked28_$u7b$$u7b$closure$u7d$$u7d$17hfe351852d5f3ea43E>
    4112:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    4114:	9933      	ldr	r1, [sp, #204]	@ 0xcc
    4116:	9035      	str	r0, [sp, #212]	@ 0xd4
    4118:	9136      	str	r1, [sp, #216]	@ 0xd8
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    411a:	980d      	ldr	r0, [sp, #52]	@ 0x34
    411c:	9037      	str	r0, [sp, #220]	@ 0xdc
    411e:	9138      	str	r1, [sp, #224]	@ 0xe0
        unsafe { write_volatile(self, val) }
    4120:	f000 fcdc 	bl	4adc <_ZN4core3ptr14write_volatile17hc505c8aa9701cd5eE>
    4124:	e7ff      	b.n	4126 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x162>
    4126:	f24e 0000 	movw	r0, #57344	@ 0xe000
    412a:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    412e:	9018      	str	r0, [sp, #96]	@ 0x60
    4130:	9019      	str	r0, [sp, #100]	@ 0x64
    4132:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    4136:	901a      	str	r0, [sp, #104]	@ 0x68
    4138:	f24e 4000 	movw	r0, #58368	@ 0xe400
    413c:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    4140:	9043      	str	r0, [sp, #268]	@ 0x10c
    while !nvmc.ready().read().ready() {}
    4142:	900f      	str	r0, [sp, #60]	@ 0x3c
    4144:	a80f      	add	r0, sp, #60	@ 0x3c
    4146:	902d      	str	r0, [sp, #180]	@ 0xb4
            unsafe { (self.ptr as *mut T).read_volatile() }
    4148:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    414a:	902e      	str	r0, [sp, #184]	@ 0xb8
        unsafe { read_volatile(self) }
    414c:	f000 fb89 	bl	4862 <_ZN4core3ptr13read_volatile17h22ace042caa896b9E>
    4150:	900e      	str	r0, [sp, #56]	@ 0x38
    4152:	a80e      	add	r0, sp, #56	@ 0x38
    4154:	9027      	str	r0, [sp, #156]	@ 0x9c
                let val = (self.0 >> 0usize) & 0x01;
    4156:	980e      	ldr	r0, [sp, #56]	@ 0x38
    4158:	f000 0001 	and.w	r0, r0, #1
    415c:	9028      	str	r0, [sp, #160]	@ 0xa0
    415e:	2800      	cmp	r0, #0
    4160:	d0e1      	beq.n	4126 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x162>
    4162:	e7ff      	b.n	4164 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x1a0>
    4164:	2000      	movs	r0, #0

    WriteResult::Written
    4166:	f807 0cf1 	strb.w	r0, [r7, #-241]
}
    416a:	e7ff      	b.n	416c <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x1a8>
    416c:	f817 0cf1 	ldrb.w	r0, [r7, #-241]
    4170:	b044      	add	sp, #272	@ 0x110
    4172:	bd80      	pop	{r7, pc}

00004174 <_ZN11embassy_nrf17uicr_write_masked28_$u7b$$u7b$closure$u7d$$u7d$17h74b6a6b2947ed2deE>:
    nvmc.config().write(|w| w.set_wen(pac::nvmc::vals::Wen::WEN));
    4174:	b580      	push	{r7, lr}
    4176:	466f      	mov	r7, sp
    4178:	b084      	sub	sp, #16
    417a:	4601      	mov	r1, r0
    417c:	9101      	str	r1, [sp, #4]
    417e:	2001      	movs	r0, #1
    4180:	f807 0c0e 	strb.w	r0, [r7, #-14]
    4184:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    4188:	9102      	str	r1, [sp, #8]
    418a:	f807 2c02 	strb.w	r2, [r7, #-2]
                self.0 = (self.0 & !(0x03 << 0usize)) | (((val.to_bits() as u32) & 0x03) << 0usize);
    418e:	6808      	ldr	r0, [r1, #0]
    4190:	f807 2c01 	strb.w	r2, [r7, #-1]
    4194:	f362 0001 	bfi	r0, r2, #0, #2
    4198:	6008      	str	r0, [r1, #0]
    419a:	b004      	add	sp, #16
    419c:	bd80      	pop	{r7, pc}

0000419e <_ZN11embassy_nrf17uicr_write_masked28_$u7b$$u7b$closure$u7d$$u7d$17hfe351852d5f3ea43E>:
    nvmc.config().write(|_| {});
    419e:	b580      	push	{r7, lr}
    41a0:	466f      	mov	r7, sp
    41a2:	b082      	sub	sp, #8
    41a4:	9001      	str	r0, [sp, #4]
    41a6:	b002      	add	sp, #8
    41a8:	bd80      	pop	{r7, pc}
    41aa:	d4d4      	bmi.n	4156 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE+0x192>

000041ac <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE>:
/// Initialize the `embassy-nrf` HAL with the provided configuration.
///
/// This returns the peripheral singletons that can be used for creating drivers.
///
/// This should only be called once at startup, otherwise it panics.
pub fn init(config: config::Config) -> Peripherals {
    41ac:	b580      	push	{r7, lr}
    41ae:	466f      	mov	r7, sp
    41b0:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
    41b4:	900e      	str	r0, [sp, #56]	@ 0x38
    // Do this first, so that it panics if user is calling `init` a second time
    // before doing anything important.
    let peripherals = Peripherals::take();
    41b6:	f001 fef6 	bl	5fa6 <_ZN11embassy_nrf4chip11Peripherals4take17hc6f61a243203b187E>
    41ba:	980e      	ldr	r0, [sp, #56]	@ 0x38
    41bc:	2100      	movs	r1, #0

    #[allow(unused_mut)]
    let mut needs_reset = false;
    41be:	f88d 1042 	strb.w	r1, [sp, #66]	@ 0x42

    // Setup debug protection.
    #[cfg(not(feature = "_nrf51"))]
    match config.debug {
    41c2:	7880      	ldrb	r0, [r0, #2]
    41c4:	4601      	mov	r1, r0
    41c6:	910f      	str	r1, [sp, #60]	@ 0x3c
    41c8:	b130      	cbz	r0, 41d8 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x2c>
    41ca:	e7ff      	b.n	41cc <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x20>
    41cc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    41ce:	2801      	cmp	r0, #1
    41d0:	d012      	beq.n	41f8 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x4c>
    41d2:	e7ff      	b.n	41d4 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x28>
    41d4:	e029      	b.n	422a <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x7e>
    41d6:	defe      	udf	#254	@ 0xfe
    41d8:	f240 1004 	movw	r0, #260	@ 0x104
    41dc:	f2c1 0000 	movt	r0, #4096	@ 0x1000
    41e0:	9025      	str	r0, [sp, #148]	@ 0x94
    41e2:	f005 fee2 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
        config::Debug::Allowed => {
            #[cfg(feature = "_nrf52")]
            unsafe {
                let variant = (0x1000_0104 as *mut u32).read_volatile();
    41e6:	9020      	str	r0, [sp, #128]	@ 0x80
                // Get the letter for the build code (b'A' .. b'F')
                let build_code = (variant >> 8) as u8;
    41e8:	0a01      	lsrs	r1, r0, #8
    41ea:	f3c0 2007 	ubfx	r0, r0, #8, #8
    41ee:	f88d 1087 	strb.w	r1, [sp, #135]	@ 0x87

                if build_code >= chip::APPROTECT_MIN_BUILD_CODE {
    41f2:	2841      	cmp	r0, #65	@ 0x41
    41f4:	d837      	bhi.n	4266 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0xba>
    41f6:	e018      	b.n	422a <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x7e>
    41f8:	f241 2008 	movw	r0, #4616	@ 0x1208
    41fc:	f2c1 0000 	movt	r0, #4096	@ 0x1000
    4200:	2100      	movs	r1, #0
            //       By default, debug access is not allowed if the firmware doesn't allow it.
            //       Code could be added here to disable debug access in UICR as well.
            #[cfg(not(feature = "_nrf54l"))]
            unsafe {
                // UICR.APPROTECT = Enabled
                let res = uicr_write(consts::UICR_APPROTECT, consts::APPROTECT_ENABLED);
    4202:	f7ff fed4 	bl	3fae <_ZN11embassy_nrf10uicr_write17h4a6af9e289b36357E>
    4206:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                needs_reset |= res == WriteResult::Written;
    420a:	f64c 115c 	movw	r1, #51548	@ 0xc95c
    420e:	f2c0 0100 	movt	r1, #0
    4212:	a811      	add	r0, sp, #68	@ 0x44
    4214:	f000 fa9d 	bl	4752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>
    4218:	4601      	mov	r1, r0
    421a:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
    421e:	4308      	orrs	r0, r1
    4220:	f000 0001 	and.w	r0, r0, #1
    4224:	f88d 0042 	strb.w	r0, [sp, #66]	@ 0x42
                #[cfg(any(feature = "_nrf5340-app", feature = "_nrf91"))]
                {
                    let res = uicr_write(consts::UICR_SECUREAPPROTECT, consts::APPROTECT_ENABLED);
                    needs_reset |= res == WriteResult::Written;
                }
            }
    4228:	e7ff      	b.n	422a <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x7e>
    422a:	2112      	movs	r1, #18
    #[cfg(feature = "_nrf52")]
    unsafe {
        let value = if cfg!(feature = "reset-pin-as-gpio") {
            !0
        } else {
            chip::RESET_PIN
    422c:	910d      	str	r1, [sp, #52]	@ 0x34
    422e:	9122      	str	r1, [sp, #136]	@ 0x88
    4230:	f241 2000 	movw	r0, #4608	@ 0x1200
    4234:	f2c1 0000 	movt	r0, #4096	@ 0x1000
        };
        let res1 = uicr_write(consts::UICR_PSELRESET1, value);
    4238:	f7ff feb9 	bl	3fae <_ZN11embassy_nrf10uicr_write17h4a6af9e289b36357E>
    423c:	990d      	ldr	r1, [sp, #52]	@ 0x34
    423e:	f88d 0045 	strb.w	r0, [sp, #69]	@ 0x45
    4242:	f241 2004 	movw	r0, #4612	@ 0x1204
    4246:	f2c1 0000 	movt	r0, #4096	@ 0x1000
        let res2 = uicr_write(consts::UICR_PSELRESET2, value);
    424a:	f7ff feb0 	bl	3fae <_ZN11embassy_nrf10uicr_write17h4a6af9e289b36357E>
    424e:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
        needs_reset |= res1 == WriteResult::Written || res2 == WriteResult::Written;
    4252:	f64c 115c 	movw	r1, #51548	@ 0xc95c
    4256:	f2c0 0100 	movt	r1, #0
    425a:	f10d 0045 	add.w	r0, sp, #69	@ 0x45
    425e:	f000 fa78 	bl	4752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>
    4262:	bb78      	cbnz	r0, 42c4 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x118>
    4264:	e023      	b.n	42ae <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x102>
    4266:	f241 2008 	movw	r0, #4616	@ 0x1208
    426a:	f2c1 0000 	movt	r0, #4096	@ 0x1000
    426e:	215a      	movs	r1, #90	@ 0x5a
                    let res = uicr_write(consts::UICR_APPROTECT, consts::APPROTECT_DISABLED);
    4270:	910c      	str	r1, [sp, #48]	@ 0x30
    4272:	f7ff fe9c 	bl	3fae <_ZN11embassy_nrf10uicr_write17h4a6af9e289b36357E>
    4276:	f88d 0043 	strb.w	r0, [sp, #67]	@ 0x43
                    needs_reset |= res == WriteResult::Written;
    427a:	f64c 115c 	movw	r1, #51548	@ 0xc95c
    427e:	f2c0 0100 	movt	r1, #0
    4282:	f10d 0043 	add.w	r0, sp, #67	@ 0x43
    4286:	f000 fa64 	bl	4752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>
    428a:	990c      	ldr	r1, [sp, #48]	@ 0x30
    428c:	4602      	mov	r2, r0
    428e:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
    4292:	4310      	orrs	r0, r2
    4294:	f000 0001 	and.w	r0, r0, #1
    4298:	f88d 0042 	strb.w	r0, [sp, #66]	@ 0x42
    429c:	f240 5058 	movw	r0, #1368	@ 0x558
    42a0:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    42a4:	9026      	str	r0, [sp, #152]	@ 0x98
    42a6:	9127      	str	r1, [sp, #156]	@ 0x9c
        unsafe { write_volatile(self, val) }
    42a8:	f005 ff03 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
                    (0x4000_0558 as *mut u32).write_volatile(consts::APPROTECT_DISABLED);
    42ac:	e7bd      	b.n	422a <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x7e>
        needs_reset |= res1 == WriteResult::Written || res2 == WriteResult::Written;
    42ae:	f64c 115c 	movw	r1, #51548	@ 0xc95c
    42b2:	f2c0 0100 	movt	r1, #0
    42b6:	f10d 0046 	add.w	r0, sp, #70	@ 0x46
    42ba:	f000 fa4a 	bl	4752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>
    42be:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
    42c2:	e003      	b.n	42cc <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x120>
    42c4:	2001      	movs	r0, #1
    42c6:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
    42ca:	e7ff      	b.n	42cc <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x120>
    42cc:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
    42d0:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
    42d4:	4308      	orrs	r0, r1
    42d6:	f000 0001 	and.w	r0, r0, #1
    42da:	f88d 0042 	strb.w	r0, [sp, #66]	@ 0x42
        if res1 == WriteResult::Failed || res2 == WriteResult::Failed {
    42de:	f64c 115d 	movw	r1, #51549	@ 0xc95d
    42e2:	f2c0 0100 	movt	r1, #0
    42e6:	f10d 0045 	add.w	r0, sp, #69	@ 0x45
    42ea:	f000 fa32 	bl	4752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>
    42ee:	b950      	cbnz	r0, 4306 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x15a>
    42f0:	e7ff      	b.n	42f2 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x146>
    42f2:	f64c 115d 	movw	r1, #51549	@ 0xc95d
    42f6:	f2c0 0100 	movt	r1, #0
    42fa:	f10d 0046 	add.w	r0, sp, #70	@ 0x46
    42fe:	f000 fa28 	bl	4752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>
    4302:	b160      	cbz	r0, 431e <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x172>
    4304:	e7ff      	b.n	4306 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x15a>
            #[cfg(not(feature = "reset-pin-as-gpio"))]
            warn!(
    4306:	f240 0005 	movw	r0, #5
    430a:	f2c0 0000 	movt	r0, #0
    430e:	f005 fd68 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    4312:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
    4316:	a812      	add	r0, sp, #72	@ 0x48
    4318:	f005 fdd2 	bl	9ec0 <_ZN5defmt6export26acquire_header_and_release17h7ce8ef2ffd00dd1bE>
    431c:	e7ff      	b.n	431e <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x172>
    431e:	2100      	movs	r1, #0
        }
    }

    #[cfg(any(feature = "_nrf52", feature = "_nrf5340-app"))]
    unsafe {
        let value = if cfg!(feature = "nfc-pins-as-gpio") { 0 } else { 1 };
    4320:	9123      	str	r1, [sp, #140]	@ 0x8c
    4322:	f241 200c 	movw	r0, #4620	@ 0x120c
    4326:	f2c1 0000 	movt	r0, #4096	@ 0x1000
    432a:	2201      	movs	r2, #1
        let res = uicr_write_masked(consts::UICR_NFCPINS, value, 1);
    432c:	f7ff fe4a 	bl	3fc4 <_ZN11embassy_nrf17uicr_write_masked17h77ba486ba6d7311eE>
    4330:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
        needs_reset |= res == WriteResult::Written;
    4334:	f64c 115c 	movw	r1, #51548	@ 0xc95c
    4338:	f2c0 0100 	movt	r1, #0
    433c:	f10d 004b 	add.w	r0, sp, #75	@ 0x4b
    4340:	900b      	str	r0, [sp, #44]	@ 0x2c
    4342:	f000 fa06 	bl	4752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>
    4346:	4602      	mov	r2, r0
    4348:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    434a:	f89d 1042 	ldrb.w	r1, [sp, #66]	@ 0x42
    434e:	4311      	orrs	r1, r2
    4350:	f001 0101 	and.w	r1, r1, #1
    4354:	f88d 1042 	strb.w	r1, [sp, #66]	@ 0x42
        if res == WriteResult::Failed {
    4358:	f64c 115d 	movw	r1, #51549	@ 0xc95d
    435c:	f2c0 0100 	movt	r1, #0
    4360:	f000 f9f7 	bl	4752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>
                );
            }
        }
    }

    if needs_reset {
    4364:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
    4368:	07c0      	lsls	r0, r0, #31
    436a:	b940      	cbnz	r0, 437e <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x1d2>
    436c:	e7ff      	b.n	436e <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x1c2>
    436e:	980e      	ldr	r0, [sp, #56]	@ 0x38
    4370:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
        cortex_m::peripheral::SCB::sys_reset();
    }

    let r = pac::CLOCK;
    4374:	9124      	str	r1, [sp, #144]	@ 0x90

    // Start HFCLK.
    match config.hfclk_source {
    4376:	7800      	ldrb	r0, [r0, #0]
    4378:	07c0      	lsls	r0, r0, #31
    437a:	b910      	cbnz	r0, 4382 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x1d6>
    437c:	e02a      	b.n	43d4 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x228>
        cortex_m::peripheral::SCB::sys_reset();
    437e:	f001 ffe6 	bl	634e <_ZN8cortex_m10peripheral3scb43_$LT$impl$u20$cortex_m..peripheral..SCB$GT$9sys_reset17h00ad1bbb43f809c7E>
    4382:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    4386:	900a      	str	r0, [sp, #40]	@ 0x28
    4388:	9031      	str	r0, [sp, #196]	@ 0xc4
    438a:	9032      	str	r0, [sp, #200]	@ 0xc8
    438c:	f44f 7080 	mov.w	r0, #256	@ 0x100
    4390:	9033      	str	r0, [sp, #204]	@ 0xcc
    4392:	f240 1000 	movw	r0, #256	@ 0x100
    4396:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    439a:	908e      	str	r0, [sp, #568]	@ 0x238
            }

            #[cfg(not(feature = "_nrf54l"))]
            {
                // Datasheet says this is likely to take 0.36ms
                r.events_hfclkstarted().write_value(0);
    439c:	9013      	str	r0, [sp, #76]	@ 0x4c
    439e:	a813      	add	r0, sp, #76	@ 0x4c
    43a0:	9058      	str	r0, [sp, #352]	@ 0x160
    43a2:	2100      	movs	r1, #0
    43a4:	9109      	str	r1, [sp, #36]	@ 0x24
    43a6:	9159      	str	r1, [sp, #356]	@ 0x164
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    43a8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
    43aa:	905a      	str	r0, [sp, #360]	@ 0x168
    43ac:	915b      	str	r1, [sp, #364]	@ 0x16c
    43ae:	f005 fe80 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    43b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
    43b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
    43b6:	9028      	str	r0, [sp, #160]	@ 0xa0
    43b8:	9029      	str	r0, [sp, #164]	@ 0xa4
    43ba:	912a      	str	r1, [sp, #168]	@ 0xa8
    43bc:	9085      	str	r0, [sp, #532]	@ 0x214
                r.tasks_hfclkstart().write_value(1);
    43be:	9014      	str	r0, [sp, #80]	@ 0x50
    43c0:	a814      	add	r0, sp, #80	@ 0x50
    43c2:	9050      	str	r0, [sp, #320]	@ 0x140
    43c4:	2101      	movs	r1, #1
    43c6:	9151      	str	r1, [sp, #324]	@ 0x144
    43c8:	9814      	ldr	r0, [sp, #80]	@ 0x50
    43ca:	9052      	str	r0, [sp, #328]	@ 0x148
    43cc:	9153      	str	r1, [sp, #332]	@ 0x14c
    43ce:	f005 fe70 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    43d2:	e008      	b.n	43e6 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x23a>
        }
    }

    // Configure LFCLK.
    #[cfg(not(any(feature = "_nrf51", feature = "_nrf5340", feature = "_nrf91", feature = "_nrf54l")))]
    match config.lfclk_source {
    43d4:	980e      	ldr	r0, [sp, #56]	@ 0x38
    43d6:	78c0      	ldrb	r0, [r0, #3]
    43d8:	9008      	str	r0, [sp, #32]
    43da:	9908      	ldr	r1, [sp, #32]
    43dc:	e8df f001 	tbb	[pc, r1]
    43e0:	76573819 	.word	0x76573819
    43e4:	0095      	.short	0x0095
    43e6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    43ea:	902e      	str	r0, [sp, #184]	@ 0xb8
    43ec:	902f      	str	r0, [sp, #188]	@ 0xbc
    43ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
    43f2:	9030      	str	r0, [sp, #192]	@ 0xc0
    43f4:	f240 1000 	movw	r0, #256	@ 0x100
    43f8:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    43fc:	908f      	str	r0, [sp, #572]	@ 0x23c
                while r.events_hfclkstarted().read() == 0 {}
    43fe:	9015      	str	r0, [sp, #84]	@ 0x54
    4400:	a815      	add	r0, sp, #84	@ 0x54
    4402:	905e      	str	r0, [sp, #376]	@ 0x178
            unsafe { (self.ptr as *mut T).read_volatile() }
    4404:	9815      	ldr	r0, [sp, #84]	@ 0x54
    4406:	905f      	str	r0, [sp, #380]	@ 0x17c
        unsafe { read_volatile(self) }
    4408:	f005 fdcf 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    440c:	2800      	cmp	r0, #0
    440e:	d0ea      	beq.n	43e6 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x23a>
    4410:	e7e0      	b.n	43d4 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x228>
    4412:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    4416:	9046      	str	r0, [sp, #280]	@ 0x118
    4418:	9047      	str	r0, [sp, #284]	@ 0x11c
    441a:	f44f 60a3 	mov.w	r0, #1304	@ 0x518
    441e:	9048      	str	r0, [sp, #288]	@ 0x120
    4420:	f240 5018 	movw	r0, #1304	@ 0x518
    4424:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    4428:	9086      	str	r0, [sp, #536]	@ 0x218
        config::LfclkSource::InternalRC => r.lfclksrc().write(|w| w.set_src(pac::clock::vals::Lfclksrc::RC)),
    442a:	9016      	str	r0, [sp, #88]	@ 0x58
    442c:	a816      	add	r0, sp, #88	@ 0x58
    442e:	9007      	str	r0, [sp, #28]
    4430:	9061      	str	r0, [sp, #388]	@ 0x184
    4432:	2000      	movs	r0, #0
            let mut val = Default::default();
    4434:	9060      	str	r0, [sp, #384]	@ 0x180
    4436:	a860      	add	r0, sp, #384	@ 0x180
            let res = f(&mut val);
    4438:	f000 f8f6 	bl	4628 <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h5e1651b8ad957fcdE>
    443c:	9807      	ldr	r0, [sp, #28]
            self.write_value(val);
    443e:	9960      	ldr	r1, [sp, #384]	@ 0x180
    4440:	9062      	str	r0, [sp, #392]	@ 0x188
    4442:	9163      	str	r1, [sp, #396]	@ 0x18c
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    4444:	9816      	ldr	r0, [sp, #88]	@ 0x58
    4446:	9064      	str	r0, [sp, #400]	@ 0x190
    4448:	9165      	str	r1, [sp, #404]	@ 0x194
        unsafe { write_volatile(self, val) }
    444a:	f000 fb6d 	bl	4b28 <_ZN4core3ptr14write_volatile17hef49abf32a5f7765E>
    444e:	e07b      	b.n	4548 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x39c>
    4450:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    4454:	9043      	str	r0, [sp, #268]	@ 0x10c
    4456:	9044      	str	r0, [sp, #272]	@ 0x110
    4458:	f44f 60a3 	mov.w	r0, #1304	@ 0x518
    445c:	9045      	str	r0, [sp, #276]	@ 0x114
    445e:	f240 5018 	movw	r0, #1304	@ 0x518
    4462:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    4466:	9087      	str	r0, [sp, #540]	@ 0x21c
        config::LfclkSource::Synthesized => r.lfclksrc().write(|w| w.set_src(pac::clock::vals::Lfclksrc::SYNTH)),
    4468:	9017      	str	r0, [sp, #92]	@ 0x5c
    446a:	a817      	add	r0, sp, #92	@ 0x5c
    446c:	9006      	str	r0, [sp, #24]
    446e:	9079      	str	r0, [sp, #484]	@ 0x1e4
    4470:	2000      	movs	r0, #0
            let mut val = Default::default();
    4472:	9078      	str	r0, [sp, #480]	@ 0x1e0
    4474:	a878      	add	r0, sp, #480	@ 0x1e0
            let res = f(&mut val);
    4476:	f000 f8ec 	bl	4652 <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17hc4470cd00ebec35dE>
    447a:	9806      	ldr	r0, [sp, #24]
            self.write_value(val);
    447c:	9978      	ldr	r1, [sp, #480]	@ 0x1e0
    447e:	907a      	str	r0, [sp, #488]	@ 0x1e8
    4480:	917b      	str	r1, [sp, #492]	@ 0x1ec
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    4482:	9817      	ldr	r0, [sp, #92]	@ 0x5c
    4484:	907c      	str	r0, [sp, #496]	@ 0x1f0
    4486:	917d      	str	r1, [sp, #500]	@ 0x1f4
    4488:	f000 fb4e 	bl	4b28 <_ZN4core3ptr14write_volatile17hef49abf32a5f7765E>
    448c:	e05c      	b.n	4548 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x39c>
    448e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    4492:	9040      	str	r0, [sp, #256]	@ 0x100
    4494:	9041      	str	r0, [sp, #260]	@ 0x104
    4496:	f44f 60a3 	mov.w	r0, #1304	@ 0x518
    449a:	9042      	str	r0, [sp, #264]	@ 0x108
    449c:	f240 5018 	movw	r0, #1304	@ 0x518
    44a0:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    44a4:	9088      	str	r0, [sp, #544]	@ 0x220
        config::LfclkSource::ExternalXtal => r.lfclksrc().write(|w| w.set_src(pac::clock::vals::Lfclksrc::XTAL)),
    44a6:	9018      	str	r0, [sp, #96]	@ 0x60
    44a8:	a818      	add	r0, sp, #96	@ 0x60
    44aa:	9005      	str	r0, [sp, #20]
    44ac:	9073      	str	r0, [sp, #460]	@ 0x1cc
    44ae:	2000      	movs	r0, #0
            let mut val = Default::default();
    44b0:	9072      	str	r0, [sp, #456]	@ 0x1c8
    44b2:	a872      	add	r0, sp, #456	@ 0x1c8
            let res = f(&mut val);
    44b4:	f000 f8e2 	bl	467c <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h2f5f1380b7a8dfc8E>
    44b8:	9805      	ldr	r0, [sp, #20]
            self.write_value(val);
    44ba:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
    44bc:	9074      	str	r0, [sp, #464]	@ 0x1d0
    44be:	9175      	str	r1, [sp, #468]	@ 0x1d4
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    44c0:	9818      	ldr	r0, [sp, #96]	@ 0x60
    44c2:	9076      	str	r0, [sp, #472]	@ 0x1d8
    44c4:	9177      	str	r1, [sp, #476]	@ 0x1dc
    44c6:	f000 fb2f 	bl	4b28 <_ZN4core3ptr14write_volatile17hef49abf32a5f7765E>
    44ca:	e03d      	b.n	4548 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x39c>
    44cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    44d0:	903d      	str	r0, [sp, #244]	@ 0xf4
    44d2:	903e      	str	r0, [sp, #248]	@ 0xf8
    44d4:	f44f 60a3 	mov.w	r0, #1304	@ 0x518
    44d8:	903f      	str	r0, [sp, #252]	@ 0xfc
    44da:	f240 5018 	movw	r0, #1304	@ 0x518
    44de:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    44e2:	9089      	str	r0, [sp, #548]	@ 0x224
        config::LfclkSource::ExternalLowSwing => r.lfclksrc().write(|w| {
    44e4:	9019      	str	r0, [sp, #100]	@ 0x64
    44e6:	a819      	add	r0, sp, #100	@ 0x64
    44e8:	9004      	str	r0, [sp, #16]
    44ea:	907f      	str	r0, [sp, #508]	@ 0x1fc
    44ec:	2000      	movs	r0, #0
            let mut val = Default::default();
    44ee:	907e      	str	r0, [sp, #504]	@ 0x1f8
    44f0:	a87e      	add	r0, sp, #504	@ 0x1f8
            let res = f(&mut val);
    44f2:	f000 f8d8 	bl	46a6 <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h2f896961792aba52E>
    44f6:	9804      	ldr	r0, [sp, #16]
            self.write_value(val);
    44f8:	997e      	ldr	r1, [sp, #504]	@ 0x1f8
    44fa:	9080      	str	r0, [sp, #512]	@ 0x200
    44fc:	9181      	str	r1, [sp, #516]	@ 0x204
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    44fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
    4500:	9082      	str	r0, [sp, #520]	@ 0x208
    4502:	9183      	str	r1, [sp, #524]	@ 0x20c
    4504:	f000 fb10 	bl	4b28 <_ZN4core3ptr14write_volatile17hef49abf32a5f7765E>
    4508:	e01e      	b.n	4548 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x39c>
    450a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    450e:	903a      	str	r0, [sp, #232]	@ 0xe8
    4510:	903b      	str	r0, [sp, #236]	@ 0xec
    4512:	f44f 60a3 	mov.w	r0, #1304	@ 0x518
    4516:	903c      	str	r0, [sp, #240]	@ 0xf0
    4518:	f240 5018 	movw	r0, #1304	@ 0x518
    451c:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    4520:	908a      	str	r0, [sp, #552]	@ 0x228
            w.set_src(pac::clock::vals::Lfclksrc::XTAL);
            w.set_external(true);
            w.set_bypass(false);
        }),
        config::LfclkSource::ExternalFullSwing => r.lfclksrc().write(|w| {
    4522:	901a      	str	r0, [sp, #104]	@ 0x68
    4524:	a81a      	add	r0, sp, #104	@ 0x68
    4526:	9003      	str	r0, [sp, #12]
    4528:	906d      	str	r0, [sp, #436]	@ 0x1b4
    452a:	2000      	movs	r0, #0
            let mut val = Default::default();
    452c:	906c      	str	r0, [sp, #432]	@ 0x1b0
    452e:	a86c      	add	r0, sp, #432	@ 0x1b0
            let res = f(&mut val);
    4530:	f000 f8dd 	bl	46ee <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h3112f2de68da71ccE>
    4534:	9803      	ldr	r0, [sp, #12]
            self.write_value(val);
    4536:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
    4538:	906e      	str	r0, [sp, #440]	@ 0x1b8
    453a:	916f      	str	r1, [sp, #444]	@ 0x1bc
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    453c:	981a      	ldr	r0, [sp, #104]	@ 0x68
    453e:	9070      	str	r0, [sp, #448]	@ 0x1c0
    4540:	9171      	str	r1, [sp, #452]	@ 0x1c4
    4542:	f000 faf1 	bl	4b28 <_ZN4core3ptr14write_volatile17hef49abf32a5f7765E>
    4546:	e7ff      	b.n	4548 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x39c>
    4548:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    454c:	9002      	str	r0, [sp, #8]
    454e:	9037      	str	r0, [sp, #220]	@ 0xdc
    4550:	9038      	str	r0, [sp, #224]	@ 0xe0
    4552:	f44f 7082 	mov.w	r0, #260	@ 0x104
    4556:	9039      	str	r0, [sp, #228]	@ 0xe4
    4558:	f240 1004 	movw	r0, #260	@ 0x104
    455c:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    4560:	908c      	str	r0, [sp, #560]	@ 0x230
    }

    // Start LFCLK.
    // Datasheet says this could take 100us from synth source
    // 600us from rc source, 0.25s from an external source.
    r.events_lfclkstarted().write_value(0);
    4562:	901b      	str	r0, [sp, #108]	@ 0x6c
    4564:	a81b      	add	r0, sp, #108	@ 0x6c
    4566:	9054      	str	r0, [sp, #336]	@ 0x150
    4568:	2100      	movs	r1, #0
    456a:	9155      	str	r1, [sp, #340]	@ 0x154
    456c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
    456e:	9056      	str	r0, [sp, #344]	@ 0x158
    4570:	9157      	str	r1, [sp, #348]	@ 0x15c
    4572:	f005 fd9e 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    4576:	9802      	ldr	r0, [sp, #8]
    4578:	902b      	str	r0, [sp, #172]	@ 0xac
    457a:	902c      	str	r0, [sp, #176]	@ 0xb0
    457c:	2008      	movs	r0, #8
    457e:	902d      	str	r0, [sp, #180]	@ 0xb4
    4580:	2008      	movs	r0, #8
    4582:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    4586:	9084      	str	r0, [sp, #528]	@ 0x210
    r.tasks_lfclkstart().write_value(1);
    4588:	901c      	str	r0, [sp, #112]	@ 0x70
    458a:	a81c      	add	r0, sp, #112	@ 0x70
    458c:	904c      	str	r0, [sp, #304]	@ 0x130
    458e:	2101      	movs	r1, #1
    4590:	914d      	str	r1, [sp, #308]	@ 0x134
    4592:	981c      	ldr	r0, [sp, #112]	@ 0x70
    4594:	904e      	str	r0, [sp, #312]	@ 0x138
    4596:	914f      	str	r1, [sp, #316]	@ 0x13c
    4598:	f005 fd8b 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    459c:	e7ff      	b.n	459e <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x3f2>
    459e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    45a2:	9034      	str	r0, [sp, #208]	@ 0xd0
    45a4:	9035      	str	r0, [sp, #212]	@ 0xd4
    45a6:	f44f 7082 	mov.w	r0, #260	@ 0x104
    45aa:	9036      	str	r0, [sp, #216]	@ 0xd8
    45ac:	f240 1004 	movw	r0, #260	@ 0x104
    45b0:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    45b4:	908d      	str	r0, [sp, #564]	@ 0x234
    while r.events_lfclkstarted().read() == 0 {}
    45b6:	901d      	str	r0, [sp, #116]	@ 0x74
    45b8:	a81d      	add	r0, sp, #116	@ 0x74
    45ba:	905c      	str	r0, [sp, #368]	@ 0x170
            unsafe { (self.ptr as *mut T).read_volatile() }
    45bc:	981d      	ldr	r0, [sp, #116]	@ 0x74
    45be:	905d      	str	r0, [sp, #372]	@ 0x174
        unsafe { read_volatile(self) }
    45c0:	f005 fcf3 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    45c4:	2800      	cmp	r0, #0
    45c6:	d0ea      	beq.n	459e <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x3f2>
    45c8:	e7ff      	b.n	45ca <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x41e>
        // Setup DCDCs.
        #[cfg(feature = "nrf52840")]
        if config.dcdc.reg0 {
            pac::POWER.dcdcen0().write(|w| w.set_dcdcen(true));
        }
        if config.dcdc.reg1 {
    45ca:	980e      	ldr	r0, [sp, #56]	@ 0x38
    45cc:	7840      	ldrb	r0, [r0, #1]
    45ce:	07c0      	lsls	r0, r0, #31
    45d0:	b958      	cbnz	r0, 45ea <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x43e>
    45d2:	e7ff      	b.n	45d4 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x428>
    }

    // Init GPIOTE
    #[cfg(not(feature = "_nrf54l"))] // TODO
    #[cfg(feature = "gpiote")]
    gpiote::init(config.gpiote_interrupt_priority);
    45d4:	980e      	ldr	r0, [sp, #56]	@ 0x38
    45d6:	7900      	ldrb	r0, [r0, #4]
    45d8:	f7ff f98e 	bl	38f8 <_ZN11embassy_nrf6gpiote4init17hd504f0475aa8367eE>
    45dc:	980e      	ldr	r0, [sp, #56]	@ 0x38

    // init RTC time driver
    #[cfg(feature = "_time-driver")]
    time_driver::init(config.time_interrupt_priority);
    45de:	7940      	ldrb	r0, [r0, #5]
    45e0:	f001 fc95 	bl	5f0e <_ZN11embassy_nrf11time_driver4init17hb4b4f9d91b178c68E>
        pac::UARTE0.enable().write(|w| w.set_enable(Enable::DISABLED));
        pac::UARTE1.enable().write(|w| w.set_enable(Enable::DISABLED));
    }

    peripherals
}
    45e4:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
    45e8:	bd80      	pop	{r7, pc}
    45ea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    45ee:	9049      	str	r0, [sp, #292]	@ 0x124
    45f0:	904a      	str	r0, [sp, #296]	@ 0x128
    45f2:	f44f 60af 	mov.w	r0, #1400	@ 0x578
    45f6:	904b      	str	r0, [sp, #300]	@ 0x12c
    45f8:	f240 5078 	movw	r0, #1400	@ 0x578
    45fc:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    4600:	908b      	str	r0, [sp, #556]	@ 0x22c
            pac::POWER.dcdcen().write(|w| w.set_dcdcen(true));
    4602:	901e      	str	r0, [sp, #120]	@ 0x78
    4604:	a81e      	add	r0, sp, #120	@ 0x78
    4606:	9001      	str	r0, [sp, #4]
    4608:	9067      	str	r0, [sp, #412]	@ 0x19c
    460a:	2000      	movs	r0, #0
            let mut val = Default::default();
    460c:	9066      	str	r0, [sp, #408]	@ 0x198
    460e:	a866      	add	r0, sp, #408	@ 0x198
            let res = f(&mut val);
    4610:	f000 f890 	bl	4734 <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h817849de6d2b2fb9E>
    4614:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    4616:	9966      	ldr	r1, [sp, #408]	@ 0x198
    4618:	9068      	str	r0, [sp, #416]	@ 0x1a0
    461a:	9169      	str	r1, [sp, #420]	@ 0x1a4
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    461c:	981e      	ldr	r0, [sp, #120]	@ 0x78
    461e:	906a      	str	r0, [sp, #424]	@ 0x1a8
    4620:	916b      	str	r1, [sp, #428]	@ 0x1ac
        unsafe { write_volatile(self, val) }
    4622:	f000 fa6e 	bl	4b02 <_ZN4core3ptr14write_volatile17hd6fc9d6e45be02bdE>
    4626:	e7d5      	b.n	45d4 <_ZN11embassy_nrf4init17hc121c2a202dc6d4dE+0x428>

00004628 <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h5e1651b8ad957fcdE>:
        config::LfclkSource::InternalRC => r.lfclksrc().write(|w| w.set_src(pac::clock::vals::Lfclksrc::RC)),
    4628:	b580      	push	{r7, lr}
    462a:	466f      	mov	r7, sp
    462c:	b084      	sub	sp, #16
    462e:	4601      	mov	r1, r0
    4630:	9101      	str	r1, [sp, #4]
    4632:	2000      	movs	r0, #0
    4634:	f807 0c0e 	strb.w	r0, [r7, #-14]
    4638:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    463c:	9102      	str	r1, [sp, #8]
    463e:	f807 2c02 	strb.w	r2, [r7, #-2]
                self.0 = (self.0 & !(0x03 << 0usize)) | (((val.to_bits() as u32) & 0x03) << 0usize);
    4642:	6808      	ldr	r0, [r1, #0]
    4644:	f807 2c01 	strb.w	r2, [r7, #-1]
    4648:	f362 0001 	bfi	r0, r2, #0, #2
    464c:	6008      	str	r0, [r1, #0]
    464e:	b004      	add	sp, #16
    4650:	bd80      	pop	{r7, pc}

00004652 <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17hc4470cd00ebec35dE>:
        config::LfclkSource::Synthesized => r.lfclksrc().write(|w| w.set_src(pac::clock::vals::Lfclksrc::SYNTH)),
    4652:	b580      	push	{r7, lr}
    4654:	466f      	mov	r7, sp
    4656:	b084      	sub	sp, #16
    4658:	4601      	mov	r1, r0
    465a:	9101      	str	r1, [sp, #4]
    465c:	2002      	movs	r0, #2
    465e:	f807 0c0e 	strb.w	r0, [r7, #-14]
    4662:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    4666:	9102      	str	r1, [sp, #8]
    4668:	f807 2c02 	strb.w	r2, [r7, #-2]
    466c:	6808      	ldr	r0, [r1, #0]
    466e:	f807 2c01 	strb.w	r2, [r7, #-1]
    4672:	f362 0001 	bfi	r0, r2, #0, #2
    4676:	6008      	str	r0, [r1, #0]
    4678:	b004      	add	sp, #16
    467a:	bd80      	pop	{r7, pc}

0000467c <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h2f5f1380b7a8dfc8E>:
        config::LfclkSource::ExternalXtal => r.lfclksrc().write(|w| w.set_src(pac::clock::vals::Lfclksrc::XTAL)),
    467c:	b580      	push	{r7, lr}
    467e:	466f      	mov	r7, sp
    4680:	b084      	sub	sp, #16
    4682:	4601      	mov	r1, r0
    4684:	9101      	str	r1, [sp, #4]
    4686:	2001      	movs	r0, #1
    4688:	f807 0c0e 	strb.w	r0, [r7, #-14]
    468c:	f817 2c0e 	ldrb.w	r2, [r7, #-14]
    4690:	9102      	str	r1, [sp, #8]
    4692:	f807 2c02 	strb.w	r2, [r7, #-2]
    4696:	6808      	ldr	r0, [r1, #0]
    4698:	f807 2c01 	strb.w	r2, [r7, #-1]
    469c:	f362 0001 	bfi	r0, r2, #0, #2
    46a0:	6008      	str	r0, [r1, #0]
    46a2:	b004      	add	sp, #16
    46a4:	bd80      	pop	{r7, pc}

000046a6 <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h2f896961792aba52E>:
        config::LfclkSource::ExternalLowSwing => r.lfclksrc().write(|w| {
    46a6:	b580      	push	{r7, lr}
    46a8:	466f      	mov	r7, sp
    46aa:	b088      	sub	sp, #32
    46ac:	4601      	mov	r1, r0
    46ae:	9101      	str	r1, [sp, #4]
    46b0:	2001      	movs	r0, #1
            w.set_src(pac::clock::vals::Lfclksrc::XTAL);
    46b2:	f807 0c1e 	strb.w	r0, [r7, #-30]
    46b6:	f817 3c1e 	ldrb.w	r3, [r7, #-30]
    46ba:	9106      	str	r1, [sp, #24]
    46bc:	f807 3c02 	strb.w	r3, [r7, #-2]
    46c0:	680a      	ldr	r2, [r1, #0]
    46c2:	f807 3c01 	strb.w	r3, [r7, #-1]
    46c6:	f363 0201 	bfi	r2, r3, #0, #2
    46ca:	600a      	str	r2, [r1, #0]
    46cc:	9104      	str	r1, [sp, #16]
    46ce:	f807 0c09 	strb.w	r0, [r7, #-9]
                self.0 = (self.0 & !(0x01 << 17usize)) | (((val as u32) & 0x01) << 17usize);
    46d2:	6808      	ldr	r0, [r1, #0]
    46d4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
    46d8:	6008      	str	r0, [r1, #0]
    46da:	9102      	str	r1, [sp, #8]
    46dc:	2000      	movs	r0, #0
    46de:	f807 0c11 	strb.w	r0, [r7, #-17]
                self.0 = (self.0 & !(0x01 << 16usize)) | (((val as u32) & 0x01) << 16usize);
    46e2:	6808      	ldr	r0, [r1, #0]
    46e4:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    46e8:	6008      	str	r0, [r1, #0]
        }),
    46ea:	b008      	add	sp, #32
    46ec:	bd80      	pop	{r7, pc}

000046ee <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h3112f2de68da71ccE>:
        config::LfclkSource::ExternalFullSwing => r.lfclksrc().write(|w| {
    46ee:	b580      	push	{r7, lr}
    46f0:	466f      	mov	r7, sp
    46f2:	b088      	sub	sp, #32
    46f4:	4601      	mov	r1, r0
    46f6:	9101      	str	r1, [sp, #4]
    46f8:	2001      	movs	r0, #1
            w.set_src(pac::clock::vals::Lfclksrc::XTAL);
    46fa:	f807 0c1e 	strb.w	r0, [r7, #-30]
    46fe:	f817 3c1e 	ldrb.w	r3, [r7, #-30]
    4702:	9106      	str	r1, [sp, #24]
    4704:	f807 3c02 	strb.w	r3, [r7, #-2]
                self.0 = (self.0 & !(0x03 << 0usize)) | (((val.to_bits() as u32) & 0x03) << 0usize);
    4708:	680a      	ldr	r2, [r1, #0]
    470a:	f807 3c01 	strb.w	r3, [r7, #-1]
    470e:	f363 0201 	bfi	r2, r3, #0, #2
    4712:	600a      	str	r2, [r1, #0]
    4714:	9104      	str	r1, [sp, #16]
    4716:	f807 0c09 	strb.w	r0, [r7, #-9]
                self.0 = (self.0 & !(0x01 << 17usize)) | (((val as u32) & 0x01) << 17usize);
    471a:	680a      	ldr	r2, [r1, #0]
    471c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
    4720:	600a      	str	r2, [r1, #0]
    4722:	9102      	str	r1, [sp, #8]
    4724:	f807 0c11 	strb.w	r0, [r7, #-17]
                self.0 = (self.0 & !(0x01 << 16usize)) | (((val as u32) & 0x01) << 16usize);
    4728:	6808      	ldr	r0, [r1, #0]
    472a:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
    472e:	6008      	str	r0, [r1, #0]
        }),
    4730:	b008      	add	sp, #32
    4732:	bd80      	pop	{r7, pc}

00004734 <_ZN11embassy_nrf4init28_$u7b$$u7b$closure$u7d$$u7d$17h817849de6d2b2fb9E>:
            pac::POWER.dcdcen().write(|w| w.set_dcdcen(true));
    4734:	b580      	push	{r7, lr}
    4736:	466f      	mov	r7, sp
    4738:	b084      	sub	sp, #16
    473a:	4601      	mov	r1, r0
    473c:	9101      	str	r1, [sp, #4]
    473e:	9102      	str	r1, [sp, #8]
    4740:	2001      	movs	r0, #1
    4742:	f807 0c01 	strb.w	r0, [r7, #-1]
                val != 0
            }
            #[doc = "Enable DC/DC converter for REG1 stage."]
            #[inline(always)]
            pub fn set_dcdcen(&mut self, val: bool) {
                self.0 = (self.0 & !(0x01 << 0usize)) | (((val as u32) & 0x01) << 0usize);
    4746:	6808      	ldr	r0, [r1, #0]
    4748:	f040 0001 	orr.w	r0, r0, #1
    474c:	6008      	str	r0, [r1, #0]
    474e:	b004      	add	sp, #16
    4750:	bd80      	pop	{r7, pc}

00004752 <_ZN65_$LT$embassy_nrf..WriteResult$u20$as$u20$core..cmp..PartialEq$GT$2eq17h423fc7d40d935f5bE>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
    4752:	b580      	push	{r7, lr}
    4754:	466f      	mov	r7, sp
    4756:	b084      	sub	sp, #16
    4758:	9000      	str	r0, [sp, #0]
    475a:	9101      	str	r1, [sp, #4]
    475c:	7800      	ldrb	r0, [r0, #0]
    475e:	9002      	str	r0, [sp, #8]
    4760:	7809      	ldrb	r1, [r1, #0]
    4762:	9103      	str	r1, [sp, #12]
    4764:	1a40      	subs	r0, r0, r1
    4766:	fab0 f080 	clz	r0, r0
    476a:	0940      	lsrs	r0, r0, #5
    476c:	b004      	add	sp, #16
    476e:	bd80      	pop	{r7, pc}

00004770 <GPIOTE>:
#[interrupt]
    4770:	b580      	push	{r7, lr}
    4772:	466f      	mov	r7, sp
    4774:	f000 f801 	bl	477a <_ZN11embassy_nrf6gpiote20__cortex_m_rt_GPIOTE17h0f964820b9d1e326E>
    4778:	bd80      	pop	{r7, pc}

0000477a <_ZN11embassy_nrf6gpiote20__cortex_m_rt_GPIOTE17h0f964820b9d1e326E>:
fn GPIOTE() {
    477a:	b580      	push	{r7, lr}
    477c:	466f      	mov	r7, sp
    unsafe { handle_gpiote_interrupt() };
    477e:	f7ff f96c 	bl	3a5a <_ZN11embassy_nrf6gpiote23handle_gpiote_interrupt17he2c1511239a6ad07E>
}
    4782:	bd80      	pop	{r7, pc}

00004784 <_ZN16critical_section4with17h0933792ccedbd9a3E>:
pub fn with<R>(f: impl FnOnce(CriticalSection) -> R) -> R {
    4784:	b580      	push	{r7, lr}
    4786:	466f      	mov	r7, sp
    4788:	b082      	sub	sp, #8
    478a:	9000      	str	r0, [sp, #0]
    RestoreState(_critical_section_1_0_acquire())
    478c:	f005 fd80 	bl	a290 <_critical_section_1_0_acquire>
    4790:	4601      	mov	r1, r0
    let state = unsafe { acquire() };
    4792:	9800      	ldr	r0, [sp, #0]
    4794:	f807 1c01 	strb.w	r1, [r7, #-1]
    let _guard = Guard { state };
    4798:	f807 1c02 	strb.w	r1, [r7, #-2]
    unsafe { f(CriticalSection::new()) }
    479c:	f001 fb68 	bl	5e70 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake28_$u7b$$u7b$closure$u7d$$u7d$17h20bdbf548a4d78a7E>
    47a0:	1eb8      	subs	r0, r7, #2
}
    47a2:	f002 fccb 	bl	713c <_ZN4core3ptr50drop_in_place$LT$critical_section..with..Guard$GT$17h82a7466148a2f4a1E>
    47a6:	b002      	add	sp, #8
    47a8:	bd80      	pop	{r7, pc}

000047aa <_ZN16critical_section4with17h7c7592a294f98abeE>:
pub fn with<R>(f: impl FnOnce(CriticalSection) -> R) -> R {
    47aa:	b580      	push	{r7, lr}
    47ac:	466f      	mov	r7, sp
    47ae:	b084      	sub	sp, #16
    47b0:	9000      	str	r0, [sp, #0]
    47b2:	9002      	str	r0, [sp, #8]
    RestoreState(_critical_section_1_0_acquire())
    47b4:	f005 fd6c 	bl	a290 <_critical_section_1_0_acquire>
    47b8:	4601      	mov	r1, r0
    let state = unsafe { acquire() };
    47ba:	9800      	ldr	r0, [sp, #0]
    47bc:	f807 1c01 	strb.w	r1, [r7, #-1]
    let _guard = Guard { state };
    47c0:	f807 1c09 	strb.w	r1, [r7, #-9]
    unsafe { f(CriticalSection::new()) }
    47c4:	f001 f86e 	bl	58a4 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17h58bc7a3cb2448562E>
    47c8:	f1a7 0009 	sub.w	r0, r7, #9
}
    47cc:	f002 fcb6 	bl	713c <_ZN4core3ptr50drop_in_place$LT$critical_section..with..Guard$GT$17h82a7466148a2f4a1E>
    47d0:	b004      	add	sp, #16
    47d2:	bd80      	pop	{r7, pc}

000047d4 <_ZN16critical_section4with17h8a0a072561cb3807E>:
pub fn with<R>(f: impl FnOnce(CriticalSection) -> R) -> R {
    47d4:	b580      	push	{r7, lr}
    47d6:	466f      	mov	r7, sp
    47d8:	b082      	sub	sp, #8
    RestoreState(_critical_section_1_0_acquire())
    47da:	f005 fd59 	bl	a290 <_critical_section_1_0_acquire>
    let state = unsafe { acquire() };
    47de:	f807 0c01 	strb.w	r0, [r7, #-1]
    let _guard = Guard { state };
    47e2:	f807 0c03 	strb.w	r0, [r7, #-3]
    unsafe { f(CriticalSection::new()) }
    47e6:	f000 fda3 	bl	5330 <_ZN4core3ops8function6FnOnce9call_once17hf8875233ff2141deE>
    47ea:	1ef8      	subs	r0, r7, #3
}
    47ec:	f002 fca6 	bl	713c <_ZN4core3ptr50drop_in_place$LT$critical_section..with..Guard$GT$17h82a7466148a2f4a1E>
    47f0:	b002      	add	sp, #8
    47f2:	bd80      	pop	{r7, pc}

000047f4 <_ZN16critical_section4with17hfd5936fb618fcb9aE>:
pub fn with<R>(f: impl FnOnce(CriticalSection) -> R) -> R {
    47f4:	b580      	push	{r7, lr}
    47f6:	466f      	mov	r7, sp
    47f8:	b084      	sub	sp, #16
    47fa:	9000      	str	r0, [sp, #0]
    47fc:	9002      	str	r0, [sp, #8]
    RestoreState(_critical_section_1_0_acquire())
    47fe:	f005 fd47 	bl	a290 <_critical_section_1_0_acquire>
    4802:	4601      	mov	r1, r0
    let state = unsafe { acquire() };
    4804:	9800      	ldr	r0, [sp, #0]
    4806:	f807 1c01 	strb.w	r1, [r7, #-1]
    let _guard = Guard { state };
    480a:	f807 1c09 	strb.w	r1, [r7, #-9]
    unsafe { f(CriticalSection::new()) }
    480e:	f001 f85a 	bl	58c6 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E>
    4812:	f1a7 0009 	sub.w	r0, r7, #9
}
    4816:	f002 fc91 	bl	713c <_ZN4core3ptr50drop_in_place$LT$critical_section..with..Guard$GT$17h82a7466148a2f4a1E>
    481a:	b004      	add	sp, #16
    481c:	bd80      	pop	{r7, pc}

0000481e <_ZN4core3cmp3Ord3max17h3ace5c9a00b1badbE>:
    /// ```
    #[stable(feature = "ord_max_min", since = "1.21.0")]
    #[inline]
    #[must_use]
    #[rustc_diagnostic_item = "cmp_ord_max"]
    fn max(self, other: Self) -> Self
    481e:	b580      	push	{r7, lr}
    4820:	466f      	mov	r7, sp
    4822:	b088      	sub	sp, #32
    4824:	9101      	str	r1, [sp, #4]
    4826:	9000      	str	r0, [sp, #0]
    4828:	9303      	str	r3, [sp, #12]
    482a:	9202      	str	r2, [sp, #8]
    482c:	a802      	add	r0, sp, #8
    482e:	9006      	str	r0, [sp, #24]
    4830:	4668      	mov	r0, sp
    4832:	9007      	str	r0, [sp, #28]

    #[rustfmt::skip]
    macro_rules! partial_ord_methods_primitive_impl {
        () => {
            #[inline(always)]
            fn lt(&self, other: &Self) -> bool { *self <  *other }
    4834:	9a02      	ldr	r2, [sp, #8]
    4836:	9803      	ldr	r0, [sp, #12]
    4838:	9b00      	ldr	r3, [sp, #0]
    483a:	9901      	ldr	r1, [sp, #4]
    483c:	1ad2      	subs	r2, r2, r3
    483e:	4188      	sbcs	r0, r1
        if other < self { self } else { other }
    4840:	d305      	bcc.n	484e <_ZN4core3cmp3Ord3max17h3ace5c9a00b1badbE+0x30>
    4842:	e7ff      	b.n	4844 <_ZN4core3cmp3Ord3max17h3ace5c9a00b1badbE+0x26>
    4844:	9802      	ldr	r0, [sp, #8]
    4846:	9903      	ldr	r1, [sp, #12]
    4848:	9105      	str	r1, [sp, #20]
    484a:	9004      	str	r0, [sp, #16]
    }
    484c:	e004      	b.n	4858 <_ZN4core3cmp3Ord3max17h3ace5c9a00b1badbE+0x3a>
        if other < self { self } else { other }
    484e:	9800      	ldr	r0, [sp, #0]
    4850:	9901      	ldr	r1, [sp, #4]
    4852:	9105      	str	r1, [sp, #20]
    4854:	9004      	str	r0, [sp, #16]
    }
    4856:	e000      	b.n	485a <_ZN4core3cmp3Ord3max17h3ace5c9a00b1badbE+0x3c>
    4858:	e7ff      	b.n	485a <_ZN4core3cmp3Ord3max17h3ace5c9a00b1badbE+0x3c>
    485a:	9804      	ldr	r0, [sp, #16]
    485c:	9905      	ldr	r1, [sp, #20]
    485e:	b008      	add	sp, #32
    4860:	bd80      	pop	{r7, pc}

00004862 <_ZN4core3ptr13read_volatile17h22ace042caa896b9E>:
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
#[rustc_diagnostic_item = "ptr_read_volatile"]
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    4862:	b580      	push	{r7, lr}
    4864:	466f      	mov	r7, sp
    4866:	b084      	sub	sp, #16
    4868:	9001      	str	r0, [sp, #4]
    486a:	9002      	str	r0, [sp, #8]
            if ::core::ub_checks::$kind() {
    486c:	e7ff      	b.n	486e <_ZN4core3ptr13read_volatile17h22ace042caa896b9E+0xc>
                precondition_check($($arg,)*);
    486e:	9801      	ldr	r0, [sp, #4]
    4870:	2104      	movs	r1, #4
    4872:	2200      	movs	r2, #0
    4874:	f000 f83d 	bl	48f2 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E>
            if ::core::ub_checks::$kind() {
    4878:	e7ff      	b.n	487a <_ZN4core3ptr13read_volatile17h22ace042caa896b9E+0x18>
                addr: *const () = src as *const (),
                align: usize = align_of::<T>(),
                is_zst: bool = T::IS_ZST,
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
        );
        intrinsics::volatile_load(src)
    487a:	9801      	ldr	r0, [sp, #4]
    487c:	6800      	ldr	r0, [r0, #0]
    487e:	9003      	str	r0, [sp, #12]
    4880:	9803      	ldr	r0, [sp, #12]
    }
}
    4882:	b004      	add	sp, #16
    4884:	bd80      	pop	{r7, pc}

00004886 <_ZN4core3ptr13read_volatile17h7db4f2efd8efd2bcE>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    4886:	b580      	push	{r7, lr}
    4888:	466f      	mov	r7, sp
    488a:	b084      	sub	sp, #16
    488c:	9001      	str	r0, [sp, #4]
    488e:	9002      	str	r0, [sp, #8]
    4890:	e7ff      	b.n	4892 <_ZN4core3ptr13read_volatile17h7db4f2efd8efd2bcE+0xc>
                precondition_check($($arg,)*);
    4892:	9801      	ldr	r0, [sp, #4]
    4894:	2104      	movs	r1, #4
    4896:	2200      	movs	r2, #0
    4898:	f000 f82b 	bl	48f2 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E>
            if ::core::ub_checks::$kind() {
    489c:	e7ff      	b.n	489e <_ZN4core3ptr13read_volatile17h7db4f2efd8efd2bcE+0x18>
        intrinsics::volatile_load(src)
    489e:	9801      	ldr	r0, [sp, #4]
    48a0:	6800      	ldr	r0, [r0, #0]
    48a2:	9003      	str	r0, [sp, #12]
    48a4:	9803      	ldr	r0, [sp, #12]
}
    48a6:	b004      	add	sp, #16
    48a8:	bd80      	pop	{r7, pc}

000048aa <_ZN4core3ptr13read_volatile17hb1774360b4e696f1E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    48aa:	b580      	push	{r7, lr}
    48ac:	466f      	mov	r7, sp
    48ae:	b084      	sub	sp, #16
    48b0:	9001      	str	r0, [sp, #4]
    48b2:	9002      	str	r0, [sp, #8]
    48b4:	e7ff      	b.n	48b6 <_ZN4core3ptr13read_volatile17hb1774360b4e696f1E+0xc>
                precondition_check($($arg,)*);
    48b6:	9801      	ldr	r0, [sp, #4]
    48b8:	2104      	movs	r1, #4
    48ba:	2200      	movs	r2, #0
    48bc:	f000 f819 	bl	48f2 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E>
            if ::core::ub_checks::$kind() {
    48c0:	e7ff      	b.n	48c2 <_ZN4core3ptr13read_volatile17hb1774360b4e696f1E+0x18>
        intrinsics::volatile_load(src)
    48c2:	9801      	ldr	r0, [sp, #4]
    48c4:	6800      	ldr	r0, [r0, #0]
    48c6:	9003      	str	r0, [sp, #12]
    48c8:	9803      	ldr	r0, [sp, #12]
}
    48ca:	b004      	add	sp, #16
    48cc:	bd80      	pop	{r7, pc}

000048ce <_ZN4core3ptr13read_volatile17hd522fb4e1ffa191fE>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    48ce:	b580      	push	{r7, lr}
    48d0:	466f      	mov	r7, sp
    48d2:	b084      	sub	sp, #16
    48d4:	9001      	str	r0, [sp, #4]
    48d6:	9002      	str	r0, [sp, #8]
    48d8:	e7ff      	b.n	48da <_ZN4core3ptr13read_volatile17hd522fb4e1ffa191fE+0xc>
                precondition_check($($arg,)*);
    48da:	9801      	ldr	r0, [sp, #4]
    48dc:	2104      	movs	r1, #4
    48de:	2200      	movs	r2, #0
    48e0:	f000 f807 	bl	48f2 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E>
            if ::core::ub_checks::$kind() {
    48e4:	e7ff      	b.n	48e6 <_ZN4core3ptr13read_volatile17hd522fb4e1ffa191fE+0x18>
        intrinsics::volatile_load(src)
    48e6:	9801      	ldr	r0, [sp, #4]
    48e8:	6800      	ldr	r0, [r0, #0]
    48ea:	9003      	str	r0, [sp, #12]
    48ec:	9803      	ldr	r0, [sp, #12]
}
    48ee:	b004      	add	sp, #16
    48f0:	bd80      	pop	{r7, pc}

000048f2 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E>:
            const fn precondition_check($($name:$ty),*) {
    48f2:	b580      	push	{r7, lr}
    48f4:	466f      	mov	r7, sp
    48f6:	b090      	sub	sp, #64	@ 0x40
    48f8:	9102      	str	r1, [sp, #8]
    48fa:	9003      	str	r0, [sp, #12]
    48fc:	4613      	mov	r3, r2
    48fe:	9304      	str	r3, [sp, #16]
    4900:	900b      	str	r0, [sp, #44]	@ 0x2c
    4902:	910c      	str	r1, [sp, #48]	@ 0x30
    4904:	f807 2c09 	strb.w	r2, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    4908:	f64c 1088 	movw	r0, #51592	@ 0xc988
    490c:	f2c0 0000 	movt	r0, #0
    4910:	900e      	str	r0, [sp, #56]	@ 0x38
    4912:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
            return intrinsics::ctpop(self);
    4916:	ea00 0051 	and.w	r0, r0, r1, lsr #1
    491a:	1a08      	subs	r0, r1, r0
    491c:	f04f 3133 	mov.w	r1, #858993459	@ 0x33333333
    4920:	ea01 0190 	and.w	r1, r1, r0, lsr #2
    4924:	f020 30cc 	bic.w	r0, r0, #3435973836	@ 0xcccccccc
    4928:	4408      	add	r0, r1
    492a:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    492e:	f020 30f0 	bic.w	r0, r0, #4042322160	@ 0xf0f0f0f0
    4932:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
    4936:	4348      	muls	r0, r1
    4938:	0e00      	lsrs	r0, r0, #24
    493a:	900f      	str	r0, [sp, #60]	@ 0x3c
    493c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
    /// ```
    #[must_use]
    #[inline]
    #[unstable(feature = "pointer_is_aligned_to", issue = "96284")]
    pub fn is_aligned_to(self, align: usize) -> bool {
        if !align.is_power_of_two() {
    493e:	2801      	cmp	r0, #1
    4940:	d108      	bne.n	4954 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0x62>
    4942:	e7ff      	b.n	4944 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0x52>
        unsafe { mem::transmute(self.cast::<()>()) }
    4944:	9803      	ldr	r0, [sp, #12]
    4946:	9902      	ldr	r1, [sp, #8]
    4948:	4602      	mov	r2, r0
            panic!("is_aligned_to: align is not a power-of-two");
        }

        self.addr() & (align - 1) == 0
    494a:	9201      	str	r2, [sp, #4]
    494c:	3901      	subs	r1, #1
    const_eval_select!(
        @capture { ptr: *const (), align: usize, is_zst: bool } -> bool:
        if const {
            is_zst || !ptr.is_null()
        } else {
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    494e:	4208      	tst	r0, r1
    4950:	d01a      	beq.n	4988 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0x96>
    4952:	e01d      	b.n	4990 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0x9e>
        Arguments { pieces, fmt: None, args: &[] }
    4954:	f64c 1088 	movw	r0, #51592	@ 0xc988
    4958:	f2c0 0000 	movt	r0, #0
    495c:	9005      	str	r0, [sp, #20]
    495e:	2001      	movs	r0, #1
    4960:	9006      	str	r0, [sp, #24]
    4962:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    4966:	f2c0 0000 	movt	r0, #0
    496a:	6801      	ldr	r1, [r0, #0]
    496c:	6840      	ldr	r0, [r0, #4]
    496e:	9109      	str	r1, [sp, #36]	@ 0x24
    4970:	900a      	str	r0, [sp, #40]	@ 0x28
    4972:	2004      	movs	r0, #4
    4974:	9007      	str	r0, [sp, #28]
    4976:	2000      	movs	r0, #0
    4978:	9008      	str	r0, [sp, #32]
            panic!("is_aligned_to: align is not a power-of-two");
    497a:	f64c 21ec 	movw	r1, #51948	@ 0xcaec
    497e:	f2c0 0100 	movt	r1, #0
    4982:	a805      	add	r0, sp, #20
    4984:	f005 fd52 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    4988:	9804      	ldr	r0, [sp, #16]
    498a:	07c0      	lsls	r0, r0, #31
    498c:	b920      	cbnz	r0, 4998 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0xa6>
    498e:	e000      	b.n	4992 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0xa0>
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
    4990:	e003      	b.n	499a <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0xa8>
    4992:	9801      	ldr	r0, [sp, #4]
    4994:	b940      	cbnz	r0, 49a8 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0xb6>
    4996:	e000      	b.n	499a <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0xa8>
    4998:	e006      	b.n	49a8 <_ZN4core3ptr13read_volatile18precondition_check17h5518077a310af003E+0xb6>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    499a:	f64c 1090 	movw	r0, #51600	@ 0xc990
    499e:	f2c0 0000 	movt	r0, #0
    49a2:	21e3      	movs	r1, #227	@ 0xe3
    49a4:	f005 fd74 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
            }
    49a8:	b010      	add	sp, #64	@ 0x40
    49aa:	bd80      	pop	{r7, pc}

000049ac <_ZN4core3ptr14write_volatile17h0953c3a8be95fceaE>:
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
#[rustc_diagnostic_item = "ptr_write_volatile"]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    49ac:	b580      	push	{r7, lr}
    49ae:	466f      	mov	r7, sp
    49b0:	b084      	sub	sp, #16
    49b2:	9100      	str	r1, [sp, #0]
    49b4:	9001      	str	r0, [sp, #4]
    49b6:	9002      	str	r0, [sp, #8]
    49b8:	9103      	str	r1, [sp, #12]
            if ::core::ub_checks::$kind() {
    49ba:	e7ff      	b.n	49bc <_ZN4core3ptr14write_volatile17h0953c3a8be95fceaE+0x10>
                precondition_check($($arg,)*);
    49bc:	9801      	ldr	r0, [sp, #4]
    49be:	2104      	movs	r1, #4
    49c0:	2200      	movs	r2, #0
    49c2:	f000 f8c4 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    49c6:	e7ff      	b.n	49c8 <_ZN4core3ptr14write_volatile17h0953c3a8be95fceaE+0x1c>
                addr: *mut () = dst as *mut (),
                align: usize = align_of::<T>(),
                is_zst: bool = T::IS_ZST,
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
        );
        intrinsics::volatile_store(dst, src);
    49c8:	9800      	ldr	r0, [sp, #0]
    49ca:	9901      	ldr	r1, [sp, #4]
    49cc:	6008      	str	r0, [r1, #0]
    }
}
    49ce:	b004      	add	sp, #16
    49d0:	bd80      	pop	{r7, pc}

000049d2 <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    49d2:	b580      	push	{r7, lr}
    49d4:	466f      	mov	r7, sp
    49d6:	b084      	sub	sp, #16
    49d8:	9100      	str	r1, [sp, #0]
    49da:	9001      	str	r0, [sp, #4]
    49dc:	9002      	str	r0, [sp, #8]
    49de:	9103      	str	r1, [sp, #12]
    49e0:	e7ff      	b.n	49e2 <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E+0x10>
                precondition_check($($arg,)*);
    49e2:	9801      	ldr	r0, [sp, #4]
    49e4:	2104      	movs	r1, #4
    49e6:	2200      	movs	r2, #0
    49e8:	f000 f8b1 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    49ec:	e7ff      	b.n	49ee <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E+0x1c>
        intrinsics::volatile_store(dst, src);
    49ee:	9800      	ldr	r0, [sp, #0]
    49f0:	9901      	ldr	r1, [sp, #4]
    49f2:	6008      	str	r0, [r1, #0]
}
    49f4:	b004      	add	sp, #16
    49f6:	bd80      	pop	{r7, pc}

000049f8 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    49f8:	b580      	push	{r7, lr}
    49fa:	466f      	mov	r7, sp
    49fc:	b084      	sub	sp, #16
    49fe:	9100      	str	r1, [sp, #0]
    4a00:	9001      	str	r0, [sp, #4]
    4a02:	9002      	str	r0, [sp, #8]
    4a04:	9103      	str	r1, [sp, #12]
    4a06:	e7ff      	b.n	4a08 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E+0x10>
                precondition_check($($arg,)*);
    4a08:	9801      	ldr	r0, [sp, #4]
    4a0a:	2104      	movs	r1, #4
    4a0c:	2200      	movs	r2, #0
    4a0e:	f000 f89e 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4a12:	e7ff      	b.n	4a14 <_ZN4core3ptr14write_volatile17h3d974517da8aa8e4E+0x1c>
        intrinsics::volatile_store(dst, src);
    4a14:	9800      	ldr	r0, [sp, #0]
    4a16:	9901      	ldr	r1, [sp, #4]
    4a18:	6008      	str	r0, [r1, #0]
}
    4a1a:	b004      	add	sp, #16
    4a1c:	bd80      	pop	{r7, pc}

00004a1e <_ZN4core3ptr14write_volatile17h3e20ee04c6afb4ffE>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    4a1e:	b580      	push	{r7, lr}
    4a20:	466f      	mov	r7, sp
    4a22:	b084      	sub	sp, #16
    4a24:	9100      	str	r1, [sp, #0]
    4a26:	9001      	str	r0, [sp, #4]
    4a28:	9002      	str	r0, [sp, #8]
    4a2a:	9103      	str	r1, [sp, #12]
    4a2c:	e7ff      	b.n	4a2e <_ZN4core3ptr14write_volatile17h3e20ee04c6afb4ffE+0x10>
                precondition_check($($arg,)*);
    4a2e:	9801      	ldr	r0, [sp, #4]
    4a30:	2104      	movs	r1, #4
    4a32:	2200      	movs	r2, #0
    4a34:	f000 f88b 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4a38:	e7ff      	b.n	4a3a <_ZN4core3ptr14write_volatile17h3e20ee04c6afb4ffE+0x1c>
        intrinsics::volatile_store(dst, src);
    4a3a:	9800      	ldr	r0, [sp, #0]
    4a3c:	9901      	ldr	r1, [sp, #4]
    4a3e:	6008      	str	r0, [r1, #0]
}
    4a40:	b004      	add	sp, #16
    4a42:	bd80      	pop	{r7, pc}

00004a44 <_ZN4core3ptr14write_volatile17h43eb50fae70d6160E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    4a44:	b580      	push	{r7, lr}
    4a46:	466f      	mov	r7, sp
    4a48:	b084      	sub	sp, #16
    4a4a:	9100      	str	r1, [sp, #0]
    4a4c:	9001      	str	r0, [sp, #4]
    4a4e:	9002      	str	r0, [sp, #8]
    4a50:	9103      	str	r1, [sp, #12]
    4a52:	e7ff      	b.n	4a54 <_ZN4core3ptr14write_volatile17h43eb50fae70d6160E+0x10>
                precondition_check($($arg,)*);
    4a54:	9801      	ldr	r0, [sp, #4]
    4a56:	2104      	movs	r1, #4
    4a58:	2200      	movs	r2, #0
    4a5a:	f000 f878 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4a5e:	e7ff      	b.n	4a60 <_ZN4core3ptr14write_volatile17h43eb50fae70d6160E+0x1c>
        intrinsics::volatile_store(dst, src);
    4a60:	9800      	ldr	r0, [sp, #0]
    4a62:	9901      	ldr	r1, [sp, #4]
    4a64:	6008      	str	r0, [r1, #0]
}
    4a66:	b004      	add	sp, #16
    4a68:	bd80      	pop	{r7, pc}

00004a6a <_ZN4core3ptr14write_volatile17h6955a4c7eac4c302E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    4a6a:	b580      	push	{r7, lr}
    4a6c:	466f      	mov	r7, sp
    4a6e:	b084      	sub	sp, #16
    4a70:	9100      	str	r1, [sp, #0]
    4a72:	9001      	str	r0, [sp, #4]
    4a74:	9002      	str	r0, [sp, #8]
    4a76:	9103      	str	r1, [sp, #12]
    4a78:	e7ff      	b.n	4a7a <_ZN4core3ptr14write_volatile17h6955a4c7eac4c302E+0x10>
                precondition_check($($arg,)*);
    4a7a:	9801      	ldr	r0, [sp, #4]
    4a7c:	2104      	movs	r1, #4
    4a7e:	2200      	movs	r2, #0
    4a80:	f000 f865 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4a84:	e7ff      	b.n	4a86 <_ZN4core3ptr14write_volatile17h6955a4c7eac4c302E+0x1c>
        intrinsics::volatile_store(dst, src);
    4a86:	9800      	ldr	r0, [sp, #0]
    4a88:	9901      	ldr	r1, [sp, #4]
    4a8a:	6008      	str	r0, [r1, #0]
}
    4a8c:	b004      	add	sp, #16
    4a8e:	bd80      	pop	{r7, pc}

00004a90 <_ZN4core3ptr14write_volatile17h81ddc699e7059b82E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    4a90:	b580      	push	{r7, lr}
    4a92:	466f      	mov	r7, sp
    4a94:	b084      	sub	sp, #16
    4a96:	9100      	str	r1, [sp, #0]
    4a98:	9001      	str	r0, [sp, #4]
    4a9a:	9002      	str	r0, [sp, #8]
    4a9c:	9103      	str	r1, [sp, #12]
    4a9e:	e7ff      	b.n	4aa0 <_ZN4core3ptr14write_volatile17h81ddc699e7059b82E+0x10>
                precondition_check($($arg,)*);
    4aa0:	9801      	ldr	r0, [sp, #4]
    4aa2:	2104      	movs	r1, #4
    4aa4:	2200      	movs	r2, #0
    4aa6:	f000 f852 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4aaa:	e7ff      	b.n	4aac <_ZN4core3ptr14write_volatile17h81ddc699e7059b82E+0x1c>
        intrinsics::volatile_store(dst, src);
    4aac:	9800      	ldr	r0, [sp, #0]
    4aae:	9901      	ldr	r1, [sp, #4]
    4ab0:	6008      	str	r0, [r1, #0]
}
    4ab2:	b004      	add	sp, #16
    4ab4:	bd80      	pop	{r7, pc}

00004ab6 <_ZN4core3ptr14write_volatile17hb9b5ca8782afd235E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    4ab6:	b580      	push	{r7, lr}
    4ab8:	466f      	mov	r7, sp
    4aba:	b084      	sub	sp, #16
    4abc:	9100      	str	r1, [sp, #0]
    4abe:	9001      	str	r0, [sp, #4]
    4ac0:	9002      	str	r0, [sp, #8]
    4ac2:	9103      	str	r1, [sp, #12]
    4ac4:	e7ff      	b.n	4ac6 <_ZN4core3ptr14write_volatile17hb9b5ca8782afd235E+0x10>
                precondition_check($($arg,)*);
    4ac6:	9801      	ldr	r0, [sp, #4]
    4ac8:	2104      	movs	r1, #4
    4aca:	2200      	movs	r2, #0
    4acc:	f000 f83f 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4ad0:	e7ff      	b.n	4ad2 <_ZN4core3ptr14write_volatile17hb9b5ca8782afd235E+0x1c>
        intrinsics::volatile_store(dst, src);
    4ad2:	9800      	ldr	r0, [sp, #0]
    4ad4:	9901      	ldr	r1, [sp, #4]
    4ad6:	6008      	str	r0, [r1, #0]
}
    4ad8:	b004      	add	sp, #16
    4ada:	bd80      	pop	{r7, pc}

00004adc <_ZN4core3ptr14write_volatile17hc505c8aa9701cd5eE>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    4adc:	b580      	push	{r7, lr}
    4ade:	466f      	mov	r7, sp
    4ae0:	b084      	sub	sp, #16
    4ae2:	9100      	str	r1, [sp, #0]
    4ae4:	9001      	str	r0, [sp, #4]
    4ae6:	9002      	str	r0, [sp, #8]
    4ae8:	9103      	str	r1, [sp, #12]
    4aea:	e7ff      	b.n	4aec <_ZN4core3ptr14write_volatile17hc505c8aa9701cd5eE+0x10>
                precondition_check($($arg,)*);
    4aec:	9801      	ldr	r0, [sp, #4]
    4aee:	2104      	movs	r1, #4
    4af0:	2200      	movs	r2, #0
    4af2:	f000 f82c 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4af6:	e7ff      	b.n	4af8 <_ZN4core3ptr14write_volatile17hc505c8aa9701cd5eE+0x1c>
        intrinsics::volatile_store(dst, src);
    4af8:	9800      	ldr	r0, [sp, #0]
    4afa:	9901      	ldr	r1, [sp, #4]
    4afc:	6008      	str	r0, [r1, #0]
}
    4afe:	b004      	add	sp, #16
    4b00:	bd80      	pop	{r7, pc}

00004b02 <_ZN4core3ptr14write_volatile17hd6fc9d6e45be02bdE>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    4b02:	b580      	push	{r7, lr}
    4b04:	466f      	mov	r7, sp
    4b06:	b084      	sub	sp, #16
    4b08:	9100      	str	r1, [sp, #0]
    4b0a:	9001      	str	r0, [sp, #4]
    4b0c:	9002      	str	r0, [sp, #8]
    4b0e:	9103      	str	r1, [sp, #12]
    4b10:	e7ff      	b.n	4b12 <_ZN4core3ptr14write_volatile17hd6fc9d6e45be02bdE+0x10>
                precondition_check($($arg,)*);
    4b12:	9801      	ldr	r0, [sp, #4]
    4b14:	2104      	movs	r1, #4
    4b16:	2200      	movs	r2, #0
    4b18:	f000 f819 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4b1c:	e7ff      	b.n	4b1e <_ZN4core3ptr14write_volatile17hd6fc9d6e45be02bdE+0x1c>
        intrinsics::volatile_store(dst, src);
    4b1e:	9800      	ldr	r0, [sp, #0]
    4b20:	9901      	ldr	r1, [sp, #4]
    4b22:	6008      	str	r0, [r1, #0]
}
    4b24:	b004      	add	sp, #16
    4b26:	bd80      	pop	{r7, pc}

00004b28 <_ZN4core3ptr14write_volatile17hef49abf32a5f7765E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    4b28:	b580      	push	{r7, lr}
    4b2a:	466f      	mov	r7, sp
    4b2c:	b084      	sub	sp, #16
    4b2e:	9100      	str	r1, [sp, #0]
    4b30:	9001      	str	r0, [sp, #4]
    4b32:	9002      	str	r0, [sp, #8]
    4b34:	9103      	str	r1, [sp, #12]
    4b36:	e7ff      	b.n	4b38 <_ZN4core3ptr14write_volatile17hef49abf32a5f7765E+0x10>
                precondition_check($($arg,)*);
    4b38:	9801      	ldr	r0, [sp, #4]
    4b3a:	2104      	movs	r1, #4
    4b3c:	2200      	movs	r2, #0
    4b3e:	f000 f806 	bl	4b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>
            if ::core::ub_checks::$kind() {
    4b42:	e7ff      	b.n	4b44 <_ZN4core3ptr14write_volatile17hef49abf32a5f7765E+0x1c>
        intrinsics::volatile_store(dst, src);
    4b44:	9800      	ldr	r0, [sp, #0]
    4b46:	9901      	ldr	r1, [sp, #4]
    4b48:	6008      	str	r0, [r1, #0]
}
    4b4a:	b004      	add	sp, #16
    4b4c:	bd80      	pop	{r7, pc}

00004b4e <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE>:
            const fn precondition_check($($name:$ty),*) {
    4b4e:	b580      	push	{r7, lr}
    4b50:	466f      	mov	r7, sp
    4b52:	b090      	sub	sp, #64	@ 0x40
    4b54:	9101      	str	r1, [sp, #4]
    4b56:	9002      	str	r0, [sp, #8]
    4b58:	4613      	mov	r3, r2
    4b5a:	9303      	str	r3, [sp, #12]
    4b5c:	900a      	str	r0, [sp, #40]	@ 0x28
    4b5e:	910b      	str	r1, [sp, #44]	@ 0x2c
    4b60:	f807 2c0d 	strb.w	r2, [r7, #-13]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    4b64:	f64c 1288 	movw	r2, #51592	@ 0xc988
    4b68:	f2c0 0200 	movt	r2, #0
    4b6c:	920d      	str	r2, [sp, #52]	@ 0x34
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
    4b6e:	900e      	str	r0, [sp, #56]	@ 0x38
    4b70:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
    4b74:	ea00 0051 	and.w	r0, r0, r1, lsr #1
    4b78:	1a08      	subs	r0, r1, r0
    4b7a:	f04f 3133 	mov.w	r1, #858993459	@ 0x33333333
    4b7e:	ea01 0190 	and.w	r1, r1, r0, lsr #2
    4b82:	f020 30cc 	bic.w	r0, r0, #3435973836	@ 0xcccccccc
    4b86:	4408      	add	r0, r1
    4b88:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    4b8c:	f020 30f0 	bic.w	r0, r0, #4042322160	@ 0xf0f0f0f0
    4b90:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
    4b94:	4348      	muls	r0, r1
    4b96:	0e00      	lsrs	r0, r0, #24
    4b98:	900f      	str	r0, [sp, #60]	@ 0x3c
    4b9a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
        if !align.is_power_of_two() {
    4b9c:	2801      	cmp	r0, #1
    4b9e:	d108      	bne.n	4bb2 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0x64>
    4ba0:	e7ff      	b.n	4ba2 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0x54>
        unsafe { mem::transmute(self.cast::<()>()) }
    4ba2:	9802      	ldr	r0, [sp, #8]
    4ba4:	9901      	ldr	r1, [sp, #4]
    4ba6:	4602      	mov	r2, r0
        self.addr() & (align - 1) == 0
    4ba8:	9200      	str	r2, [sp, #0]
    4baa:	3901      	subs	r1, #1
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    4bac:	4208      	tst	r0, r1
    4bae:	d01a      	beq.n	4be6 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0x98>
    4bb0:	e01d      	b.n	4bee <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0xa0>
        Arguments { pieces, fmt: None, args: &[] }
    4bb2:	f64c 1088 	movw	r0, #51592	@ 0xc988
    4bb6:	f2c0 0000 	movt	r0, #0
    4bba:	9004      	str	r0, [sp, #16]
    4bbc:	2001      	movs	r0, #1
    4bbe:	9005      	str	r0, [sp, #20]
    4bc0:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    4bc4:	f2c0 0000 	movt	r0, #0
    4bc8:	6801      	ldr	r1, [r0, #0]
    4bca:	6840      	ldr	r0, [r0, #4]
    4bcc:	9108      	str	r1, [sp, #32]
    4bce:	9009      	str	r0, [sp, #36]	@ 0x24
    4bd0:	2004      	movs	r0, #4
    4bd2:	9006      	str	r0, [sp, #24]
    4bd4:	2000      	movs	r0, #0
    4bd6:	9007      	str	r0, [sp, #28]
            panic!("is_aligned_to: align is not a power-of-two");
    4bd8:	f64c 21ec 	movw	r1, #51948	@ 0xcaec
    4bdc:	f2c0 0100 	movt	r1, #0
    4be0:	a804      	add	r0, sp, #16
    4be2:	f005 fc23 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    4be6:	9803      	ldr	r0, [sp, #12]
    4be8:	07c0      	lsls	r0, r0, #31
    4bea:	b920      	cbnz	r0, 4bf6 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0xa8>
    4bec:	e000      	b.n	4bf0 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0xa2>
    4bee:	e003      	b.n	4bf8 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0xaa>
    4bf0:	9800      	ldr	r0, [sp, #0]
    4bf2:	b940      	cbnz	r0, 4c06 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0xb8>
    4bf4:	e000      	b.n	4bf8 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0xaa>
    4bf6:	e006      	b.n	4c06 <_ZN4core3ptr14write_volatile18precondition_check17h72aeb3046dcc2a0fE+0xb8>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    4bf8:	f64c 20fc 	movw	r0, #51964	@ 0xcafc
    4bfc:	f2c0 0000 	movt	r0, #0
    4c00:	21e4      	movs	r1, #228	@ 0xe4
    4c02:	f005 fc45 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
            }
    4c06:	b010      	add	sp, #64	@ 0x40
    4c08:	bd80      	pop	{r7, pc}

00004c0a <_ZN74_$LT$nrf_pac..inner..gpio..vals..Sense$u20$as$u20$core..cmp..PartialEq$GT$2eq17h381631bc75c37fabE>:
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]
    4c0a:	b580      	push	{r7, lr}
    4c0c:	466f      	mov	r7, sp
    4c0e:	b083      	sub	sp, #12
    4c10:	9000      	str	r0, [sp, #0]
    4c12:	9101      	str	r1, [sp, #4]
    4c14:	7800      	ldrb	r0, [r0, #0]
    4c16:	f807 0c02 	strb.w	r0, [r7, #-2]
    4c1a:	7809      	ldrb	r1, [r1, #0]
    4c1c:	f807 1c01 	strb.w	r1, [r7, #-1]
    4c20:	1a40      	subs	r0, r0, r1
    4c22:	fab0 f080 	clz	r0, r0
    4c26:	0940      	lsrs	r0, r0, #5
    4c28:	b003      	add	sp, #12
    4c2a:	bd80      	pop	{r7, pc}

00004c2c <_ZN8cortex_m3asm3dsb17h7c625381e317ba95E>:
/// can execute until this instruction completes. This instruction completes only when both:
///
///  * any explicit memory access made before this instruction is complete
///  * all cache and branch predictor maintenance operations before this instruction complete
#[inline]
pub fn dsb() {
    4c2c:	b580      	push	{r7, lr}
    4c2e:	466f      	mov	r7, sp
                () => {
                    extern "C" {
                        fn $func($($args: $tys),*) $(-> $ret)?;
                    }

                    $func($($args),*)
    4c30:	f005 fb4f 	bl	a2d2 <__dsb>
    call_asm!(__dsb())
}
    4c34:	bd80      	pop	{r7, pc}

00004c36 <_ZN8cortex_m3asm3nop17hdc29cfb006c9c898E>:
pub fn nop() {
    4c36:	b580      	push	{r7, lr}
    4c38:	466f      	mov	r7, sp
    4c3a:	f005 fb4d 	bl	a2d8 <__nop>
}
    4c3e:	bd80      	pop	{r7, pc}

00004c40 <_ZN11embassy_nrf4gpio3Pin7degrade17h01c132438600ad08E>:
    fn degrade(self) -> AnyPin {
    4c40:	b580      	push	{r7, lr}
    4c42:	466f      	mov	r7, sp
    4c44:	b082      	sub	sp, #8
    4c46:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4c48:	f000 faa6 	bl	5198 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_23$GT$8pin_port17h358d9d3716d79d19E>
    }
    4c4c:	b002      	add	sp, #8
    4c4e:	bd80      	pop	{r7, pc}

00004c50 <_ZN11embassy_nrf4gpio3Pin7degrade17h046f9cf7caa18818E>:
    fn degrade(self) -> AnyPin {
    4c50:	b580      	push	{r7, lr}
    4c52:	466f      	mov	r7, sp
    4c54:	b082      	sub	sp, #8
    4c56:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4c58:	f000 fa16 	bl	5088 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_15$GT$8pin_port17hc7a64c13d1a7181eE>
    }
    4c5c:	b002      	add	sp, #8
    4c5e:	bd80      	pop	{r7, pc}

00004c60 <_ZN11embassy_nrf4gpio3Pin7degrade17h263a5ced7163a376E>:
    fn degrade(self) -> AnyPin {
    4c60:	b580      	push	{r7, lr}
    4c62:	466f      	mov	r7, sp
    4c64:	b082      	sub	sp, #8
    4c66:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4c68:	f000 f9ca 	bl	5000 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_11$GT$8pin_port17ha8514a72034c7481E>
    }
    4c6c:	b002      	add	sp, #8
    4c6e:	bd80      	pop	{r7, pc}

00004c70 <_ZN11embassy_nrf4gpio3Pin7degrade17h28ebe9bae66a1dd3E>:
    fn degrade(self) -> AnyPin {
    4c70:	b580      	push	{r7, lr}
    4c72:	466f      	mov	r7, sp
    4c74:	b082      	sub	sp, #8
    4c76:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4c78:	f000 faf4 	bl	5264 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_30$GT$8pin_port17hd3d83ef40fcdd660E>
    }
    4c7c:	b002      	add	sp, #8
    4c7e:	bd80      	pop	{r7, pc}

00004c80 <_ZN11embassy_nrf4gpio3Pin7degrade17h38f6c5df68e9b4b2E>:
    fn degrade(self) -> AnyPin {
    4c80:	b580      	push	{r7, lr}
    4c82:	466f      	mov	r7, sp
    4c84:	b082      	sub	sp, #8
    4c86:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4c88:	f000 faa8 	bl	51dc <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_24$GT$8pin_port17h31bfae696801fae9E>
    }
    4c8c:	b002      	add	sp, #8
    4c8e:	bd80      	pop	{r7, pc}

00004c90 <_ZN11embassy_nrf4gpio3Pin7degrade17h3ad8195b8553f21dE>:
    fn degrade(self) -> AnyPin {
    4c90:	b580      	push	{r7, lr}
    4c92:	466f      	mov	r7, sp
    4c94:	b082      	sub	sp, #8
    4c96:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4c98:	f000 fa5c 	bl	5154 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_22$GT$8pin_port17hf910bdf18bcea23fE>
    }
    4c9c:	b002      	add	sp, #8
    4c9e:	bd80      	pop	{r7, pc}

00004ca0 <_ZN11embassy_nrf4gpio3Pin7degrade17h42afd42e9c0dc241E>:
    fn degrade(self) -> AnyPin {
    4ca0:	b580      	push	{r7, lr}
    4ca2:	466f      	mov	r7, sp
    4ca4:	b082      	sub	sp, #8
    4ca6:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4ca8:	f000 fa10 	bl	50cc <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_19$GT$8pin_port17h794175a3d2761997E>
    }
    4cac:	b002      	add	sp, #8
    4cae:	bd80      	pop	{r7, pc}

00004cb0 <_ZN11embassy_nrf4gpio3Pin7degrade17h47017b31f21f41a4E>:
    fn degrade(self) -> AnyPin {
    4cb0:	b580      	push	{r7, lr}
    4cb2:	466f      	mov	r7, sp
    4cb4:	b082      	sub	sp, #8
    4cb6:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4cb8:	f000 f9c4 	bl	5044 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_14$GT$8pin_port17hf48498bef11bf6dcE>
    }
    4cbc:	b002      	add	sp, #8
    4cbe:	bd80      	pop	{r7, pc}

00004cc0 <_ZN11embassy_nrf4gpio3Pin7degrade17h79bd1e0fe83ad1bcE>:
    fn degrade(self) -> AnyPin {
    4cc0:	b580      	push	{r7, lr}
    4cc2:	466f      	mov	r7, sp
    4cc4:	b082      	sub	sp, #8
    4cc6:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4cc8:	f000 fb10 	bl	52ec <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P1_05$GT$8pin_port17hc01e6f02c224c265E>
    }
    4ccc:	b002      	add	sp, #8
    4cce:	bd80      	pop	{r7, pc}

00004cd0 <_ZN11embassy_nrf4gpio3Pin7degrade17ha383c0f0d170054eE>:
    fn degrade(self) -> AnyPin {
    4cd0:	b580      	push	{r7, lr}
    4cd2:	466f      	mov	r7, sp
    4cd4:	b082      	sub	sp, #8
    4cd6:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4cd8:	f000 fae6 	bl	52a8 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_31$GT$8pin_port17h2b32ec663cfbd7daE>
    }
    4cdc:	b002      	add	sp, #8
    4cde:	bd80      	pop	{r7, pc}

00004ce0 <_ZN11embassy_nrf4gpio3Pin7degrade17hb30ccf8511e366e5E>:
    fn degrade(self) -> AnyPin {
    4ce0:	b580      	push	{r7, lr}
    4ce2:	466f      	mov	r7, sp
    4ce4:	b082      	sub	sp, #8
    4ce6:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4ce8:	f000 fa12 	bl	5110 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_21$GT$8pin_port17hb0afb392642fc6ebE>
    }
    4cec:	b002      	add	sp, #8
    4cee:	bd80      	pop	{r7, pc}

00004cf0 <_ZN11embassy_nrf4gpio3Pin7degrade17hd389a42720d795eeE>:
    fn degrade(self) -> AnyPin {
    4cf0:	b580      	push	{r7, lr}
    4cf2:	466f      	mov	r7, sp
    4cf4:	b082      	sub	sp, #8
    4cf6:	1e78      	subs	r0, r7, #1
            pin_port: self.pin_port(),
    4cf8:	f000 fa92 	bl	5220 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_28$GT$8pin_port17hddf99687988b51b9E>
    }
    4cfc:	b002      	add	sp, #8
    4cfe:	bd80      	pop	{r7, pc}

00004d00 <_ZN11embassy_nrf4chip11peripherals4USBD5steal17h831b2b75cab83c9eE>:
                    pub unsafe fn steal() -> Self {
    4d00:	b580      	push	{r7, lr}
    4d02:	466f      	mov	r7, sp
                    }
    4d04:	bd80      	pop	{r7, pc}

00004d06 <_ZN11embassy_nrf4chip11peripherals4RTC05steal17h3dcb732d3e61e857E>:
                    pub unsafe fn steal() -> Self {
    4d06:	b580      	push	{r7, lr}
    4d08:	466f      	mov	r7, sp
                    }
    4d0a:	bd80      	pop	{r7, pc}

00004d0c <_ZN11embassy_nrf4chip11peripherals4RTC15steal17hab8e989493402ed8E>:
                    pub unsafe fn steal() -> Self {
    4d0c:	b580      	push	{r7, lr}
    4d0e:	466f      	mov	r7, sp
                    }
    4d10:	bd80      	pop	{r7, pc}

00004d12 <_ZN11embassy_nrf4chip11peripherals4RTC25steal17h4ea34a9a3c75cda8E>:
                    pub unsafe fn steal() -> Self {
    4d12:	b580      	push	{r7, lr}
    4d14:	466f      	mov	r7, sp
                    }
    4d16:	bd80      	pop	{r7, pc}

00004d18 <_ZN11embassy_nrf4chip11peripherals3WDT5steal17h71773c30a8ed10d6E>:
                    pub unsafe fn steal() -> Self {
    4d18:	b580      	push	{r7, lr}
    4d1a:	466f      	mov	r7, sp
                    }
    4d1c:	bd80      	pop	{r7, pc}

00004d1e <_ZN11embassy_nrf4chip11peripherals4NVMC5steal17h36905a153901b205E>:
                    pub unsafe fn steal() -> Self {
    4d1e:	b580      	push	{r7, lr}
    4d20:	466f      	mov	r7, sp
                    }
    4d22:	bd80      	pop	{r7, pc}

00004d24 <_ZN11embassy_nrf4chip11peripherals3RNG5steal17h6fb9467942c7ce0dE>:
                    pub unsafe fn steal() -> Self {
    4d24:	b580      	push	{r7, lr}
    4d26:	466f      	mov	r7, sp
                    }
    4d28:	bd80      	pop	{r7, pc}

00004d2a <_ZN11embassy_nrf4chip11peripherals6UARTE05steal17he8905746d088885dE>:
                    pub unsafe fn steal() -> Self {
    4d2a:	b580      	push	{r7, lr}
    4d2c:	466f      	mov	r7, sp
                    }
    4d2e:	bd80      	pop	{r7, pc}

00004d30 <_ZN11embassy_nrf4chip11peripherals6UARTE15steal17hdcbf21a9f6a028a2E>:
                    pub unsafe fn steal() -> Self {
    4d30:	b580      	push	{r7, lr}
    4d32:	466f      	mov	r7, sp
                    }
    4d34:	bd80      	pop	{r7, pc}

00004d36 <_ZN11embassy_nrf4chip11peripherals7TWISPI05steal17h1eafde0f980a8b35E>:
                    pub unsafe fn steal() -> Self {
    4d36:	b580      	push	{r7, lr}
    4d38:	466f      	mov	r7, sp
                    }
    4d3a:	bd80      	pop	{r7, pc}

00004d3c <_ZN11embassy_nrf4chip11peripherals7TWISPI15steal17h7465adf8287be503E>:
                    pub unsafe fn steal() -> Self {
    4d3c:	b580      	push	{r7, lr}
    4d3e:	466f      	mov	r7, sp
                    }
    4d40:	bd80      	pop	{r7, pc}

00004d42 <_ZN11embassy_nrf4chip11peripherals4SPI25steal17h099cf5cfeba607f5E>:
                    pub unsafe fn steal() -> Self {
    4d42:	b580      	push	{r7, lr}
    4d44:	466f      	mov	r7, sp
                    }
    4d46:	bd80      	pop	{r7, pc}

00004d48 <_ZN11embassy_nrf4chip11peripherals4SPI35steal17h48ef900873297160E>:
                    pub unsafe fn steal() -> Self {
    4d48:	b580      	push	{r7, lr}
    4d4a:	466f      	mov	r7, sp
                    }
    4d4c:	bd80      	pop	{r7, pc}

00004d4e <_ZN11embassy_nrf4chip11peripherals5SAADC5steal17hc29c6bf22e816fa6E>:
                    pub unsafe fn steal() -> Self {
    4d4e:	b580      	push	{r7, lr}
    4d50:	466f      	mov	r7, sp
                    }
    4d52:	bd80      	pop	{r7, pc}

00004d54 <_ZN11embassy_nrf4chip11peripherals4PWM05steal17h1c250283e4e62fe4E>:
                    pub unsafe fn steal() -> Self {
    4d54:	b580      	push	{r7, lr}
    4d56:	466f      	mov	r7, sp
                    }
    4d58:	bd80      	pop	{r7, pc}

00004d5a <_ZN11embassy_nrf4chip11peripherals4PWM15steal17h96a2f670b62fcb05E>:
                    pub unsafe fn steal() -> Self {
    4d5a:	b580      	push	{r7, lr}
    4d5c:	466f      	mov	r7, sp
                    }
    4d5e:	bd80      	pop	{r7, pc}

00004d60 <_ZN11embassy_nrf4chip11peripherals4PWM25steal17h265482d7a652d10fE>:
                    pub unsafe fn steal() -> Self {
    4d60:	b580      	push	{r7, lr}
    4d62:	466f      	mov	r7, sp
                    }
    4d64:	bd80      	pop	{r7, pc}

00004d66 <_ZN11embassy_nrf4chip11peripherals4PWM35steal17hc8cc901cde87a113E>:
                    pub unsafe fn steal() -> Self {
    4d66:	b580      	push	{r7, lr}
    4d68:	466f      	mov	r7, sp
                    }
    4d6a:	bd80      	pop	{r7, pc}

00004d6c <_ZN11embassy_nrf4chip11peripherals6TIMER05steal17h3eed9115f88093e5E>:
                    pub unsafe fn steal() -> Self {
    4d6c:	b580      	push	{r7, lr}
    4d6e:	466f      	mov	r7, sp
                    }
    4d70:	bd80      	pop	{r7, pc}

00004d72 <_ZN11embassy_nrf4chip11peripherals6TIMER15steal17h9b3253f53de00a3cE>:
                    pub unsafe fn steal() -> Self {
    4d72:	b580      	push	{r7, lr}
    4d74:	466f      	mov	r7, sp
                    }
    4d76:	bd80      	pop	{r7, pc}

00004d78 <_ZN11embassy_nrf4chip11peripherals6TIMER25steal17h08f872dea7923ebcE>:
                    pub unsafe fn steal() -> Self {
    4d78:	b580      	push	{r7, lr}
    4d7a:	466f      	mov	r7, sp
                    }
    4d7c:	bd80      	pop	{r7, pc}

00004d7e <_ZN11embassy_nrf4chip11peripherals6TIMER35steal17hd458bd37848577fcE>:
                    pub unsafe fn steal() -> Self {
    4d7e:	b580      	push	{r7, lr}
    4d80:	466f      	mov	r7, sp
                    }
    4d82:	bd80      	pop	{r7, pc}

00004d84 <_ZN11embassy_nrf4chip11peripherals6TIMER45steal17h6e15498fbbd8d6a5E>:
                    pub unsafe fn steal() -> Self {
    4d84:	b580      	push	{r7, lr}
    4d86:	466f      	mov	r7, sp
                    }
    4d88:	bd80      	pop	{r7, pc}

00004d8a <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH05steal17h63baeea7506715a7E>:
                    pub unsafe fn steal() -> Self {
    4d8a:	b580      	push	{r7, lr}
    4d8c:	466f      	mov	r7, sp
                    }
    4d8e:	bd80      	pop	{r7, pc}

00004d90 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH15steal17hcb50899e49745a58E>:
                    pub unsafe fn steal() -> Self {
    4d90:	b580      	push	{r7, lr}
    4d92:	466f      	mov	r7, sp
                    }
    4d94:	bd80      	pop	{r7, pc}

00004d96 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH25steal17h8aa85f5d207dbf03E>:
                    pub unsafe fn steal() -> Self {
    4d96:	b580      	push	{r7, lr}
    4d98:	466f      	mov	r7, sp
                    }
    4d9a:	bd80      	pop	{r7, pc}

00004d9c <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH35steal17h8442212c5053cef4E>:
                    pub unsafe fn steal() -> Self {
    4d9c:	b580      	push	{r7, lr}
    4d9e:	466f      	mov	r7, sp
                    }
    4da0:	bd80      	pop	{r7, pc}

00004da2 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH45steal17he95f3d348d9cb6a3E>:
                    pub unsafe fn steal() -> Self {
    4da2:	b580      	push	{r7, lr}
    4da4:	466f      	mov	r7, sp
                    }
    4da6:	bd80      	pop	{r7, pc}

00004da8 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH55steal17hd8f9f1624922b683E>:
                    pub unsafe fn steal() -> Self {
    4da8:	b580      	push	{r7, lr}
    4daa:	466f      	mov	r7, sp
                    }
    4dac:	bd80      	pop	{r7, pc}

00004dae <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH65steal17hd9217712c04ed1cfE>:
                    pub unsafe fn steal() -> Self {
    4dae:	b580      	push	{r7, lr}
    4db0:	466f      	mov	r7, sp
                    }
    4db2:	bd80      	pop	{r7, pc}

00004db4 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH75steal17h7e988b98d559527bE>:
                    pub unsafe fn steal() -> Self {
    4db4:	b580      	push	{r7, lr}
    4db6:	466f      	mov	r7, sp
                    }
    4db8:	bd80      	pop	{r7, pc}

00004dba <_ZN11embassy_nrf4chip11peripherals7PPI_CH05steal17h9e2ca79ae2760068E>:
                    pub unsafe fn steal() -> Self {
    4dba:	b580      	push	{r7, lr}
    4dbc:	466f      	mov	r7, sp
                    }
    4dbe:	bd80      	pop	{r7, pc}

00004dc0 <_ZN11embassy_nrf4chip11peripherals7PPI_CH15steal17h18510a8359df704fE>:
                    pub unsafe fn steal() -> Self {
    4dc0:	b580      	push	{r7, lr}
    4dc2:	466f      	mov	r7, sp
                    }
    4dc4:	bd80      	pop	{r7, pc}

00004dc6 <_ZN11embassy_nrf4chip11peripherals7PPI_CH25steal17h70644a591145d545E>:
                    pub unsafe fn steal() -> Self {
    4dc6:	b580      	push	{r7, lr}
    4dc8:	466f      	mov	r7, sp
                    }
    4dca:	bd80      	pop	{r7, pc}

00004dcc <_ZN11embassy_nrf4chip11peripherals7PPI_CH35steal17hcb85125b0d1dfc53E>:
                    pub unsafe fn steal() -> Self {
    4dcc:	b580      	push	{r7, lr}
    4dce:	466f      	mov	r7, sp
                    }
    4dd0:	bd80      	pop	{r7, pc}

00004dd2 <_ZN11embassy_nrf4chip11peripherals7PPI_CH45steal17h7d9510b8346c280dE>:
                    pub unsafe fn steal() -> Self {
    4dd2:	b580      	push	{r7, lr}
    4dd4:	466f      	mov	r7, sp
                    }
    4dd6:	bd80      	pop	{r7, pc}

00004dd8 <_ZN11embassy_nrf4chip11peripherals7PPI_CH55steal17h5f3c7e39316694a4E>:
                    pub unsafe fn steal() -> Self {
    4dd8:	b580      	push	{r7, lr}
    4dda:	466f      	mov	r7, sp
                    }
    4ddc:	bd80      	pop	{r7, pc}

00004dde <_ZN11embassy_nrf4chip11peripherals7PPI_CH65steal17hfaee938917477b28E>:
                    pub unsafe fn steal() -> Self {
    4dde:	b580      	push	{r7, lr}
    4de0:	466f      	mov	r7, sp
                    }
    4de2:	bd80      	pop	{r7, pc}

00004de4 <_ZN11embassy_nrf4chip11peripherals7PPI_CH75steal17hb8e6a1fc056a1477E>:
                    pub unsafe fn steal() -> Self {
    4de4:	b580      	push	{r7, lr}
    4de6:	466f      	mov	r7, sp
                    }
    4de8:	bd80      	pop	{r7, pc}

00004dea <_ZN11embassy_nrf4chip11peripherals7PPI_CH85steal17h2c75b35220d11617E>:
                    pub unsafe fn steal() -> Self {
    4dea:	b580      	push	{r7, lr}
    4dec:	466f      	mov	r7, sp
                    }
    4dee:	bd80      	pop	{r7, pc}

00004df0 <_ZN11embassy_nrf4chip11peripherals7PPI_CH95steal17h1d3175ce4d787a14E>:
                    pub unsafe fn steal() -> Self {
    4df0:	b580      	push	{r7, lr}
    4df2:	466f      	mov	r7, sp
                    }
    4df4:	bd80      	pop	{r7, pc}

00004df6 <_ZN11embassy_nrf4chip11peripherals8PPI_CH105steal17h637c4add97286734E>:
                    pub unsafe fn steal() -> Self {
    4df6:	b580      	push	{r7, lr}
    4df8:	466f      	mov	r7, sp
                    }
    4dfa:	bd80      	pop	{r7, pc}

00004dfc <_ZN11embassy_nrf4chip11peripherals8PPI_CH115steal17h9305cd1b3eabc760E>:
                    pub unsafe fn steal() -> Self {
    4dfc:	b580      	push	{r7, lr}
    4dfe:	466f      	mov	r7, sp
                    }
    4e00:	bd80      	pop	{r7, pc}

00004e02 <_ZN11embassy_nrf4chip11peripherals8PPI_CH125steal17h1a321f60d0af35f0E>:
                    pub unsafe fn steal() -> Self {
    4e02:	b580      	push	{r7, lr}
    4e04:	466f      	mov	r7, sp
                    }
    4e06:	bd80      	pop	{r7, pc}

00004e08 <_ZN11embassy_nrf4chip11peripherals8PPI_CH135steal17hf3dccc2ecb612f26E>:
                    pub unsafe fn steal() -> Self {
    4e08:	b580      	push	{r7, lr}
    4e0a:	466f      	mov	r7, sp
                    }
    4e0c:	bd80      	pop	{r7, pc}

00004e0e <_ZN11embassy_nrf4chip11peripherals8PPI_CH145steal17hf0f6ec3ea0d3a84cE>:
                    pub unsafe fn steal() -> Self {
    4e0e:	b580      	push	{r7, lr}
    4e10:	466f      	mov	r7, sp
                    }
    4e12:	bd80      	pop	{r7, pc}

00004e14 <_ZN11embassy_nrf4chip11peripherals8PPI_CH155steal17h34ea9af624039a3fE>:
                    pub unsafe fn steal() -> Self {
    4e14:	b580      	push	{r7, lr}
    4e16:	466f      	mov	r7, sp
                    }
    4e18:	bd80      	pop	{r7, pc}

00004e1a <_ZN11embassy_nrf4chip11peripherals8PPI_CH165steal17hb9955dde91bc577bE>:
                    pub unsafe fn steal() -> Self {
    4e1a:	b580      	push	{r7, lr}
    4e1c:	466f      	mov	r7, sp
                    }
    4e1e:	bd80      	pop	{r7, pc}

00004e20 <_ZN11embassy_nrf4chip11peripherals8PPI_CH175steal17h8300fd6c8a027842E>:
                    pub unsafe fn steal() -> Self {
    4e20:	b580      	push	{r7, lr}
    4e22:	466f      	mov	r7, sp
                    }
    4e24:	bd80      	pop	{r7, pc}

00004e26 <_ZN11embassy_nrf4chip11peripherals8PPI_CH185steal17hfb9da8be8cfe0a0cE>:
                    pub unsafe fn steal() -> Self {
    4e26:	b580      	push	{r7, lr}
    4e28:	466f      	mov	r7, sp
                    }
    4e2a:	bd80      	pop	{r7, pc}

00004e2c <_ZN11embassy_nrf4chip11peripherals8PPI_CH195steal17h4c1ecbadbdd01541E>:
                    pub unsafe fn steal() -> Self {
    4e2c:	b580      	push	{r7, lr}
    4e2e:	466f      	mov	r7, sp
                    }
    4e30:	bd80      	pop	{r7, pc}

00004e32 <_ZN11embassy_nrf4chip11peripherals8PPI_CH205steal17h5d6d0efc05a524dfE>:
                    pub unsafe fn steal() -> Self {
    4e32:	b580      	push	{r7, lr}
    4e34:	466f      	mov	r7, sp
                    }
    4e36:	bd80      	pop	{r7, pc}

00004e38 <_ZN11embassy_nrf4chip11peripherals8PPI_CH215steal17h9bb207139b4ce9eeE>:
                    pub unsafe fn steal() -> Self {
    4e38:	b580      	push	{r7, lr}
    4e3a:	466f      	mov	r7, sp
                    }
    4e3c:	bd80      	pop	{r7, pc}

00004e3e <_ZN11embassy_nrf4chip11peripherals8PPI_CH225steal17h64fecebfad31af9cE>:
                    pub unsafe fn steal() -> Self {
    4e3e:	b580      	push	{r7, lr}
    4e40:	466f      	mov	r7, sp
                    }
    4e42:	bd80      	pop	{r7, pc}

00004e44 <_ZN11embassy_nrf4chip11peripherals8PPI_CH235steal17h20e5e50f8cf9aca1E>:
                    pub unsafe fn steal() -> Self {
    4e44:	b580      	push	{r7, lr}
    4e46:	466f      	mov	r7, sp
                    }
    4e48:	bd80      	pop	{r7, pc}

00004e4a <_ZN11embassy_nrf4chip11peripherals8PPI_CH245steal17h2616a5f83ef38f71E>:
                    pub unsafe fn steal() -> Self {
    4e4a:	b580      	push	{r7, lr}
    4e4c:	466f      	mov	r7, sp
                    }
    4e4e:	bd80      	pop	{r7, pc}

00004e50 <_ZN11embassy_nrf4chip11peripherals8PPI_CH255steal17h0e4252fe4ab4949aE>:
                    pub unsafe fn steal() -> Self {
    4e50:	b580      	push	{r7, lr}
    4e52:	466f      	mov	r7, sp
                    }
    4e54:	bd80      	pop	{r7, pc}

00004e56 <_ZN11embassy_nrf4chip11peripherals8PPI_CH265steal17h244bac9a17de45d0E>:
                    pub unsafe fn steal() -> Self {
    4e56:	b580      	push	{r7, lr}
    4e58:	466f      	mov	r7, sp
                    }
    4e5a:	bd80      	pop	{r7, pc}

00004e5c <_ZN11embassy_nrf4chip11peripherals8PPI_CH275steal17h1bae714df300d67fE>:
                    pub unsafe fn steal() -> Self {
    4e5c:	b580      	push	{r7, lr}
    4e5e:	466f      	mov	r7, sp
                    }
    4e60:	bd80      	pop	{r7, pc}

00004e62 <_ZN11embassy_nrf4chip11peripherals8PPI_CH285steal17hd769a5f4c199d6b3E>:
                    pub unsafe fn steal() -> Self {
    4e62:	b580      	push	{r7, lr}
    4e64:	466f      	mov	r7, sp
                    }
    4e66:	bd80      	pop	{r7, pc}

00004e68 <_ZN11embassy_nrf4chip11peripherals8PPI_CH295steal17h5898461322066a3cE>:
                    pub unsafe fn steal() -> Self {
    4e68:	b580      	push	{r7, lr}
    4e6a:	466f      	mov	r7, sp
                    }
    4e6c:	bd80      	pop	{r7, pc}

00004e6e <_ZN11embassy_nrf4chip11peripherals8PPI_CH305steal17hcf7bc8d0fb8122fbE>:
                    pub unsafe fn steal() -> Self {
    4e6e:	b580      	push	{r7, lr}
    4e70:	466f      	mov	r7, sp
                    }
    4e72:	bd80      	pop	{r7, pc}

00004e74 <_ZN11embassy_nrf4chip11peripherals8PPI_CH315steal17h20c147ac67fae688E>:
                    pub unsafe fn steal() -> Self {
    4e74:	b580      	push	{r7, lr}
    4e76:	466f      	mov	r7, sp
                    }
    4e78:	bd80      	pop	{r7, pc}

00004e7a <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP05steal17he6d6b977de0e042eE>:
                    pub unsafe fn steal() -> Self {
    4e7a:	b580      	push	{r7, lr}
    4e7c:	466f      	mov	r7, sp
                    }
    4e7e:	bd80      	pop	{r7, pc}

00004e80 <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP15steal17h18e588d571020b18E>:
                    pub unsafe fn steal() -> Self {
    4e80:	b580      	push	{r7, lr}
    4e82:	466f      	mov	r7, sp
                    }
    4e84:	bd80      	pop	{r7, pc}

00004e86 <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP25steal17hc5da26d5aff30d56E>:
                    pub unsafe fn steal() -> Self {
    4e86:	b580      	push	{r7, lr}
    4e88:	466f      	mov	r7, sp
                    }
    4e8a:	bd80      	pop	{r7, pc}

00004e8c <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP35steal17h49a30d9e8a72c42dE>:
                    pub unsafe fn steal() -> Self {
    4e8c:	b580      	push	{r7, lr}
    4e8e:	466f      	mov	r7, sp
                    }
    4e90:	bd80      	pop	{r7, pc}

00004e92 <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP45steal17h3fdb946dc61f728cE>:
                    pub unsafe fn steal() -> Self {
    4e92:	b580      	push	{r7, lr}
    4e94:	466f      	mov	r7, sp
                    }
    4e96:	bd80      	pop	{r7, pc}

00004e98 <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP55steal17h9ac5aae8b843a0a7E>:
                    pub unsafe fn steal() -> Self {
    4e98:	b580      	push	{r7, lr}
    4e9a:	466f      	mov	r7, sp
                    }
    4e9c:	bd80      	pop	{r7, pc}

00004e9e <_ZN11embassy_nrf4chip11peripherals5P0_005steal17he98c4ab6be4e982dE>:
                    pub unsafe fn steal() -> Self {
    4e9e:	b580      	push	{r7, lr}
    4ea0:	466f      	mov	r7, sp
                    }
    4ea2:	bd80      	pop	{r7, pc}

00004ea4 <_ZN11embassy_nrf4chip11peripherals5P0_015steal17h78e46cb73f7cd361E>:
                    pub unsafe fn steal() -> Self {
    4ea4:	b580      	push	{r7, lr}
    4ea6:	466f      	mov	r7, sp
                    }
    4ea8:	bd80      	pop	{r7, pc}

00004eaa <_ZN11embassy_nrf4chip11peripherals5P0_025steal17h15034e4a5ba80129E>:
                    pub unsafe fn steal() -> Self {
    4eaa:	b580      	push	{r7, lr}
    4eac:	466f      	mov	r7, sp
                    }
    4eae:	bd80      	pop	{r7, pc}

00004eb0 <_ZN11embassy_nrf4chip11peripherals5P0_035steal17h913437aceba08513E>:
                    pub unsafe fn steal() -> Self {
    4eb0:	b580      	push	{r7, lr}
    4eb2:	466f      	mov	r7, sp
                    }
    4eb4:	bd80      	pop	{r7, pc}

00004eb6 <_ZN11embassy_nrf4chip11peripherals5P0_045steal17he48d358c1529598cE>:
                    pub unsafe fn steal() -> Self {
    4eb6:	b580      	push	{r7, lr}
    4eb8:	466f      	mov	r7, sp
                    }
    4eba:	bd80      	pop	{r7, pc}

00004ebc <_ZN11embassy_nrf4chip11peripherals5P0_055steal17h4d59b3cb1bbef529E>:
                    pub unsafe fn steal() -> Self {
    4ebc:	b580      	push	{r7, lr}
    4ebe:	466f      	mov	r7, sp
                    }
    4ec0:	bd80      	pop	{r7, pc}

00004ec2 <_ZN11embassy_nrf4chip11peripherals5P0_065steal17h2523470a41c2310cE>:
                    pub unsafe fn steal() -> Self {
    4ec2:	b580      	push	{r7, lr}
    4ec4:	466f      	mov	r7, sp
                    }
    4ec6:	bd80      	pop	{r7, pc}

00004ec8 <_ZN11embassy_nrf4chip11peripherals5P0_075steal17h05f8444ed15fee87E>:
                    pub unsafe fn steal() -> Self {
    4ec8:	b580      	push	{r7, lr}
    4eca:	466f      	mov	r7, sp
                    }
    4ecc:	bd80      	pop	{r7, pc}

00004ece <_ZN11embassy_nrf4chip11peripherals5P0_085steal17h328907314403a854E>:
                    pub unsafe fn steal() -> Self {
    4ece:	b580      	push	{r7, lr}
    4ed0:	466f      	mov	r7, sp
                    }
    4ed2:	bd80      	pop	{r7, pc}

00004ed4 <_ZN11embassy_nrf4chip11peripherals5P0_095steal17h0dcbff918fc14c48E>:
                    pub unsafe fn steal() -> Self {
    4ed4:	b580      	push	{r7, lr}
    4ed6:	466f      	mov	r7, sp
                    }
    4ed8:	bd80      	pop	{r7, pc}

00004eda <_ZN11embassy_nrf4chip11peripherals5P0_105steal17h2738b3b8063cb581E>:
                    pub unsafe fn steal() -> Self {
    4eda:	b580      	push	{r7, lr}
    4edc:	466f      	mov	r7, sp
                    }
    4ede:	bd80      	pop	{r7, pc}

00004ee0 <_ZN11embassy_nrf4chip11peripherals5P0_115steal17h2a6b024c454b65b6E>:
                    pub unsafe fn steal() -> Self {
    4ee0:	b580      	push	{r7, lr}
    4ee2:	466f      	mov	r7, sp
                    }
    4ee4:	bd80      	pop	{r7, pc}

00004ee6 <_ZN11embassy_nrf4chip11peripherals5P0_125steal17hd0841cb22217bd25E>:
                    pub unsafe fn steal() -> Self {
    4ee6:	b580      	push	{r7, lr}
    4ee8:	466f      	mov	r7, sp
                    }
    4eea:	bd80      	pop	{r7, pc}

00004eec <_ZN11embassy_nrf4chip11peripherals5P0_135steal17h025b61ce46064278E>:
                    pub unsafe fn steal() -> Self {
    4eec:	b580      	push	{r7, lr}
    4eee:	466f      	mov	r7, sp
                    }
    4ef0:	bd80      	pop	{r7, pc}

00004ef2 <_ZN11embassy_nrf4chip11peripherals5P0_145steal17h76e738ec3083dc0aE>:
                    pub unsafe fn steal() -> Self {
    4ef2:	b580      	push	{r7, lr}
    4ef4:	466f      	mov	r7, sp
                    }
    4ef6:	bd80      	pop	{r7, pc}

00004ef8 <_ZN11embassy_nrf4chip11peripherals5P0_155steal17h3cbabb161c6270f3E>:
                    pub unsafe fn steal() -> Self {
    4ef8:	b580      	push	{r7, lr}
    4efa:	466f      	mov	r7, sp
                    }
    4efc:	bd80      	pop	{r7, pc}

00004efe <_ZN11embassy_nrf4chip11peripherals5P0_165steal17he7a8a8a37b7ddb6eE>:
                    pub unsafe fn steal() -> Self {
    4efe:	b580      	push	{r7, lr}
    4f00:	466f      	mov	r7, sp
                    }
    4f02:	bd80      	pop	{r7, pc}

00004f04 <_ZN11embassy_nrf4chip11peripherals5P0_175steal17hbefd5d42becb444cE>:
                    pub unsafe fn steal() -> Self {
    4f04:	b580      	push	{r7, lr}
    4f06:	466f      	mov	r7, sp
                    }
    4f08:	bd80      	pop	{r7, pc}

00004f0a <_ZN11embassy_nrf4chip11peripherals5P0_195steal17h2db59416574f9f41E>:
                    pub unsafe fn steal() -> Self {
    4f0a:	b580      	push	{r7, lr}
    4f0c:	466f      	mov	r7, sp
                    }
    4f0e:	bd80      	pop	{r7, pc}

00004f10 <_ZN11embassy_nrf4chip11peripherals5P0_205steal17h98da990734f1715bE>:
                    pub unsafe fn steal() -> Self {
    4f10:	b580      	push	{r7, lr}
    4f12:	466f      	mov	r7, sp
                    }
    4f14:	bd80      	pop	{r7, pc}

00004f16 <_ZN11embassy_nrf4chip11peripherals5P0_215steal17h4ec239d3dc08ef06E>:
                    pub unsafe fn steal() -> Self {
    4f16:	b580      	push	{r7, lr}
    4f18:	466f      	mov	r7, sp
                    }
    4f1a:	bd80      	pop	{r7, pc}

00004f1c <_ZN11embassy_nrf4chip11peripherals5P0_225steal17h5a1e91c80085bd78E>:
                    pub unsafe fn steal() -> Self {
    4f1c:	b580      	push	{r7, lr}
    4f1e:	466f      	mov	r7, sp
                    }
    4f20:	bd80      	pop	{r7, pc}

00004f22 <_ZN11embassy_nrf4chip11peripherals5P0_235steal17hd7f38ddf80ab8f12E>:
                    pub unsafe fn steal() -> Self {
    4f22:	b580      	push	{r7, lr}
    4f24:	466f      	mov	r7, sp
                    }
    4f26:	bd80      	pop	{r7, pc}

00004f28 <_ZN11embassy_nrf4chip11peripherals5P0_245steal17hc9a009f4ae9b0abbE>:
                    pub unsafe fn steal() -> Self {
    4f28:	b580      	push	{r7, lr}
    4f2a:	466f      	mov	r7, sp
                    }
    4f2c:	bd80      	pop	{r7, pc}

00004f2e <_ZN11embassy_nrf4chip11peripherals5P0_255steal17h6ea34576ee2b3230E>:
                    pub unsafe fn steal() -> Self {
    4f2e:	b580      	push	{r7, lr}
    4f30:	466f      	mov	r7, sp
                    }
    4f32:	bd80      	pop	{r7, pc}

00004f34 <_ZN11embassy_nrf4chip11peripherals5P0_265steal17h0284dcc87c0c0a84E>:
                    pub unsafe fn steal() -> Self {
    4f34:	b580      	push	{r7, lr}
    4f36:	466f      	mov	r7, sp
                    }
    4f38:	bd80      	pop	{r7, pc}

00004f3a <_ZN11embassy_nrf4chip11peripherals5P0_275steal17hf0025646c6b5d547E>:
                    pub unsafe fn steal() -> Self {
    4f3a:	b580      	push	{r7, lr}
    4f3c:	466f      	mov	r7, sp
                    }
    4f3e:	bd80      	pop	{r7, pc}

00004f40 <_ZN11embassy_nrf4chip11peripherals5P0_285steal17h5db04a0cdb44828bE>:
                    pub unsafe fn steal() -> Self {
    4f40:	b580      	push	{r7, lr}
    4f42:	466f      	mov	r7, sp
                    }
    4f44:	bd80      	pop	{r7, pc}

00004f46 <_ZN11embassy_nrf4chip11peripherals5P0_295steal17hd44ca9f102bf8816E>:
                    pub unsafe fn steal() -> Self {
    4f46:	b580      	push	{r7, lr}
    4f48:	466f      	mov	r7, sp
                    }
    4f4a:	bd80      	pop	{r7, pc}

00004f4c <_ZN11embassy_nrf4chip11peripherals5P0_305steal17h93c208157009f890E>:
                    pub unsafe fn steal() -> Self {
    4f4c:	b580      	push	{r7, lr}
    4f4e:	466f      	mov	r7, sp
                    }
    4f50:	bd80      	pop	{r7, pc}

00004f52 <_ZN11embassy_nrf4chip11peripherals5P0_315steal17h9d26b4c40f13e471E>:
                    pub unsafe fn steal() -> Self {
    4f52:	b580      	push	{r7, lr}
    4f54:	466f      	mov	r7, sp
                    }
    4f56:	bd80      	pop	{r7, pc}

00004f58 <_ZN11embassy_nrf4chip11peripherals5P1_005steal17hb0afe7617a3aa8c3E>:
                    pub unsafe fn steal() -> Self {
    4f58:	b580      	push	{r7, lr}
    4f5a:	466f      	mov	r7, sp
                    }
    4f5c:	bd80      	pop	{r7, pc}

00004f5e <_ZN11embassy_nrf4chip11peripherals5P1_015steal17hbdfd59635b94314aE>:
                    pub unsafe fn steal() -> Self {
    4f5e:	b580      	push	{r7, lr}
    4f60:	466f      	mov	r7, sp
                    }
    4f62:	bd80      	pop	{r7, pc}

00004f64 <_ZN11embassy_nrf4chip11peripherals5P1_025steal17h82ea23603f5f4c8dE>:
                    pub unsafe fn steal() -> Self {
    4f64:	b580      	push	{r7, lr}
    4f66:	466f      	mov	r7, sp
                    }
    4f68:	bd80      	pop	{r7, pc}

00004f6a <_ZN11embassy_nrf4chip11peripherals5P1_035steal17hc48c34d0009f1d1bE>:
                    pub unsafe fn steal() -> Self {
    4f6a:	b580      	push	{r7, lr}
    4f6c:	466f      	mov	r7, sp
                    }
    4f6e:	bd80      	pop	{r7, pc}

00004f70 <_ZN11embassy_nrf4chip11peripherals5P1_045steal17hec672379b3142adeE>:
                    pub unsafe fn steal() -> Self {
    4f70:	b580      	push	{r7, lr}
    4f72:	466f      	mov	r7, sp
                    }
    4f74:	bd80      	pop	{r7, pc}

00004f76 <_ZN11embassy_nrf4chip11peripherals5P1_055steal17h0255bac34e0f74e9E>:
                    pub unsafe fn steal() -> Self {
    4f76:	b580      	push	{r7, lr}
    4f78:	466f      	mov	r7, sp
                    }
    4f7a:	bd80      	pop	{r7, pc}

00004f7c <_ZN11embassy_nrf4chip11peripherals5P1_065steal17h865454b83a37f467E>:
                    pub unsafe fn steal() -> Self {
    4f7c:	b580      	push	{r7, lr}
    4f7e:	466f      	mov	r7, sp
                    }
    4f80:	bd80      	pop	{r7, pc}

00004f82 <_ZN11embassy_nrf4chip11peripherals5P1_075steal17ha31300daa3e7d986E>:
                    pub unsafe fn steal() -> Self {
    4f82:	b580      	push	{r7, lr}
    4f84:	466f      	mov	r7, sp
                    }
    4f86:	bd80      	pop	{r7, pc}

00004f88 <_ZN11embassy_nrf4chip11peripherals5P1_085steal17hb577a99dd3ea0bb8E>:
                    pub unsafe fn steal() -> Self {
    4f88:	b580      	push	{r7, lr}
    4f8a:	466f      	mov	r7, sp
                    }
    4f8c:	bd80      	pop	{r7, pc}

00004f8e <_ZN11embassy_nrf4chip11peripherals5P1_095steal17hb0c77be4e1980dadE>:
                    pub unsafe fn steal() -> Self {
    4f8e:	b580      	push	{r7, lr}
    4f90:	466f      	mov	r7, sp
                    }
    4f92:	bd80      	pop	{r7, pc}

00004f94 <_ZN11embassy_nrf4chip11peripherals5P1_105steal17h64676bab30cd98ebE>:
                    pub unsafe fn steal() -> Self {
    4f94:	b580      	push	{r7, lr}
    4f96:	466f      	mov	r7, sp
                    }
    4f98:	bd80      	pop	{r7, pc}

00004f9a <_ZN11embassy_nrf4chip11peripherals5P1_115steal17h5147319d103d60efE>:
                    pub unsafe fn steal() -> Self {
    4f9a:	b580      	push	{r7, lr}
    4f9c:	466f      	mov	r7, sp
                    }
    4f9e:	bd80      	pop	{r7, pc}

00004fa0 <_ZN11embassy_nrf4chip11peripherals5P1_125steal17hd7a51f62ab65cc59E>:
                    pub unsafe fn steal() -> Self {
    4fa0:	b580      	push	{r7, lr}
    4fa2:	466f      	mov	r7, sp
                    }
    4fa4:	bd80      	pop	{r7, pc}

00004fa6 <_ZN11embassy_nrf4chip11peripherals5P1_135steal17h81a4f8094a18250cE>:
                    pub unsafe fn steal() -> Self {
    4fa6:	b580      	push	{r7, lr}
    4fa8:	466f      	mov	r7, sp
                    }
    4faa:	bd80      	pop	{r7, pc}

00004fac <_ZN11embassy_nrf4chip11peripherals5P1_145steal17h94fcf9367526ec78E>:
                    pub unsafe fn steal() -> Self {
    4fac:	b580      	push	{r7, lr}
    4fae:	466f      	mov	r7, sp
                    }
    4fb0:	bd80      	pop	{r7, pc}

00004fb2 <_ZN11embassy_nrf4chip11peripherals5P1_155steal17h3ef9171b42d218c5E>:
                    pub unsafe fn steal() -> Self {
    4fb2:	b580      	push	{r7, lr}
    4fb4:	466f      	mov	r7, sp
                    }
    4fb6:	bd80      	pop	{r7, pc}

00004fb8 <_ZN11embassy_nrf4chip11peripherals4TEMP5steal17h0abe8b3a7f032464E>:
                    pub unsafe fn steal() -> Self {
    4fb8:	b580      	push	{r7, lr}
    4fba:	466f      	mov	r7, sp
                    }
    4fbc:	bd80      	pop	{r7, pc}

00004fbe <_ZN11embassy_nrf4chip11peripherals4QDEC5steal17h9342bef69e599f30E>:
                    pub unsafe fn steal() -> Self {
    4fbe:	b580      	push	{r7, lr}
    4fc0:	466f      	mov	r7, sp
                    }
    4fc2:	bd80      	pop	{r7, pc}

00004fc4 <_ZN11embassy_nrf4chip11peripherals3PDM5steal17h75ecf7bf4f9c774bE>:
                    pub unsafe fn steal() -> Self {
    4fc4:	b580      	push	{r7, lr}
    4fc6:	466f      	mov	r7, sp
                    }
    4fc8:	bd80      	pop	{r7, pc}

00004fca <_ZN11embassy_nrf4chip11peripherals3I2S5steal17h115b8015b8c4f66aE>:
                    pub unsafe fn steal() -> Self {
    4fca:	b580      	push	{r7, lr}
    4fcc:	466f      	mov	r7, sp
                    }
    4fce:	bd80      	pop	{r7, pc}

00004fd0 <_ZN11embassy_nrf4chip11peripherals5RADIO5steal17h963fad0e510441abE>:
                    pub unsafe fn steal() -> Self {
    4fd0:	b580      	push	{r7, lr}
    4fd2:	466f      	mov	r7, sp
                    }
    4fd4:	bd80      	pop	{r7, pc}

00004fd6 <_ZN11embassy_nrf4chip11peripherals4EGU05steal17hb3c1b80b8b72237fE>:
                    pub unsafe fn steal() -> Self {
    4fd6:	b580      	push	{r7, lr}
    4fd8:	466f      	mov	r7, sp
                    }
    4fda:	bd80      	pop	{r7, pc}

00004fdc <_ZN11embassy_nrf4chip11peripherals4EGU15steal17hf1f8791d73db36a9E>:
                    pub unsafe fn steal() -> Self {
    4fdc:	b580      	push	{r7, lr}
    4fde:	466f      	mov	r7, sp
                    }
    4fe0:	bd80      	pop	{r7, pc}

00004fe2 <_ZN11embassy_nrf4chip11peripherals4EGU25steal17ha752e725579bac0bE>:
                    pub unsafe fn steal() -> Self {
    4fe2:	b580      	push	{r7, lr}
    4fe4:	466f      	mov	r7, sp
                    }
    4fe6:	bd80      	pop	{r7, pc}

00004fe8 <_ZN11embassy_nrf4chip11peripherals4EGU35steal17h6eb1dfe27d5d1b3aE>:
                    pub unsafe fn steal() -> Self {
    4fe8:	b580      	push	{r7, lr}
    4fea:	466f      	mov	r7, sp
                    }
    4fec:	bd80      	pop	{r7, pc}

00004fee <_ZN11embassy_nrf4chip11peripherals4EGU45steal17h55f74b146a85faafE>:
                    pub unsafe fn steal() -> Self {
    4fee:	b580      	push	{r7, lr}
    4ff0:	466f      	mov	r7, sp
                    }
    4ff2:	bd80      	pop	{r7, pc}

00004ff4 <_ZN11embassy_nrf4chip11peripherals4EGU55steal17h9d1bc55c3e2666e1E>:
                    pub unsafe fn steal() -> Self {
    4ff4:	b580      	push	{r7, lr}
    4ff6:	466f      	mov	r7, sp
                    }
    4ff8:	bd80      	pop	{r7, pc}

00004ffa <_ZN11embassy_nrf4chip11peripherals4NFCT5steal17h8664b387f8047919E>:
                    pub unsafe fn steal() -> Self {
    4ffa:	b580      	push	{r7, lr}
    4ffc:	466f      	mov	r7, sp
                    }
    4ffe:	bd80      	pop	{r7, pc}

00005000 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_11$GT$8pin_port17ha8514a72034c7481E>:
            fn pin_port(&self) -> u8 {
    5000:	b580      	push	{r7, lr}
    5002:	466f      	mov	r7, sp
    5004:	b084      	sub	sp, #16
    5006:	9003      	str	r0, [sp, #12]
    5008:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    500a:	4601      	mov	r1, r0
    500c:	9102      	str	r1, [sp, #8]
    500e:	b950      	cbnz	r0, 5026 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_11$GT$8pin_port17ha8514a72034c7481E+0x26>
    5010:	e7ff      	b.n	5012 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_11$GT$8pin_port17ha8514a72034c7481E+0x12>
    5012:	9902      	ldr	r1, [sp, #8]
    5014:	200b      	movs	r0, #11
    5016:	fa50 f181 	uxtab	r1, r0, r1
    501a:	b2c8      	uxtb	r0, r1
    501c:	460a      	mov	r2, r1
    501e:	9201      	str	r2, [sp, #4]
    5020:	4288      	cmp	r0, r1
    5022:	d109      	bne.n	5038 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_11$GT$8pin_port17ha8514a72034c7481E+0x38>
    5024:	e005      	b.n	5032 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_11$GT$8pin_port17ha8514a72034c7481E+0x32>
    5026:	f64c 4050 	movw	r0, #52304	@ 0xcc50
    502a:	f2c0 0000 	movt	r0, #0
    502e:	f006 f8a2 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    5032:	9801      	ldr	r0, [sp, #4]
    5034:	b004      	add	sp, #16
    5036:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    5038:	f64c 4050 	movw	r0, #52304	@ 0xcc50
    503c:	f2c0 0000 	movt	r0, #0
    5040:	f006 f873 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00005044 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_14$GT$8pin_port17hf48498bef11bf6dcE>:
            fn pin_port(&self) -> u8 {
    5044:	b580      	push	{r7, lr}
    5046:	466f      	mov	r7, sp
    5048:	b084      	sub	sp, #16
    504a:	9003      	str	r0, [sp, #12]
    504c:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    504e:	4601      	mov	r1, r0
    5050:	9102      	str	r1, [sp, #8]
    5052:	b950      	cbnz	r0, 506a <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_14$GT$8pin_port17hf48498bef11bf6dcE+0x26>
    5054:	e7ff      	b.n	5056 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_14$GT$8pin_port17hf48498bef11bf6dcE+0x12>
    5056:	9902      	ldr	r1, [sp, #8]
    5058:	200e      	movs	r0, #14
    505a:	fa50 f181 	uxtab	r1, r0, r1
    505e:	b2c8      	uxtb	r0, r1
    5060:	460a      	mov	r2, r1
    5062:	9201      	str	r2, [sp, #4]
    5064:	4288      	cmp	r0, r1
    5066:	d109      	bne.n	507c <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_14$GT$8pin_port17hf48498bef11bf6dcE+0x38>
    5068:	e005      	b.n	5076 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_14$GT$8pin_port17hf48498bef11bf6dcE+0x32>
    506a:	f64c 4060 	movw	r0, #52320	@ 0xcc60
    506e:	f2c0 0000 	movt	r0, #0
    5072:	f006 f880 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    5076:	9801      	ldr	r0, [sp, #4]
    5078:	b004      	add	sp, #16
    507a:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    507c:	f64c 4060 	movw	r0, #52320	@ 0xcc60
    5080:	f2c0 0000 	movt	r0, #0
    5084:	f006 f851 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00005088 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_15$GT$8pin_port17hc7a64c13d1a7181eE>:
            fn pin_port(&self) -> u8 {
    5088:	b580      	push	{r7, lr}
    508a:	466f      	mov	r7, sp
    508c:	b084      	sub	sp, #16
    508e:	9003      	str	r0, [sp, #12]
    5090:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    5092:	4601      	mov	r1, r0
    5094:	9102      	str	r1, [sp, #8]
    5096:	b950      	cbnz	r0, 50ae <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_15$GT$8pin_port17hc7a64c13d1a7181eE+0x26>
    5098:	e7ff      	b.n	509a <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_15$GT$8pin_port17hc7a64c13d1a7181eE+0x12>
    509a:	9902      	ldr	r1, [sp, #8]
    509c:	200f      	movs	r0, #15
    509e:	fa50 f181 	uxtab	r1, r0, r1
    50a2:	b2c8      	uxtb	r0, r1
    50a4:	460a      	mov	r2, r1
    50a6:	9201      	str	r2, [sp, #4]
    50a8:	4288      	cmp	r0, r1
    50aa:	d109      	bne.n	50c0 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_15$GT$8pin_port17hc7a64c13d1a7181eE+0x38>
    50ac:	e005      	b.n	50ba <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_15$GT$8pin_port17hc7a64c13d1a7181eE+0x32>
    50ae:	f64c 4070 	movw	r0, #52336	@ 0xcc70
    50b2:	f2c0 0000 	movt	r0, #0
    50b6:	f006 f85e 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    50ba:	9801      	ldr	r0, [sp, #4]
    50bc:	b004      	add	sp, #16
    50be:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    50c0:	f64c 4070 	movw	r0, #52336	@ 0xcc70
    50c4:	f2c0 0000 	movt	r0, #0
    50c8:	f006 f82f 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

000050cc <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_19$GT$8pin_port17h794175a3d2761997E>:
            fn pin_port(&self) -> u8 {
    50cc:	b580      	push	{r7, lr}
    50ce:	466f      	mov	r7, sp
    50d0:	b084      	sub	sp, #16
    50d2:	9003      	str	r0, [sp, #12]
    50d4:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    50d6:	4601      	mov	r1, r0
    50d8:	9102      	str	r1, [sp, #8]
    50da:	b950      	cbnz	r0, 50f2 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_19$GT$8pin_port17h794175a3d2761997E+0x26>
    50dc:	e7ff      	b.n	50de <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_19$GT$8pin_port17h794175a3d2761997E+0x12>
    50de:	9902      	ldr	r1, [sp, #8]
    50e0:	2013      	movs	r0, #19
    50e2:	fa50 f181 	uxtab	r1, r0, r1
    50e6:	b2c8      	uxtb	r0, r1
    50e8:	460a      	mov	r2, r1
    50ea:	9201      	str	r2, [sp, #4]
    50ec:	4288      	cmp	r0, r1
    50ee:	d109      	bne.n	5104 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_19$GT$8pin_port17h794175a3d2761997E+0x38>
    50f0:	e005      	b.n	50fe <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_19$GT$8pin_port17h794175a3d2761997E+0x32>
    50f2:	f64c 4080 	movw	r0, #52352	@ 0xcc80
    50f6:	f2c0 0000 	movt	r0, #0
    50fa:	f006 f83c 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    50fe:	9801      	ldr	r0, [sp, #4]
    5100:	b004      	add	sp, #16
    5102:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    5104:	f64c 4080 	movw	r0, #52352	@ 0xcc80
    5108:	f2c0 0000 	movt	r0, #0
    510c:	f006 f80d 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00005110 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_21$GT$8pin_port17hb0afb392642fc6ebE>:
            fn pin_port(&self) -> u8 {
    5110:	b580      	push	{r7, lr}
    5112:	466f      	mov	r7, sp
    5114:	b084      	sub	sp, #16
    5116:	9003      	str	r0, [sp, #12]
    5118:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    511a:	4601      	mov	r1, r0
    511c:	9102      	str	r1, [sp, #8]
    511e:	b950      	cbnz	r0, 5136 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_21$GT$8pin_port17hb0afb392642fc6ebE+0x26>
    5120:	e7ff      	b.n	5122 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_21$GT$8pin_port17hb0afb392642fc6ebE+0x12>
    5122:	9902      	ldr	r1, [sp, #8]
    5124:	2015      	movs	r0, #21
    5126:	fa50 f181 	uxtab	r1, r0, r1
    512a:	b2c8      	uxtb	r0, r1
    512c:	460a      	mov	r2, r1
    512e:	9201      	str	r2, [sp, #4]
    5130:	4288      	cmp	r0, r1
    5132:	d109      	bne.n	5148 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_21$GT$8pin_port17hb0afb392642fc6ebE+0x38>
    5134:	e005      	b.n	5142 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_21$GT$8pin_port17hb0afb392642fc6ebE+0x32>
    5136:	f64c 4090 	movw	r0, #52368	@ 0xcc90
    513a:	f2c0 0000 	movt	r0, #0
    513e:	f006 f81a 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    5142:	9801      	ldr	r0, [sp, #4]
    5144:	b004      	add	sp, #16
    5146:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    5148:	f64c 4090 	movw	r0, #52368	@ 0xcc90
    514c:	f2c0 0000 	movt	r0, #0
    5150:	f005 ffeb 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00005154 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_22$GT$8pin_port17hf910bdf18bcea23fE>:
            fn pin_port(&self) -> u8 {
    5154:	b580      	push	{r7, lr}
    5156:	466f      	mov	r7, sp
    5158:	b084      	sub	sp, #16
    515a:	9003      	str	r0, [sp, #12]
    515c:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    515e:	4601      	mov	r1, r0
    5160:	9102      	str	r1, [sp, #8]
    5162:	b950      	cbnz	r0, 517a <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_22$GT$8pin_port17hf910bdf18bcea23fE+0x26>
    5164:	e7ff      	b.n	5166 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_22$GT$8pin_port17hf910bdf18bcea23fE+0x12>
    5166:	9902      	ldr	r1, [sp, #8]
    5168:	2016      	movs	r0, #22
    516a:	fa50 f181 	uxtab	r1, r0, r1
    516e:	b2c8      	uxtb	r0, r1
    5170:	460a      	mov	r2, r1
    5172:	9201      	str	r2, [sp, #4]
    5174:	4288      	cmp	r0, r1
    5176:	d109      	bne.n	518c <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_22$GT$8pin_port17hf910bdf18bcea23fE+0x38>
    5178:	e005      	b.n	5186 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_22$GT$8pin_port17hf910bdf18bcea23fE+0x32>
    517a:	f64c 40a0 	movw	r0, #52384	@ 0xcca0
    517e:	f2c0 0000 	movt	r0, #0
    5182:	f005 fff8 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    5186:	9801      	ldr	r0, [sp, #4]
    5188:	b004      	add	sp, #16
    518a:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    518c:	f64c 40a0 	movw	r0, #52384	@ 0xcca0
    5190:	f2c0 0000 	movt	r0, #0
    5194:	f005 ffc9 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00005198 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_23$GT$8pin_port17h358d9d3716d79d19E>:
            fn pin_port(&self) -> u8 {
    5198:	b580      	push	{r7, lr}
    519a:	466f      	mov	r7, sp
    519c:	b084      	sub	sp, #16
    519e:	9003      	str	r0, [sp, #12]
    51a0:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    51a2:	4601      	mov	r1, r0
    51a4:	9102      	str	r1, [sp, #8]
    51a6:	b950      	cbnz	r0, 51be <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_23$GT$8pin_port17h358d9d3716d79d19E+0x26>
    51a8:	e7ff      	b.n	51aa <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_23$GT$8pin_port17h358d9d3716d79d19E+0x12>
    51aa:	9902      	ldr	r1, [sp, #8]
    51ac:	2017      	movs	r0, #23
    51ae:	fa50 f181 	uxtab	r1, r0, r1
    51b2:	b2c8      	uxtb	r0, r1
    51b4:	460a      	mov	r2, r1
    51b6:	9201      	str	r2, [sp, #4]
    51b8:	4288      	cmp	r0, r1
    51ba:	d109      	bne.n	51d0 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_23$GT$8pin_port17h358d9d3716d79d19E+0x38>
    51bc:	e005      	b.n	51ca <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_23$GT$8pin_port17h358d9d3716d79d19E+0x32>
    51be:	f64c 40b0 	movw	r0, #52400	@ 0xccb0
    51c2:	f2c0 0000 	movt	r0, #0
    51c6:	f005 ffd6 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    51ca:	9801      	ldr	r0, [sp, #4]
    51cc:	b004      	add	sp, #16
    51ce:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    51d0:	f64c 40b0 	movw	r0, #52400	@ 0xccb0
    51d4:	f2c0 0000 	movt	r0, #0
    51d8:	f005 ffa7 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

000051dc <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_24$GT$8pin_port17h31bfae696801fae9E>:
            fn pin_port(&self) -> u8 {
    51dc:	b580      	push	{r7, lr}
    51de:	466f      	mov	r7, sp
    51e0:	b084      	sub	sp, #16
    51e2:	9003      	str	r0, [sp, #12]
    51e4:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    51e6:	4601      	mov	r1, r0
    51e8:	9102      	str	r1, [sp, #8]
    51ea:	b950      	cbnz	r0, 5202 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_24$GT$8pin_port17h31bfae696801fae9E+0x26>
    51ec:	e7ff      	b.n	51ee <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_24$GT$8pin_port17h31bfae696801fae9E+0x12>
    51ee:	9902      	ldr	r1, [sp, #8]
    51f0:	2018      	movs	r0, #24
    51f2:	fa50 f181 	uxtab	r1, r0, r1
    51f6:	b2c8      	uxtb	r0, r1
    51f8:	460a      	mov	r2, r1
    51fa:	9201      	str	r2, [sp, #4]
    51fc:	4288      	cmp	r0, r1
    51fe:	d109      	bne.n	5214 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_24$GT$8pin_port17h31bfae696801fae9E+0x38>
    5200:	e005      	b.n	520e <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_24$GT$8pin_port17h31bfae696801fae9E+0x32>
    5202:	f64c 40c0 	movw	r0, #52416	@ 0xccc0
    5206:	f2c0 0000 	movt	r0, #0
    520a:	f005 ffb4 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    520e:	9801      	ldr	r0, [sp, #4]
    5210:	b004      	add	sp, #16
    5212:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    5214:	f64c 40c0 	movw	r0, #52416	@ 0xccc0
    5218:	f2c0 0000 	movt	r0, #0
    521c:	f005 ff85 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00005220 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_28$GT$8pin_port17hddf99687988b51b9E>:
            fn pin_port(&self) -> u8 {
    5220:	b580      	push	{r7, lr}
    5222:	466f      	mov	r7, sp
    5224:	b084      	sub	sp, #16
    5226:	9003      	str	r0, [sp, #12]
    5228:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    522a:	4601      	mov	r1, r0
    522c:	9102      	str	r1, [sp, #8]
    522e:	b950      	cbnz	r0, 5246 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_28$GT$8pin_port17hddf99687988b51b9E+0x26>
    5230:	e7ff      	b.n	5232 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_28$GT$8pin_port17hddf99687988b51b9E+0x12>
    5232:	9902      	ldr	r1, [sp, #8]
    5234:	201c      	movs	r0, #28
    5236:	fa50 f181 	uxtab	r1, r0, r1
    523a:	b2c8      	uxtb	r0, r1
    523c:	460a      	mov	r2, r1
    523e:	9201      	str	r2, [sp, #4]
    5240:	4288      	cmp	r0, r1
    5242:	d109      	bne.n	5258 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_28$GT$8pin_port17hddf99687988b51b9E+0x38>
    5244:	e005      	b.n	5252 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_28$GT$8pin_port17hddf99687988b51b9E+0x32>
    5246:	f64c 40d0 	movw	r0, #52432	@ 0xccd0
    524a:	f2c0 0000 	movt	r0, #0
    524e:	f005 ff92 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    5252:	9801      	ldr	r0, [sp, #4]
    5254:	b004      	add	sp, #16
    5256:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    5258:	f64c 40d0 	movw	r0, #52432	@ 0xccd0
    525c:	f2c0 0000 	movt	r0, #0
    5260:	f005 ff63 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00005264 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_30$GT$8pin_port17hd3d83ef40fcdd660E>:
            fn pin_port(&self) -> u8 {
    5264:	b580      	push	{r7, lr}
    5266:	466f      	mov	r7, sp
    5268:	b084      	sub	sp, #16
    526a:	9003      	str	r0, [sp, #12]
    526c:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    526e:	4601      	mov	r1, r0
    5270:	9102      	str	r1, [sp, #8]
    5272:	b950      	cbnz	r0, 528a <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_30$GT$8pin_port17hd3d83ef40fcdd660E+0x26>
    5274:	e7ff      	b.n	5276 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_30$GT$8pin_port17hd3d83ef40fcdd660E+0x12>
    5276:	9902      	ldr	r1, [sp, #8]
    5278:	201e      	movs	r0, #30
    527a:	fa50 f181 	uxtab	r1, r0, r1
    527e:	b2c8      	uxtb	r0, r1
    5280:	460a      	mov	r2, r1
    5282:	9201      	str	r2, [sp, #4]
    5284:	4288      	cmp	r0, r1
    5286:	d109      	bne.n	529c <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_30$GT$8pin_port17hd3d83ef40fcdd660E+0x38>
    5288:	e005      	b.n	5296 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_30$GT$8pin_port17hd3d83ef40fcdd660E+0x32>
    528a:	f64c 40e0 	movw	r0, #52448	@ 0xcce0
    528e:	f2c0 0000 	movt	r0, #0
    5292:	f005 ff70 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    5296:	9801      	ldr	r0, [sp, #4]
    5298:	b004      	add	sp, #16
    529a:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    529c:	f64c 40e0 	movw	r0, #52448	@ 0xcce0
    52a0:	f2c0 0000 	movt	r0, #0
    52a4:	f005 ff41 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

000052a8 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_31$GT$8pin_port17h2b32ec663cfbd7daE>:
            fn pin_port(&self) -> u8 {
    52a8:	b580      	push	{r7, lr}
    52aa:	466f      	mov	r7, sp
    52ac:	b084      	sub	sp, #16
    52ae:	9003      	str	r0, [sp, #12]
    52b0:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    52b2:	4601      	mov	r1, r0
    52b4:	9102      	str	r1, [sp, #8]
    52b6:	b950      	cbnz	r0, 52ce <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_31$GT$8pin_port17h2b32ec663cfbd7daE+0x26>
    52b8:	e7ff      	b.n	52ba <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_31$GT$8pin_port17h2b32ec663cfbd7daE+0x12>
    52ba:	9902      	ldr	r1, [sp, #8]
    52bc:	201f      	movs	r0, #31
    52be:	fa50 f181 	uxtab	r1, r0, r1
    52c2:	b2c8      	uxtb	r0, r1
    52c4:	460a      	mov	r2, r1
    52c6:	9201      	str	r2, [sp, #4]
    52c8:	4288      	cmp	r0, r1
    52ca:	d109      	bne.n	52e0 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_31$GT$8pin_port17h2b32ec663cfbd7daE+0x38>
    52cc:	e005      	b.n	52da <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P0_31$GT$8pin_port17h2b32ec663cfbd7daE+0x32>
    52ce:	f64c 40f0 	movw	r0, #52464	@ 0xccf0
    52d2:	f2c0 0000 	movt	r0, #0
    52d6:	f005 ff4e 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    52da:	9801      	ldr	r0, [sp, #4]
    52dc:	b004      	add	sp, #16
    52de:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    52e0:	f64c 40f0 	movw	r0, #52464	@ 0xccf0
    52e4:	f2c0 0000 	movt	r0, #0
    52e8:	f005 ff1f 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

000052ec <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P1_05$GT$8pin_port17hc01e6f02c224c265E>:
            fn pin_port(&self) -> u8 {
    52ec:	b580      	push	{r7, lr}
    52ee:	466f      	mov	r7, sp
    52f0:	b084      	sub	sp, #16
    52f2:	9003      	str	r0, [sp, #12]
    52f4:	2020      	movs	r0, #32
    52f6:	9002      	str	r0, [sp, #8]
    52f8:	2000      	movs	r0, #0
                $port_num * 32 + $pin_num
    52fa:	b950      	cbnz	r0, 5312 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P1_05$GT$8pin_port17hc01e6f02c224c265E+0x26>
    52fc:	e7ff      	b.n	52fe <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P1_05$GT$8pin_port17hc01e6f02c224c265E+0x12>
    52fe:	9902      	ldr	r1, [sp, #8]
    5300:	2005      	movs	r0, #5
    5302:	fa50 f181 	uxtab	r1, r0, r1
    5306:	b2c8      	uxtb	r0, r1
    5308:	460a      	mov	r2, r1
    530a:	9201      	str	r2, [sp, #4]
    530c:	4288      	cmp	r0, r1
    530e:	d109      	bne.n	5324 <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P1_05$GT$8pin_port17hc01e6f02c224c265E+0x38>
    5310:	e005      	b.n	531e <_ZN11embassy_nrf4chip96_$LT$impl$u20$embassy_nrf..gpio..SealedPin$u20$for$u20$embassy_nrf..chip..peripherals..P1_05$GT$8pin_port17hc01e6f02c224c265E+0x32>
    5312:	f64c 5000 	movw	r0, #52480	@ 0xcd00
    5316:	f2c0 0000 	movt	r0, #0
    531a:	f005 ff2c 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
            }
    531e:	9801      	ldr	r0, [sp, #4]
    5320:	b004      	add	sp, #16
    5322:	bd80      	pop	{r7, pc}
                $port_num * 32 + $pin_num
    5324:	f64c 5000 	movw	r0, #52480	@ 0xcd00
    5328:	f2c0 0000 	movt	r0, #0
    532c:	f005 fefd 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00005330 <_ZN4core3ops8function6FnOnce9call_once17hf8875233ff2141deE>:
    #[stable(feature = "fn_once_output", since = "1.12.0")]
    type Output;

    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
    5330:	b580      	push	{r7, lr}
    5332:	466f      	mov	r7, sp
    5334:	b082      	sub	sp, #8
    5336:	f000 fe3b 	bl	5fb0 <_ZN11embassy_nrf4chip11Peripherals12take_with_cs17hd69b02f29f121fd6E>
    533a:	b002      	add	sp, #8
    533c:	bd80      	pop	{r7, pc}

0000533e <_ZN4core3ptr45drop_in_place$LT$core..cell..BorrowRefMut$GT$17h481c10f62b0989c6E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    533e:	b580      	push	{r7, lr}
    5340:	466f      	mov	r7, sp
    5342:	b082      	sub	sp, #8
    5344:	9001      	str	r0, [sp, #4]
    5346:	f000 f8e1 	bl	550c <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h234c7ee3dabe02c9E>
    534a:	b002      	add	sp, #8
    534c:	bd80      	pop	{r7, pc}

0000534e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h7f3379a344f546a4E>:
            const fn precondition_check($($name:$ty),*) {
    534e:	b580      	push	{r7, lr}
    5350:	466f      	mov	r7, sp
    5352:	b082      	sub	sp, #8
    5354:	9001      	str	r0, [sp, #4]
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
    5356:	b938      	cbnz	r0, 5368 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h7f3379a344f546a4E+0x1a>
    5358:	e7ff      	b.n	535a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h7f3379a344f546a4E+0xc>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    535a:	f64c 5010 	movw	r0, #52496	@ 0xcd10
    535e:	f2c0 0000 	movt	r0, #0
    5362:	21d2      	movs	r1, #210	@ 0xd2
    5364:	f005 f894 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
            }
    5368:	b002      	add	sp, #8
    536a:	bd80      	pop	{r7, pc}

0000536c <_ZN4core3ptr96drop_in_place$LT$core..cell..RefMut$LT$embassy_time_queue_utils..queue_integrated..Queue$GT$$GT$17hafb4628f37dd8751E>:
    536c:	b580      	push	{r7, lr}
    536e:	466f      	mov	r7, sp
    5370:	b082      	sub	sp, #8
    5372:	9001      	str	r0, [sp, #4]
    5374:	3004      	adds	r0, #4
    5376:	f7ff ffe2 	bl	533e <_ZN4core3ptr45drop_in_place$LT$core..cell..BorrowRefMut$GT$17h481c10f62b0989c6E>
    537a:	b002      	add	sp, #8
    537c:	bd80      	pop	{r7, pc}

0000537e <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h3473d87c90e6635aE>:
    /// let b = c.borrow_mut(); // this causes a panic
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    #[track_caller]
    pub fn borrow_mut(&self) -> RefMut<'_, T> {
    537e:	b580      	push	{r7, lr}
    5380:	466f      	mov	r7, sp
    5382:	b088      	sub	sp, #32
    5384:	9101      	str	r1, [sp, #4]
    5386:	9004      	str	r0, [sp, #16]
        match self.try_borrow_mut() {
    5388:	f000 f80e 	bl	53a8 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hc9b41c3ac974cec3E>
    538c:	9002      	str	r0, [sp, #8]
    538e:	9103      	str	r1, [sp, #12]
    5390:	9802      	ldr	r0, [sp, #8]
    5392:	b918      	cbnz	r0, 539c <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h3473d87c90e6635aE+0x1e>
    5394:	e7ff      	b.n	5396 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h3473d87c90e6635aE+0x18>
            Ok(b) => b,
            Err(err) => panic_already_borrowed(err),
    5396:	9801      	ldr	r0, [sp, #4]
    5398:	f004 ffb2 	bl	a300 <_ZN4core4cell22panic_already_borrowed17h6cb71ddacd41e154E>
            Ok(b) => b,
    539c:	9802      	ldr	r0, [sp, #8]
    539e:	9903      	ldr	r1, [sp, #12]
    53a0:	9006      	str	r0, [sp, #24]
    53a2:	9107      	str	r1, [sp, #28]
        }
    }
    53a4:	b008      	add	sp, #32
    53a6:	bd80      	pop	{r7, pc}

000053a8 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hc9b41c3ac974cec3E>:
    /// assert!(c.try_borrow_mut().is_ok());
    /// ```
    #[stable(feature = "try_borrow", since = "1.13.0")]
    #[inline]
    #[cfg_attr(feature = "debug_refcell", track_caller)]
    pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {
    53a8:	b580      	push	{r7, lr}
    53aa:	466f      	mov	r7, sp
    53ac:	b08e      	sub	sp, #56	@ 0x38
    53ae:	9002      	str	r0, [sp, #8]
    53b0:	9006      	str	r0, [sp, #24]
    53b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
    pub fn set(&self, val: T) {
    53b6:	9107      	str	r1, [sp, #28]
    pub const fn replace(&self, val: T) -> T {
    53b8:	9108      	str	r1, [sp, #32]
        match BorrowRefMut::new(&self.borrow) {
    53ba:	9009      	str	r0, [sp, #36]	@ 0x24
        unsafe { *self.value.get() }
    53bc:	6800      	ldr	r0, [r0, #0]
    fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
        // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
        // mutable reference, and so there must currently be no existing
        // references. Thus, while clone increments the mutable refcount, here
        // we explicitly only allow going from UNUSED to UNUSED - 1.
        match borrow.get() {
    53be:	b970      	cbnz	r0, 53de <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hc9b41c3ac974cec3E+0x36>
    53c0:	e7ff      	b.n	53c2 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hc9b41c3ac974cec3E+0x1a>
    53c2:	9802      	ldr	r0, [sp, #8]
    53c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
    53c8:	6001      	str	r1, [r0, #0]
            UNUSED => {
                borrow.set(UNUSED - 1);
                Some(BorrowRefMut { borrow })
    53ca:	9005      	str	r0, [sp, #20]
            Some(b) => {
    53cc:	9905      	ldr	r1, [sp, #20]
    53ce:	9100      	str	r1, [sp, #0]
    53d0:	910a      	str	r1, [sp, #40]	@ 0x28
                let value = unsafe { NonNull::new_unchecked(self.value.get()) };
    53d2:	3004      	adds	r0, #4
    53d4:	900b      	str	r0, [sp, #44]	@ 0x2c
    #[rustc_never_returns_null_ptr]
    pub const fn get(&self) -> *mut T {
        // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
        // #[repr(transparent)]. This exploits std's special status, there is
        // no guarantee for user code that this will work in future versions of the compiler!
        self as *const UnsafeCell<T> as *const T as *mut T
    53d6:	4601      	mov	r1, r0
    53d8:	9101      	str	r1, [sp, #4]
    53da:	900c      	str	r0, [sp, #48]	@ 0x30
            if ::core::ub_checks::$kind() {
    53dc:	e002      	b.n	53e4 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hc9b41c3ac974cec3E+0x3c>
    53de:	2000      	movs	r0, #0
            None => Err(BorrowMutError {
    53e0:	9003      	str	r0, [sp, #12]
            }),
    53e2:	e009      	b.n	53f8 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hc9b41c3ac974cec3E+0x50>
                precondition_check($($arg,)*);
    53e4:	9801      	ldr	r0, [sp, #4]
    53e6:	f7ff ffb2 	bl	534e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h7f3379a344f546a4E>
            if ::core::ub_checks::$kind() {
    53ea:	e7ff      	b.n	53ec <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hc9b41c3ac974cec3E+0x44>
            NonNull { pointer: ptr as _ }
    53ec:	9800      	ldr	r0, [sp, #0]
    53ee:	9901      	ldr	r1, [sp, #4]
    53f0:	910d      	str	r1, [sp, #52]	@ 0x34
                Ok(RefMut { value, borrow: b, marker: PhantomData })
    53f2:	9103      	str	r1, [sp, #12]
    53f4:	9004      	str	r0, [sp, #16]
        }
    53f6:	e7ff      	b.n	53f8 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hc9b41c3ac974cec3E+0x50>
    }
    53f8:	9803      	ldr	r0, [sp, #12]
    53fa:	9904      	ldr	r1, [sp, #16]
    53fc:	b00e      	add	sp, #56	@ 0x38
    53fe:	bd80      	pop	{r7, pc}

00005400 <_ZN4core4hint21unreachable_unchecked17hf59fb41359edf49fE>:
/// ```
#[inline]
#[stable(feature = "unreachable", since = "1.27.0")]
#[rustc_const_stable(feature = "const_unreachable_unchecked", since = "1.57.0")]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
pub const unsafe fn unreachable_unchecked() -> ! {
    5400:	b580      	push	{r7, lr}
    5402:	466f      	mov	r7, sp
                precondition_check($($arg,)*);
    5404:	f000 f801 	bl	540a <_ZN4core4hint21unreachable_unchecked18precondition_check17h3eb3a9e402d78d1aE>
            if ::core::ub_checks::$kind() {
    5408:	defe      	udf	#254	@ 0xfe

0000540a <_ZN4core4hint21unreachable_unchecked18precondition_check17h3eb3a9e402d78d1aE>:
            const fn precondition_check($($name:$ty),*) {
    540a:	b580      	push	{r7, lr}
    540c:	466f      	mov	r7, sp
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    540e:	f64c 50e2 	movw	r0, #52706	@ 0xcde2
    5412:	f2c0 0000 	movt	r0, #0
    5416:	21c7      	movs	r1, #199	@ 0xc7
    5418:	f005 f83a 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>

0000541c <_ZN4core4iter6traits8iterator8Iterator9enumerate17hcffa451ee7b61e2aE>:
    fn enumerate(self) -> Enumerate<Self>
    541c:	b580      	push	{r7, lr}
    541e:	466f      	mov	r7, sp
    5420:	b083      	sub	sp, #12
    5422:	9100      	str	r1, [sp, #0]
    5424:	4601      	mov	r1, r0
    5426:	9800      	ldr	r0, [sp, #0]
    5428:	9001      	str	r0, [sp, #4]
    542a:	9202      	str	r2, [sp, #8]
        Enumerate { iter, count: 0 }
    542c:	6008      	str	r0, [r1, #0]
    542e:	604a      	str	r2, [r1, #4]
    5430:	2000      	movs	r0, #0
    5432:	6088      	str	r0, [r1, #8]
    }
    5434:	b003      	add	sp, #12
    5436:	bd80      	pop	{r7, pc}

00005438 <_ZN4core4sync6atomic14compiler_fence17hf091fd9f1354186aE>:
pub fn compiler_fence(order: Ordering) {
    5438:	b580      	push	{r7, lr}
    543a:	466f      	mov	r7, sp
    543c:	b08a      	sub	sp, #40	@ 0x28
    543e:	f807 0c05 	strb.w	r0, [r7, #-5]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    5442:	f64c 7154 	movw	r1, #53076	@ 0xcf54
    5446:	f2c0 0100 	movt	r1, #0
    544a:	9109      	str	r1, [sp, #36]	@ 0x24
        match order {
    544c:	b2c0      	uxtb	r0, r0
    544e:	9001      	str	r0, [sp, #4]
    5450:	9901      	ldr	r1, [sp, #4]
    5452:	e8df f001 	tbb	[pc, r1]
    5456:	1e04      	.short	0x1e04
    5458:	0021201f 	.word	0x0021201f
    545c:	defe      	udf	#254	@ 0xfe
        Arguments { pieces, fmt: None, args: &[] }
    545e:	f64c 7054 	movw	r0, #53076	@ 0xcf54
    5462:	f2c0 0000 	movt	r0, #0
    5466:	9002      	str	r0, [sp, #8]
    5468:	2001      	movs	r0, #1
    546a:	9003      	str	r0, [sp, #12]
    546c:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    5470:	f2c0 0000 	movt	r0, #0
    5474:	6801      	ldr	r1, [r0, #0]
    5476:	6840      	ldr	r0, [r0, #4]
    5478:	9106      	str	r1, [sp, #24]
    547a:	9007      	str	r0, [sp, #28]
    547c:	2004      	movs	r0, #4
    547e:	9004      	str	r0, [sp, #16]
    5480:	2000      	movs	r0, #0
    5482:	9005      	str	r0, [sp, #20]
            Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
    5484:	f64c 715c 	movw	r1, #53084	@ 0xcf5c
    5488:	f2c0 0100 	movt	r1, #0
    548c:	a802      	add	r0, sp, #8
    548e:	f004 ffcd 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Release => intrinsics::atomic_singlethreadfence_release(),
    5492:	e002      	b.n	549a <_ZN4core4sync6atomic14compiler_fence17hf091fd9f1354186aE+0x62>
            Acquire => intrinsics::atomic_singlethreadfence_acquire(),
    5494:	e001      	b.n	549a <_ZN4core4sync6atomic14compiler_fence17hf091fd9f1354186aE+0x62>
            AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
    5496:	e000      	b.n	549a <_ZN4core4sync6atomic14compiler_fence17hf091fd9f1354186aE+0x62>
            SeqCst => intrinsics::atomic_singlethreadfence_seqcst(),
    5498:	e7ff      	b.n	549a <_ZN4core4sync6atomic14compiler_fence17hf091fd9f1354186aE+0x62>
}
    549a:	b00a      	add	sp, #40	@ 0x28
    549c:	bd80      	pop	{r7, pc}

0000549e <_ZN4core4sync6atomic9AtomicU324load17hac04ba279cff7a80E>:
            pub fn load(&self, order: Ordering) -> $int_type {
    549e:	b580      	push	{r7, lr}
    54a0:	466f      	mov	r7, sp
    54a2:	b084      	sub	sp, #16
    54a4:	9001      	str	r0, [sp, #4]
    54a6:	f807 1c05 	strb.w	r1, [r7, #-5]
                unsafe { atomic_load(self.v.get(), order) }
    54aa:	9003      	str	r0, [sp, #12]
    54ac:	f001 fb82 	bl	6bb4 <_ZN4core4sync6atomic11atomic_load17hfcdf5dd0aa4de20eE>
            }
    54b0:	b004      	add	sp, #16
    54b2:	bd80      	pop	{r7, pc}

000054b4 <_ZN4core4sync6atomic9AtomicU325store17hf2a9edd2b7459dedE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
    54b4:	b580      	push	{r7, lr}
    54b6:	466f      	mov	r7, sp
    54b8:	b084      	sub	sp, #16
    54ba:	9000      	str	r0, [sp, #0]
    54bc:	9101      	str	r1, [sp, #4]
    54be:	f807 2c05 	strb.w	r2, [r7, #-5]
                unsafe { atomic_store(self.v.get(), val, order); }
    54c2:	9003      	str	r0, [sp, #12]
    54c4:	f001 fbd8 	bl	6c78 <_ZN4core4sync6atomic12atomic_store17hbbdfeee93a6fa1f8E>
            }
    54c8:	b004      	add	sp, #16
    54ca:	bd80      	pop	{r7, pc}

000054cc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h111c877bf7db799bE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
    54cc:	b580      	push	{r7, lr}
    54ce:	466f      	mov	r7, sp
    54d0:	b08a      	sub	sp, #40	@ 0x28
    54d2:	9100      	str	r1, [sp, #0]
    54d4:	9001      	str	r0, [sp, #4]
    54d6:	9003      	str	r0, [sp, #12]
    54d8:	9104      	str	r1, [sp, #16]
        let len = slice.len();
    54da:	9105      	str	r1, [sp, #20]
        unsafe { NonNull { pointer: r as *const T } }
    54dc:	9006      	str	r0, [sp, #24]
    54de:	9107      	str	r1, [sp, #28]
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
    54e0:	9008      	str	r0, [sp, #32]
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
    54e2:	e7ff      	b.n	54e4 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h111c877bf7db799bE+0x18>
        unsafe { mem::transmute::<Self, *mut T>(self) }
    54e4:	9801      	ldr	r0, [sp, #4]
    54e6:	9900      	ldr	r1, [sp, #0]
    54e8:	9009      	str	r0, [sp, #36]	@ 0x24
        unsafe { intrinsics::offset(self, count) }
    54ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    54ee:	9002      	str	r0, [sp, #8]
    54f0:	e7ff      	b.n	54f2 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h111c877bf7db799bE+0x26>
            Self { ptr, end_or_len, _marker: PhantomData }
    54f2:	9801      	ldr	r0, [sp, #4]
    54f4:	9902      	ldr	r1, [sp, #8]
    }
    54f6:	b00a      	add	sp, #40	@ 0x28
    54f8:	bd80      	pop	{r7, pc}

000054fa <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6e16e7255b95e556E>:
    fn into(self) -> U {
    54fa:	b580      	push	{r7, lr}
    54fc:	466f      	mov	r7, sp
    54fe:	b082      	sub	sp, #8
    5500:	f807 0c01 	strb.w	r0, [r7, #-1]
        U::from(self)
    5504:	f001 fc70 	bl	6de8 <_ZN20embassy_hal_internal9interrupt101_$LT$impl$u20$core..convert..From$LT$embassy_hal_internal..interrupt..Priority$GT$$u20$for$u20$u8$GT$4from17h764c4e185f8e43deE>
    }
    5508:	b002      	add	sp, #8
    550a:	bd80      	pop	{r7, pc}

0000550c <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17h234c7ee3dabe02c9E>:
    fn drop(&mut self) {
    550c:	b580      	push	{r7, lr}
    550e:	466f      	mov	r7, sp
    5510:	b081      	sub	sp, #4
    5512:	9000      	str	r0, [sp, #0]
        let borrow = self.borrow.get();
    5514:	6801      	ldr	r1, [r0, #0]
        unsafe { *self.value.get() }
    5516:	6808      	ldr	r0, [r1, #0]
        self.borrow.set(borrow + 1);
    5518:	3001      	adds	r0, #1
    551a:	6008      	str	r0, [r1, #0]
    }
    551c:	b001      	add	sp, #4
    551e:	bd80      	pop	{r7, pc}

00005520 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf97b6e5f302903b9E>:
    fn deref_mut(&mut self) -> &mut T {
    5520:	b580      	push	{r7, lr}
    5522:	466f      	mov	r7, sp
    5524:	b081      	sub	sp, #4
    5526:	9000      	str	r0, [sp, #0]
        unsafe { &mut *self.as_ptr() }
    5528:	6800      	ldr	r0, [r0, #0]
    }
    552a:	b001      	add	sp, #4
    552c:	bd80      	pop	{r7, pc}

0000552e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE>:
            fn next(&mut self) -> Option<$elem> {
    552e:	b580      	push	{r7, lr}
    5530:	466f      	mov	r7, sp
    5532:	b08d      	sub	sp, #52	@ 0x34
    5534:	9000      	str	r0, [sp, #0]
    5536:	9006      	str	r0, [sp, #24]
    5538:	2101      	movs	r1, #1
        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
    553a:	9107      	str	r1, [sp, #28]
    pub const unsafe fn add(self, count: usize) -> Self
    553c:	9108      	str	r1, [sp, #32]
                let ptr = self.ptr;
    553e:	6801      	ldr	r1, [r0, #0]
    5540:	9103      	str	r1, [sp, #12]
                let end_or_len = self.end_or_len;
    5542:	6840      	ldr	r0, [r0, #4]
    5544:	9001      	str	r0, [sp, #4]
    5546:	9009      	str	r0, [sp, #36]	@ 0x24
                    if T::IS_ZST {
    5548:	e7ff      	b.n	554a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE+0x1c>
    554a:	9801      	ldr	r0, [sp, #4]
    554c:	a903      	add	r1, sp, #12
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
    554e:	910a      	str	r1, [sp, #40]	@ 0x28
    5550:	9004      	str	r0, [sp, #16]
    5552:	a804      	add	r0, sp, #16
    5554:	900b      	str	r0, [sp, #44]	@ 0x2c
        unsafe { mem::transmute::<Self, *mut T>(self) }
    5556:	9803      	ldr	r0, [sp, #12]
    5558:	9904      	ldr	r1, [sp, #16]
    555a:	4288      	cmp	r0, r1
    555c:	d005      	beq.n	556a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE+0x3c>
    555e:	e7ff      	b.n	5560 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE+0x32>
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
    5560:	9900      	ldr	r1, [sp, #0]
    5562:	9803      	ldr	r0, [sp, #12]
    5564:	3004      	adds	r0, #4
                        self.ptr = ptr.add(1);
    5566:	6008      	str	r0, [r1, #0]
                    if T::IS_ZST {
    5568:	e002      	b.n	5570 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE+0x42>
    556a:	2000      	movs	r0, #0
                            return None;
    556c:	9002      	str	r0, [sp, #8]
    556e:	e009      	b.n	5584 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE+0x56>
                    Some({ptr}.$into_ref())
    5570:	9803      	ldr	r0, [sp, #12]
    5572:	9005      	str	r0, [sp, #20]
    5574:	a805      	add	r0, sp, #20
    5576:	900c      	str	r0, [sp, #48]	@ 0x30
        self as _
    5578:	9803      	ldr	r0, [sp, #12]
    557a:	9002      	str	r0, [sp, #8]
            }
    557c:	e7ff      	b.n	557e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE+0x50>
    557e:	9802      	ldr	r0, [sp, #8]
    5580:	b00d      	add	sp, #52	@ 0x34
    5582:	bd80      	pop	{r7, pc}
    5584:	e7fb      	b.n	557e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE+0x50>

00005586 <_ZN11embassy_nrf11time_driver3rtc17h6cae432e202c4cb3E>:
#[cfg(feature = "_nrf54l")]
fn rtc() -> pac::rtc::Rtc {
    pac::RTC30
}
#[cfg(not(feature = "_nrf54l"))]
fn rtc() -> pac::rtc::Rtc {
    5586:	b580      	push	{r7, lr}
    5588:	466f      	mov	r7, sp
    558a:	f241 0000 	movw	r0, #4096	@ 0x1000
    558e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
    pac::RTC1
}
    5592:	bd80      	pop	{r7, pc}

00005594 <_ZN11embassy_nrf11time_driver8calc_now17h69316a6e0d867fafE>:
/// corresponds to the next period.
///
/// `period` is a 32bit integer, so It overflows on 2^32 * 2^23 / 32768 seconds of uptime, which is 34865
/// years. For comparison, flash memory like the one containing your firmware is usually rated to retain
/// data for only 10-20 years. 34865 years is long enough!
fn calc_now(period: u32, counter: u32) -> u64 {
    5594:	b580      	push	{r7, lr}
    5596:	466f      	mov	r7, sp
    5598:	b084      	sub	sp, #16
    559a:	4602      	mov	r2, r0
    559c:	9202      	str	r2, [sp, #8]
    559e:	9103      	str	r1, [sp, #12]
    ((period as u64) << 23) + ((counter ^ ((period & 1) << 23)) as u64)
    55a0:	0a50      	lsrs	r0, r2, #9
    55a2:	f002 0301 	and.w	r3, r2, #1
    55a6:	ea81 51c3 	eor.w	r1, r1, r3, lsl #23
    55aa:	eb11 51c2 	adds.w	r1, r1, r2, lsl #23
    55ae:	f140 0000 	adc.w	r0, r0, #0
    55b2:	9100      	str	r1, [sp, #0]
    55b4:	9001      	str	r0, [sp, #4]
    55b6:	2000      	movs	r0, #0
    55b8:	b920      	cbnz	r0, 55c4 <_ZN11embassy_nrf11time_driver8calc_now17h69316a6e0d867fafE+0x30>
    55ba:	e7ff      	b.n	55bc <_ZN11embassy_nrf11time_driver8calc_now17h69316a6e0d867fafE+0x28>
}
    55bc:	9901      	ldr	r1, [sp, #4]
    55be:	9800      	ldr	r0, [sp, #0]
    55c0:	b004      	add	sp, #16
    55c2:	bd80      	pop	{r7, pc}
    ((period as u64) << 23) + ((counter ^ ((period & 1) << 23)) as u64)
    55c4:	f24d 0098 	movw	r0, #53400	@ 0xd098
    55c8:	f2c0 0000 	movt	r0, #0
    55cc:	f005 fdad 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

000055d0 <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE>:

fn compare_n(n: usize) -> u32 {
    55d0:	b580      	push	{r7, lr}
    55d2:	466f      	mov	r7, sp
    55d4:	b082      	sub	sp, #8
    55d6:	4601      	mov	r1, r0
    55d8:	9101      	str	r1, [sp, #4]
    1 << (n + 16)
    55da:	f101 0010 	add.w	r0, r1, #16
    55de:	4288      	cmp	r0, r1
    55e0:	9000      	str	r0, [sp, #0]
    55e2:	d304      	bcc.n	55ee <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE+0x1e>
    55e4:	e7ff      	b.n	55e6 <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE+0x16>
    55e6:	9800      	ldr	r0, [sp, #0]
    55e8:	2820      	cmp	r0, #32
    55ea:	d306      	bcc.n	55fa <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE+0x2a>
    55ec:	e00c      	b.n	5608 <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE+0x38>
    55ee:	f24d 00a8 	movw	r0, #53416	@ 0xd0a8
    55f2:	f2c0 0000 	movt	r0, #0
    55f6:	f005 fd98 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    55fa:	9800      	ldr	r0, [sp, #0]
    55fc:	f000 011f 	and.w	r1, r0, #31
    5600:	2001      	movs	r0, #1
    5602:	4088      	lsls	r0, r1
}
    5604:	b002      	add	sp, #8
    5606:	bd80      	pop	{r7, pc}
    1 << (n + 16)
    5608:	f24d 00b8 	movw	r0, #53432	@ 0xd0b8
    560c:	f2c0 0000 	movt	r0, #0
    5610:	f005 fdd7 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

00005614 <_ZN11embassy_nrf11time_driver9RtcDriver4init17hd8c88f7c14be4472E>:
    alarms: Mutex::const_new(CriticalSectionRawMutex::new(), AlarmState::new()),
    queue: Mutex::new(RefCell::new(Queue::new())),
});

impl RtcDriver {
    fn init(&'static self, irq_prio: crate::interrupt::Priority) {
    5614:	b580      	push	{r7, lr}
    5616:	466f      	mov	r7, sp
    5618:	b0bc      	sub	sp, #240	@ 0xf0
    561a:	460a      	mov	r2, r1
    561c:	9201      	str	r2, [sp, #4]
    561e:	900e      	str	r0, [sp, #56]	@ 0x38
    5620:	f807 1cb1 	strb.w	r1, [r7, #-177]
        let r = rtc();
    5624:	f7ff ffaf 	bl	5586 <_ZN11embassy_nrf11time_driver3rtc17h6cae432e202c4cb3E>
    5628:	9006      	str	r0, [sp, #24]
    562a:	4601      	mov	r1, r0
    562c:	9102      	str	r1, [sp, #8]
    562e:	9010      	str	r0, [sp, #64]	@ 0x40
    5630:	9017      	str	r0, [sp, #92]	@ 0x5c
    5632:	2103      	movs	r1, #3
    5634:	9118      	str	r1, [sp, #96]	@ 0x60
    5636:	9019      	str	r0, [sp, #100]	@ 0x64
    5638:	f240 514c 	movw	r1, #1356	@ 0x54c
    563c:	911a      	str	r1, [sp, #104]	@ 0x68
        unsafe { intrinsics::offset(self, count) }
    563e:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
    5642:	9039      	str	r0, [sp, #228]	@ 0xe4
        r.cc(3).write(|w| w.set_compare(0x800000));
    5644:	9008      	str	r0, [sp, #32]
    5646:	a808      	add	r0, sp, #32
    5648:	9003      	str	r0, [sp, #12]
    564a:	902c      	str	r0, [sp, #176]	@ 0xb0
    564c:	2000      	movs	r0, #0
            let mut val = Default::default();
    564e:	9005      	str	r0, [sp, #20]
    5650:	902b      	str	r0, [sp, #172]	@ 0xac
    5652:	a82b      	add	r0, sp, #172	@ 0xac
            let res = f(&mut val);
    5654:	f000 f86c 	bl	5730 <_ZN11embassy_nrf11time_driver9RtcDriver4init28_$u7b$$u7b$closure$u7d$$u7d$17hf5df9ed6925e5991E>
    5658:	9803      	ldr	r0, [sp, #12]
            self.write_value(val);
    565a:	992b      	ldr	r1, [sp, #172]	@ 0xac
    565c:	902d      	str	r0, [sp, #180]	@ 0xb4
    565e:	912e      	str	r1, [sp, #184]	@ 0xb8
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    5660:	9808      	ldr	r0, [sp, #32]
    5662:	902f      	str	r0, [sp, #188]	@ 0xbc
    5664:	9130      	str	r1, [sp, #192]	@ 0xc0
        unsafe { write_volatile(self, val) }
    5666:	f7ff f9a1 	bl	49ac <_ZN4core3ptr14write_volatile17h0953c3a8be95fceaE>
    566a:	9805      	ldr	r0, [sp, #20]
    566c:	9906      	ldr	r1, [sp, #24]
    566e:	911e      	str	r1, [sp, #120]	@ 0x78
    5670:	911f      	str	r1, [sp, #124]	@ 0x7c
    5672:	f44f 7241 	mov.w	r2, #772	@ 0x304
    5676:	9220      	str	r2, [sp, #128]	@ 0x80
        unsafe { intrinsics::offset(self, count) }
    5678:	f501 7141 	add.w	r1, r1, #772	@ 0x304
    567c:	913a      	str	r1, [sp, #232]	@ 0xe8

        r.intenset().write(|w| {
    567e:	9109      	str	r1, [sp, #36]	@ 0x24
    5680:	a909      	add	r1, sp, #36	@ 0x24
    5682:	9104      	str	r1, [sp, #16]
    5684:	9132      	str	r1, [sp, #200]	@ 0xc8
            let mut val = Default::default();
    5686:	9031      	str	r0, [sp, #196]	@ 0xc4
    5688:	a831      	add	r0, sp, #196	@ 0xc4
            let res = f(&mut val);
    568a:	f000 f860 	bl	574e <_ZN11embassy_nrf11time_driver9RtcDriver4init28_$u7b$$u7b$closure$u7d$$u7d$17hb3253f45cacc3a96E>
    568e:	9804      	ldr	r0, [sp, #16]
            self.write_value(val);
    5690:	9931      	ldr	r1, [sp, #196]	@ 0xc4
    5692:	9033      	str	r0, [sp, #204]	@ 0xcc
    5694:	9134      	str	r1, [sp, #208]	@ 0xd0
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    5696:	9809      	ldr	r0, [sp, #36]	@ 0x24
    5698:	9035      	str	r0, [sp, #212]	@ 0xd4
    569a:	9136      	str	r1, [sp, #216]	@ 0xd8
        unsafe { write_volatile(self, val) }
    569c:	f7ff f999 	bl	49d2 <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E>
    56a0:	9806      	ldr	r0, [sp, #24]
    56a2:	9011      	str	r0, [sp, #68]	@ 0x44
    56a4:	9012      	str	r0, [sp, #72]	@ 0x48
    56a6:	2108      	movs	r1, #8
    56a8:	9113      	str	r1, [sp, #76]	@ 0x4c
        unsafe { intrinsics::offset(self, count) }
    56aa:	3008      	adds	r0, #8
    56ac:	9038      	str	r0, [sp, #224]	@ 0xe0
            w.set_ovrflw(true);
            w.set_compare(3, true);
        });

        r.tasks_clear().write_value(1);
    56ae:	900a      	str	r0, [sp, #40]	@ 0x28
    56b0:	a80a      	add	r0, sp, #40	@ 0x28
    56b2:	9025      	str	r0, [sp, #148]	@ 0x94
    56b4:	2101      	movs	r1, #1
    56b6:	9107      	str	r1, [sp, #28]
    56b8:	9126      	str	r1, [sp, #152]	@ 0x98
    56ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
    56bc:	9027      	str	r0, [sp, #156]	@ 0x9c
    56be:	9128      	str	r1, [sp, #160]	@ 0xa0
        unsafe { write_volatile(self, val) }
    56c0:	f004 fcf7 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    56c4:	9a05      	ldr	r2, [sp, #20]
    56c6:	9806      	ldr	r0, [sp, #24]
    56c8:	9907      	ldr	r1, [sp, #28]
    56ca:	9014      	str	r0, [sp, #80]	@ 0x50
    56cc:	9015      	str	r0, [sp, #84]	@ 0x54
    56ce:	9216      	str	r2, [sp, #88]	@ 0x58
    56d0:	9037      	str	r0, [sp, #220]	@ 0xdc
        r.tasks_start().write_value(1);
    56d2:	900b      	str	r0, [sp, #44]	@ 0x2c
    56d4:	a80b      	add	r0, sp, #44	@ 0x2c
    56d6:	9021      	str	r0, [sp, #132]	@ 0x84
    56d8:	9122      	str	r1, [sp, #136]	@ 0x88
    56da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    56dc:	9023      	str	r0, [sp, #140]	@ 0x8c
    56de:	9124      	str	r1, [sp, #144]	@ 0x90
    56e0:	f004 fce7 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    56e4:	e7ff      	b.n	56e6 <_ZN11embassy_nrf11time_driver9RtcDriver4init17hd8c88f7c14be4472E+0xd2>
    56e6:	9802      	ldr	r0, [sp, #8]
    56e8:	901b      	str	r0, [sp, #108]	@ 0x6c
    56ea:	901c      	str	r0, [sp, #112]	@ 0x70
    56ec:	f240 5104 	movw	r1, #1284	@ 0x504
    56f0:	911d      	str	r1, [sp, #116]	@ 0x74
        unsafe { intrinsics::offset(self, count) }
    56f2:	f200 5004 	addw	r0, r0, #1284	@ 0x504
    56f6:	903b      	str	r0, [sp, #236]	@ 0xec

        // Wait for clear
        while r.counter().read().0 != 0 {}
    56f8:	900c      	str	r0, [sp, #48]	@ 0x30
    56fa:	a80c      	add	r0, sp, #48	@ 0x30
    56fc:	9029      	str	r0, [sp, #164]	@ 0xa4
            unsafe { (self.ptr as *mut T).read_volatile() }
    56fe:	980c      	ldr	r0, [sp, #48]	@ 0x30
    5700:	902a      	str	r0, [sp, #168]	@ 0xa8
        unsafe { read_volatile(self) }
    5702:	f7ff f8d2 	bl	48aa <_ZN4core3ptr13read_volatile17hb1774360b4e696f1E>
    5706:	2800      	cmp	r0, #0
    5708:	d1ed      	bne.n	56e6 <_ZN11embassy_nrf11time_driver9RtcDriver4init17hd8c88f7c14be4472E+0xd2>
    570a:	e7ff      	b.n	570c <_ZN11embassy_nrf11time_driver9RtcDriver4init17hd8c88f7c14be4472E+0xf8>
    570c:	9901      	ldr	r1, [sp, #4]
    570e:	2011      	movs	r0, #17
            interrupt::RTC30.set_priority(irq_prio);
            unsafe { interrupt::RTC30.enable() };
        }
        #[cfg(not(feature = "_nrf54l"))]
        {
            interrupt::RTC1.set_priority(irq_prio);
    5710:	9000      	str	r0, [sp, #0]
    5712:	f807 0cba 	strb.w	r0, [r7, #-186]
    5716:	f817 0cba 	ldrb.w	r0, [r7, #-186]
    571a:	f000 fdb2 	bl	6282 <_ZN20embassy_hal_internal9interrupt12InterruptExt12set_priority17h1d99e41214a8ae7aE>
    571e:	9800      	ldr	r0, [sp, #0]
            unsafe { interrupt::RTC1.enable() };
    5720:	f807 0cb9 	strb.w	r0, [r7, #-185]
    5724:	f817 0cb9 	ldrb.w	r0, [r7, #-185]
    5728:	f000 fdc3 	bl	62b2 <_ZN20embassy_hal_internal9interrupt12InterruptExt6enable17h3f30f9bbb4a7389fE>
        }
    }
    572c:	b03c      	add	sp, #240	@ 0xf0
    572e:	bd80      	pop	{r7, pc}

00005730 <_ZN11embassy_nrf11time_driver9RtcDriver4init28_$u7b$$u7b$closure$u7d$$u7d$17hf5df9ed6925e5991E>:
        r.cc(3).write(|w| w.set_compare(0x800000));
    5730:	b580      	push	{r7, lr}
    5732:	466f      	mov	r7, sp
    5734:	b084      	sub	sp, #16
    5736:	4601      	mov	r1, r0
    5738:	9101      	str	r1, [sp, #4]
    573a:	9102      	str	r1, [sp, #8]
    573c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
    5740:	9203      	str	r2, [sp, #12]
            }
            #[doc = "Compare value"]
            #[inline(always)]
            pub fn set_compare(&mut self, val: u32) {
                self.0 =
                    (self.0 & !(0x00ff_ffff << 0usize)) | (((val as u32) & 0x00ff_ffff) << 0usize);
    5742:	6808      	ldr	r0, [r1, #0]
                self.0 =
    5744:	f362 0017 	bfi	r0, r2, #0, #24
    5748:	6008      	str	r0, [r1, #0]
    574a:	b004      	add	sp, #16
    574c:	bd80      	pop	{r7, pc}

0000574e <_ZN11embassy_nrf11time_driver9RtcDriver4init28_$u7b$$u7b$closure$u7d$$u7d$17hb3253f45cacc3a96E>:
        r.intenset().write(|w| {
    574e:	b580      	push	{r7, lr}
    5750:	466f      	mov	r7, sp
    5752:	b088      	sub	sp, #32
    5754:	4601      	mov	r1, r0
    5756:	9101      	str	r1, [sp, #4]
    5758:	9102      	str	r1, [sp, #8]
    575a:	2001      	movs	r0, #1
    575c:	f807 0c11 	strb.w	r0, [r7, #-17]
                val != 0
            }
            #[doc = "Write '1' to disable interrupt for event OVRFLW"]
            #[inline(always)]
            pub fn set_ovrflw(&mut self, val: bool) {
                self.0 = (self.0 & !(0x01 << 1usize)) | (((val as u32) & 0x01) << 1usize);
    5760:	680a      	ldr	r2, [r1, #0]
    5762:	f042 0202 	orr.w	r2, r2, #2
    5766:	600a      	str	r2, [r1, #0]
    5768:	9104      	str	r1, [sp, #16]
    576a:	2203      	movs	r2, #3
    576c:	9205      	str	r2, [sp, #20]
    576e:	f807 0c05 	strb.w	r0, [r7, #-5]
    5772:	2013      	movs	r0, #19
            }
            #[doc = "Write '1' to disable interrupt for event COMPARE\\[0\\]"]
            #[inline(always)]
            pub fn set_compare(&mut self, n: usize, val: bool) {
                assert!(n < 4usize);
                let offs = 16usize + n * 1usize;
    5774:	9007      	str	r0, [sp, #28]
                self.0 = (self.0 & !(0x01 << offs)) | (((val as u32) & 0x01) << offs);
    5776:	6808      	ldr	r0, [r1, #0]
    5778:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
    577c:	6008      	str	r0, [r1, #0]
        });
    577e:	b008      	add	sp, #32
    5780:	bd80      	pop	{r7, pc}

00005782 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E>:

    fn on_interrupt(&self) {
    5782:	b580      	push	{r7, lr}
    5784:	466f      	mov	r7, sp
    5786:	b0ba      	sub	sp, #232	@ 0xe8
    5788:	9001      	str	r0, [sp, #4]
    578a:	9009      	str	r0, [sp, #36]	@ 0x24
        let r = rtc();
    578c:	f7ff fefb 	bl	5586 <_ZN11embassy_nrf11time_driver3rtc17h6cae432e202c4cb3E>
    5790:	4601      	mov	r1, r0
    5792:	9102      	str	r1, [sp, #8]
    5794:	900a      	str	r0, [sp, #40]	@ 0x28
    5796:	900f      	str	r0, [sp, #60]	@ 0x3c
    5798:	9010      	str	r0, [sp, #64]	@ 0x40
    579a:	f44f 7182 	mov.w	r1, #260	@ 0x104
    579e:	9111      	str	r1, [sp, #68]	@ 0x44
        unsafe { intrinsics::offset(self, count) }
    57a0:	f500 7082 	add.w	r0, r0, #260	@ 0x104
    57a4:	9038      	str	r0, [sp, #224]	@ 0xe0
        if r.events_ovrflw().read() == 1 {
    57a6:	9003      	str	r0, [sp, #12]
    57a8:	a803      	add	r0, sp, #12
    57aa:	9032      	str	r0, [sp, #200]	@ 0xc8
            unsafe { (self.ptr as *mut T).read_volatile() }
    57ac:	9803      	ldr	r0, [sp, #12]
    57ae:	9033      	str	r0, [sp, #204]	@ 0xcc
        unsafe { read_volatile(self) }
    57b0:	f004 fbfb 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    57b4:	2801      	cmp	r0, #1
    57b6:	d117      	bne.n	57e8 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0x66>
    57b8:	e7ff      	b.n	57ba <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0x38>
    57ba:	9802      	ldr	r0, [sp, #8]
    57bc:	900c      	str	r0, [sp, #48]	@ 0x30
    57be:	900d      	str	r0, [sp, #52]	@ 0x34
    57c0:	f44f 7182 	mov.w	r1, #260	@ 0x104
    57c4:	910e      	str	r1, [sp, #56]	@ 0x38
        unsafe { intrinsics::offset(self, count) }
    57c6:	f500 7082 	add.w	r0, r0, #260	@ 0x104
    57ca:	9039      	str	r0, [sp, #228]	@ 0xe4
            r.events_ovrflw().write_value(0);
    57cc:	9004      	str	r0, [sp, #16]
    57ce:	a804      	add	r0, sp, #16
    57d0:	902a      	str	r0, [sp, #168]	@ 0xa8
    57d2:	2100      	movs	r1, #0
    57d4:	912b      	str	r1, [sp, #172]	@ 0xac
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    57d6:	9804      	ldr	r0, [sp, #16]
    57d8:	902c      	str	r0, [sp, #176]	@ 0xb0
    57da:	912d      	str	r1, [sp, #180]	@ 0xb4
        unsafe { write_volatile(self, val) }
    57dc:	f004 fc69 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    57e0:	9801      	ldr	r0, [sp, #4]
            self.next_period();
    57e2:	f000 f868 	bl	58b6 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period17h57e3a42461bc694fE>
    57e6:	e7ff      	b.n	57e8 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0x66>
    57e8:	9802      	ldr	r0, [sp, #8]
    57ea:	901e      	str	r0, [sp, #120]	@ 0x78
    57ec:	2103      	movs	r1, #3
    57ee:	911f      	str	r1, [sp, #124]	@ 0x7c
    57f0:	9020      	str	r0, [sp, #128]	@ 0x80
    57f2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
    57f6:	9121      	str	r1, [sp, #132]	@ 0x84
        unsafe { intrinsics::offset(self, count) }
    57f8:	f500 70a6 	add.w	r0, r0, #332	@ 0x14c
    57fc:	9034      	str	r0, [sp, #208]	@ 0xd0
        }

        if r.events_compare(3).read() == 1 {
    57fe:	9005      	str	r0, [sp, #20]
    5800:	a805      	add	r0, sp, #20
    5802:	9030      	str	r0, [sp, #192]	@ 0xc0
            unsafe { (self.ptr as *mut T).read_volatile() }
    5804:	9805      	ldr	r0, [sp, #20]
    5806:	9031      	str	r0, [sp, #196]	@ 0xc4
        unsafe { read_volatile(self) }
    5808:	f004 fbcf 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    580c:	2801      	cmp	r0, #1
    580e:	d119      	bne.n	5844 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0xc2>
    5810:	e7ff      	b.n	5812 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0x90>
    5812:	9802      	ldr	r0, [sp, #8]
    5814:	901a      	str	r0, [sp, #104]	@ 0x68
    5816:	2103      	movs	r1, #3
    5818:	911b      	str	r1, [sp, #108]	@ 0x6c
    581a:	901c      	str	r0, [sp, #112]	@ 0x70
    581c:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
    5820:	911d      	str	r1, [sp, #116]	@ 0x74
        unsafe { intrinsics::offset(self, count) }
    5822:	f500 70a6 	add.w	r0, r0, #332	@ 0x14c
    5826:	9035      	str	r0, [sp, #212]	@ 0xd4
            r.events_compare(3).write_value(0);
    5828:	9006      	str	r0, [sp, #24]
    582a:	a806      	add	r0, sp, #24
    582c:	9026      	str	r0, [sp, #152]	@ 0x98
    582e:	2100      	movs	r1, #0
    5830:	9127      	str	r1, [sp, #156]	@ 0x9c
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    5832:	9806      	ldr	r0, [sp, #24]
    5834:	9028      	str	r0, [sp, #160]	@ 0xa0
    5836:	9129      	str	r1, [sp, #164]	@ 0xa4
        unsafe { write_volatile(self, val) }
    5838:	f004 fc3b 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    583c:	9801      	ldr	r0, [sp, #4]
            self.next_period();
    583e:	f000 f83a 	bl	58b6 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period17h57e3a42461bc694fE>
    5842:	e7ff      	b.n	5844 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0xc2>
    5844:	9802      	ldr	r0, [sp, #8]
    5846:	2100      	movs	r1, #0
        }

        let n = 0;
    5848:	910b      	str	r1, [sp, #44]	@ 0x2c
    584a:	9016      	str	r0, [sp, #88]	@ 0x58
    584c:	9117      	str	r1, [sp, #92]	@ 0x5c
    584e:	9018      	str	r0, [sp, #96]	@ 0x60
    5850:	f44f 71a0 	mov.w	r1, #320	@ 0x140
    5854:	9119      	str	r1, [sp, #100]	@ 0x64
        unsafe { intrinsics::offset(self, count) }
    5856:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
    585a:	9036      	str	r0, [sp, #216]	@ 0xd8
        if r.events_compare(n).read() == 1 {
    585c:	9007      	str	r0, [sp, #28]
    585e:	a807      	add	r0, sp, #28
    5860:	902e      	str	r0, [sp, #184]	@ 0xb8
            unsafe { (self.ptr as *mut T).read_volatile() }
    5862:	9807      	ldr	r0, [sp, #28]
    5864:	902f      	str	r0, [sp, #188]	@ 0xbc
        unsafe { read_volatile(self) }
    5866:	f004 fba0 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    586a:	2801      	cmp	r0, #1
    586c:	d118      	bne.n	58a0 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0x11e>
    586e:	e7ff      	b.n	5870 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0xee>
    5870:	9802      	ldr	r0, [sp, #8]
    5872:	9012      	str	r0, [sp, #72]	@ 0x48
    5874:	2100      	movs	r1, #0
    5876:	9113      	str	r1, [sp, #76]	@ 0x4c
    5878:	9014      	str	r0, [sp, #80]	@ 0x50
    587a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
    587e:	9215      	str	r2, [sp, #84]	@ 0x54
        unsafe { intrinsics::offset(self, count) }
    5880:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
    5884:	9037      	str	r0, [sp, #220]	@ 0xdc
            r.events_compare(n).write_value(0);
    5886:	9008      	str	r0, [sp, #32]
    5888:	a808      	add	r0, sp, #32
    588a:	9022      	str	r0, [sp, #136]	@ 0x88
    588c:	9123      	str	r1, [sp, #140]	@ 0x8c
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    588e:	9808      	ldr	r0, [sp, #32]
    5890:	9024      	str	r0, [sp, #144]	@ 0x90
    5892:	9125      	str	r1, [sp, #148]	@ 0x94
        unsafe { write_volatile(self, val) }
    5894:	f004 fc0d 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    5898:	9801      	ldr	r0, [sp, #4]
            critical_section::with(|cs| {
    589a:	f7fe ff86 	bl	47aa <_ZN16critical_section4with17h7c7592a294f98abeE>
    589e:	e7ff      	b.n	58a0 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E+0x11e>
                self.trigger_alarm(cs);
            });
        }
    }
    58a0:	b03a      	add	sp, #232	@ 0xe8
    58a2:	bd80      	pop	{r7, pc}

000058a4 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt28_$u7b$$u7b$closure$u7d$$u7d$17h58bc7a3cb2448562E>:
            critical_section::with(|cs| {
    58a4:	b580      	push	{r7, lr}
    58a6:	466f      	mov	r7, sp
    58a8:	b082      	sub	sp, #8
    58aa:	9000      	str	r0, [sp, #0]
                self.trigger_alarm(cs);
    58ac:	9800      	ldr	r0, [sp, #0]
    58ae:	f000 f899 	bl	59e4 <_ZN11embassy_nrf11time_driver9RtcDriver13trigger_alarm17hab5e0d13597c80fcE>
            });
    58b2:	b002      	add	sp, #8
    58b4:	bd80      	pop	{r7, pc}

000058b6 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period17h57e3a42461bc694fE>:

    fn next_period(&self) {
    58b6:	b580      	push	{r7, lr}
    58b8:	466f      	mov	r7, sp
    58ba:	b082      	sub	sp, #8
    58bc:	9001      	str	r0, [sp, #4]
        critical_section::with(|cs| {
    58be:	f7fe ff99 	bl	47f4 <_ZN16critical_section4with17hfd5936fb618fcb9aE>
            if at < t + 0xc00000 {
                // just enable it. `set_alarm` has already set the correct CC val.
                r.intenset().write(|w| w.0 = compare_n(n));
            }
        })
    }
    58c2:	b002      	add	sp, #8
    58c4:	bd80      	pop	{r7, pc}

000058c6 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E>:
        critical_section::with(|cs| {
    58c6:	b580      	push	{r7, lr}
    58c8:	466f      	mov	r7, sp
    58ca:	b0a4      	sub	sp, #144	@ 0x90
    58cc:	900a      	str	r0, [sp, #40]	@ 0x28
            let r = rtc();
    58ce:	f7ff fe5a 	bl	5586 <_ZN11embassy_nrf11time_driver3rtc17h6cae432e202c4cb3E>
    58d2:	4601      	mov	r1, r0
    58d4:	9108      	str	r1, [sp, #32]
    58d6:	9010      	str	r0, [sp, #64]	@ 0x40
            let period = self.period.load(Ordering::Relaxed) + 1;
    58d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
    58da:	3010      	adds	r0, #16
    58dc:	2100      	movs	r1, #0
    58de:	f807 1c62 	strb.w	r1, [r7, #-98]
    58e2:	f817 1c62 	ldrb.w	r1, [r7, #-98]
    58e6:	f7ff fdda 	bl	549e <_ZN4core4sync6atomic9AtomicU324load17hac04ba279cff7a80E>
    58ea:	4601      	mov	r1, r0
    58ec:	1c48      	adds	r0, r1, #1
    58ee:	4288      	cmp	r0, r1
    58f0:	9009      	str	r0, [sp, #36]	@ 0x24
    58f2:	d335      	bcc.n	5960 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E+0x9a>
    58f4:	e7ff      	b.n	58f6 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E+0x30>
    58f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
    58f8:	9111      	str	r1, [sp, #68]	@ 0x44
            self.period.store(period, Ordering::Relaxed);
    58fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
    58fc:	3010      	adds	r0, #16
    58fe:	2200      	movs	r2, #0
    5900:	9202      	str	r2, [sp, #8]
    5902:	f807 2c61 	strb.w	r2, [r7, #-97]
    5906:	f817 2c61 	ldrb.w	r2, [r7, #-97]
    590a:	f7ff fdd3 	bl	54b4 <_ZN4core4sync6atomic9AtomicU325store17hf2a9edd2b7459dedE>
    590e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    5910:	9802      	ldr	r0, [sp, #8]
            let t = (period as u64) << 23;
    5912:	05d1      	lsls	r1, r2, #23
    5914:	0a52      	lsrs	r2, r2, #9
    5916:	9203      	str	r2, [sp, #12]
    5918:	9213      	str	r2, [sp, #76]	@ 0x4c
    591a:	9112      	str	r1, [sp, #72]	@ 0x48
            let n = 0;
    591c:	900c      	str	r0, [sp, #48]	@ 0x30
            let alarm = &self.alarms.borrow(cs);
    591e:	980a      	ldr	r0, [sp, #40]	@ 0x28
    5920:	f7fd fd8d 	bl	343e <_ZN12embassy_sync14blocking_mutex75Mutex$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$C$T$GT$6borrow17h1e5f41b1877ff8d1E>
    5924:	900d      	str	r0, [sp, #52]	@ 0x34
    5926:	a80d      	add	r0, sp, #52	@ 0x34
    5928:	9015      	str	r0, [sp, #84]	@ 0x54
            let at = alarm.timestamp.get();
    592a:	980d      	ldr	r0, [sp, #52]	@ 0x34
    592c:	f001 fa97 	bl	6e5e <_ZN4core4cell13Cell$LT$T$GT$3get17he2081a591ba2b4c2E>
    5930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    5932:	4602      	mov	r2, r0
    5934:	9802      	ldr	r0, [sp, #8]
    5936:	468c      	mov	ip, r1
    5938:	9903      	ldr	r1, [sp, #12]
    593a:	46e6      	mov	lr, ip
    593c:	f8cd e010 	str.w	lr, [sp, #16]
    5940:	4696      	mov	lr, r2
    5942:	f8cd e014 	str.w	lr, [sp, #20]
    5946:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
    594a:	9216      	str	r2, [sp, #88]	@ 0x58
    594c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
            if at < t + 0xc00000 {
    5950:	eb12 52c3 	adds.w	r2, r2, r3, lsl #23
    5954:	f141 0100 	adc.w	r1, r1, #0
    5958:	9206      	str	r2, [sp, #24]
    595a:	9107      	str	r1, [sp, #28]
    595c:	b970      	cbnz	r0, 597c <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E+0xb6>
    595e:	e005      	b.n	596c <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E+0xa6>
            let period = self.period.load(Ordering::Relaxed) + 1;
    5960:	f24d 00c8 	movw	r0, #53448	@ 0xd0c8
    5964:	f2c0 0000 	movt	r0, #0
    5968:	f005 fbdf 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
            if at < t + 0xc00000 {
    596c:	9804      	ldr	r0, [sp, #16]
    596e:	9907      	ldr	r1, [sp, #28]
    5970:	9a05      	ldr	r2, [sp, #20]
    5972:	9b06      	ldr	r3, [sp, #24]
    5974:	1ad2      	subs	r2, r2, r3
    5976:	4188      	sbcs	r0, r1
    5978:	d308      	bcc.n	598c <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E+0xc6>
    597a:	e005      	b.n	5988 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E+0xc2>
    597c:	f24d 00d8 	movw	r0, #53464	@ 0xd0d8
    5980:	f2c0 0000 	movt	r0, #0
    5984:	f005 fbd1 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
        })
    5988:	b024      	add	sp, #144	@ 0x90
    598a:	bd80      	pop	{r7, pc}
    598c:	9808      	ldr	r0, [sp, #32]
    598e:	9019      	str	r0, [sp, #100]	@ 0x64
    5990:	901a      	str	r0, [sp, #104]	@ 0x68
    5992:	f44f 7141 	mov.w	r1, #772	@ 0x304
    5996:	911b      	str	r1, [sp, #108]	@ 0x6c
        unsafe { intrinsics::offset(self, count) }
    5998:	f500 7041 	add.w	r0, r0, #772	@ 0x304
    599c:	9023      	str	r0, [sp, #140]	@ 0x8c
                r.intenset().write(|w| w.0 = compare_n(n));
    599e:	900e      	str	r0, [sp, #56]	@ 0x38
    59a0:	a80e      	add	r0, sp, #56	@ 0x38
    59a2:	9001      	str	r0, [sp, #4]
    59a4:	901d      	str	r0, [sp, #116]	@ 0x74
    59a6:	a80c      	add	r0, sp, #48	@ 0x30
    59a8:	901e      	str	r0, [sp, #120]	@ 0x78
    59aa:	2100      	movs	r1, #0
            let mut val = Default::default();
    59ac:	911c      	str	r1, [sp, #112]	@ 0x70
    59ae:	a91c      	add	r1, sp, #112	@ 0x70
            let res = f(&mut val);
    59b0:	f000 f80a 	bl	59c8 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hba303b972ed50424E>
    59b4:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    59b6:	991c      	ldr	r1, [sp, #112]	@ 0x70
    59b8:	901f      	str	r0, [sp, #124]	@ 0x7c
    59ba:	9120      	str	r1, [sp, #128]	@ 0x80
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    59bc:	980e      	ldr	r0, [sp, #56]	@ 0x38
    59be:	9021      	str	r0, [sp, #132]	@ 0x84
    59c0:	9122      	str	r1, [sp, #136]	@ 0x88
        unsafe { write_volatile(self, val) }
    59c2:	f7ff f806 	bl	49d2 <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E>
    59c6:	e7df      	b.n	5988 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$17h0e605c59246052a8E+0xc2>

000059c8 <_ZN11embassy_nrf11time_driver9RtcDriver11next_period28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hba303b972ed50424E>:
    59c8:	b580      	push	{r7, lr}
    59ca:	466f      	mov	r7, sp
    59cc:	b084      	sub	sp, #16
    59ce:	9101      	str	r1, [sp, #4]
    59d0:	9002      	str	r0, [sp, #8]
    59d2:	9103      	str	r1, [sp, #12]
    59d4:	9802      	ldr	r0, [sp, #8]
    59d6:	6800      	ldr	r0, [r0, #0]
    59d8:	f7ff fdfa 	bl	55d0 <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE>
    59dc:	9901      	ldr	r1, [sp, #4]
    59de:	6008      	str	r0, [r1, #0]
    59e0:	b004      	add	sp, #16
    59e2:	bd80      	pop	{r7, pc}

000059e4 <_ZN11embassy_nrf11time_driver9RtcDriver13trigger_alarm17hab5e0d13597c80fcE>:

    fn trigger_alarm(&self, cs: CriticalSection) {
    59e4:	b580      	push	{r7, lr}
    59e6:	466f      	mov	r7, sp
    59e8:	b0a2      	sub	sp, #136	@ 0x88
    59ea:	9005      	str	r0, [sp, #20]
    59ec:	9013      	str	r0, [sp, #76]	@ 0x4c
    59ee:	2000      	movs	r0, #0
        let n = 0;
    59f0:	9003      	str	r0, [sp, #12]
    59f2:	9009      	str	r0, [sp, #36]	@ 0x24
        let r = rtc();
    59f4:	f7ff fdc7 	bl	5586 <_ZN11embassy_nrf11time_driver3rtc17h6cae432e202c4cb3E>
    59f8:	9903      	ldr	r1, [sp, #12]
    59fa:	9015      	str	r0, [sp, #84]	@ 0x54
    59fc:	9017      	str	r0, [sp, #92]	@ 0x5c
    59fe:	9018      	str	r0, [sp, #96]	@ 0x60
    5a00:	f44f 7242 	mov.w	r2, #776	@ 0x308
    5a04:	9219      	str	r2, [sp, #100]	@ 0x64
        unsafe { intrinsics::offset(self, count) }
    5a06:	f500 7042 	add.w	r0, r0, #776	@ 0x308
    5a0a:	9021      	str	r0, [sp, #132]	@ 0x84
        r.intenclr().write(|w| w.0 = compare_n(n));
    5a0c:	900a      	str	r0, [sp, #40]	@ 0x28
    5a0e:	a80a      	add	r0, sp, #40	@ 0x28
    5a10:	9004      	str	r0, [sp, #16]
    5a12:	901b      	str	r0, [sp, #108]	@ 0x6c
    5a14:	a809      	add	r0, sp, #36	@ 0x24
    5a16:	901c      	str	r0, [sp, #112]	@ 0x70
            let mut val = Default::default();
    5a18:	911a      	str	r1, [sp, #104]	@ 0x68
    5a1a:	a91a      	add	r1, sp, #104	@ 0x68
            let res = f(&mut val);
    5a1c:	f000 f866 	bl	5aec <_ZN11embassy_nrf11time_driver9RtcDriver13trigger_alarm28_$u7b$$u7b$closure$u7d$$u7d$17hedacc254e3e7d208E>
    5a20:	9804      	ldr	r0, [sp, #16]
            self.write_value(val);
    5a22:	991a      	ldr	r1, [sp, #104]	@ 0x68
    5a24:	901d      	str	r0, [sp, #116]	@ 0x74
    5a26:	911e      	str	r1, [sp, #120]	@ 0x78
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    5a28:	980a      	ldr	r0, [sp, #40]	@ 0x28
    5a2a:	901f      	str	r0, [sp, #124]	@ 0x7c
    5a2c:	9120      	str	r1, [sp, #128]	@ 0x80
        unsafe { write_volatile(self, val) }
    5a2e:	f7fe ffd0 	bl	49d2 <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E>
    5a32:	9805      	ldr	r0, [sp, #20]

        let alarm = &self.alarms.borrow(cs);
    5a34:	f7fd fd03 	bl	343e <_ZN12embassy_sync14blocking_mutex75Mutex$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$C$T$GT$6borrow17h1e5f41b1877ff8d1E>
    5a38:	900b      	str	r0, [sp, #44]	@ 0x2c
    5a3a:	a80b      	add	r0, sp, #44	@ 0x2c
    5a3c:	9016      	str	r0, [sp, #88]	@ 0x58
        alarm.timestamp.set(u64::MAX);
    5a3e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    5a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    5a44:	461a      	mov	r2, r3
    5a46:	f001 fa13 	bl	6e70 <_ZN4core4cell13Cell$LT$T$GT$3set17h83929fdb7f08304eE>
    5a4a:	9805      	ldr	r0, [sp, #20]

        // Call after clearing alarm, so the callback can set another alarm.
        let mut next = self.queue.borrow(cs).borrow_mut().next_expiration(self.now());
    5a4c:	3008      	adds	r0, #8
    5a4e:	f7fd fcfe 	bl	344e <_ZN12embassy_sync14blocking_mutex75Mutex$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$C$T$GT$6borrow17h7d19149fad415fa7E>
    5a52:	f24d 01e8 	movw	r1, #53480	@ 0xd0e8
    5a56:	f2c0 0100 	movt	r1, #0
    5a5a:	f7ff fc90 	bl	537e <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h3473d87c90e6635aE>
    5a5e:	900f      	str	r0, [sp, #60]	@ 0x3c
    5a60:	9110      	str	r1, [sp, #64]	@ 0x40
    5a62:	a80f      	add	r0, sp, #60	@ 0x3c
    5a64:	9007      	str	r0, [sp, #28]
    5a66:	f7ff fd5b 	bl	5520 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf97b6e5f302903b9E>
    5a6a:	4601      	mov	r1, r0
    5a6c:	9805      	ldr	r0, [sp, #20]
    5a6e:	9106      	str	r1, [sp, #24]
    5a70:	f000 f9c0 	bl	5df4 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$3now17h89f5b0d02b75e73bE>
    5a74:	4602      	mov	r2, r0
    5a76:	9806      	ldr	r0, [sp, #24]
    5a78:	460b      	mov	r3, r1
    5a7a:	f001 fa94 	bl	6fa6 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration17haef54b140ae69a08E>
    5a7e:	4602      	mov	r2, r0
    5a80:	9807      	ldr	r0, [sp, #28]
    5a82:	9208      	str	r2, [sp, #32]
    5a84:	460a      	mov	r2, r1
    5a86:	9908      	ldr	r1, [sp, #32]
    5a88:	920d      	str	r2, [sp, #52]	@ 0x34
    5a8a:	910c      	str	r1, [sp, #48]	@ 0x30
    5a8c:	f7ff fc6e 	bl	536c <_ZN4core3ptr96drop_in_place$LT$core..cell..RefMut$LT$embassy_time_queue_utils..queue_integrated..Queue$GT$$GT$17hafb4628f37dd8751E>
    5a90:	e7ff      	b.n	5a92 <_ZN11embassy_nrf11time_driver9RtcDriver13trigger_alarm17hab5e0d13597c80fcE+0xae>
        while !self.set_alarm(cs, next) {
    5a92:	9805      	ldr	r0, [sp, #20]
    5a94:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    5a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    5a98:	f000 f836 	bl	5b08 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E>
    5a9c:	bb20      	cbnz	r0, 5ae8 <_ZN11embassy_nrf11time_driver9RtcDriver13trigger_alarm17hab5e0d13597c80fcE+0x104>
    5a9e:	e7ff      	b.n	5aa0 <_ZN11embassy_nrf11time_driver9RtcDriver13trigger_alarm17hab5e0d13597c80fcE+0xbc>
            next = self.queue.borrow(cs).borrow_mut().next_expiration(self.now());
    5aa0:	9805      	ldr	r0, [sp, #20]
    5aa2:	3008      	adds	r0, #8
    5aa4:	f7fd fcd3 	bl	344e <_ZN12embassy_sync14blocking_mutex75Mutex$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$C$T$GT$6borrow17h7d19149fad415fa7E>
    5aa8:	f24d 01f8 	movw	r1, #53496	@ 0xd0f8
    5aac:	f2c0 0100 	movt	r1, #0
    5ab0:	f7ff fc65 	bl	537e <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h3473d87c90e6635aE>
    5ab4:	9011      	str	r0, [sp, #68]	@ 0x44
    5ab6:	9112      	str	r1, [sp, #72]	@ 0x48
    5ab8:	a811      	add	r0, sp, #68	@ 0x44
    5aba:	9001      	str	r0, [sp, #4]
    5abc:	f7ff fd30 	bl	5520 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf97b6e5f302903b9E>
    5ac0:	4601      	mov	r1, r0
    5ac2:	9805      	ldr	r0, [sp, #20]
    5ac4:	9100      	str	r1, [sp, #0]
    5ac6:	f000 f995 	bl	5df4 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$3now17h89f5b0d02b75e73bE>
    5aca:	4602      	mov	r2, r0
    5acc:	9800      	ldr	r0, [sp, #0]
    5ace:	460b      	mov	r3, r1
    5ad0:	f001 fa69 	bl	6fa6 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration17haef54b140ae69a08E>
    5ad4:	4602      	mov	r2, r0
    5ad6:	9801      	ldr	r0, [sp, #4]
    5ad8:	9202      	str	r2, [sp, #8]
    5ada:	460a      	mov	r2, r1
    5adc:	9902      	ldr	r1, [sp, #8]
    5ade:	920d      	str	r2, [sp, #52]	@ 0x34
    5ae0:	910c      	str	r1, [sp, #48]	@ 0x30
    5ae2:	f7ff fc43 	bl	536c <_ZN4core3ptr96drop_in_place$LT$core..cell..RefMut$LT$embassy_time_queue_utils..queue_integrated..Queue$GT$$GT$17hafb4628f37dd8751E>
    5ae6:	e7d4      	b.n	5a92 <_ZN11embassy_nrf11time_driver9RtcDriver13trigger_alarm17hab5e0d13597c80fcE+0xae>
        }
    }
    5ae8:	b022      	add	sp, #136	@ 0x88
    5aea:	bd80      	pop	{r7, pc}

00005aec <_ZN11embassy_nrf11time_driver9RtcDriver13trigger_alarm28_$u7b$$u7b$closure$u7d$$u7d$17hedacc254e3e7d208E>:
        r.intenclr().write(|w| w.0 = compare_n(n));
    5aec:	b580      	push	{r7, lr}
    5aee:	466f      	mov	r7, sp
    5af0:	b084      	sub	sp, #16
    5af2:	9101      	str	r1, [sp, #4]
    5af4:	9002      	str	r0, [sp, #8]
    5af6:	9103      	str	r1, [sp, #12]
    5af8:	9802      	ldr	r0, [sp, #8]
    5afa:	6800      	ldr	r0, [r0, #0]
    5afc:	f7ff fd68 	bl	55d0 <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE>
    5b00:	9901      	ldr	r1, [sp, #4]
    5b02:	6008      	str	r0, [r1, #0]
    5b04:	b004      	add	sp, #16
    5b06:	bd80      	pop	{r7, pc}

00005b08 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E>:

    fn set_alarm(&self, cs: CriticalSection, timestamp: u64) -> bool {
    5b08:	b580      	push	{r7, lr}
    5b0a:	466f      	mov	r7, sp
    5b0c:	b0dc      	sub	sp, #368	@ 0x170
    5b0e:	9316      	str	r3, [sp, #88]	@ 0x58
    5b10:	9215      	str	r2, [sp, #84]	@ 0x54
    5b12:	9012      	str	r0, [sp, #72]	@ 0x48
    5b14:	4619      	mov	r1, r3
    5b16:	9113      	str	r1, [sp, #76]	@ 0x4c
    5b18:	4611      	mov	r1, r2
    5b1a:	9114      	str	r1, [sp, #80]	@ 0x50
    5b1c:	9022      	str	r0, [sp, #136]	@ 0x88
    5b1e:	9325      	str	r3, [sp, #148]	@ 0x94
    5b20:	9224      	str	r2, [sp, #144]	@ 0x90
    5b22:	2100      	movs	r1, #0
        let n = 0;
    5b24:	9119      	str	r1, [sp, #100]	@ 0x64
        let alarm = &self.alarms.borrow(cs);
    5b26:	f7fd fc8a 	bl	343e <_ZN12embassy_sync14blocking_mutex75Mutex$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$C$T$GT$6borrow17h1e5f41b1877ff8d1E>
    5b2a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
    5b2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
    5b2e:	901a      	str	r0, [sp, #104]	@ 0x68
    5b30:	a81a      	add	r0, sp, #104	@ 0x68
    5b32:	9028      	str	r0, [sp, #160]	@ 0xa0
        alarm.timestamp.set(timestamp);
    5b34:	981a      	ldr	r0, [sp, #104]	@ 0x68
    5b36:	f001 f99b 	bl	6e70 <_ZN4core4cell13Cell$LT$T$GT$3set17h83929fdb7f08304eE>

        let r = rtc();
    5b3a:	f7ff fd24 	bl	5586 <_ZN11embassy_nrf11time_driver3rtc17h6cae432e202c4cb3E>
    5b3e:	4601      	mov	r1, r0
    5b40:	9117      	str	r1, [sp, #92]	@ 0x5c
    5b42:	9029      	str	r0, [sp, #164]	@ 0xa4
    5b44:	e7ff      	b.n	5b46 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x3e>

        loop {
            let t = self.now();
    5b46:	9812      	ldr	r0, [sp, #72]	@ 0x48
    5b48:	f000 f954 	bl	5df4 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$3now17h89f5b0d02b75e73bE>
    5b4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    5b4e:	4602      	mov	r2, r0
    5b50:	9813      	ldr	r0, [sp, #76]	@ 0x4c
    5b52:	468c      	mov	ip, r1
    5b54:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
    5b58:	4694      	mov	ip, r2
    5b5a:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
    5b5e:	912b      	str	r1, [sp, #172]	@ 0xac
    5b60:	922a      	str	r2, [sp, #168]	@ 0xa8
            if timestamp <= t {
    5b62:	1ad2      	subs	r2, r2, r3
    5b64:	eb71 0000 	sbcs.w	r0, r1, r0
    5b68:	d20f      	bcs.n	5b8a <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x82>
    5b6a:	e7ff      	b.n	5b6c <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x64>
            // alarm, and retry if we are within the unsafe interval still.
            //
            // This means that an alarm can be delayed for up to 2 ticks (from t+1 to t+3), but this is allowed
            // by the Alarm trait contract. What's not allowed is triggering alarms *before* their scheduled time,
            // and we don't do that here.
            let safe_timestamp = timestamp.max(t + 3);
    5b6c:	9810      	ldr	r0, [sp, #64]	@ 0x40
    5b6e:	9911      	ldr	r1, [sp, #68]	@ 0x44
    5b70:	1cca      	adds	r2, r1, #3
    5b72:	f150 0100 	adcs.w	r1, r0, #0
    5b76:	f04f 0000 	mov.w	r0, #0
    5b7a:	f140 0000 	adc.w	r0, r0, #0
    5b7e:	920e      	str	r2, [sp, #56]	@ 0x38
    5b80:	910f      	str	r1, [sp, #60]	@ 0x3c
    5b82:	2800      	cmp	r0, #0
    5b84:	f040 8082 	bne.w	5c8c <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x184>
    5b88:	e027      	b.n	5bda <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0xd2>
    5b8a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
    5b8c:	9033      	str	r0, [sp, #204]	@ 0xcc
    5b8e:	9034      	str	r0, [sp, #208]	@ 0xd0
    5b90:	f44f 7142 	mov.w	r1, #776	@ 0x308
    5b94:	9135      	str	r1, [sp, #212]	@ 0xd4
        unsafe { intrinsics::offset(self, count) }
    5b96:	f500 7042 	add.w	r0, r0, #776	@ 0x308
    5b9a:	905b      	str	r0, [sp, #364]	@ 0x16c
                r.intenclr().write(|w| w.0 = compare_n(n));
    5b9c:	901b      	str	r0, [sp, #108]	@ 0x6c
    5b9e:	a81b      	add	r0, sp, #108	@ 0x6c
    5ba0:	900c      	str	r0, [sp, #48]	@ 0x30
    5ba2:	9044      	str	r0, [sp, #272]	@ 0x110
    5ba4:	a819      	add	r0, sp, #100	@ 0x64
    5ba6:	9045      	str	r0, [sp, #276]	@ 0x114
    5ba8:	2100      	movs	r1, #0
            let mut val = Default::default();
    5baa:	910d      	str	r1, [sp, #52]	@ 0x34
    5bac:	9143      	str	r1, [sp, #268]	@ 0x10c
    5bae:	a943      	add	r1, sp, #268	@ 0x10c
            let res = f(&mut val);
    5bb0:	f000 f8e5 	bl	5d7e <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm28_$u7b$$u7b$closure$u7d$$u7d$17h368c68a79e9c801dE>
    5bb4:	980c      	ldr	r0, [sp, #48]	@ 0x30
            self.write_value(val);
    5bb6:	9943      	ldr	r1, [sp, #268]	@ 0x10c
    5bb8:	9046      	str	r0, [sp, #280]	@ 0x118
    5bba:	9147      	str	r1, [sp, #284]	@ 0x11c
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    5bbc:	981b      	ldr	r0, [sp, #108]	@ 0x6c
    5bbe:	9048      	str	r0, [sp, #288]	@ 0x120
    5bc0:	9149      	str	r1, [sp, #292]	@ 0x124
        unsafe { write_volatile(self, val) }
    5bc2:	f7fe ff06 	bl	49d2 <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E>
                alarm.timestamp.set(u64::MAX);
    5bc6:	981a      	ldr	r0, [sp, #104]	@ 0x68
    5bc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    5bcc:	461a      	mov	r2, r3
    5bce:	f001 f94f 	bl	6e70 <_ZN4core4cell13Cell$LT$T$GT$3set17h83929fdb7f08304eE>
    5bd2:	980d      	ldr	r0, [sp, #52]	@ 0x34
                return false;
    5bd4:	f88d 0063 	strb.w	r0, [sp, #99]	@ 0x63
    5bd8:	e0bb      	b.n	5d52 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x24a>
            let safe_timestamp = timestamp.max(t + 3);
    5bda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    5bdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    5bde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
    5be0:	9814      	ldr	r0, [sp, #80]	@ 0x50
    5be2:	f7fe fe1c 	bl	481e <_ZN4core3cmp3Ord3max17h3ace5c9a00b1badbE>
    5be6:	460a      	mov	r2, r1
    5be8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
    5bea:	921d      	str	r2, [sp, #116]	@ 0x74
    5bec:	901c      	str	r0, [sp, #112]	@ 0x70
            r.cc(n).write(|w| w.set_compare(safe_timestamp as u32 & 0xFFFFFF));
    5bee:	9819      	ldr	r0, [sp, #100]	@ 0x64
    5bf0:	900b      	str	r0, [sp, #44]	@ 0x2c
    5bf2:	912f      	str	r1, [sp, #188]	@ 0xbc
    5bf4:	9030      	str	r0, [sp, #192]	@ 0xc0
            assert!(n < 4usize);
    5bf6:	2804      	cmp	r0, #4
    5bf8:	d30b      	bcc.n	5c12 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x10a>
    5bfa:	e7ff      	b.n	5bfc <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0xf4>
    5bfc:	f64c 706c 	movw	r0, #53100	@ 0xcf6c
    5c00:	f2c0 0000 	movt	r0, #0
    5c04:	f64c 72fc 	movw	r2, #53244	@ 0xcffc
    5c08:	f2c0 0200 	movt	r2, #0
    5c0c:	211c      	movs	r1, #28
    5c0e:	f004 fc2c 	bl	a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>
            unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0540usize + n * 4usize) as _) }
    5c12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    5c14:	0088      	lsls	r0, r1, #2
    5c16:	0f89      	lsrs	r1, r1, #30
    5c18:	900a      	str	r0, [sp, #40]	@ 0x28
    5c1a:	b939      	cbnz	r1, 5c2c <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x124>
    5c1c:	e7ff      	b.n	5c1e <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x116>
    5c1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
    5c20:	f501 60a8 	add.w	r0, r1, #1344	@ 0x540
    5c24:	4288      	cmp	r0, r1
    5c26:	9009      	str	r0, [sp, #36]	@ 0x24
    5c28:	d306      	bcc.n	5c38 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x130>
    5c2a:	e00b      	b.n	5c44 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x13c>
    5c2c:	f24d 000c 	movw	r0, #53260	@ 0xd00c
    5c30:	f2c0 0000 	movt	r0, #0
    5c34:	f005 fa9f 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>
    5c38:	f24d 001c 	movw	r0, #53276	@ 0xd01c
    5c3c:	f2c0 0000 	movt	r0, #0
    5c40:	f005 fa73 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    5c44:	9817      	ldr	r0, [sp, #92]	@ 0x5c
    5c46:	9909      	ldr	r1, [sp, #36]	@ 0x24
    5c48:	9031      	str	r0, [sp, #196]	@ 0xc4
    5c4a:	9132      	str	r1, [sp, #200]	@ 0xc8
        unsafe { intrinsics::offset(self, count) }
    5c4c:	4408      	add	r0, r1
    5c4e:	9058      	str	r0, [sp, #352]	@ 0x160
    5c50:	901f      	str	r0, [sp, #124]	@ 0x7c
    5c52:	a81f      	add	r0, sp, #124	@ 0x7c
    5c54:	9006      	str	r0, [sp, #24]
    5c56:	903d      	str	r0, [sp, #244]	@ 0xf4
    5c58:	a81c      	add	r0, sp, #112	@ 0x70
    5c5a:	903e      	str	r0, [sp, #248]	@ 0xf8
    5c5c:	2100      	movs	r1, #0
            let mut val = Default::default();
    5c5e:	913c      	str	r1, [sp, #240]	@ 0xf0
    5c60:	a93c      	add	r1, sp, #240	@ 0xf0
            let res = f(&mut val);
    5c62:	f000 f89a 	bl	5d9a <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm28_$u7b$$u7b$closure$u7d$$u7d$17h596f1f5f6e77356eE>
    5c66:	9806      	ldr	r0, [sp, #24]
            self.write_value(val);
    5c68:	993c      	ldr	r1, [sp, #240]	@ 0xf0
    5c6a:	903f      	str	r0, [sp, #252]	@ 0xfc
    5c6c:	9140      	str	r1, [sp, #256]	@ 0x100
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    5c6e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
    5c70:	9041      	str	r0, [sp, #260]	@ 0x104
    5c72:	9142      	str	r1, [sp, #264]	@ 0x108
        unsafe { write_volatile(self, val) }
    5c74:	f7fe fe9a 	bl	49ac <_ZN4core3ptr14write_volatile17h0953c3a8be95fceaE>
    5c78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    5c7a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
    5c7c:	9910      	ldr	r1, [sp, #64]	@ 0x40
    5c7e:	9813      	ldr	r0, [sp, #76]	@ 0x4c

            let diff = timestamp - t;
    5c80:	1ad2      	subs	r2, r2, r3
    5c82:	9207      	str	r2, [sp, #28]
    5c84:	4188      	sbcs	r0, r1
    5c86:	9008      	str	r0, [sp, #32]
    5c88:	d310      	bcc.n	5cac <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x1a4>
    5c8a:	e005      	b.n	5c98 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x190>
            let safe_timestamp = timestamp.max(t + 3);
    5c8c:	f24d 1008 	movw	r0, #53512	@ 0xd108
    5c90:	f2c0 0000 	movt	r0, #0
    5c94:	f005 fa49 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
            let diff = timestamp - t;
    5c98:	9808      	ldr	r0, [sp, #32]
    5c9a:	9907      	ldr	r1, [sp, #28]
    5c9c:	912c      	str	r1, [sp, #176]	@ 0xb0
    5c9e:	902d      	str	r0, [sp, #180]	@ 0xb4
            if diff < 0xc00000 {
    5ca0:	f5b1 0140 	subs.w	r1, r1, #12582912	@ 0xc00000
    5ca4:	f170 0000 	sbcs.w	r0, r0, #0
    5ca8:	d327      	bcc.n	5cfa <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x1f2>
    5caa:	e005      	b.n	5cb8 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x1b0>
            let diff = timestamp - t;
    5cac:	f24d 1018 	movw	r0, #53528	@ 0xd118
    5cb0:	f2c0 0000 	movt	r0, #0
    5cb4:	f005 fa4c 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    5cb8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
    5cba:	9036      	str	r0, [sp, #216]	@ 0xd8
    5cbc:	9037      	str	r0, [sp, #220]	@ 0xdc
    5cbe:	f44f 7142 	mov.w	r1, #776	@ 0x308
    5cc2:	9138      	str	r1, [sp, #224]	@ 0xe0
        unsafe { intrinsics::offset(self, count) }
    5cc4:	f500 7042 	add.w	r0, r0, #776	@ 0x308
    5cc8:	905a      	str	r0, [sp, #360]	@ 0x168
                    return true;
                }
            } else {
                // If it's too far in the future, don't setup the compare channel yet.
                // It will be setup later by `next_period`.
                r.intenclr().write(|w| w.0 = compare_n(n));
    5cca:	9021      	str	r0, [sp, #132]	@ 0x84
    5ccc:	a821      	add	r0, sp, #132	@ 0x84
    5cce:	9005      	str	r0, [sp, #20]
    5cd0:	9052      	str	r0, [sp, #328]	@ 0x148
    5cd2:	a819      	add	r0, sp, #100	@ 0x64
    5cd4:	9053      	str	r0, [sp, #332]	@ 0x14c
    5cd6:	2100      	movs	r1, #0
            let mut val = Default::default();
    5cd8:	9151      	str	r1, [sp, #324]	@ 0x144
    5cda:	a951      	add	r1, sp, #324	@ 0x144
            let res = f(&mut val);
    5cdc:	f000 f87c 	bl	5dd8 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm28_$u7b$$u7b$closure$u7d$$u7d$17hfc785dcaf6a579beE>
    5ce0:	9805      	ldr	r0, [sp, #20]
            self.write_value(val);
    5ce2:	9951      	ldr	r1, [sp, #324]	@ 0x144
    5ce4:	9054      	str	r0, [sp, #336]	@ 0x150
    5ce6:	9155      	str	r1, [sp, #340]	@ 0x154
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    5ce8:	9821      	ldr	r0, [sp, #132]	@ 0x84
    5cea:	9056      	str	r0, [sp, #344]	@ 0x158
    5cec:	9157      	str	r1, [sp, #348]	@ 0x15c
        unsafe { write_volatile(self, val) }
    5cee:	f7fe fe70 	bl	49d2 <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E>
    5cf2:	2001      	movs	r0, #1
                return true;
    5cf4:	f88d 0063 	strb.w	r0, [sp, #99]	@ 0x63
    5cf8:	e02b      	b.n	5d52 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x24a>
    5cfa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
    5cfc:	9039      	str	r0, [sp, #228]	@ 0xe4
    5cfe:	903a      	str	r0, [sp, #232]	@ 0xe8
    5d00:	f44f 7141 	mov.w	r1, #772	@ 0x304
    5d04:	913b      	str	r1, [sp, #236]	@ 0xec
        unsafe { intrinsics::offset(self, count) }
    5d06:	f500 7041 	add.w	r0, r0, #772	@ 0x304
    5d0a:	9059      	str	r0, [sp, #356]	@ 0x164
                r.intenset().write(|w| w.0 = compare_n(n));
    5d0c:	9020      	str	r0, [sp, #128]	@ 0x80
    5d0e:	a820      	add	r0, sp, #128	@ 0x80
    5d10:	9001      	str	r0, [sp, #4]
    5d12:	904b      	str	r0, [sp, #300]	@ 0x12c
    5d14:	a819      	add	r0, sp, #100	@ 0x64
    5d16:	904c      	str	r0, [sp, #304]	@ 0x130
    5d18:	2100      	movs	r1, #0
            let mut val = Default::default();
    5d1a:	9102      	str	r1, [sp, #8]
    5d1c:	914a      	str	r1, [sp, #296]	@ 0x128
    5d1e:	a94a      	add	r1, sp, #296	@ 0x128
            let res = f(&mut val);
    5d20:	f000 f84c 	bl	5dbc <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm28_$u7b$$u7b$closure$u7d$$u7d$17he1f12dec6f403403E>
    5d24:	9801      	ldr	r0, [sp, #4]
            self.write_value(val);
    5d26:	994a      	ldr	r1, [sp, #296]	@ 0x128
    5d28:	904d      	str	r0, [sp, #308]	@ 0x134
    5d2a:	914e      	str	r1, [sp, #312]	@ 0x138
            unsafe { (self.ptr as *mut T).write_volatile(val) }
    5d2c:	9820      	ldr	r0, [sp, #128]	@ 0x80
    5d2e:	904f      	str	r0, [sp, #316]	@ 0x13c
    5d30:	9150      	str	r1, [sp, #320]	@ 0x140
        unsafe { write_volatile(self, val) }
    5d32:	f7fe fe4e 	bl	49d2 <_ZN4core3ptr14write_volatile17h33b55eb821a50f48E>
    5d36:	9812      	ldr	r0, [sp, #72]	@ 0x48
                if self.now() + 2 <= timestamp {
    5d38:	f000 f85c 	bl	5df4 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$3now17h89f5b0d02b75e73bE>
    5d3c:	4602      	mov	r2, r0
    5d3e:	9802      	ldr	r0, [sp, #8]
    5d40:	3202      	adds	r2, #2
    5d42:	f151 0100 	adcs.w	r1, r1, #0
    5d46:	f140 0000 	adc.w	r0, r0, #0
    5d4a:	9203      	str	r2, [sp, #12]
    5d4c:	9104      	str	r1, [sp, #16]
    5d4e:	b960      	cbnz	r0, 5d6a <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x262>
    5d50:	e003      	b.n	5d5a <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x252>
            }
        }
    }
    5d52:	f89d 0063 	ldrb.w	r0, [sp, #99]	@ 0x63
    5d56:	b05c      	add	sp, #368	@ 0x170
    5d58:	bd80      	pop	{r7, pc}
                if self.now() + 2 <= timestamp {
    5d5a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
    5d5c:	9904      	ldr	r1, [sp, #16]
    5d5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
    5d60:	9b03      	ldr	r3, [sp, #12]
    5d62:	1ad2      	subs	r2, r2, r3
    5d64:	4188      	sbcs	r0, r1
    5d66:	d206      	bcs.n	5d76 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x26e>
    5d68:	e6ed      	b.n	5b46 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x3e>
    5d6a:	f24d 1028 	movw	r0, #53544	@ 0xd128
    5d6e:	f2c0 0000 	movt	r0, #0
    5d72:	f005 f9da 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    5d76:	2001      	movs	r0, #1
                    return true;
    5d78:	f88d 0063 	strb.w	r0, [sp, #99]	@ 0x63
    5d7c:	e7e9      	b.n	5d52 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E+0x24a>

00005d7e <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm28_$u7b$$u7b$closure$u7d$$u7d$17h368c68a79e9c801dE>:
                r.intenclr().write(|w| w.0 = compare_n(n));
    5d7e:	b580      	push	{r7, lr}
    5d80:	466f      	mov	r7, sp
    5d82:	b084      	sub	sp, #16
    5d84:	9101      	str	r1, [sp, #4]
    5d86:	9002      	str	r0, [sp, #8]
    5d88:	9103      	str	r1, [sp, #12]
    5d8a:	9802      	ldr	r0, [sp, #8]
    5d8c:	6800      	ldr	r0, [r0, #0]
    5d8e:	f7ff fc1f 	bl	55d0 <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE>
    5d92:	9901      	ldr	r1, [sp, #4]
    5d94:	6008      	str	r0, [r1, #0]
    5d96:	b004      	add	sp, #16
    5d98:	bd80      	pop	{r7, pc}

00005d9a <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm28_$u7b$$u7b$closure$u7d$$u7d$17h596f1f5f6e77356eE>:
            r.cc(n).write(|w| w.set_compare(safe_timestamp as u32 & 0xFFFFFF));
    5d9a:	b580      	push	{r7, lr}
    5d9c:	466f      	mov	r7, sp
    5d9e:	b084      	sub	sp, #16
    5da0:	9000      	str	r0, [sp, #0]
    5da2:	9101      	str	r1, [sp, #4]
    5da4:	9800      	ldr	r0, [sp, #0]
    5da6:	6802      	ldr	r2, [r0, #0]
    5da8:	f022 407f 	bic.w	r0, r2, #4278190080	@ 0xff000000
    5dac:	9102      	str	r1, [sp, #8]
    5dae:	9003      	str	r0, [sp, #12]
                    (self.0 & !(0x00ff_ffff << 0usize)) | (((val as u32) & 0x00ff_ffff) << 0usize);
    5db0:	6808      	ldr	r0, [r1, #0]
                self.0 =
    5db2:	f362 0017 	bfi	r0, r2, #0, #24
    5db6:	6008      	str	r0, [r1, #0]
    5db8:	b004      	add	sp, #16
    5dba:	bd80      	pop	{r7, pc}

00005dbc <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm28_$u7b$$u7b$closure$u7d$$u7d$17he1f12dec6f403403E>:
                r.intenset().write(|w| w.0 = compare_n(n));
    5dbc:	b580      	push	{r7, lr}
    5dbe:	466f      	mov	r7, sp
    5dc0:	b084      	sub	sp, #16
    5dc2:	9101      	str	r1, [sp, #4]
    5dc4:	9002      	str	r0, [sp, #8]
    5dc6:	9103      	str	r1, [sp, #12]
    5dc8:	9802      	ldr	r0, [sp, #8]
    5dca:	6800      	ldr	r0, [r0, #0]
    5dcc:	f7ff fc00 	bl	55d0 <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE>
    5dd0:	9901      	ldr	r1, [sp, #4]
    5dd2:	6008      	str	r0, [r1, #0]
    5dd4:	b004      	add	sp, #16
    5dd6:	bd80      	pop	{r7, pc}

00005dd8 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm28_$u7b$$u7b$closure$u7d$$u7d$17hfc785dcaf6a579beE>:
                r.intenclr().write(|w| w.0 = compare_n(n));
    5dd8:	b580      	push	{r7, lr}
    5dda:	466f      	mov	r7, sp
    5ddc:	b084      	sub	sp, #16
    5dde:	9101      	str	r1, [sp, #4]
    5de0:	9002      	str	r0, [sp, #8]
    5de2:	9103      	str	r1, [sp, #12]
    5de4:	9802      	ldr	r0, [sp, #8]
    5de6:	6800      	ldr	r0, [r0, #0]
    5de8:	f7ff fbf2 	bl	55d0 <_ZN11embassy_nrf11time_driver9compare_n17hd4d2a513edd2265dE>
    5dec:	9901      	ldr	r1, [sp, #4]
    5dee:	6008      	str	r0, [r1, #0]
    5df0:	b004      	add	sp, #16
    5df2:	bd80      	pop	{r7, pc}

00005df4 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$3now17h89f5b0d02b75e73bE>:
}

impl Driver for RtcDriver {
    fn now(&self) -> u64 {
    5df4:	b580      	push	{r7, lr}
    5df6:	466f      	mov	r7, sp
    5df8:	b08c      	sub	sp, #48	@ 0x30
    5dfa:	9003      	str	r0, [sp, #12]
        // `period` MUST be read before `counter`, see comment at the top for details.
        let period = self.period.load(Ordering::Relaxed);
    5dfc:	3010      	adds	r0, #16
    5dfe:	2100      	movs	r1, #0
    5e00:	f807 1c2a 	strb.w	r1, [r7, #-42]
    5e04:	f817 1c2a 	ldrb.w	r1, [r7, #-42]
    5e08:	f7ff fb49 	bl	549e <_ZN4core4sync6atomic9AtomicU324load17hac04ba279cff7a80E>
    5e0c:	9000      	str	r0, [sp, #0]
    5e0e:	9004      	str	r0, [sp, #16]
    5e10:	2002      	movs	r0, #2
        compiler_fence(Ordering::Acquire);
    5e12:	f807 0c29 	strb.w	r0, [r7, #-41]
    5e16:	f817 0c29 	ldrb.w	r0, [r7, #-41]
    5e1a:	f7ff fb0d 	bl	5438 <_ZN4core4sync6atomic14compiler_fence17hf091fd9f1354186aE>
        let counter = rtc().counter().read().0;
    5e1e:	f7ff fbb2 	bl	5586 <_ZN11embassy_nrf11time_driver3rtc17h6cae432e202c4cb3E>
    5e22:	9006      	str	r0, [sp, #24]
    5e24:	9007      	str	r0, [sp, #28]
    5e26:	f240 5104 	movw	r1, #1284	@ 0x504
    5e2a:	9108      	str	r1, [sp, #32]
        unsafe { intrinsics::offset(self, count) }
    5e2c:	f200 5004 	addw	r0, r0, #1284	@ 0x504
    5e30:	900b      	str	r0, [sp, #44]	@ 0x2c
    5e32:	9002      	str	r0, [sp, #8]
    5e34:	a802      	add	r0, sp, #8
    5e36:	9009      	str	r0, [sp, #36]	@ 0x24
            unsafe { (self.ptr as *mut T).read_volatile() }
    5e38:	9802      	ldr	r0, [sp, #8]
    5e3a:	900a      	str	r0, [sp, #40]	@ 0x28
        unsafe { read_volatile(self) }
    5e3c:	f7fe fd35 	bl	48aa <_ZN4core3ptr13read_volatile17hb1774360b4e696f1E>
    5e40:	4601      	mov	r1, r0
    5e42:	9800      	ldr	r0, [sp, #0]
    5e44:	9105      	str	r1, [sp, #20]
        calc_now(period, counter)
    5e46:	f7ff fba5 	bl	5594 <_ZN11embassy_nrf11time_driver8calc_now17h69316a6e0d867fafE>
    }
    5e4a:	b00c      	add	sp, #48	@ 0x30
    5e4c:	bd80      	pop	{r7, pc}

00005e4e <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake17hf21d66c8d13a0d31E>:

    fn schedule_wake(&self, at: u64, waker: &core::task::Waker) {
    5e4e:	b580      	push	{r7, lr}
    5e50:	466f      	mov	r7, sp
    5e52:	b086      	sub	sp, #24
    5e54:	4601      	mov	r1, r0
    5e56:	68b8      	ldr	r0, [r7, #8]
    5e58:	9301      	str	r3, [sp, #4]
    5e5a:	9200      	str	r2, [sp, #0]
    5e5c:	9105      	str	r1, [sp, #20]
        critical_section::with(|cs| {
    5e5e:	9102      	str	r1, [sp, #8]
    5e60:	4669      	mov	r1, sp
    5e62:	9103      	str	r1, [sp, #12]
    5e64:	9004      	str	r0, [sp, #16]
    5e66:	a802      	add	r0, sp, #8
    5e68:	f7fe fc8c 	bl	4784 <_ZN16critical_section4with17h0933792ccedbd9a3E>
                while !self.set_alarm(cs, next) {
                    next = queue.next_expiration(self.now());
                }
            }
        })
    }
    5e6c:	b006      	add	sp, #24
    5e6e:	bd80      	pop	{r7, pc}

00005e70 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake28_$u7b$$u7b$closure$u7d$$u7d$17h20bdbf548a4d78a7E>:
        critical_section::with(|cs| {
    5e70:	b580      	push	{r7, lr}
    5e72:	466f      	mov	r7, sp
    5e74:	b08a      	sub	sp, #40	@ 0x28
    fn schedule_wake(&self, at: u64, waker: &core::task::Waker) {
    5e76:	9003      	str	r0, [sp, #12]
            let mut queue = self.queue.borrow(cs).borrow_mut();
    5e78:	6800      	ldr	r0, [r0, #0]
    5e7a:	3008      	adds	r0, #8
    5e7c:	f7fd fae7 	bl	344e <_ZN12embassy_sync14blocking_mutex75Mutex$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$C$T$GT$6borrow17h7d19149fad415fa7E>
    5e80:	f24d 1138 	movw	r1, #53560	@ 0xd138
    5e84:	f2c0 0100 	movt	r1, #0
    5e88:	f7ff fa79 	bl	537e <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h3473d87c90e6635aE>
    5e8c:	9004      	str	r0, [sp, #16]
    5e8e:	9105      	str	r1, [sp, #20]
    5e90:	a804      	add	r0, sp, #16
            if queue.schedule_wake(at, waker) {
    5e92:	f7ff fb45 	bl	5520 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf97b6e5f302903b9E>
    5e96:	9903      	ldr	r1, [sp, #12]
    5e98:	684b      	ldr	r3, [r1, #4]
    5e9a:	6889      	ldr	r1, [r1, #8]
    5e9c:	681a      	ldr	r2, [r3, #0]
    5e9e:	685b      	ldr	r3, [r3, #4]
    5ea0:	46ec      	mov	ip, sp
    5ea2:	f8cc 1000 	str.w	r1, [ip]
    5ea6:	f001 f81f 	bl	6ee8 <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE>
    5eaa:	b928      	cbnz	r0, 5eb8 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake28_$u7b$$u7b$closure$u7d$$u7d$17h20bdbf548a4d78a7E+0x48>
    5eac:	e7ff      	b.n	5eae <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake28_$u7b$$u7b$closure$u7d$$u7d$17h20bdbf548a4d78a7E+0x3e>
    5eae:	a804      	add	r0, sp, #16
        })
    5eb0:	f7ff fa5c 	bl	536c <_ZN4core3ptr96drop_in_place$LT$core..cell..RefMut$LT$embassy_time_queue_utils..queue_integrated..Queue$GT$$GT$17hafb4628f37dd8751E>
    5eb4:	b00a      	add	sp, #40	@ 0x28
    5eb6:	bd80      	pop	{r7, pc}
    5eb8:	a804      	add	r0, sp, #16
                let mut next = queue.next_expiration(self.now());
    5eba:	f7ff fb31 	bl	5520 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf97b6e5f302903b9E>
    5ebe:	4601      	mov	r1, r0
    5ec0:	9803      	ldr	r0, [sp, #12]
    5ec2:	9102      	str	r1, [sp, #8]
    5ec4:	6800      	ldr	r0, [r0, #0]
    5ec6:	f7ff ff95 	bl	5df4 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$3now17h89f5b0d02b75e73bE>
    5eca:	4602      	mov	r2, r0
    5ecc:	9802      	ldr	r0, [sp, #8]
    5ece:	460b      	mov	r3, r1
    5ed0:	f001 f869 	bl	6fa6 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration17haef54b140ae69a08E>
    5ed4:	9107      	str	r1, [sp, #28]
    5ed6:	9006      	str	r0, [sp, #24]
    5ed8:	e7ff      	b.n	5eda <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake28_$u7b$$u7b$closure$u7d$$u7d$17h20bdbf548a4d78a7E+0x6a>
                while !self.set_alarm(cs, next) {
    5eda:	9803      	ldr	r0, [sp, #12]
    5edc:	6800      	ldr	r0, [r0, #0]
    5ede:	9a06      	ldr	r2, [sp, #24]
    5ee0:	9b07      	ldr	r3, [sp, #28]
    5ee2:	f7ff fe11 	bl	5b08 <_ZN11embassy_nrf11time_driver9RtcDriver9set_alarm17h7b0dae1d6878ea29E>
    5ee6:	2800      	cmp	r0, #0
    5ee8:	d1e1      	bne.n	5eae <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake28_$u7b$$u7b$closure$u7d$$u7d$17h20bdbf548a4d78a7E+0x3e>
    5eea:	e7ff      	b.n	5eec <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake28_$u7b$$u7b$closure$u7d$$u7d$17h20bdbf548a4d78a7E+0x7c>
    5eec:	a804      	add	r0, sp, #16
                    next = queue.next_expiration(self.now());
    5eee:	f7ff fb17 	bl	5520 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf97b6e5f302903b9E>
    5ef2:	4601      	mov	r1, r0
    5ef4:	9803      	ldr	r0, [sp, #12]
    5ef6:	9101      	str	r1, [sp, #4]
    5ef8:	6800      	ldr	r0, [r0, #0]
    5efa:	f7ff ff7b 	bl	5df4 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$3now17h89f5b0d02b75e73bE>
    5efe:	4602      	mov	r2, r0
    5f00:	9801      	ldr	r0, [sp, #4]
    5f02:	460b      	mov	r3, r1
    5f04:	f001 f84f 	bl	6fa6 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration17haef54b140ae69a08E>
    5f08:	9107      	str	r1, [sp, #28]
    5f0a:	9006      	str	r0, [sp, #24]
                while !self.set_alarm(cs, next) {
    5f0c:	e7e5      	b.n	5eda <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake28_$u7b$$u7b$closure$u7d$$u7d$17h20bdbf548a4d78a7E+0x6a>

00005f0e <_ZN11embassy_nrf11time_driver4init17hb4b4f9d91b178c68E>:
#[interrupt]
fn RTC1() {
    DRIVER.on_interrupt()
}

pub(crate) fn init(irq_prio: crate::interrupt::Priority) {
    5f0e:	b580      	push	{r7, lr}
    5f10:	466f      	mov	r7, sp
    5f12:	b082      	sub	sp, #8
    5f14:	4601      	mov	r1, r0
    5f16:	f807 1c01 	strb.w	r1, [r7, #-1]
    DRIVER.init(irq_prio)
    5f1a:	f240 0000 	movw	r0, #0
    5f1e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    5f22:	f7ff fb77 	bl	5614 <_ZN11embassy_nrf11time_driver9RtcDriver4init17hd8c88f7c14be4472E>
}
    5f26:	b002      	add	sp, #8
    5f28:	bd80      	pop	{r7, pc}

00005f2a <_ZN70_$LT$embassy_nrf..config..Config$u20$as$u20$core..default..Default$GT$7default17hf5f331165a1fac15E>:
        fn default() -> Self {
    5f2a:	b580      	push	{r7, lr}
    5f2c:	466f      	mov	r7, sp
    5f2e:	b082      	sub	sp, #8
    5f30:	4601      	mov	r1, r0
    5f32:	2000      	movs	r0, #0
                hfclk_source: HfclkSource::Internal,
    5f34:	f807 0c05 	strb.w	r0, [r7, #-5]
                lfclk_source: LfclkSource::InternalRC,
    5f38:	f88d 0004 	strb.w	r0, [sp, #4]
                gpiote_interrupt_priority: crate::interrupt::Priority::P0,
    5f3c:	f807 0c03 	strb.w	r0, [r7, #-3]
                time_interrupt_priority: crate::interrupt::Priority::P0,
    5f40:	f807 0c02 	strb.w	r0, [r7, #-2]
                debug: Debug::Allowed,
    5f44:	f807 0c01 	strb.w	r0, [r7, #-1]
            Self {
    5f48:	f817 2c05 	ldrb.w	r2, [r7, #-5]
    5f4c:	700a      	strb	r2, [r1, #0]
    5f4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5f52:	70ca      	strb	r2, [r1, #3]
    5f54:	7048      	strb	r0, [r1, #1]
    5f56:	f817 0c03 	ldrb.w	r0, [r7, #-3]
    5f5a:	7108      	strb	r0, [r1, #4]
    5f5c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
    5f60:	7148      	strb	r0, [r1, #5]
    5f62:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    5f66:	7088      	strb	r0, [r1, #2]
        }
    5f68:	b002      	add	sp, #8
    5f6a:	bd80      	pop	{r7, pc}

00005f6c <_embassy_time_now>:
macro_rules! time_driver_impl {
    (static $name:ident: $t: ty = $val:expr) => {
        static $name: $t = $val;

        #[no_mangle]
        fn _embassy_time_now() -> u64 {
    5f6c:	b580      	push	{r7, lr}
    5f6e:	466f      	mov	r7, sp
            <$t as $crate::Driver>::now(&$name)
    5f70:	f240 0000 	movw	r0, #0
    5f74:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    5f78:	f7ff ff3c 	bl	5df4 <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$3now17h89f5b0d02b75e73bE>
        }
    5f7c:	bd80      	pop	{r7, pc}

00005f7e <_embassy_time_schedule_wake>:

        #[no_mangle]
        fn _embassy_time_schedule_wake(at: u64, waker: &core::task::Waker) {
    5f7e:	b580      	push	{r7, lr}
    5f80:	466f      	mov	r7, sp
    5f82:	b086      	sub	sp, #24
    5f84:	9201      	str	r2, [sp, #4]
    5f86:	460b      	mov	r3, r1
    5f88:	4602      	mov	r2, r0
    5f8a:	9801      	ldr	r0, [sp, #4]
    5f8c:	9303      	str	r3, [sp, #12]
    5f8e:	9202      	str	r2, [sp, #8]
    5f90:	9005      	str	r0, [sp, #20]
            <$t as $crate::Driver>::schedule_wake(&$name, at, waker);
    5f92:	4669      	mov	r1, sp
    5f94:	6008      	str	r0, [r1, #0]
    5f96:	f240 0000 	movw	r0, #0
    5f9a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    5f9e:	f7ff ff56 	bl	5e4e <_ZN83_$LT$embassy_nrf..time_driver..RtcDriver$u20$as$u20$embassy_time_driver..Driver$GT$13schedule_wake17hf21d66c8d13a0d31E>
        }
    5fa2:	b006      	add	sp, #24
    5fa4:	bd80      	pop	{r7, pc}

00005fa6 <_ZN11embassy_nrf4chip11Peripherals4take17hc6f61a243203b187E>:
            pub(crate) fn take() -> Self {
    5fa6:	b580      	push	{r7, lr}
    5fa8:	466f      	mov	r7, sp
                critical_section::with(Self::take_with_cs)
    5faa:	f7fe fc13 	bl	47d4 <_ZN16critical_section4with17h8a0a072561cb3807E>
            }
    5fae:	bd80      	pop	{r7, pc}

00005fb0 <_ZN11embassy_nrf4chip11Peripherals12take_with_cs17hd69b02f29f121fd6E>:
            pub(crate) fn take_with_cs(_cs: critical_section::CriticalSection) -> Self {
    5fb0:	b580      	push	{r7, lr}
    5fb2:	466f      	mov	r7, sp
    5fb4:	b082      	sub	sp, #8
                    if _EMBASSY_DEVICE_PERIPHERALS {
    5fb6:	f240 2014 	movw	r0, #532	@ 0x214
    5fba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    5fbe:	7800      	ldrb	r0, [r0, #0]
    5fc0:	07c0      	lsls	r0, r0, #31
    5fc2:	b950      	cbnz	r0, 5fda <_ZN11embassy_nrf4chip11Peripherals12take_with_cs17hd69b02f29f121fd6E+0x2a>
    5fc4:	e7ff      	b.n	5fc6 <_ZN11embassy_nrf4chip11Peripherals12take_with_cs17hd69b02f29f121fd6E+0x16>
                    _EMBASSY_DEVICE_PERIPHERALS = true;
    5fc6:	f240 2114 	movw	r1, #532	@ 0x214
    5fca:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    5fce:	2001      	movs	r0, #1
    5fd0:	7008      	strb	r0, [r1, #0]
                    Self::steal()
    5fd2:	f000 f80f 	bl	5ff4 <_ZN11embassy_nrf4chip11Peripherals5steal17hcfaff20028a4b3e4E>
            }
    5fd6:	b002      	add	sp, #8
    5fd8:	bd80      	pop	{r7, pc}
                        panic!("init called more than once!")
    5fda:	f240 0006 	movw	r0, #6
    5fde:	f2c0 0000 	movt	r0, #0
    5fe2:	f003 fefe 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    5fe6:	f8ad 0004 	strh.w	r0, [sp, #4]
    5fea:	a801      	add	r0, sp, #4
    5fec:	f003 ff68 	bl	9ec0 <_ZN5defmt6export26acquire_header_and_release17h7ce8ef2ffd00dd1bE>
    5ff0:	f003 ff96 	bl	9f20 <__defmt_default_panic>

00005ff4 <_ZN11embassy_nrf4chip11Peripherals5steal17hcfaff20028a4b3e4E>:
            pub unsafe fn steal() -> Self {
    5ff4:	b580      	push	{r7, lr}
    5ff6:	466f      	mov	r7, sp
                        $name: peripherals::$name::steal(),
    5ff8:	f7fe fe82 	bl	4d00 <_ZN11embassy_nrf4chip11peripherals4USBD5steal17h831b2b75cab83c9eE>
    5ffc:	f7fe fe83 	bl	4d06 <_ZN11embassy_nrf4chip11peripherals4RTC05steal17h3dcb732d3e61e857E>
    6000:	f7fe fe84 	bl	4d0c <_ZN11embassy_nrf4chip11peripherals4RTC15steal17hab8e989493402ed8E>
    6004:	f7fe fe85 	bl	4d12 <_ZN11embassy_nrf4chip11peripherals4RTC25steal17h4ea34a9a3c75cda8E>
    6008:	f7fe fe86 	bl	4d18 <_ZN11embassy_nrf4chip11peripherals3WDT5steal17h71773c30a8ed10d6E>
    600c:	f7fe fe87 	bl	4d1e <_ZN11embassy_nrf4chip11peripherals4NVMC5steal17h36905a153901b205E>
    6010:	f7fe fe88 	bl	4d24 <_ZN11embassy_nrf4chip11peripherals3RNG5steal17h6fb9467942c7ce0dE>
    6014:	f7fe fe89 	bl	4d2a <_ZN11embassy_nrf4chip11peripherals6UARTE05steal17he8905746d088885dE>
    6018:	f7fe fe8a 	bl	4d30 <_ZN11embassy_nrf4chip11peripherals6UARTE15steal17hdcbf21a9f6a028a2E>
    601c:	f7fe fe8b 	bl	4d36 <_ZN11embassy_nrf4chip11peripherals7TWISPI05steal17h1eafde0f980a8b35E>
    6020:	f7fe fe8c 	bl	4d3c <_ZN11embassy_nrf4chip11peripherals7TWISPI15steal17h7465adf8287be503E>
    6024:	f7fe fe8d 	bl	4d42 <_ZN11embassy_nrf4chip11peripherals4SPI25steal17h099cf5cfeba607f5E>
    6028:	f7fe fe8e 	bl	4d48 <_ZN11embassy_nrf4chip11peripherals4SPI35steal17h48ef900873297160E>
    602c:	f7fe fe8f 	bl	4d4e <_ZN11embassy_nrf4chip11peripherals5SAADC5steal17hc29c6bf22e816fa6E>
    6030:	f7fe fe90 	bl	4d54 <_ZN11embassy_nrf4chip11peripherals4PWM05steal17h1c250283e4e62fe4E>
    6034:	f7fe fe91 	bl	4d5a <_ZN11embassy_nrf4chip11peripherals4PWM15steal17h96a2f670b62fcb05E>
    6038:	f7fe fe92 	bl	4d60 <_ZN11embassy_nrf4chip11peripherals4PWM25steal17h265482d7a652d10fE>
    603c:	f7fe fe93 	bl	4d66 <_ZN11embassy_nrf4chip11peripherals4PWM35steal17hc8cc901cde87a113E>
    6040:	f7fe fe94 	bl	4d6c <_ZN11embassy_nrf4chip11peripherals6TIMER05steal17h3eed9115f88093e5E>
    6044:	f7fe fe95 	bl	4d72 <_ZN11embassy_nrf4chip11peripherals6TIMER15steal17h9b3253f53de00a3cE>
    6048:	f7fe fe96 	bl	4d78 <_ZN11embassy_nrf4chip11peripherals6TIMER25steal17h08f872dea7923ebcE>
    604c:	f7fe fe97 	bl	4d7e <_ZN11embassy_nrf4chip11peripherals6TIMER35steal17hd458bd37848577fcE>
    6050:	f7fe fe98 	bl	4d84 <_ZN11embassy_nrf4chip11peripherals6TIMER45steal17h6e15498fbbd8d6a5E>
    6054:	f7fe fe99 	bl	4d8a <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH05steal17h63baeea7506715a7E>
    6058:	f7fe fe9a 	bl	4d90 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH15steal17hcb50899e49745a58E>
    605c:	f7fe fe9b 	bl	4d96 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH25steal17h8aa85f5d207dbf03E>
    6060:	f7fe fe9c 	bl	4d9c <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH35steal17h8442212c5053cef4E>
    6064:	f7fe fe9d 	bl	4da2 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH45steal17he95f3d348d9cb6a3E>
    6068:	f7fe fe9e 	bl	4da8 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH55steal17hd8f9f1624922b683E>
    606c:	f7fe fe9f 	bl	4dae <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH65steal17hd9217712c04ed1cfE>
    6070:	f7fe fea0 	bl	4db4 <_ZN11embassy_nrf4chip11peripherals10GPIOTE_CH75steal17h7e988b98d559527bE>
    6074:	f7fe fea1 	bl	4dba <_ZN11embassy_nrf4chip11peripherals7PPI_CH05steal17h9e2ca79ae2760068E>
    6078:	f7fe fea2 	bl	4dc0 <_ZN11embassy_nrf4chip11peripherals7PPI_CH15steal17h18510a8359df704fE>
    607c:	f7fe fea3 	bl	4dc6 <_ZN11embassy_nrf4chip11peripherals7PPI_CH25steal17h70644a591145d545E>
    6080:	f7fe fea4 	bl	4dcc <_ZN11embassy_nrf4chip11peripherals7PPI_CH35steal17hcb85125b0d1dfc53E>
    6084:	f7fe fea5 	bl	4dd2 <_ZN11embassy_nrf4chip11peripherals7PPI_CH45steal17h7d9510b8346c280dE>
    6088:	f7fe fea6 	bl	4dd8 <_ZN11embassy_nrf4chip11peripherals7PPI_CH55steal17h5f3c7e39316694a4E>
    608c:	f7fe fea7 	bl	4dde <_ZN11embassy_nrf4chip11peripherals7PPI_CH65steal17hfaee938917477b28E>
    6090:	f7fe fea8 	bl	4de4 <_ZN11embassy_nrf4chip11peripherals7PPI_CH75steal17hb8e6a1fc056a1477E>
    6094:	f7fe fea9 	bl	4dea <_ZN11embassy_nrf4chip11peripherals7PPI_CH85steal17h2c75b35220d11617E>
    6098:	f7fe feaa 	bl	4df0 <_ZN11embassy_nrf4chip11peripherals7PPI_CH95steal17h1d3175ce4d787a14E>
    609c:	f7fe feab 	bl	4df6 <_ZN11embassy_nrf4chip11peripherals8PPI_CH105steal17h637c4add97286734E>
    60a0:	f7fe feac 	bl	4dfc <_ZN11embassy_nrf4chip11peripherals8PPI_CH115steal17h9305cd1b3eabc760E>
    60a4:	f7fe fead 	bl	4e02 <_ZN11embassy_nrf4chip11peripherals8PPI_CH125steal17h1a321f60d0af35f0E>
    60a8:	f7fe feae 	bl	4e08 <_ZN11embassy_nrf4chip11peripherals8PPI_CH135steal17hf3dccc2ecb612f26E>
    60ac:	f7fe feaf 	bl	4e0e <_ZN11embassy_nrf4chip11peripherals8PPI_CH145steal17hf0f6ec3ea0d3a84cE>
    60b0:	f7fe feb0 	bl	4e14 <_ZN11embassy_nrf4chip11peripherals8PPI_CH155steal17h34ea9af624039a3fE>
    60b4:	f7fe feb1 	bl	4e1a <_ZN11embassy_nrf4chip11peripherals8PPI_CH165steal17hb9955dde91bc577bE>
    60b8:	f7fe feb2 	bl	4e20 <_ZN11embassy_nrf4chip11peripherals8PPI_CH175steal17h8300fd6c8a027842E>
    60bc:	f7fe feb3 	bl	4e26 <_ZN11embassy_nrf4chip11peripherals8PPI_CH185steal17hfb9da8be8cfe0a0cE>
    60c0:	f7fe feb4 	bl	4e2c <_ZN11embassy_nrf4chip11peripherals8PPI_CH195steal17h4c1ecbadbdd01541E>
    60c4:	f7fe feb5 	bl	4e32 <_ZN11embassy_nrf4chip11peripherals8PPI_CH205steal17h5d6d0efc05a524dfE>
    60c8:	f7fe feb6 	bl	4e38 <_ZN11embassy_nrf4chip11peripherals8PPI_CH215steal17h9bb207139b4ce9eeE>
    60cc:	f7fe feb7 	bl	4e3e <_ZN11embassy_nrf4chip11peripherals8PPI_CH225steal17h64fecebfad31af9cE>
    60d0:	f7fe feb8 	bl	4e44 <_ZN11embassy_nrf4chip11peripherals8PPI_CH235steal17h20e5e50f8cf9aca1E>
    60d4:	f7fe feb9 	bl	4e4a <_ZN11embassy_nrf4chip11peripherals8PPI_CH245steal17h2616a5f83ef38f71E>
    60d8:	f7fe feba 	bl	4e50 <_ZN11embassy_nrf4chip11peripherals8PPI_CH255steal17h0e4252fe4ab4949aE>
    60dc:	f7fe febb 	bl	4e56 <_ZN11embassy_nrf4chip11peripherals8PPI_CH265steal17h244bac9a17de45d0E>
    60e0:	f7fe febc 	bl	4e5c <_ZN11embassy_nrf4chip11peripherals8PPI_CH275steal17h1bae714df300d67fE>
    60e4:	f7fe febd 	bl	4e62 <_ZN11embassy_nrf4chip11peripherals8PPI_CH285steal17hd769a5f4c199d6b3E>
    60e8:	f7fe febe 	bl	4e68 <_ZN11embassy_nrf4chip11peripherals8PPI_CH295steal17h5898461322066a3cE>
    60ec:	f7fe febf 	bl	4e6e <_ZN11embassy_nrf4chip11peripherals8PPI_CH305steal17hcf7bc8d0fb8122fbE>
    60f0:	f7fe fec0 	bl	4e74 <_ZN11embassy_nrf4chip11peripherals8PPI_CH315steal17h20c147ac67fae688E>
    60f4:	f7fe fec1 	bl	4e7a <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP05steal17he6d6b977de0e042eE>
    60f8:	f7fe fec2 	bl	4e80 <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP15steal17h18e588d571020b18E>
    60fc:	f7fe fec3 	bl	4e86 <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP25steal17hc5da26d5aff30d56E>
    6100:	f7fe fec4 	bl	4e8c <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP35steal17h49a30d9e8a72c42dE>
    6104:	f7fe fec5 	bl	4e92 <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP45steal17h3fdb946dc61f728cE>
    6108:	f7fe fec6 	bl	4e98 <_ZN11embassy_nrf4chip11peripherals10PPI_GROUP55steal17h9ac5aae8b843a0a7E>
    610c:	f7fe fec7 	bl	4e9e <_ZN11embassy_nrf4chip11peripherals5P0_005steal17he98c4ab6be4e982dE>
    6110:	f7fe fec8 	bl	4ea4 <_ZN11embassy_nrf4chip11peripherals5P0_015steal17h78e46cb73f7cd361E>
    6114:	f7fe fec9 	bl	4eaa <_ZN11embassy_nrf4chip11peripherals5P0_025steal17h15034e4a5ba80129E>
    6118:	f7fe feca 	bl	4eb0 <_ZN11embassy_nrf4chip11peripherals5P0_035steal17h913437aceba08513E>
    611c:	f7fe fecb 	bl	4eb6 <_ZN11embassy_nrf4chip11peripherals5P0_045steal17he48d358c1529598cE>
    6120:	f7fe fecc 	bl	4ebc <_ZN11embassy_nrf4chip11peripherals5P0_055steal17h4d59b3cb1bbef529E>
    6124:	f7fe fecd 	bl	4ec2 <_ZN11embassy_nrf4chip11peripherals5P0_065steal17h2523470a41c2310cE>
    6128:	f7fe fece 	bl	4ec8 <_ZN11embassy_nrf4chip11peripherals5P0_075steal17h05f8444ed15fee87E>
    612c:	f7fe fecf 	bl	4ece <_ZN11embassy_nrf4chip11peripherals5P0_085steal17h328907314403a854E>
    6130:	f7fe fed0 	bl	4ed4 <_ZN11embassy_nrf4chip11peripherals5P0_095steal17h0dcbff918fc14c48E>
    6134:	f7fe fed1 	bl	4eda <_ZN11embassy_nrf4chip11peripherals5P0_105steal17h2738b3b8063cb581E>
    6138:	f7fe fed2 	bl	4ee0 <_ZN11embassy_nrf4chip11peripherals5P0_115steal17h2a6b024c454b65b6E>
    613c:	f7fe fed3 	bl	4ee6 <_ZN11embassy_nrf4chip11peripherals5P0_125steal17hd0841cb22217bd25E>
    6140:	f7fe fed4 	bl	4eec <_ZN11embassy_nrf4chip11peripherals5P0_135steal17h025b61ce46064278E>
    6144:	f7fe fed5 	bl	4ef2 <_ZN11embassy_nrf4chip11peripherals5P0_145steal17h76e738ec3083dc0aE>
    6148:	f7fe fed6 	bl	4ef8 <_ZN11embassy_nrf4chip11peripherals5P0_155steal17h3cbabb161c6270f3E>
    614c:	f7fe fed7 	bl	4efe <_ZN11embassy_nrf4chip11peripherals5P0_165steal17he7a8a8a37b7ddb6eE>
    6150:	f7fe fed8 	bl	4f04 <_ZN11embassy_nrf4chip11peripherals5P0_175steal17hbefd5d42becb444cE>
    6154:	f7fe fed9 	bl	4f0a <_ZN11embassy_nrf4chip11peripherals5P0_195steal17h2db59416574f9f41E>
    6158:	f7fe feda 	bl	4f10 <_ZN11embassy_nrf4chip11peripherals5P0_205steal17h98da990734f1715bE>
    615c:	f7fe fedb 	bl	4f16 <_ZN11embassy_nrf4chip11peripherals5P0_215steal17h4ec239d3dc08ef06E>
    6160:	f7fe fedc 	bl	4f1c <_ZN11embassy_nrf4chip11peripherals5P0_225steal17h5a1e91c80085bd78E>
    6164:	f7fe fedd 	bl	4f22 <_ZN11embassy_nrf4chip11peripherals5P0_235steal17hd7f38ddf80ab8f12E>
    6168:	f7fe fede 	bl	4f28 <_ZN11embassy_nrf4chip11peripherals5P0_245steal17hc9a009f4ae9b0abbE>
    616c:	f7fe fedf 	bl	4f2e <_ZN11embassy_nrf4chip11peripherals5P0_255steal17h6ea34576ee2b3230E>
    6170:	f7fe fee0 	bl	4f34 <_ZN11embassy_nrf4chip11peripherals5P0_265steal17h0284dcc87c0c0a84E>
    6174:	f7fe fee1 	bl	4f3a <_ZN11embassy_nrf4chip11peripherals5P0_275steal17hf0025646c6b5d547E>
    6178:	f7fe fee2 	bl	4f40 <_ZN11embassy_nrf4chip11peripherals5P0_285steal17h5db04a0cdb44828bE>
    617c:	f7fe fee3 	bl	4f46 <_ZN11embassy_nrf4chip11peripherals5P0_295steal17hd44ca9f102bf8816E>
    6180:	f7fe fee4 	bl	4f4c <_ZN11embassy_nrf4chip11peripherals5P0_305steal17h93c208157009f890E>
    6184:	f7fe fee5 	bl	4f52 <_ZN11embassy_nrf4chip11peripherals5P0_315steal17h9d26b4c40f13e471E>
    6188:	f7fe fee6 	bl	4f58 <_ZN11embassy_nrf4chip11peripherals5P1_005steal17hb0afe7617a3aa8c3E>
    618c:	f7fe fee7 	bl	4f5e <_ZN11embassy_nrf4chip11peripherals5P1_015steal17hbdfd59635b94314aE>
    6190:	f7fe fee8 	bl	4f64 <_ZN11embassy_nrf4chip11peripherals5P1_025steal17h82ea23603f5f4c8dE>
    6194:	f7fe fee9 	bl	4f6a <_ZN11embassy_nrf4chip11peripherals5P1_035steal17hc48c34d0009f1d1bE>
    6198:	f7fe feea 	bl	4f70 <_ZN11embassy_nrf4chip11peripherals5P1_045steal17hec672379b3142adeE>
    619c:	f7fe feeb 	bl	4f76 <_ZN11embassy_nrf4chip11peripherals5P1_055steal17h0255bac34e0f74e9E>
    61a0:	f7fe feec 	bl	4f7c <_ZN11embassy_nrf4chip11peripherals5P1_065steal17h865454b83a37f467E>
    61a4:	f7fe feed 	bl	4f82 <_ZN11embassy_nrf4chip11peripherals5P1_075steal17ha31300daa3e7d986E>
    61a8:	f7fe feee 	bl	4f88 <_ZN11embassy_nrf4chip11peripherals5P1_085steal17hb577a99dd3ea0bb8E>
    61ac:	f7fe feef 	bl	4f8e <_ZN11embassy_nrf4chip11peripherals5P1_095steal17hb0c77be4e1980dadE>
    61b0:	f7fe fef0 	bl	4f94 <_ZN11embassy_nrf4chip11peripherals5P1_105steal17h64676bab30cd98ebE>
    61b4:	f7fe fef1 	bl	4f9a <_ZN11embassy_nrf4chip11peripherals5P1_115steal17h5147319d103d60efE>
    61b8:	f7fe fef2 	bl	4fa0 <_ZN11embassy_nrf4chip11peripherals5P1_125steal17hd7a51f62ab65cc59E>
    61bc:	f7fe fef3 	bl	4fa6 <_ZN11embassy_nrf4chip11peripherals5P1_135steal17h81a4f8094a18250cE>
    61c0:	f7fe fef4 	bl	4fac <_ZN11embassy_nrf4chip11peripherals5P1_145steal17h94fcf9367526ec78E>
    61c4:	f7fe fef5 	bl	4fb2 <_ZN11embassy_nrf4chip11peripherals5P1_155steal17h3ef9171b42d218c5E>
    61c8:	f7fe fef6 	bl	4fb8 <_ZN11embassy_nrf4chip11peripherals4TEMP5steal17h0abe8b3a7f032464E>
    61cc:	f7fe fef7 	bl	4fbe <_ZN11embassy_nrf4chip11peripherals4QDEC5steal17h9342bef69e599f30E>
    61d0:	f7fe fef8 	bl	4fc4 <_ZN11embassy_nrf4chip11peripherals3PDM5steal17h75ecf7bf4f9c774bE>
    61d4:	f7fe fef9 	bl	4fca <_ZN11embassy_nrf4chip11peripherals3I2S5steal17h115b8015b8c4f66aE>
    61d8:	f7fe fefa 	bl	4fd0 <_ZN11embassy_nrf4chip11peripherals5RADIO5steal17h963fad0e510441abE>
    61dc:	f7fe fefb 	bl	4fd6 <_ZN11embassy_nrf4chip11peripherals4EGU05steal17hb3c1b80b8b72237fE>
    61e0:	f7fe fefc 	bl	4fdc <_ZN11embassy_nrf4chip11peripherals4EGU15steal17hf1f8791d73db36a9E>
    61e4:	f7fe fefd 	bl	4fe2 <_ZN11embassy_nrf4chip11peripherals4EGU25steal17ha752e725579bac0bE>
    61e8:	f7fe fefe 	bl	4fe8 <_ZN11embassy_nrf4chip11peripherals4EGU35steal17h6eb1dfe27d5d1b3aE>
    61ec:	f7fe feff 	bl	4fee <_ZN11embassy_nrf4chip11peripherals4EGU45steal17h55f74b146a85faafE>
    61f0:	f7fe ff00 	bl	4ff4 <_ZN11embassy_nrf4chip11peripherals4EGU55steal17h9d1bc55c3e2666e1E>
    61f4:	f7fe ff01 	bl	4ffa <_ZN11embassy_nrf4chip11peripherals4NFCT5steal17h8664b387f8047919E>
            }
    61f8:	bd80      	pop	{r7, pc}

000061fa <RTC1>:
#[interrupt]
    61fa:	b580      	push	{r7, lr}
    61fc:	466f      	mov	r7, sp
    61fe:	f000 f801 	bl	6204 <_ZN11embassy_nrf11time_driver18__cortex_m_rt_RTC117h85a2d114508c7df3E>
    6202:	bd80      	pop	{r7, pc}

00006204 <_ZN11embassy_nrf11time_driver18__cortex_m_rt_RTC117h85a2d114508c7df3E>:
fn RTC1() {
    6204:	b580      	push	{r7, lr}
    6206:	466f      	mov	r7, sp
    DRIVER.on_interrupt()
    6208:	f240 0000 	movw	r0, #0
    620c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    6210:	f7ff fab7 	bl	5782 <_ZN11embassy_nrf11time_driver9RtcDriver12on_interrupt17h8f43ec524bec9be6E>
}
    6214:	bd80      	pop	{r7, pc}

00006216 <_ZN100_$LT$embassy_hal_internal..peripheral..PeripheralRef$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha7d8806d5c570d52E>:
    fn deref(&self) -> &Self::Target {
    6216:	b580      	push	{r7, lr}
    6218:	466f      	mov	r7, sp
    621a:	b081      	sub	sp, #4
    621c:	9000      	str	r0, [sp, #0]
    }
    621e:	b001      	add	sp, #4
    6220:	bd80      	pop	{r7, pc}

00006222 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2ad050da4e1a0e9aE>:
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
    6222:	b580      	push	{r7, lr}
    6224:	466f      	mov	r7, sp
    6226:	b08e      	sub	sp, #56	@ 0x38
    6228:	9004      	str	r0, [sp, #16]
    622a:	9009      	str	r0, [sp, #36]	@ 0x24
        let a = self.iter.next()?;
    622c:	f7ff f97f 	bl	552e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h17c875aafe08635bE>
    6230:	9008      	str	r0, [sp, #32]
        match self {
    6232:	9808      	ldr	r0, [sp, #32]
    6234:	b180      	cbz	r0, 6258 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2ad050da4e1a0e9aE+0x36>
    6236:	e7ff      	b.n	6238 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2ad050da4e1a0e9aE+0x16>
            Some(v) => ControlFlow::Continue(v),
    6238:	9804      	ldr	r0, [sp, #16]
    623a:	9908      	ldr	r1, [sp, #32]
    623c:	910b      	str	r1, [sp, #44]	@ 0x2c
    623e:	9107      	str	r1, [sp, #28]
    6240:	9907      	ldr	r1, [sp, #28]
    6242:	9101      	str	r1, [sp, #4]
    6244:	910c      	str	r1, [sp, #48]	@ 0x30
        let i = self.count;
    6246:	6881      	ldr	r1, [r0, #8]
    6248:	9102      	str	r1, [sp, #8]
    624a:	910d      	str	r1, [sp, #52]	@ 0x34
        self.count += 1;
    624c:	6881      	ldr	r1, [r0, #8]
    624e:	1c48      	adds	r0, r1, #1
    6250:	4288      	cmp	r0, r1
    6252:	9003      	str	r0, [sp, #12]
    6254:	d30f      	bcc.n	6276 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2ad050da4e1a0e9aE+0x54>
    6256:	e006      	b.n	6266 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2ad050da4e1a0e9aE+0x44>
    6258:	2000      	movs	r0, #0
            None => None,
    625a:	9006      	str	r0, [sp, #24]
    }
    625c:	e7ff      	b.n	625e <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2ad050da4e1a0e9aE+0x3c>
    625e:	9805      	ldr	r0, [sp, #20]
    6260:	9906      	ldr	r1, [sp, #24]
    6262:	b00e      	add	sp, #56	@ 0x38
    6264:	bd80      	pop	{r7, pc}
        self.count += 1;
    6266:	9801      	ldr	r0, [sp, #4]
    6268:	9902      	ldr	r1, [sp, #8]
    626a:	9a03      	ldr	r2, [sp, #12]
    626c:	9b04      	ldr	r3, [sp, #16]
    626e:	609a      	str	r2, [r3, #8]
        Some((i, a))
    6270:	9105      	str	r1, [sp, #20]
    6272:	9006      	str	r0, [sp, #24]
    }
    6274:	e7f3      	b.n	625e <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2ad050da4e1a0e9aE+0x3c>
        self.count += 1;
    6276:	f24d 10cc 	movw	r0, #53708	@ 0xd1cc
    627a:	f2c0 0000 	movt	r0, #0
    627e:	f004 ff54 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>

00006282 <_ZN20embassy_hal_internal9interrupt12InterruptExt12set_priority17h1d99e41214a8ae7aE>:
        Priority::from(NVIC::get_priority(self))
    }

    /// Set the interrupt priority.
    #[inline]
    fn set_priority(self, prio: Priority) {
    6282:	b580      	push	{r7, lr}
    6284:	466f      	mov	r7, sp
    6286:	b084      	sub	sp, #16
    6288:	9101      	str	r1, [sp, #4]
    628a:	4601      	mov	r1, r0
    628c:	9801      	ldr	r0, [sp, #4]
    628e:	9102      	str	r1, [sp, #8]
    6290:	f807 1c03 	strb.w	r1, [r7, #-3]
    6294:	f807 0c02 	strb.w	r0, [r7, #-2]
            // On thumbv6, set_priority must do a RMW to change 8bit in a 32bit reg.
            #[cfg(armv6m)]
            critical_section::with(|_| nvic.set_priority(self, prio.into()));
            // On thumbv7+, set_priority does an atomic 8bit write, so no CS needed.
            #[cfg(not(armv6m))]
            nvic.set_priority(self, prio.into());
    6298:	f24d 2150 	movw	r1, #53840	@ 0xd250
    629c:	f2c0 0100 	movt	r1, #0
    62a0:	f7ff f92b 	bl	54fa <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6e16e7255b95e556E>
    62a4:	9902      	ldr	r1, [sp, #8]
    62a6:	4602      	mov	r2, r0
    62a8:	a803      	add	r0, sp, #12
    62aa:	f000 f87a 	bl	63a2 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$12set_priority17ha5dcfc803c307399E>
        }
    }
    62ae:	b004      	add	sp, #16
    62b0:	bd80      	pop	{r7, pc}

000062b2 <_ZN20embassy_hal_internal9interrupt12InterruptExt6enable17h3f30f9bbb4a7389fE>:
    unsafe fn enable(self) {
    62b2:	b580      	push	{r7, lr}
    62b4:	466f      	mov	r7, sp
    62b6:	b082      	sub	sp, #8
    62b8:	9000      	str	r0, [sp, #0]
    62ba:	f807 0c01 	strb.w	r0, [r7, #-1]
    62be:	2004      	movs	r0, #4
        compiler_fence(Ordering::SeqCst);
    62c0:	f807 0c02 	strb.w	r0, [r7, #-2]
    62c4:	f817 0c02 	ldrb.w	r0, [r7, #-2]
    62c8:	f7ff f8b6 	bl	5438 <_ZN4core4sync6atomic14compiler_fence17hf091fd9f1354186aE>
    62cc:	9800      	ldr	r0, [sp, #0]
        NVIC::unmask(self)
    62ce:	f000 f89e 	bl	640e <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unmask17hb89a7b93dac5583dE>
    }
    62d2:	b002      	add	sp, #8
    62d4:	bd80      	pop	{r7, pc}

000062d6 <_ZN20embassy_hal_internal9interrupt12InterruptExt6unpend17h23de27ba4d6271c3E>:
    fn unpend(self) {
    62d6:	b580      	push	{r7, lr}
    62d8:	466f      	mov	r7, sp
    62da:	b082      	sub	sp, #8
    62dc:	f807 0c01 	strb.w	r0, [r7, #-1]
        NVIC::unpend(self)
    62e0:	f000 f8d6 	bl	6490 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unpend17hd138ceb883a00d66E>
    }
    62e4:	b002      	add	sp, #8
    62e6:	bd80      	pop	{r7, pc}

000062e8 <_ZN4core4task4wake7Context5waker17h30a7fb56ee4286efE>:
    pub const fn waker(&self) -> &'a Waker {
    62e8:	b580      	push	{r7, lr}
    62ea:	466f      	mov	r7, sp
    62ec:	b081      	sub	sp, #4
    62ee:	9000      	str	r0, [sp, #0]
        &self.waker
    62f0:	6800      	ldr	r0, [r0, #0]
    }
    62f2:	b001      	add	sp, #4
    62f4:	bd80      	pop	{r7, pc}

000062f6 <_ZN4core5array98_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u3b$$u20$N$u5d$$GT$9into_iter17h3124a1a8f2a235caE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<'a, T, const N: usize> IntoIterator for &'a [T; N] {
    type Item = &'a T;
    type IntoIter = Iter<'a, T>;

    fn into_iter(self) -> Iter<'a, T> {
    62f6:	b580      	push	{r7, lr}
    62f8:	466f      	mov	r7, sp
    62fa:	b08c      	sub	sp, #48	@ 0x30
    62fc:	9000      	str	r0, [sp, #0]
    62fe:	9002      	str	r0, [sp, #8]
    6300:	2102      	movs	r1, #2
        let len = slice.len();
    6302:	9103      	str	r1, [sp, #12]
pub const fn without_provenance<T>(addr: usize) -> *const T {
    6304:	9104      	str	r1, [sp, #16]
    pub const unsafe fn add(self, count: usize) -> Self
    6306:	9105      	str	r1, [sp, #20]
        self.iter()
    6308:	9006      	str	r0, [sp, #24]
    630a:	9107      	str	r1, [sp, #28]
        unsafe { NonNull { pointer: r as *const T } }
    630c:	9008      	str	r0, [sp, #32]
    630e:	9109      	str	r1, [sp, #36]	@ 0x24
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
    6310:	900a      	str	r0, [sp, #40]	@ 0x28
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
    6312:	e7ff      	b.n	6314 <_ZN4core5array98_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u3b$$u20$N$u5d$$GT$9into_iter17h3124a1a8f2a235caE+0x1e>
        unsafe { mem::transmute::<Self, *mut T>(self) }
    6314:	9800      	ldr	r0, [sp, #0]
    6316:	900b      	str	r0, [sp, #44]	@ 0x2c
        unsafe { intrinsics::offset(self, count) }
    6318:	3008      	adds	r0, #8
    631a:	9001      	str	r0, [sp, #4]
    631c:	e7ff      	b.n	631e <_ZN4core5array98_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u3b$$u20$N$u5d$$GT$9into_iter17h3124a1a8f2a235caE+0x28>
            Self { ptr, end_or_len, _marker: PhantomData }
    631e:	9800      	ldr	r0, [sp, #0]
    6320:	9901      	ldr	r1, [sp, #4]
    }
    6322:	b00c      	add	sp, #48	@ 0x30
    6324:	bd80      	pop	{r7, pc}

00006326 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h0faac5c71319660dE>:
    pub fn iter(&self) -> Iter<'_, T> {
    6326:	b580      	push	{r7, lr}
    6328:	466f      	mov	r7, sp
    632a:	b082      	sub	sp, #8
    632c:	9000      	str	r0, [sp, #0]
    632e:	9101      	str	r1, [sp, #4]
        Iter::new(self)
    6330:	f7ff f8cc 	bl	54cc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h111c877bf7db799bE>
    }
    6334:	b002      	add	sp, #8
    6336:	bd80      	pop	{r7, pc}

00006338 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha172f06b816b1a2fE>:
    fn into_iter(self) -> I {
    6338:	b580      	push	{r7, lr}
    633a:	466f      	mov	r7, sp
    633c:	460b      	mov	r3, r1
    633e:	4601      	mov	r1, r0
        self
    6340:	6818      	ldr	r0, [r3, #0]
    6342:	685a      	ldr	r2, [r3, #4]
    6344:	689b      	ldr	r3, [r3, #8]
    6346:	608b      	str	r3, [r1, #8]
    6348:	604a      	str	r2, [r1, #4]
    634a:	6008      	str	r0, [r1, #0]
    }
    634c:	bd80      	pop	{r7, pc}

0000634e <_ZN8cortex_m10peripheral3scb43_$LT$impl$u20$cortex_m..peripheral..SCB$GT$9sys_reset17h00ad1bbb43f809c7E>:
const SCB_AIRCR_SYSRESETREQ: u32 = 1 << 2;

impl SCB {
    /// Initiate a system reset request to reset the MCU
    #[inline]
    pub fn sys_reset() -> ! {
    634e:	b580      	push	{r7, lr}
    6350:	466f      	mov	r7, sp
    6352:	b088      	sub	sp, #32
        crate::asm::dsb();
    6354:	f7fe fc6a 	bl	4c2c <_ZN8cortex_m3asm3dsb17h7c625381e317ba95E>
    6358:	f64e 500c 	movw	r0, #60684	@ 0xed0c
    635c:	f2ce 0000 	movt	r0, #57344	@ 0xe000
    6360:	9001      	str	r0, [sp, #4]
    6362:	9002      	str	r0, [sp, #8]
    6364:	9003      	str	r0, [sp, #12]
    6366:	9004      	str	r0, [sp, #16]
    /// Returns a copy of the contained value
    #[inline(always)]
    pub fn get(&self) -> T
        where T: Copy
    {
        unsafe { ptr::read_volatile(self.value.get()) }
    6368:	f003 fe1f 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    /// NOTE: `unsafe` because writes to a register are side effectful
    #[inline(always)]
    pub unsafe fn modify<F>(&self, f: F)
        where F: FnOnce(T) -> T
    {
        self.register.set(f(self.register.get()));
    636c:	f000 f80d 	bl	638a <_ZN8cortex_m10peripheral3scb43_$LT$impl$u20$cortex_m..peripheral..SCB$GT$9sys_reset28_$u7b$$u7b$closure$u7d$$u7d$17h20f668255436af6dE>
    6370:	4601      	mov	r1, r0
    6372:	9801      	ldr	r0, [sp, #4]
    6374:	9005      	str	r0, [sp, #20]
    6376:	9106      	str	r1, [sp, #24]
    6378:	9007      	str	r0, [sp, #28]
    /// Sets the contained value
    #[inline(always)]
    pub fn set(&self, value: T)
        where T: Copy
    {
        unsafe { ptr::write_volatile(self.value.get(), value) }
    637a:	f003 fe9a 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
            r & SCB_AIRCR_PRIGROUP_MASK | // keep priority group unchanged
            SCB_AIRCR_SYSRESETREQ
                }, // set the bit
            )
        };
        crate::asm::dsb();
    637e:	f7fe fc55 	bl	4c2c <_ZN8cortex_m3asm3dsb17h7c625381e317ba95E>
    6382:	e7ff      	b.n	6384 <_ZN8cortex_m10peripheral3scb43_$LT$impl$u20$cortex_m..peripheral..SCB$GT$9sys_reset17h00ad1bbb43f809c7E+0x36>
        loop {
            // wait for the reset
            crate::asm::nop(); // avoid rust-lang/rust#28728
    6384:	f7fe fc57 	bl	4c36 <_ZN8cortex_m3asm3nop17hdc29cfb006c9c898E>
    6388:	e7fc      	b.n	6384 <_ZN8cortex_m10peripheral3scb43_$LT$impl$u20$cortex_m..peripheral..SCB$GT$9sys_reset17h00ad1bbb43f809c7E+0x36>

0000638a <_ZN8cortex_m10peripheral3scb43_$LT$impl$u20$cortex_m..peripheral..SCB$GT$9sys_reset28_$u7b$$u7b$closure$u7d$$u7d$17h20f668255436af6dE>:
                |r| {
    638a:	b580      	push	{r7, lr}
    638c:	466f      	mov	r7, sp
    638e:	b082      	sub	sp, #8
    6390:	9001      	str	r0, [sp, #4]
            r & SCB_AIRCR_PRIGROUP_MASK | // keep priority group unchanged
    6392:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
    6396:	2104      	movs	r1, #4
    6398:	f2c0 51fa 	movt	r1, #1530	@ 0x5fa
                    SCB_AIRCR_VECTKEY | // otherwise the write is ignored
    639c:	4308      	orrs	r0, r1
                }, // set the bit
    639e:	b002      	add	sp, #8
    63a0:	bd80      	pop	{r7, pc}

000063a2 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$12set_priority17ha5dcfc803c307399E>:
    /// # Unsafety
    ///
    /// Changing priority levels can break priority-based critical sections (see
    /// [`register::basepri`](crate::register::basepri)) and compromise memory safety.
    #[inline]
    pub unsafe fn set_priority<I>(&mut self, interrupt: I, prio: u8)
    63a2:	b580      	push	{r7, lr}
    63a4:	466f      	mov	r7, sp
    63a6:	b08c      	sub	sp, #48	@ 0x30
    63a8:	9100      	str	r1, [sp, #0]
    63aa:	4601      	mov	r1, r0
    63ac:	9800      	ldr	r0, [sp, #0]
    63ae:	4613      	mov	r3, r2
    63b0:	9301      	str	r3, [sp, #4]
    63b2:	9103      	str	r1, [sp, #12]
    63b4:	f88d 0010 	strb.w	r0, [sp, #16]
    63b8:	f807 2c1f 	strb.w	r2, [r7, #-31]
    63bc:	f807 0c01 	strb.w	r0, [r7, #-1]
        self as u16
    63c0:	b2c0      	uxtb	r0, r0
    where
        I: InterruptNumber,
    {
        #[cfg(not(armv6m))]
        {
            let nr = interrupt.number();
    63c2:	f827 0c1e 	strh.w	r0, [r7, #-30]
    63c6:	910a      	str	r1, [sp, #40]	@ 0x28
    63c8:	f827 0c16 	strh.w	r0, [r7, #-22]
            // Rustdocs on the impl block show a "[+] show undocumented items" toggle.
            // Rustdocs on functions do not.
            #[doc = $doc]
            #[inline(always)]
            fn from(small: $Small) -> Self {
                small as Self
    63cc:	4601      	mov	r1, r0
            self.ipr[usize::from(nr)].write(prio)
    63ce:	9102      	str	r1, [sp, #8]
    63d0:	0900      	lsrs	r0, r0, #4
    63d2:	281e      	cmp	r0, #30
    63d4:	d812      	bhi.n	63fc <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$12set_priority17ha5dcfc803c307399E+0x5a>
    63d6:	e7ff      	b.n	63d8 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$12set_priority17ha5dcfc803c307399E+0x36>
    63d8:	9901      	ldr	r1, [sp, #4]
    63da:	9802      	ldr	r0, [sp, #8]
    63dc:	f24e 4200 	movw	r2, #58368	@ 0xe400
    63e0:	f2ce 0200 	movt	r2, #57344	@ 0xe000
    63e4:	4410      	add	r0, r2
    63e6:	9005      	str	r0, [sp, #20]
    63e8:	f807 1c17 	strb.w	r1, [r7, #-23]
    63ec:	9007      	str	r0, [sp, #28]
    63ee:	f807 1c0d 	strb.w	r1, [r7, #-13]
    63f2:	9009      	str	r0, [sp, #36]	@ 0x24
    63f4:	f003 fe48 	bl	a088 <_ZN4core3ptr14write_volatile17h049177a1e39cbfb2E>
                let prio = u32::from(prio) << Self::ipr_shift(interrupt);

                (value & !mask) | prio
            })
        }
    }
    63f8:	b00c      	add	sp, #48	@ 0x30
    63fa:	bd80      	pop	{r7, pc}
            self.ipr[usize::from(nr)].write(prio)
    63fc:	9802      	ldr	r0, [sp, #8]
    63fe:	f24d 22d0 	movw	r2, #53968	@ 0xd2d0
    6402:	f2c0 0200 	movt	r2, #0
    6406:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
    640a:	f004 f875 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>

0000640e <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unmask17hb89a7b93dac5583dE>:
    pub unsafe fn unmask<I>(interrupt: I)
    640e:	b580      	push	{r7, lr}
    6410:	466f      	mov	r7, sp
    6412:	b08c      	sub	sp, #48	@ 0x30
    6414:	f807 0c1f 	strb.w	r0, [r7, #-31]
    6418:	f807 0c01 	strb.w	r0, [r7, #-1]
    641c:	b2c0      	uxtb	r0, r0
    641e:	4601      	mov	r1, r0
        let nr = interrupt.number();
    6420:	9102      	str	r1, [sp, #8]
    6422:	f827 0c1e 	strh.w	r0, [r7, #-30]
        (*Self::PTR).iser[usize::from(nr / 32)].write(1 << (nr % 32))
    6426:	0940      	lsrs	r0, r0, #5
    6428:	f827 0c12 	strh.w	r0, [r7, #-18]
    642c:	4601      	mov	r1, r0
    642e:	9103      	str	r1, [sp, #12]
    6430:	280f      	cmp	r0, #15
    6432:	d810      	bhi.n	6456 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unmask17hb89a7b93dac5583dE+0x48>
    6434:	e7ff      	b.n	6436 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unmask17hb89a7b93dac5583dE+0x28>
    6436:	9802      	ldr	r0, [sp, #8]
    6438:	9a03      	ldr	r2, [sp, #12]
    643a:	f24e 1100 	movw	r1, #57600	@ 0xe100
    643e:	f2ce 0100 	movt	r1, #57344	@ 0xe000
    6442:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    6446:	9100      	str	r1, [sp, #0]
    6448:	f000 001f 	and.w	r0, r0, #31
    644c:	4601      	mov	r1, r0
    644e:	9101      	str	r1, [sp, #4]
    6450:	2820      	cmp	r0, #32
    6452:	d308      	bcc.n	6466 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unmask17hb89a7b93dac5583dE+0x58>
    6454:	e016      	b.n	6484 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unmask17hb89a7b93dac5583dE+0x76>
    6456:	9803      	ldr	r0, [sp, #12]
    6458:	f24d 22e0 	movw	r2, #53984	@ 0xd2e0
    645c:	f2c0 0200 	movt	r2, #0
    6460:	2110      	movs	r1, #16
    6462:	f004 f849 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
    6466:	9800      	ldr	r0, [sp, #0]
    6468:	9901      	ldr	r1, [sp, #4]
    646a:	f001 021f 	and.w	r2, r1, #31
    646e:	2101      	movs	r1, #1
    6470:	4091      	lsls	r1, r2
    6472:	9005      	str	r0, [sp, #20]
    6474:	9106      	str	r1, [sp, #24]
    6476:	9008      	str	r0, [sp, #32]
    6478:	9109      	str	r1, [sp, #36]	@ 0x24
    647a:	900a      	str	r0, [sp, #40]	@ 0x28
    647c:	f003 fe19 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    }
    6480:	b00c      	add	sp, #48	@ 0x30
    6482:	bd80      	pop	{r7, pc}
        (*Self::PTR).iser[usize::from(nr / 32)].write(1 << (nr % 32))
    6484:	f24d 20f0 	movw	r0, #54000	@ 0xd2f0
    6488:	f2c0 0000 	movt	r0, #0
    648c:	f004 fe99 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

00006490 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unpend17hd138ceb883a00d66E>:

    /// Clears `interrupt`'s pending state
    #[inline]
    pub fn unpend<I>(interrupt: I)
    6490:	b580      	push	{r7, lr}
    6492:	466f      	mov	r7, sp
    6494:	b08c      	sub	sp, #48	@ 0x30
    6496:	f807 0c1f 	strb.w	r0, [r7, #-31]
    649a:	f807 0c01 	strb.w	r0, [r7, #-1]
    649e:	b2c0      	uxtb	r0, r0
    64a0:	4601      	mov	r1, r0
    where
        I: InterruptNumber,
    {
        let nr = interrupt.number();
    64a2:	9102      	str	r1, [sp, #8]
    64a4:	f827 0c1e 	strh.w	r0, [r7, #-30]

        // NOTE(unsafe) atomic stateless write; ICPR doesn't store any state
        unsafe { (*Self::PTR).icpr[usize::from(nr / 32)].write(1 << (nr % 32)) }
    64a8:	0940      	lsrs	r0, r0, #5
    64aa:	f827 0c12 	strh.w	r0, [r7, #-18]
    64ae:	4601      	mov	r1, r0
    64b0:	9103      	str	r1, [sp, #12]
    64b2:	280f      	cmp	r0, #15
    64b4:	d810      	bhi.n	64d8 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unpend17hd138ceb883a00d66E+0x48>
    64b6:	e7ff      	b.n	64b8 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unpend17hd138ceb883a00d66E+0x28>
    64b8:	9802      	ldr	r0, [sp, #8]
    64ba:	9a03      	ldr	r2, [sp, #12]
    64bc:	f24e 2180 	movw	r1, #57984	@ 0xe280
    64c0:	f2ce 0100 	movt	r1, #57344	@ 0xe000
    64c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    64c8:	9100      	str	r1, [sp, #0]
    64ca:	f000 001f 	and.w	r0, r0, #31
    64ce:	4601      	mov	r1, r0
    64d0:	9101      	str	r1, [sp, #4]
    64d2:	2820      	cmp	r0, #32
    64d4:	d308      	bcc.n	64e8 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unpend17hd138ceb883a00d66E+0x58>
    64d6:	e016      	b.n	6506 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$6unpend17hd138ceb883a00d66E+0x76>
    64d8:	9803      	ldr	r0, [sp, #12]
    64da:	f24d 3200 	movw	r2, #54016	@ 0xd300
    64de:	f2c0 0200 	movt	r2, #0
    64e2:	2110      	movs	r1, #16
    64e4:	f004 f808 	bl	a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>
    64e8:	9800      	ldr	r0, [sp, #0]
    64ea:	9901      	ldr	r1, [sp, #4]
    64ec:	f001 021f 	and.w	r2, r1, #31
    64f0:	2101      	movs	r1, #1
    64f2:	4091      	lsls	r1, r2
    64f4:	9005      	str	r0, [sp, #20]
    64f6:	9106      	str	r1, [sp, #24]
    64f8:	9008      	str	r0, [sp, #32]
    64fa:	9109      	str	r1, [sp, #36]	@ 0x24
    64fc:	900a      	str	r0, [sp, #40]	@ 0x28
    64fe:	f003 fdd8 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    }
    6502:	b00c      	add	sp, #48	@ 0x30
    6504:	bd80      	pop	{r7, pc}
        unsafe { (*Self::PTR).icpr[usize::from(nr / 32)].write(1 << (nr % 32)) }
    6506:	f24d 3010 	movw	r0, #54032	@ 0xd310
    650a:	f2c0 0000 	movt	r0, #0
    650e:	f004 fe58 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

00006512 <DefaultHandler_>:
    loop {}
}

#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn DefaultHandler_() -> ! {
    6512:	b580      	push	{r7, lr}
    6514:	466f      	mov	r7, sp
    #[allow(clippy::empty_loop)]
    loop {}
    6516:	e7ff      	b.n	6518 <DefaultHandler_+0x6>
    6518:	e7fe      	b.n	6518 <DefaultHandler_+0x6>

0000651a <DefaultPreInit>:
}

#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn DefaultPreInit() {}
    651a:	b580      	push	{r7, lr}
    651c:	466f      	mov	r7, sp
    651e:	bd80      	pop	{r7, pc}

00006520 <_ZN4core3cmp10PartialOrd2le17hd86e12ae1182a6c9E>:
    fn le(&self, other: &Rhs) -> bool {
    6520:	b580      	push	{r7, lr}
    6522:	466f      	mov	r7, sp
    6524:	b084      	sub	sp, #16
    6526:	9001      	str	r0, [sp, #4]
    6528:	9102      	str	r1, [sp, #8]
        self.partial_cmp(other).is_some_and(Ordering::is_le)
    652a:	f000 fb27 	bl	6b7c <_ZN72_$LT$embassy_time..instant..Instant$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h83c5f53f7f175874E>
    652e:	f807 0c0d 	strb.w	r0, [r7, #-13]
        match self {
    6532:	f817 0c0d 	ldrb.w	r0, [r7, #-13]
    6536:	2802      	cmp	r0, #2
    6538:	d00c      	beq.n	6554 <_ZN4core3cmp10PartialOrd2le17hd86e12ae1182a6c9E+0x34>
    653a:	e7ff      	b.n	653c <_ZN4core3cmp10PartialOrd2le17hd86e12ae1182a6c9E+0x1c>
            Some(x) => f(x),
    653c:	f917 0c0d 	ldrsb.w	r0, [r7, #-13]
    6540:	f807 0c01 	strb.w	r0, [r7, #-1]
        self.as_raw() <= 0
    6544:	2801      	cmp	r0, #1
    6546:	f04f 0000 	mov.w	r0, #0
    654a:	bfb8      	it	lt
    654c:	2001      	movlt	r0, #1
    654e:	f807 0c0e 	strb.w	r0, [r7, #-14]
    6552:	e003      	b.n	655c <_ZN4core3cmp10PartialOrd2le17hd86e12ae1182a6c9E+0x3c>
    6554:	2000      	movs	r0, #0
            None => false,
    6556:	f807 0c0e 	strb.w	r0, [r7, #-14]
    }
    655a:	e7ff      	b.n	655c <_ZN4core3cmp10PartialOrd2le17hd86e12ae1182a6c9E+0x3c>
    }
    655c:	f817 0c0e 	ldrb.w	r0, [r7, #-14]
    6560:	b004      	add	sp, #16
    6562:	bd80      	pop	{r7, pc}

00006564 <_ZN4core3cmp10PartialOrd2lt17h4bbb5a114439107eE>:
    fn lt(&self, other: &Rhs) -> bool {
    6564:	b580      	push	{r7, lr}
    6566:	466f      	mov	r7, sp
    6568:	b084      	sub	sp, #16
    656a:	9001      	str	r0, [sp, #4]
    656c:	9102      	str	r1, [sp, #8]
        self.partial_cmp(other).is_some_and(Ordering::is_lt)
    656e:	f000 fb05 	bl	6b7c <_ZN72_$LT$embassy_time..instant..Instant$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h83c5f53f7f175874E>
    6572:	f807 0c0d 	strb.w	r0, [r7, #-13]
        match self {
    6576:	f817 0c0d 	ldrb.w	r0, [r7, #-13]
    657a:	2802      	cmp	r0, #2
    657c:	d008      	beq.n	6590 <_ZN4core3cmp10PartialOrd2lt17h4bbb5a114439107eE+0x2c>
    657e:	e7ff      	b.n	6580 <_ZN4core3cmp10PartialOrd2lt17h4bbb5a114439107eE+0x1c>
            Some(x) => f(x),
    6580:	f817 0c0d 	ldrb.w	r0, [r7, #-13]
    6584:	f807 0c01 	strb.w	r0, [r7, #-1]
        self.as_raw() < 0
    6588:	09c0      	lsrs	r0, r0, #7
    658a:	f807 0c0e 	strb.w	r0, [r7, #-14]
    658e:	e003      	b.n	6598 <_ZN4core3cmp10PartialOrd2lt17h4bbb5a114439107eE+0x34>
    6590:	2000      	movs	r0, #0
            None => false,
    6592:	f807 0c0e 	strb.w	r0, [r7, #-14]
    }
    6596:	e7ff      	b.n	6598 <_ZN4core3cmp10PartialOrd2lt17h4bbb5a114439107eE+0x34>
    }
    6598:	f817 0c0e 	ldrb.w	r0, [r7, #-14]
    659c:	b004      	add	sp, #16
    659e:	bd80      	pop	{r7, pc}

000065a0 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u64$GT$11partial_cmp17h5084ec0c5c6390bbE>:
    macro_rules! ord_impl {
        ($($t:ty)*) => ($(
            #[stable(feature = "rust1", since = "1.0.0")]
            impl PartialOrd for $t {
                #[inline]
                fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
    65a0:	b580      	push	{r7, lr}
    65a2:	466f      	mov	r7, sp
    65a4:	b083      	sub	sp, #12
    65a6:	9001      	str	r0, [sp, #4]
    65a8:	9102      	str	r1, [sp, #8]
                    Some(crate::intrinsics::three_way_compare(*self, *other))
    65aa:	f8d0 e000 	ldr.w	lr, [r0]
    65ae:	6843      	ldr	r3, [r0, #4]
    65b0:	f8d1 c000 	ldr.w	ip, [r1]
    65b4:	684a      	ldr	r2, [r1, #4]
    65b6:	ebbe 000c 	subs.w	r0, lr, ip
    65ba:	eb73 0002 	sbcs.w	r0, r3, r2
    65be:	f04f 0000 	mov.w	r0, #0
    65c2:	4601      	mov	r1, r0
    65c4:	bf38      	it	cc
    65c6:	2101      	movcc	r1, #1
    65c8:	ebbc 0c0e 	subs.w	ip, ip, lr
    65cc:	419a      	sbcs	r2, r3
    65ce:	bf38      	it	cc
    65d0:	2001      	movcc	r0, #1
    65d2:	1a40      	subs	r0, r0, r1
    65d4:	f807 0c09 	strb.w	r0, [r7, #-9]
                }
    65d8:	f817 0c09 	ldrb.w	r0, [r7, #-9]
    65dc:	b003      	add	sp, #12
    65de:	bd80      	pop	{r7, pc}

000065e0 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h6f939717df49c9a2E>:
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    65e0:	b580      	push	{r7, lr}
    65e2:	466f      	mov	r7, sp
    65e4:	b08c      	sub	sp, #48	@ 0x30
    65e6:	9001      	str	r0, [sp, #4]
    65e8:	68f8      	ldr	r0, [r7, #12]
    65ea:	9002      	str	r0, [sp, #8]
    65ec:	68b9      	ldr	r1, [r7, #8]
    65ee:	9103      	str	r1, [sp, #12]
    65f0:	469c      	mov	ip, r3
    65f2:	f8cd c010 	str.w	ip, [sp, #16]
    65f6:	4694      	mov	ip, r2
    65f8:	f8cd c014 	str.w	ip, [sp, #20]
    65fc:	9307      	str	r3, [sp, #28]
    65fe:	9206      	str	r2, [sp, #24]
    6600:	9009      	str	r0, [sp, #36]	@ 0x24
    6602:	9108      	str	r1, [sp, #32]
            if intrinsics::unlikely(intrinsics::add_with_overflow(self, rhs).1) {
    6604:	1889      	adds	r1, r1, r2
    6606:	4158      	adcs	r0, r3
    6608:	f04f 0000 	mov.w	r0, #0
    660c:	f140 0000 	adc.w	r0, r0, #0
    6610:	f807 0c01 	strb.w	r0, [r7, #-1]
/// This intrinsic does not have a stable counterpart.
#[unstable(feature = "core_intrinsics", issue = "none")]
#[rustc_nounwind]
#[inline(always)]
pub const fn unlikely(b: bool) -> bool {
    if b {
    6614:	b980      	cbnz	r0, 6638 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h6f939717df49c9a2E+0x58>
    6616:	e7ff      	b.n	6618 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h6f939717df49c9a2E+0x38>
                Some(unsafe { intrinsics::unchecked_add(self, rhs) })
    6618:	9901      	ldr	r1, [sp, #4]
    661a:	9804      	ldr	r0, [sp, #16]
    661c:	9b02      	ldr	r3, [sp, #8]
    661e:	9a05      	ldr	r2, [sp, #20]
    6620:	f8dd c00c 	ldr.w	ip, [sp, #12]
    6624:	eb12 020c 	adds.w	r2, r2, ip
    6628:	4158      	adcs	r0, r3
    662a:	608a      	str	r2, [r1, #8]
    662c:	60c8      	str	r0, [r1, #12]
    662e:	2000      	movs	r0, #0
    6630:	6048      	str	r0, [r1, #4]
    6632:	2001      	movs	r0, #1
    6634:	6008      	str	r0, [r1, #0]
            if intrinsics::unlikely(intrinsics::add_with_overflow(self, rhs).1) {
    6636:	e00f      	b.n	6658 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h6f939717df49c9a2E+0x78>
                None
    6638:	9901      	ldr	r1, [sp, #4]
    663a:	f24d 3220 	movw	r2, #54048	@ 0xd320
    663e:	f2c0 0200 	movt	r2, #0
    6642:	6813      	ldr	r3, [r2, #0]
    6644:	f8d2 c004 	ldr.w	ip, [r2, #4]
    6648:	6890      	ldr	r0, [r2, #8]
    664a:	68d2      	ldr	r2, [r2, #12]
    664c:	f8c1 c004 	str.w	ip, [r1, #4]
    6650:	600b      	str	r3, [r1, #0]
    6652:	60ca      	str	r2, [r1, #12]
    6654:	6088      	str	r0, [r1, #8]
            if intrinsics::unlikely(intrinsics::add_with_overflow(self, rhs).1) {
    6656:	e7ff      	b.n	6658 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h6f939717df49c9a2E+0x78>
        }
    6658:	b00c      	add	sp, #48	@ 0x30
    665a:	bd80      	pop	{r7, pc}

0000665c <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_div17h2eba14dd85b76b45E>:
        pub const fn checked_div(self, rhs: Self) -> Option<Self> {
    665c:	b580      	push	{r7, lr}
    665e:	466f      	mov	r7, sp
    6660:	b08c      	sub	sp, #48	@ 0x30
    6662:	9001      	str	r0, [sp, #4]
    6664:	68f9      	ldr	r1, [r7, #12]
    6666:	9102      	str	r1, [sp, #8]
    6668:	68b8      	ldr	r0, [r7, #8]
    666a:	9003      	str	r0, [sp, #12]
    666c:	469c      	mov	ip, r3
    666e:	f8cd c010 	str.w	ip, [sp, #16]
    6672:	4694      	mov	ip, r2
    6674:	f8cd c014 	str.w	ip, [sp, #20]
    6678:	9307      	str	r3, [sp, #28]
    667a:	9206      	str	r2, [sp, #24]
    667c:	9109      	str	r1, [sp, #36]	@ 0x24
    667e:	9008      	str	r0, [sp, #32]
            if intrinsics::unlikely(rhs == 0) {
    6680:	4308      	orrs	r0, r1
    6682:	fab0 f180 	clz	r1, r0
    6686:	0949      	lsrs	r1, r1, #5
    6688:	f807 1c01 	strb.w	r1, [r7, #-1]
    668c:	b980      	cbnz	r0, 66b0 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_div17h2eba14dd85b76b45E+0x54>
    668e:	e7ff      	b.n	6690 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_div17h2eba14dd85b76b45E+0x34>
                None
    6690:	9901      	ldr	r1, [sp, #4]
    6692:	f24d 3220 	movw	r2, #54048	@ 0xd320
    6696:	f2c0 0200 	movt	r2, #0
    669a:	6813      	ldr	r3, [r2, #0]
    669c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    66a0:	6890      	ldr	r0, [r2, #8]
    66a2:	68d2      	ldr	r2, [r2, #12]
    66a4:	f8c1 c004 	str.w	ip, [r1, #4]
    66a8:	600b      	str	r3, [r1, #0]
    66aa:	60ca      	str	r2, [r1, #12]
    66ac:	6088      	str	r0, [r1, #8]
            if intrinsics::unlikely(rhs == 0) {
    66ae:	e00e      	b.n	66ce <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_div17h2eba14dd85b76b45E+0x72>
                Some(unsafe { intrinsics::unchecked_div(self, rhs) })
    66b0:	9b02      	ldr	r3, [sp, #8]
    66b2:	9a03      	ldr	r2, [sp, #12]
    66b4:	9904      	ldr	r1, [sp, #16]
    66b6:	9805      	ldr	r0, [sp, #20]
    66b8:	f005 f80a 	bl	b6d0 <__aeabi_uldivmod>
    66bc:	460a      	mov	r2, r1
    66be:	9901      	ldr	r1, [sp, #4]
    66c0:	60ca      	str	r2, [r1, #12]
    66c2:	6088      	str	r0, [r1, #8]
    66c4:	2000      	movs	r0, #0
    66c6:	6048      	str	r0, [r1, #4]
    66c8:	2001      	movs	r0, #1
    66ca:	6008      	str	r0, [r1, #0]
            if intrinsics::unlikely(rhs == 0) {
    66cc:	e7ff      	b.n	66ce <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_div17h2eba14dd85b76b45E+0x72>
        }
    66ce:	b00c      	add	sp, #48	@ 0x30
    66d0:	bd80      	pop	{r7, pc}

000066d2 <_ZN4core4task4wake7Context5waker17h41b82b6d034ca65eE>:
    pub const fn waker(&self) -> &'a Waker {
    66d2:	b580      	push	{r7, lr}
    66d4:	466f      	mov	r7, sp
    66d6:	b081      	sub	sp, #4
    66d8:	9000      	str	r0, [sp, #0]
        &self.waker
    66da:	6800      	ldr	r0, [r0, #0]
    }
    66dc:	b001      	add	sp, #4
    66de:	bd80      	pop	{r7, pc}

000066e0 <_ZN4core6option15Option$LT$T$GT$3map17h37a50c284656d463E>:
    pub fn map<U, F>(self, f: F) -> Option<U>
    66e0:	b580      	push	{r7, lr}
    66e2:	466f      	mov	r7, sp
    66e4:	b08a      	sub	sp, #40	@ 0x28
    66e6:	9001      	str	r0, [sp, #4]
    66e8:	68f9      	ldr	r1, [r7, #12]
    66ea:	68b8      	ldr	r0, [r7, #8]
    66ec:	9303      	str	r3, [sp, #12]
    66ee:	9202      	str	r2, [sp, #8]
    66f0:	9105      	str	r1, [sp, #20]
    66f2:	9004      	str	r0, [sp, #16]
        match self {
    66f4:	9802      	ldr	r0, [sp, #8]
    66f6:	07c0      	lsls	r0, r0, #31
    66f8:	b178      	cbz	r0, 671a <_ZN4core6option15Option$LT$T$GT$3map17h37a50c284656d463E+0x3a>
    66fa:	e7ff      	b.n	66fc <_ZN4core6option15Option$LT$T$GT$3map17h37a50c284656d463E+0x1c>
            Some(x) => Some(f(x)),
    66fc:	9804      	ldr	r0, [sp, #16]
    66fe:	9905      	ldr	r1, [sp, #20]
    6700:	9109      	str	r1, [sp, #36]	@ 0x24
    6702:	9008      	str	r0, [sp, #32]
    6704:	f000 f9a5 	bl	6a52 <_ZN12embassy_time7instant7Instant11checked_add28_$u7b$$u7b$closure$u7d$$u7d$17h70a6db68c353256bE>
    6708:	460a      	mov	r2, r1
    670a:	9901      	ldr	r1, [sp, #4]
    670c:	60ca      	str	r2, [r1, #12]
    670e:	6088      	str	r0, [r1, #8]
    6710:	2000      	movs	r0, #0
    6712:	6048      	str	r0, [r1, #4]
    6714:	2001      	movs	r0, #1
    6716:	6008      	str	r0, [r1, #0]
    6718:	e004      	b.n	6724 <_ZN4core6option15Option$LT$T$GT$3map17h37a50c284656d463E+0x44>
    671a:	9901      	ldr	r1, [sp, #4]
    671c:	2000      	movs	r0, #0
            None => None,
    671e:	6048      	str	r0, [r1, #4]
    6720:	6008      	str	r0, [r1, #0]
    }
    6722:	e7ff      	b.n	6724 <_ZN4core6option15Option$LT$T$GT$3map17h37a50c284656d463E+0x44>
    6724:	b00a      	add	sp, #40	@ 0x28
    6726:	bd80      	pop	{r7, pc}

00006728 <_ZN4core6option15Option$LT$T$GT$3map17he6d6669ab592c23bE>:
    pub fn map<U, F>(self, f: F) -> Option<U>
    6728:	b580      	push	{r7, lr}
    672a:	466f      	mov	r7, sp
    672c:	b08a      	sub	sp, #40	@ 0x28
    672e:	9001      	str	r0, [sp, #4]
    6730:	68f9      	ldr	r1, [r7, #12]
    6732:	68b8      	ldr	r0, [r7, #8]
    6734:	9303      	str	r3, [sp, #12]
    6736:	9202      	str	r2, [sp, #8]
    6738:	9105      	str	r1, [sp, #20]
    673a:	9004      	str	r0, [sp, #16]
        match self {
    673c:	9802      	ldr	r0, [sp, #8]
    673e:	07c0      	lsls	r0, r0, #31
    6740:	b178      	cbz	r0, 6762 <_ZN4core6option15Option$LT$T$GT$3map17he6d6669ab592c23bE+0x3a>
    6742:	e7ff      	b.n	6744 <_ZN4core6option15Option$LT$T$GT$3map17he6d6669ab592c23bE+0x1c>
            Some(x) => Some(f(x)),
    6744:	9804      	ldr	r0, [sp, #16]
    6746:	9905      	ldr	r1, [sp, #20]
    6748:	9109      	str	r1, [sp, #36]	@ 0x24
    674a:	9008      	str	r0, [sp, #32]
    674c:	f000 f8e1 	bl	6912 <_ZN12embassy_time8duration8Duration11checked_div28_$u7b$$u7b$closure$u7d$$u7d$17h65edc6d4ac8b4a4bE>
    6750:	460a      	mov	r2, r1
    6752:	9901      	ldr	r1, [sp, #4]
    6754:	60ca      	str	r2, [r1, #12]
    6756:	6088      	str	r0, [r1, #8]
    6758:	2000      	movs	r0, #0
    675a:	6048      	str	r0, [r1, #4]
    675c:	2001      	movs	r0, #1
    675e:	6008      	str	r0, [r1, #0]
    6760:	e004      	b.n	676c <_ZN4core6option15Option$LT$T$GT$3map17he6d6669ab592c23bE+0x44>
    6762:	9901      	ldr	r1, [sp, #4]
    6764:	2000      	movs	r0, #0
            None => None,
    6766:	6048      	str	r0, [r1, #4]
    6768:	6008      	str	r0, [r1, #0]
    }
    676a:	e7ff      	b.n	676c <_ZN4core6option15Option$LT$T$GT$3map17he6d6669ab592c23bE+0x44>
    676c:	b00a      	add	sp, #40	@ 0x28
    676e:	bd80      	pop	{r7, pc}

00006770 <_ZN4core6option15Option$LT$T$GT$6expect17hc5bc85008021a2f0E>:
    pub const fn expect(self, msg: &str) -> T {
    6770:	b580      	push	{r7, lr}
    6772:	466f      	mov	r7, sp
    6774:	b08c      	sub	sp, #48	@ 0x30
    6776:	468e      	mov	lr, r1
    6778:	4684      	mov	ip, r0
    677a:	6938      	ldr	r0, [r7, #16]
    677c:	9001      	str	r0, [sp, #4]
    677e:	68f8      	ldr	r0, [r7, #12]
    6780:	9002      	str	r0, [sp, #8]
    6782:	68b9      	ldr	r1, [r7, #8]
    6784:	9103      	str	r1, [sp, #12]
    6786:	f8cd e014 	str.w	lr, [sp, #20]
    678a:	f8cd c010 	str.w	ip, [sp, #16]
    678e:	9307      	str	r3, [sp, #28]
    6790:	9206      	str	r2, [sp, #24]
    6792:	9108      	str	r1, [sp, #32]
    6794:	9009      	str	r0, [sp, #36]	@ 0x24
        match self {
    6796:	9804      	ldr	r0, [sp, #16]
    6798:	07c0      	lsls	r0, r0, #31
    679a:	b130      	cbz	r0, 67aa <_ZN4core6option15Option$LT$T$GT$6expect17hc5bc85008021a2f0E+0x3a>
    679c:	e7ff      	b.n	679e <_ZN4core6option15Option$LT$T$GT$6expect17hc5bc85008021a2f0E+0x2e>
            Some(val) => val,
    679e:	9806      	ldr	r0, [sp, #24]
    67a0:	9907      	ldr	r1, [sp, #28]
    67a2:	910b      	str	r1, [sp, #44]	@ 0x2c
    67a4:	900a      	str	r0, [sp, #40]	@ 0x28
    }
    67a6:	b00c      	add	sp, #48	@ 0x30
    67a8:	bd80      	pop	{r7, pc}
            None => expect_failed(msg),
    67aa:	9a01      	ldr	r2, [sp, #4]
    67ac:	9902      	ldr	r1, [sp, #8]
    67ae:	9803      	ldr	r0, [sp, #12]
    67b0:	f003 fdc0 	bl	a334 <_ZN4core6option13expect_failed17hf682f50f2caa2db5E>

000067b4 <_ZN57_$LT$$RF$mut$u20$T$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfcf3727fe899df5bE>:
    fn deref(&self) -> &T {
    67b4:	b580      	push	{r7, lr}
    67b6:	466f      	mov	r7, sp
    67b8:	b081      	sub	sp, #4
    67ba:	9000      	str	r0, [sp, #0]
        *self
    67bc:	6800      	ldr	r0, [r0, #0]
    }
    67be:	b001      	add	sp, #4
    67c0:	bd80      	pop	{r7, pc}

000067c2 <_ZN60_$LT$$RF$mut$u20$T$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbfaf8595f4bd66f4E>:
}

#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_deref", issue = "88955")]
impl<T: ?Sized> const DerefMut for &mut T {
    fn deref_mut(&mut self) -> &mut T {
    67c2:	b580      	push	{r7, lr}
    67c4:	466f      	mov	r7, sp
    67c6:	b081      	sub	sp, #4
    67c8:	9000      	str	r0, [sp, #0]
        *self
    67ca:	6800      	ldr	r0, [r0, #0]
    }
    67cc:	b001      	add	sp, #4
    67ce:	bd80      	pop	{r7, pc}

000067d0 <_ZN69_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0fd592b724e82a1E>:
    fn deref(&self) -> &Ptr::Target {
    67d0:	b580      	push	{r7, lr}
    67d2:	466f      	mov	r7, sp
    67d4:	b084      	sub	sp, #16
    67d6:	9001      	str	r0, [sp, #4]
        unsafe { Pin::new_unchecked(&*self.__pointer) }
    67d8:	f7ff ffec 	bl	67b4 <_ZN57_$LT$$RF$mut$u20$T$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfcf3727fe899df5bE>
    67dc:	9002      	str	r0, [sp, #8]
        Pin { __pointer: pointer }
    67de:	9003      	str	r0, [sp, #12]
    }
    67e0:	b004      	add	sp, #16
    67e2:	bd80      	pop	{r7, pc}

000067e4 <_ZN72_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h273f8e7a3e2b34adE>:
}

#[stable(feature = "pin", since = "1.33.0")]
impl<Ptr: DerefMut<Target: Unpin>> DerefMut for Pin<Ptr> {
    fn deref_mut(&mut self) -> &mut Ptr::Target {
    67e4:	b580      	push	{r7, lr}
    67e6:	466f      	mov	r7, sp
    67e8:	b084      	sub	sp, #16
    67ea:	9001      	str	r0, [sp, #4]
        unsafe { Pin::new_unchecked(&mut *self.__pointer) }
    67ec:	f7ff ffe9 	bl	67c2 <_ZN60_$LT$$RF$mut$u20$T$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hbfaf8595f4bd66f4E>
    67f0:	9002      	str	r0, [sp, #8]
        Pin { __pointer: pointer }
    67f2:	9003      	str	r0, [sp, #12]
        Pin::get_mut(Pin::as_mut(self))
    }
    67f4:	b004      	add	sp, #16
    67f6:	bd80      	pop	{r7, pc}

000067f8 <_ZN12embassy_time5delay9block_for17hffec92adb099cf68E>:
use super::{Duration, Instant};
use crate::Timer;

/// Blocks for at least `duration`.
pub fn block_for(duration: Duration) {
    67f8:	b580      	push	{r7, lr}
    67fa:	466f      	mov	r7, sp
    67fc:	b088      	sub	sp, #32
    67fe:	9101      	str	r1, [sp, #4]
    6800:	9000      	str	r0, [sp, #0]
    6802:	9107      	str	r1, [sp, #28]
    6804:	9006      	str	r0, [sp, #24]
    let expires_at = Instant::now() + duration;
    6806:	f000 f8cb 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
    680a:	9a00      	ldr	r2, [sp, #0]
    680c:	9b01      	ldr	r3, [sp, #4]
    680e:	f000 f927 	bl	6a60 <_ZN112_$LT$embassy_time..instant..Instant$u20$as$u20$core..ops..arith..Add$LT$embassy_time..duration..Duration$GT$$GT$3add17h1e8ed146d555fbf8E>
    6812:	9103      	str	r1, [sp, #12]
    6814:	9002      	str	r0, [sp, #8]
    6816:	e7ff      	b.n	6818 <_ZN12embassy_time5delay9block_for17hffec92adb099cf68E+0x20>
    while Instant::now() < expires_at {}
    6818:	f000 f8c2 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
    681c:	9105      	str	r1, [sp, #20]
    681e:	9004      	str	r0, [sp, #16]
    6820:	a804      	add	r0, sp, #16
    6822:	a902      	add	r1, sp, #8
    6824:	f7ff fe9e 	bl	6564 <_ZN4core3cmp10PartialOrd2lt17h4bbb5a114439107eE>
    6828:	2800      	cmp	r0, #0
    682a:	d1f5      	bne.n	6818 <_ZN12embassy_time5delay9block_for17hffec92adb099cf68E+0x20>
    682c:	e7ff      	b.n	682e <_ZN12embassy_time5delay9block_for17hffec92adb099cf68E+0x36>
}
    682e:	b008      	add	sp, #32
    6830:	bd80      	pop	{r7, pc}

00006832 <_ZN12embassy_time8duration8Duration9from_secs17h0d65bcb0ec475bedE>:
    pub const fn from_ticks(ticks: u64) -> Duration {
        Duration { ticks }
    }

    /// Creates a duration from the specified number of seconds, rounding up.
    pub const fn from_secs(secs: u64) -> Duration {
    6832:	b580      	push	{r7, lr}
    6834:	466f      	mov	r7, sp
    6836:	b084      	sub	sp, #16
    6838:	460b      	mov	r3, r1
    683a:	4601      	mov	r1, r0
    683c:	9303      	str	r3, [sp, #12]
    683e:	9102      	str	r1, [sp, #8]
        Duration { ticks: secs * TICK_HZ }
    6840:	4618      	mov	r0, r3
    6842:	f36f 405f 	bfc	r0, #17, #15
    6846:	1a18      	subs	r0, r3, r0
    6848:	bf18      	it	ne
    684a:	2001      	movne	r0, #1
    684c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    6850:	fba1 2102 	umull	r2, r1, r1, r2
    6854:	eb11 31c3 	adds.w	r1, r1, r3, lsl #15
    6858:	f04f 0300 	mov.w	r3, #0
    685c:	f143 0300 	adc.w	r3, r3, #0
    6860:	4318      	orrs	r0, r3
    6862:	9200      	str	r2, [sp, #0]
    6864:	9101      	str	r1, [sp, #4]
    6866:	b920      	cbnz	r0, 6872 <_ZN12embassy_time8duration8Duration9from_secs17h0d65bcb0ec475bedE+0x40>
    6868:	e7ff      	b.n	686a <_ZN12embassy_time8duration8Duration9from_secs17h0d65bcb0ec475bedE+0x38>
    }
    686a:	9901      	ldr	r1, [sp, #4]
    686c:	9800      	ldr	r0, [sp, #0]
    686e:	b004      	add	sp, #16
    6870:	bd80      	pop	{r7, pc}
        Duration { ticks: secs * TICK_HZ }
    6872:	f24d 309c 	movw	r0, #54172	@ 0xd39c
    6876:	f2c0 0000 	movt	r0, #0
    687a:	f004 fc7c 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>

0000687e <_ZN12embassy_time8duration8Duration11from_micros17hfa619c00dc798ed6E>:
        }
    }

    /// Creates a duration from the specified number of microseconds, rounding up.
    /// NOTE: Delays this small may be inaccurate.
    pub const fn from_micros(micros: u64) -> Duration {
    687e:	b580      	push	{r7, lr}
    6880:	466f      	mov	r7, sp
    6882:	b084      	sub	sp, #16
    6884:	460b      	mov	r3, r1
    6886:	4601      	mov	r1, r0
    6888:	9303      	str	r3, [sp, #12]
    688a:	9102      	str	r1, [sp, #8]
        Duration {
            ticks: div_ceil(micros * (TICK_HZ / GCD_1M), 1_000_000 / GCD_1M),
    688c:	4618      	mov	r0, r3
    688e:	f36f 50df 	bfc	r0, #23, #9
    6892:	1a18      	subs	r0, r3, r0
    6894:	bf18      	it	ne
    6896:	2001      	movne	r0, #1
    6898:	f44f 7200 	mov.w	r2, #512	@ 0x200
    689c:	fba1 2102 	umull	r2, r1, r1, r2
    68a0:	eb11 2143 	adds.w	r1, r1, r3, lsl #9
    68a4:	f04f 0300 	mov.w	r3, #0
    68a8:	f143 0300 	adc.w	r3, r3, #0
    68ac:	4318      	orrs	r0, r3
    68ae:	9200      	str	r2, [sp, #0]
    68b0:	9101      	str	r1, [sp, #4]
    68b2:	b948      	cbnz	r0, 68c8 <_ZN12embassy_time8duration8Duration11from_micros17hfa619c00dc798ed6E+0x4a>
    68b4:	e7ff      	b.n	68b6 <_ZN12embassy_time8duration8Duration11from_micros17hfa619c00dc798ed6E+0x38>
    68b6:	9901      	ldr	r1, [sp, #4]
    68b8:	9800      	ldr	r0, [sp, #0]
    68ba:	f643 5209 	movw	r2, #15625	@ 0x3d09
    68be:	2300      	movs	r3, #0
    68c0:	f000 f82e 	bl	6920 <_ZN12embassy_time8duration8div_ceil17h314160ecf765c7adE>
        }
    }
    68c4:	b004      	add	sp, #16
    68c6:	bd80      	pop	{r7, pc}
            ticks: div_ceil(micros * (TICK_HZ / GCD_1M), 1_000_000 / GCD_1M),
    68c8:	f24d 30ac 	movw	r0, #54188	@ 0xd3ac
    68cc:	f2c0 0000 	movt	r0, #0
    68d0:	f004 fc51 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>

000068d4 <_ZN12embassy_time8duration8Duration11checked_div17h687a26f6402f5c7eE>:
    pub fn checked_mul(self, rhs: u32) -> Option<Duration> {
        self.ticks.checked_mul(rhs as _).map(|ticks| Duration { ticks })
    }

    /// Divides one Duration a scalar u32, returning a new Duration or None in the event of an overflow.
    pub fn checked_div(self, rhs: u32) -> Option<Duration> {
    68d4:	b580      	push	{r7, lr}
    68d6:	466f      	mov	r7, sp
    68d8:	b08a      	sub	sp, #40	@ 0x28
    68da:	9003      	str	r0, [sp, #12]
    68dc:	68b8      	ldr	r0, [r7, #8]
    68de:	9305      	str	r3, [sp, #20]
    68e0:	9204      	str	r2, [sp, #16]
        self.ticks.checked_div(rhs as _).map(|ticks| Duration { ticks })
    68e2:	4669      	mov	r1, sp
    68e4:	f04f 0c00 	mov.w	ip, #0
    68e8:	f8c1 c004 	str.w	ip, [r1, #4]
    68ec:	6008      	str	r0, [r1, #0]
    68ee:	a806      	add	r0, sp, #24
    68f0:	f7ff feb4 	bl	665c <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_div17h2eba14dd85b76b45E>
    68f4:	9803      	ldr	r0, [sp, #12]
    68f6:	9a06      	ldr	r2, [sp, #24]
    68f8:	9b07      	ldr	r3, [sp, #28]
    68fa:	9908      	ldr	r1, [sp, #32]
    68fc:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
    6900:	46ec      	mov	ip, sp
    6902:	f8cc e004 	str.w	lr, [ip, #4]
    6906:	f8cc 1000 	str.w	r1, [ip]
    690a:	f7ff ff0d 	bl	6728 <_ZN4core6option15Option$LT$T$GT$3map17he6d6669ab592c23bE>
    }
    690e:	b00a      	add	sp, #40	@ 0x28
    6910:	bd80      	pop	{r7, pc}

00006912 <_ZN12embassy_time8duration8Duration11checked_div28_$u7b$$u7b$closure$u7d$$u7d$17h65edc6d4ac8b4a4bE>:
        self.ticks.checked_div(rhs as _).map(|ticks| Duration { ticks })
    6912:	b580      	push	{r7, lr}
    6914:	466f      	mov	r7, sp
    6916:	b084      	sub	sp, #16
    6918:	9103      	str	r1, [sp, #12]
    691a:	9002      	str	r0, [sp, #8]
    691c:	b004      	add	sp, #16
    691e:	bd80      	pop	{r7, pc}

00006920 <_ZN12embassy_time8duration8div_ceil17h314160ecf765c7adE>:
        write!(f, "{} ticks", self.ticks)
    }
}

#[inline]
const fn div_ceil(num: u64, den: u64) -> u64 {
    6920:	b580      	push	{r7, lr}
    6922:	466f      	mov	r7, sp
    6924:	b08a      	sub	sp, #40	@ 0x28
    6926:	469c      	mov	ip, r3
    6928:	f8cd c008 	str.w	ip, [sp, #8]
    692c:	4694      	mov	ip, r2
    692e:	f8cd c00c 	str.w	ip, [sp, #12]
    6932:	9107      	str	r1, [sp, #28]
    6934:	9006      	str	r0, [sp, #24]
    6936:	9309      	str	r3, [sp, #36]	@ 0x24
    6938:	9208      	str	r2, [sp, #32]
    (num + den - 1) / den
    693a:	1812      	adds	r2, r2, r0
    693c:	4159      	adcs	r1, r3
    693e:	f04f 0000 	mov.w	r0, #0
    6942:	f140 0000 	adc.w	r0, r0, #0
    6946:	9204      	str	r2, [sp, #16]
    6948:	9105      	str	r1, [sp, #20]
    694a:	b950      	cbnz	r0, 6962 <_ZN12embassy_time8duration8div_ceil17h314160ecf765c7adE+0x42>
    694c:	e7ff      	b.n	694e <_ZN12embassy_time8duration8div_ceil17h314160ecf765c7adE+0x2e>
    694e:	9804      	ldr	r0, [sp, #16]
    6950:	9905      	ldr	r1, [sp, #20]
    6952:	1e43      	subs	r3, r0, #1
    6954:	f161 0200 	sbc.w	r2, r1, #0
    6958:	9300      	str	r3, [sp, #0]
    695a:	9201      	str	r2, [sp, #4]
    695c:	4308      	orrs	r0, r1
    695e:	b158      	cbz	r0, 6978 <_ZN12embassy_time8duration8div_ceil17h314160ecf765c7adE+0x58>
    6960:	e005      	b.n	696e <_ZN12embassy_time8duration8div_ceil17h314160ecf765c7adE+0x4e>
    6962:	f24d 30bc 	movw	r0, #54204	@ 0xd3bc
    6966:	f2c0 0000 	movt	r0, #0
    696a:	f004 fbde 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    696e:	9803      	ldr	r0, [sp, #12]
    6970:	9902      	ldr	r1, [sp, #8]
    6972:	4308      	orrs	r0, r1
    6974:	b170      	cbz	r0, 6994 <_ZN12embassy_time8duration8div_ceil17h314160ecf765c7adE+0x74>
    6976:	e005      	b.n	6984 <_ZN12embassy_time8duration8div_ceil17h314160ecf765c7adE+0x64>
    6978:	f24d 30cc 	movw	r0, #54220	@ 0xd3cc
    697c:	f2c0 0000 	movt	r0, #0
    6980:	f004 fbe6 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    6984:	9b02      	ldr	r3, [sp, #8]
    6986:	9a03      	ldr	r2, [sp, #12]
    6988:	9901      	ldr	r1, [sp, #4]
    698a:	9800      	ldr	r0, [sp, #0]
    698c:	f004 fea0 	bl	b6d0 <__aeabi_uldivmod>
}
    6990:	b00a      	add	sp, #40	@ 0x28
    6992:	bd80      	pop	{r7, pc}
    (num + den - 1) / den
    6994:	f24d 30cc 	movw	r0, #54220	@ 0xd3cc
    6998:	f2c0 0000 	movt	r0, #0
    699c:	f004 fc24 	bl	b1e8 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hff1aa7944d63a61dE>

000069a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>:
    pub const MIN: Instant = Instant { ticks: u64::MIN };
    /// The largest (latest) value that can be represented by the `Instant` type.
    pub const MAX: Instant = Instant { ticks: u64::MAX };

    /// Returns an Instant representing the current time.
    pub fn now() -> Instant {
    69a0:	b580      	push	{r7, lr}
    69a2:	466f      	mov	r7, sp
        Instant {
            ticks: embassy_time_driver::now(),
    69a4:	f000 fb8e 	bl	70c4 <_ZN19embassy_time_driver3now17he20ffa15b03699c6E>
        }
    }
    69a8:	bd80      	pop	{r7, pc}

000069aa <_ZN12embassy_time7instant7Instant8as_ticks17h9cb9870d7a484a0eE>:
            ticks: seconds * TICK_HZ,
        }
    }

    /// Tick count since system boot.
    pub const fn as_ticks(&self) -> u64 {
    69aa:	b580      	push	{r7, lr}
    69ac:	466f      	mov	r7, sp
    69ae:	b081      	sub	sp, #4
    69b0:	4601      	mov	r1, r0
    69b2:	9100      	str	r1, [sp, #0]
        self.ticks
    69b4:	6808      	ldr	r0, [r1, #0]
    69b6:	6849      	ldr	r1, [r1, #4]
    }
    69b8:	b001      	add	sp, #4
    69ba:	bd80      	pop	{r7, pc}

000069bc <_ZN12embassy_time7instant7Instant9as_micros17h4d235fdcfb24be8fE>:
    pub const fn as_millis(&self) -> u64 {
        self.ticks * (1000 / GCD_1K) / (TICK_HZ / GCD_1K)
    }

    /// Microseconds since system boot.
    pub const fn as_micros(&self) -> u64 {
    69bc:	b580      	push	{r7, lr}
    69be:	466f      	mov	r7, sp
    69c0:	b084      	sub	sp, #16
    69c2:	9003      	str	r0, [sp, #12]
        self.ticks * (1_000_000 / GCD_1M) / (TICK_HZ / GCD_1M)
    69c4:	6801      	ldr	r1, [r0, #0]
    69c6:	6840      	ldr	r0, [r0, #4]
    69c8:	f643 5209 	movw	r2, #15625	@ 0x3d09
    69cc:	fba0 3002 	umull	r3, r0, r0, r2
    69d0:	fba1 2102 	umull	r2, r1, r1, r2
    69d4:	18c9      	adds	r1, r1, r3
    69d6:	f04f 0300 	mov.w	r3, #0
    69da:	f143 0300 	adc.w	r3, r3, #0
    69de:	2800      	cmp	r0, #0
    69e0:	bf18      	it	ne
    69e2:	2001      	movne	r0, #1
    69e4:	4318      	orrs	r0, r3
    69e6:	9201      	str	r2, [sp, #4]
    69e8:	9102      	str	r1, [sp, #8]
    69ea:	b940      	cbnz	r0, 69fe <_ZN12embassy_time7instant7Instant9as_micros17h4d235fdcfb24be8fE+0x42>
    69ec:	e7ff      	b.n	69ee <_ZN12embassy_time7instant7Instant9as_micros17h4d235fdcfb24be8fE+0x32>
    69ee:	9902      	ldr	r1, [sp, #8]
    69f0:	9801      	ldr	r0, [sp, #4]
    69f2:	0a40      	lsrs	r0, r0, #9
    69f4:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    69f8:	0a49      	lsrs	r1, r1, #9
    }
    69fa:	b004      	add	sp, #16
    69fc:	bd80      	pop	{r7, pc}
        self.ticks * (1_000_000 / GCD_1M) / (TICK_HZ / GCD_1M)
    69fe:	f24d 4048 	movw	r0, #54344	@ 0xd448
    6a02:	f2c0 0000 	movt	r0, #0
    6a06:	f004 fbb6 	bl	b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>

00006a0a <_ZN12embassy_time7instant7Instant11checked_add17h755b25d32fc75464E>:
    pub fn elapsed(&self) -> Duration {
        Instant::now() - *self
    }

    /// Adds one Duration to self, returning a new `Instant` or None in the event of an overflow.
    pub fn checked_add(&self, duration: Duration) -> Option<Instant> {
    6a0a:	b580      	push	{r7, lr}
    6a0c:	466f      	mov	r7, sp
    6a0e:	b08c      	sub	sp, #48	@ 0x30
    6a10:	469c      	mov	ip, r3
    6a12:	9203      	str	r2, [sp, #12]
    6a14:	4602      	mov	r2, r0
    6a16:	9803      	ldr	r0, [sp, #12]
    6a18:	9204      	str	r2, [sp, #16]
    6a1a:	9105      	str	r1, [sp, #20]
    6a1c:	f8cd c01c 	str.w	ip, [sp, #28]
    6a20:	9006      	str	r0, [sp, #24]
        self.ticks.checked_add(duration.ticks).map(|ticks| Instant { ticks })
    6a22:	680a      	ldr	r2, [r1, #0]
    6a24:	684b      	ldr	r3, [r1, #4]
    6a26:	4669      	mov	r1, sp
    6a28:	f8c1 c004 	str.w	ip, [r1, #4]
    6a2c:	6008      	str	r0, [r1, #0]
    6a2e:	a808      	add	r0, sp, #32
    6a30:	f7ff fdd6 	bl	65e0 <_ZN4core3num21_$LT$impl$u20$u64$GT$11checked_add17h6f939717df49c9a2E>
    6a34:	9804      	ldr	r0, [sp, #16]
    6a36:	9a08      	ldr	r2, [sp, #32]
    6a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    6a3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
    6a3c:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
    6a40:	46ec      	mov	ip, sp
    6a42:	f8cc e004 	str.w	lr, [ip, #4]
    6a46:	f8cc 1000 	str.w	r1, [ip]
    6a4a:	f7ff fe49 	bl	66e0 <_ZN4core6option15Option$LT$T$GT$3map17h37a50c284656d463E>
    }
    6a4e:	b00c      	add	sp, #48	@ 0x30
    6a50:	bd80      	pop	{r7, pc}

00006a52 <_ZN12embassy_time7instant7Instant11checked_add28_$u7b$$u7b$closure$u7d$$u7d$17h70a6db68c353256bE>:
        self.ticks.checked_add(duration.ticks).map(|ticks| Instant { ticks })
    6a52:	b580      	push	{r7, lr}
    6a54:	466f      	mov	r7, sp
    6a56:	b084      	sub	sp, #16
    6a58:	9103      	str	r1, [sp, #12]
    6a5a:	9002      	str	r0, [sp, #8]
    6a5c:	b004      	add	sp, #16
    6a5e:	bd80      	pop	{r7, pc}

00006a60 <_ZN112_$LT$embassy_time..instant..Instant$u20$as$u20$core..ops..arith..Add$LT$embassy_time..duration..Duration$GT$$GT$3add17h1e8ed146d555fbf8E>:
}

impl Add<Duration> for Instant {
    type Output = Instant;

    fn add(self, other: Duration) -> Instant {
    6a60:	b580      	push	{r7, lr}
    6a62:	466f      	mov	r7, sp
    6a64:	b08c      	sub	sp, #48	@ 0x30
    6a66:	9105      	str	r1, [sp, #20]
    6a68:	9004      	str	r0, [sp, #16]
    6a6a:	9307      	str	r3, [sp, #28]
    6a6c:	9206      	str	r2, [sp, #24]
    6a6e:	a808      	add	r0, sp, #32
    6a70:	a904      	add	r1, sp, #16
        self.checked_add(other)
    6a72:	f7ff ffca 	bl	6a0a <_ZN12embassy_time7instant7Instant11checked_add17h755b25d32fc75464E>
    6a76:	9808      	ldr	r0, [sp, #32]
    6a78:	9909      	ldr	r1, [sp, #36]	@ 0x24
    6a7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    6a7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    6a7e:	f24d 4c80 	movw	ip, #54400	@ 0xd480
    6a82:	f2c0 0c00 	movt	ip, #0
    6a86:	46ee      	mov	lr, sp
    6a88:	f8ce c008 	str.w	ip, [lr, #8]
    6a8c:	f04f 0c28 	mov.w	ip, #40	@ 0x28
    6a90:	f8ce c004 	str.w	ip, [lr, #4]
    6a94:	f24d 4c58 	movw	ip, #54360	@ 0xd458
    6a98:	f2c0 0c00 	movt	ip, #0
    6a9c:	f8ce c000 	str.w	ip, [lr]
    6aa0:	f7ff fe66 	bl	6770 <_ZN4core6option15Option$LT$T$GT$6expect17hc5bc85008021a2f0E>
            .expect("overflow when adding duration to instant")
    }
    6aa4:	b00c      	add	sp, #48	@ 0x30
    6aa6:	bd80      	pop	{r7, pc}

00006aa8 <_ZN118_$LT$embassy_time..instant..Instant$u20$as$u20$core..ops..arith..AddAssign$LT$embassy_time..duration..Duration$GT$$GT$10add_assign17hb58207f28b59a87eE>:
}

impl AddAssign<Duration> for Instant {
    fn add_assign(&mut self, other: Duration) {
    6aa8:	b580      	push	{r7, lr}
    6aaa:	466f      	mov	r7, sp
    6aac:	b084      	sub	sp, #16
    6aae:	4601      	mov	r1, r0
    6ab0:	9100      	str	r1, [sp, #0]
    6ab2:	9101      	str	r1, [sp, #4]
    6ab4:	9303      	str	r3, [sp, #12]
    6ab6:	9202      	str	r2, [sp, #8]
        *self = *self + other;
    6ab8:	6808      	ldr	r0, [r1, #0]
    6aba:	6849      	ldr	r1, [r1, #4]
    6abc:	f7ff ffd0 	bl	6a60 <_ZN112_$LT$embassy_time..instant..Instant$u20$as$u20$core..ops..arith..Add$LT$embassy_time..duration..Duration$GT$$GT$3add17h1e8ed146d555fbf8E>
    6ac0:	460a      	mov	r2, r1
    6ac2:	9900      	ldr	r1, [sp, #0]
    6ac4:	604a      	str	r2, [r1, #4]
    6ac6:	6008      	str	r0, [r1, #0]
    }
    6ac8:	b004      	add	sp, #16
    6aca:	bd80      	pop	{r7, pc}

00006acc <_ZN12embassy_time5timer5Timer5after17h90fc56a887000710E>:
    /// async fn demo_sleep_seconds() {
    ///     // suspend this task for one second.
    ///     Timer::after(Duration::from_secs(1)).await;
    /// }
    /// ```
    pub fn after(duration: Duration) -> Self {
    6acc:	b580      	push	{r7, lr}
    6ace:	466f      	mov	r7, sp
    6ad0:	b086      	sub	sp, #24
    6ad2:	9302      	str	r3, [sp, #8]
    6ad4:	9201      	str	r2, [sp, #4]
    6ad6:	9003      	str	r0, [sp, #12]
    6ad8:	9305      	str	r3, [sp, #20]
    6ada:	9204      	str	r2, [sp, #16]
        Self {
            expires_at: Instant::now() + duration,
    6adc:	f7ff ff60 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
    6ae0:	9a01      	ldr	r2, [sp, #4]
    6ae2:	9b02      	ldr	r3, [sp, #8]
    6ae4:	f7ff ffbc 	bl	6a60 <_ZN112_$LT$embassy_time..instant..Instant$u20$as$u20$core..ops..arith..Add$LT$embassy_time..duration..Duration$GT$$GT$3add17h1e8ed146d555fbf8E>
    6ae8:	460a      	mov	r2, r1
        Self {
    6aea:	9903      	ldr	r1, [sp, #12]
    6aec:	604a      	str	r2, [r1, #4]
    6aee:	6008      	str	r0, [r1, #0]
    6af0:	2000      	movs	r0, #0
    6af2:	7208      	strb	r0, [r1, #8]
            yielded_once: false,
        }
    }
    6af4:	b006      	add	sp, #24
    6af6:	bd80      	pop	{r7, pc}

00006af8 <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE>:

impl Unpin for Timer {}

impl Future for Timer {
    type Output = ();
    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {
    6af8:	b580      	push	{r7, lr}
    6afa:	466f      	mov	r7, sp
    6afc:	b08c      	sub	sp, #48	@ 0x30
    6afe:	9105      	str	r1, [sp, #20]
    6b00:	9006      	str	r0, [sp, #24]
    6b02:	910b      	str	r1, [sp, #44]	@ 0x2c
    6b04:	a806      	add	r0, sp, #24
        if self.yielded_once && self.expires_at <= Instant::now() {
    6b06:	f7ff fe63 	bl	67d0 <_ZN69_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0fd592b724e82a1E>
    6b0a:	7a00      	ldrb	r0, [r0, #8]
    6b0c:	07c0      	lsls	r0, r0, #31
    6b0e:	b9d0      	cbnz	r0, 6b46 <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE+0x4e>
    6b10:	e7ff      	b.n	6b12 <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE+0x1a>
    6b12:	a806      	add	r0, sp, #24
            Poll::Ready(())
        } else {
            embassy_time_driver::schedule_wake(self.expires_at.as_ticks(), cx.waker());
    6b14:	9004      	str	r0, [sp, #16]
    6b16:	f7ff fe5b 	bl	67d0 <_ZN69_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0fd592b724e82a1E>
    6b1a:	f7ff ff46 	bl	69aa <_ZN12embassy_time7instant7Instant8as_ticks17h9cb9870d7a484a0eE>
    6b1e:	4602      	mov	r2, r0
    6b20:	9805      	ldr	r0, [sp, #20]
    6b22:	9203      	str	r2, [sp, #12]
    6b24:	9102      	str	r1, [sp, #8]
    6b26:	f7ff fdd4 	bl	66d2 <_ZN4core4task4wake7Context5waker17h41b82b6d034ca65eE>
    6b2a:	9902      	ldr	r1, [sp, #8]
    6b2c:	4602      	mov	r2, r0
    6b2e:	9803      	ldr	r0, [sp, #12]
    6b30:	f000 facd 	bl	70ce <_ZN19embassy_time_driver13schedule_wake17h36b905f2968eb3d8E>
    6b34:	9804      	ldr	r0, [sp, #16]
            self.yielded_once = true;
    6b36:	f7ff fe55 	bl	67e4 <_ZN72_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h273f8e7a3e2b34adE>
    6b3a:	4601      	mov	r1, r0
    6b3c:	2001      	movs	r0, #1
    6b3e:	7208      	strb	r0, [r1, #8]
            Poll::Pending
    6b40:	f807 0c11 	strb.w	r0, [r7, #-17]
        if self.yielded_once && self.expires_at <= Instant::now() {
    6b44:	e016      	b.n	6b74 <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE+0x7c>
    6b46:	a806      	add	r0, sp, #24
    6b48:	f7ff fe42 	bl	67d0 <_ZN69_$LT$core..pin..Pin$LT$Ptr$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha0fd592b724e82a1E>
    6b4c:	9000      	str	r0, [sp, #0]
    6b4e:	f7ff ff27 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
    6b52:	4602      	mov	r2, r0
    6b54:	9800      	ldr	r0, [sp, #0]
    6b56:	9201      	str	r2, [sp, #4]
    6b58:	460a      	mov	r2, r1
    6b5a:	9901      	ldr	r1, [sp, #4]
    6b5c:	9209      	str	r2, [sp, #36]	@ 0x24
    6b5e:	9108      	str	r1, [sp, #32]
    6b60:	a908      	add	r1, sp, #32
    6b62:	f7ff fcdd 	bl	6520 <_ZN4core3cmp10PartialOrd2le17hd86e12ae1182a6c9E>
    6b66:	2800      	cmp	r0, #0
    6b68:	d0d3      	beq.n	6b12 <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE+0x1a>
    6b6a:	e7ff      	b.n	6b6c <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE+0x74>
    6b6c:	2000      	movs	r0, #0
            Poll::Ready(())
    6b6e:	f807 0c11 	strb.w	r0, [r7, #-17]
        if self.yielded_once && self.expires_at <= Instant::now() {
    6b72:	e7ff      	b.n	6b74 <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE+0x7c>
        }
    }
    6b74:	f817 0c11 	ldrb.w	r0, [r7, #-17]
    6b78:	b00c      	add	sp, #48	@ 0x30
    6b7a:	bd80      	pop	{r7, pc}

00006b7c <_ZN72_$LT$embassy_time..instant..Instant$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h83c5f53f7f175874E>:
#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
    6b7c:	b580      	push	{r7, lr}
    6b7e:	466f      	mov	r7, sp
    6b80:	b082      	sub	sp, #8
    6b82:	9000      	str	r0, [sp, #0]
    6b84:	9101      	str	r1, [sp, #4]
    ticks: u64,
    6b86:	f7ff fd0b 	bl	65a0 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u64$GT$11partial_cmp17h5084ec0c5c6390bbE>
#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
    6b8a:	b002      	add	sp, #8
    6b8c:	bd80      	pop	{r7, pc}

00006b8e <_defmt_timestamp>:

#[cfg(feature = "defmt-timestamp-uptime-ms")]
defmt::timestamp! {"{=u64:ms}", Instant::now().as_millis() }

#[cfg(any(feature = "defmt-timestamp-uptime", feature = "defmt-timestamp-uptime-us"))]
defmt::timestamp! {"{=u64:us}", Instant::now().as_micros() }
    6b8e:	b580      	push	{r7, lr}
    6b90:	466f      	mov	r7, sp
    6b92:	b086      	sub	sp, #24
    6b94:	f7ff ff04 	bl	69a0 <_ZN12embassy_time7instant7Instant3now17hfcd4d5f32b6e690aE>
    6b98:	9103      	str	r1, [sp, #12]
    6b9a:	9002      	str	r0, [sp, #8]
    6b9c:	a802      	add	r0, sp, #8
    6b9e:	f7ff ff0d 	bl	69bc <_ZN12embassy_time7instant7Instant9as_micros17h4d235fdcfb24be8fE>
    6ba2:	9101      	str	r1, [sp, #4]
    6ba4:	9000      	str	r0, [sp, #0]
    6ba6:	4668      	mov	r0, sp
    6ba8:	9005      	str	r0, [sp, #20]
    6baa:	f003 f9c1 	bl	9f30 <_ZN5defmt6export8integers3u6417hebbc2548cfde2953E>
    6bae:	b006      	add	sp, #24
    6bb0:	bd80      	pop	{r7, pc}
    6bb2:	d4d4      	bmi.n	6b5e <_ZN75_$LT$embassy_time..timer..Timer$u20$as$u20$core..future..future..Future$GT$4poll17h72b7d707e049386aE+0x66>

00006bb4 <_ZN4core4sync6atomic11atomic_load17hfcdf5dd0aa4de20eE>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    6bb4:	b580      	push	{r7, lr}
    6bb6:	466f      	mov	r7, sp
    6bb8:	b094      	sub	sp, #80	@ 0x50
    6bba:	9001      	str	r0, [sp, #4]
    6bbc:	9010      	str	r0, [sp, #64]	@ 0x40
    6bbe:	f807 1c09 	strb.w	r1, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    6bc2:	f24d 40c4 	movw	r0, #54468	@ 0xd4c4
    6bc6:	f2c0 0000 	movt	r0, #0
    6bca:	9012      	str	r0, [sp, #72]	@ 0x48
    6bcc:	f24d 40f4 	movw	r0, #54516	@ 0xd4f4
    6bd0:	f2c0 0000 	movt	r0, #0
    6bd4:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    6bd6:	b2c8      	uxtb	r0, r1
    6bd8:	9002      	str	r0, [sp, #8]
    6bda:	9902      	ldr	r1, [sp, #8]
    6bdc:	e8df f001 	tbb	[pc, r1]
    6be0:	28220804 	.word	0x28220804
    6be4:	0042      	.short	0x0042
    6be6:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    6be8:	9801      	ldr	r0, [sp, #4]
    6bea:	6800      	ldr	r0, [r0, #0]
    6bec:	9003      	str	r0, [sp, #12]
    6bee:	e03f      	b.n	6c70 <_ZN4core4sync6atomic11atomic_load17hfcdf5dd0aa4de20eE+0xbc>
        Arguments { pieces, fmt: None, args: &[] }
    6bf0:	f24d 40f4 	movw	r0, #54516	@ 0xd4f4
    6bf4:	f2c0 0000 	movt	r0, #0
    6bf8:	9004      	str	r0, [sp, #16]
    6bfa:	2001      	movs	r0, #1
    6bfc:	9005      	str	r0, [sp, #20]
    6bfe:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    6c02:	f2c0 0000 	movt	r0, #0
    6c06:	6801      	ldr	r1, [r0, #0]
    6c08:	6840      	ldr	r0, [r0, #4]
    6c0a:	9108      	str	r1, [sp, #32]
    6c0c:	9009      	str	r0, [sp, #36]	@ 0x24
    6c0e:	2004      	movs	r0, #4
    6c10:	9006      	str	r0, [sp, #24]
    6c12:	2000      	movs	r0, #0
    6c14:	9007      	str	r0, [sp, #28]
            Release => panic!("there is no such thing as a release load"),
    6c16:	f24d 5174 	movw	r1, #54644	@ 0xd574
    6c1a:	f2c0 0100 	movt	r1, #0
    6c1e:	a804      	add	r0, sp, #16
    6c20:	f003 fc04 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Acquire => intrinsics::atomic_load_acquire(dst),
    6c24:	9801      	ldr	r0, [sp, #4]
    6c26:	6800      	ldr	r0, [r0, #0]
    6c28:	f3bf 8f5f 	dmb	sy
    6c2c:	9003      	str	r0, [sp, #12]
    6c2e:	e01f      	b.n	6c70 <_ZN4core4sync6atomic11atomic_load17hfcdf5dd0aa4de20eE+0xbc>
    6c30:	f24d 40c4 	movw	r0, #54468	@ 0xd4c4
    6c34:	f2c0 0000 	movt	r0, #0
    6c38:	900a      	str	r0, [sp, #40]	@ 0x28
    6c3a:	2001      	movs	r0, #1
    6c3c:	900b      	str	r0, [sp, #44]	@ 0x2c
    6c3e:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    6c42:	f2c0 0000 	movt	r0, #0
    6c46:	6801      	ldr	r1, [r0, #0]
    6c48:	6840      	ldr	r0, [r0, #4]
    6c4a:	910e      	str	r1, [sp, #56]	@ 0x38
    6c4c:	900f      	str	r0, [sp, #60]	@ 0x3c
    6c4e:	2004      	movs	r0, #4
    6c50:	900c      	str	r0, [sp, #48]	@ 0x30
    6c52:	2000      	movs	r0, #0
    6c54:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release load"),
    6c56:	f24d 5184 	movw	r1, #54660	@ 0xd584
    6c5a:	f2c0 0100 	movt	r1, #0
    6c5e:	a80a      	add	r0, sp, #40	@ 0x28
    6c60:	f003 fbe4 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_load_seqcst(dst),
    6c64:	9801      	ldr	r0, [sp, #4]
    6c66:	6800      	ldr	r0, [r0, #0]
    6c68:	f3bf 8f5f 	dmb	sy
    6c6c:	9003      	str	r0, [sp, #12]
    6c6e:	e7ff      	b.n	6c70 <_ZN4core4sync6atomic11atomic_load17hfcdf5dd0aa4de20eE+0xbc>
}
    6c70:	9803      	ldr	r0, [sp, #12]
    6c72:	b014      	add	sp, #80	@ 0x50
    6c74:	bd80      	pop	{r7, pc}
    6c76:	d4d4      	bmi.n	6c22 <_ZN4core4sync6atomic11atomic_load17hfcdf5dd0aa4de20eE+0x6e>

00006c78 <_ZN4core4sync6atomic12atomic_store17hbbdfeee93a6fa1f8E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    6c78:	b580      	push	{r7, lr}
    6c7a:	466f      	mov	r7, sp
    6c7c:	b094      	sub	sp, #80	@ 0x50
    6c7e:	9100      	str	r1, [sp, #0]
    6c80:	9001      	str	r0, [sp, #4]
    6c82:	900f      	str	r0, [sp, #60]	@ 0x3c
    6c84:	9110      	str	r1, [sp, #64]	@ 0x40
    6c86:	f807 2c09 	strb.w	r2, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    6c8a:	f24d 50c8 	movw	r0, #54728	@ 0xd5c8
    6c8e:	f2c0 0000 	movt	r0, #0
    6c92:	9012      	str	r0, [sp, #72]	@ 0x48
    6c94:	f24d 50fc 	movw	r0, #54780	@ 0xd5fc
    6c98:	f2c0 0000 	movt	r0, #0
    6c9c:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    6c9e:	b2d0      	uxtb	r0, r2
    6ca0:	9002      	str	r0, [sp, #8]
    6ca2:	9902      	ldr	r1, [sp, #8]
    6ca4:	e8df f001 	tbb	[pc, r1]
    6ca8:	280e0804 	.word	0x280e0804
    6cac:	0042      	.short	0x0042
    6cae:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    6cb0:	9800      	ldr	r0, [sp, #0]
    6cb2:	9901      	ldr	r1, [sp, #4]
    6cb4:	6008      	str	r0, [r1, #0]
    6cb6:	e041      	b.n	6d3c <_ZN4core4sync6atomic12atomic_store17hbbdfeee93a6fa1f8E+0xc4>
            Release => intrinsics::atomic_store_release(dst, val),
    6cb8:	9800      	ldr	r0, [sp, #0]
    6cba:	9901      	ldr	r1, [sp, #4]
    6cbc:	f3bf 8f5f 	dmb	sy
    6cc0:	6008      	str	r0, [r1, #0]
    6cc2:	e03b      	b.n	6d3c <_ZN4core4sync6atomic12atomic_store17hbbdfeee93a6fa1f8E+0xc4>
        Arguments { pieces, fmt: None, args: &[] }
    6cc4:	f24d 50fc 	movw	r0, #54780	@ 0xd5fc
    6cc8:	f2c0 0000 	movt	r0, #0
    6ccc:	9003      	str	r0, [sp, #12]
    6cce:	2001      	movs	r0, #1
    6cd0:	9004      	str	r0, [sp, #16]
    6cd2:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    6cd6:	f2c0 0000 	movt	r0, #0
    6cda:	6801      	ldr	r1, [r0, #0]
    6cdc:	6840      	ldr	r0, [r0, #4]
    6cde:	9107      	str	r1, [sp, #28]
    6ce0:	9008      	str	r0, [sp, #32]
    6ce2:	2004      	movs	r0, #4
    6ce4:	9005      	str	r0, [sp, #20]
    6ce6:	2000      	movs	r0, #0
    6ce8:	9006      	str	r0, [sp, #24]
            Acquire => panic!("there is no such thing as an acquire store"),
    6cea:	f24d 6104 	movw	r1, #54788	@ 0xd604
    6cee:	f2c0 0100 	movt	r1, #0
    6cf2:	a803      	add	r0, sp, #12
    6cf4:	f003 fb9a 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    6cf8:	f24d 50c8 	movw	r0, #54728	@ 0xd5c8
    6cfc:	f2c0 0000 	movt	r0, #0
    6d00:	9009      	str	r0, [sp, #36]	@ 0x24
    6d02:	2001      	movs	r0, #1
    6d04:	900a      	str	r0, [sp, #40]	@ 0x28
    6d06:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    6d0a:	f2c0 0000 	movt	r0, #0
    6d0e:	6801      	ldr	r1, [r0, #0]
    6d10:	6840      	ldr	r0, [r0, #4]
    6d12:	910d      	str	r1, [sp, #52]	@ 0x34
    6d14:	900e      	str	r0, [sp, #56]	@ 0x38
    6d16:	2004      	movs	r0, #4
    6d18:	900b      	str	r0, [sp, #44]	@ 0x2c
    6d1a:	2000      	movs	r0, #0
    6d1c:	900c      	str	r0, [sp, #48]	@ 0x30
            AcqRel => panic!("there is no such thing as an acquire-release store"),
    6d1e:	f24d 6114 	movw	r1, #54804	@ 0xd614
    6d22:	f2c0 0100 	movt	r1, #0
    6d26:	a809      	add	r0, sp, #36	@ 0x24
    6d28:	f003 fb80 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
    6d2c:	9800      	ldr	r0, [sp, #0]
    6d2e:	9901      	ldr	r1, [sp, #4]
    6d30:	f3bf 8f5f 	dmb	sy
    6d34:	6008      	str	r0, [r1, #0]
    6d36:	f3bf 8f5f 	dmb	sy
    6d3a:	e7ff      	b.n	6d3c <_ZN4core4sync6atomic12atomic_store17hbbdfeee93a6fa1f8E+0xc4>
}
    6d3c:	b014      	add	sp, #80	@ 0x50
    6d3e:	bd80      	pop	{r7, pc}

00006d40 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17ha9f7bd51295dcb61E>:
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    6d40:	b580      	push	{r7, lr}
    6d42:	466f      	mov	r7, sp
    6d44:	b08a      	sub	sp, #40	@ 0x28
    6d46:	9100      	str	r1, [sp, #0]
    6d48:	9001      	str	r0, [sp, #4]
    6d4a:	9003      	str	r0, [sp, #12]
    6d4c:	9104      	str	r1, [sp, #16]
        let len = slice.len();
    6d4e:	9105      	str	r1, [sp, #20]
        unsafe { NonNull { pointer: r as *mut T } }
    6d50:	9006      	str	r0, [sp, #24]
    6d52:	9107      	str	r1, [sp, #28]
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
    6d54:	9008      	str	r0, [sp, #32]
                if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
    6d56:	e7ff      	b.n	6d58 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17ha9f7bd51295dcb61E+0x18>
        unsafe { mem::transmute::<Self, *mut T>(self) }
    6d58:	9801      	ldr	r0, [sp, #4]
    6d5a:	9900      	ldr	r1, [sp, #0]
    6d5c:	9009      	str	r0, [sp, #36]	@ 0x24
    6d5e:	4408      	add	r0, r1
    6d60:	9002      	str	r0, [sp, #8]
    6d62:	e7ff      	b.n	6d64 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17ha9f7bd51295dcb61E+0x24>
            Self { ptr, end_or_len, _marker: PhantomData }
    6d64:	9801      	ldr	r0, [sp, #4]
    6d66:	9902      	ldr	r1, [sp, #8]
    }
    6d68:	b00a      	add	sp, #40	@ 0x28
    6d6a:	bd80      	pop	{r7, pc}

00006d6c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E>:
            fn next(&mut self) -> Option<$elem> {
    6d6c:	b580      	push	{r7, lr}
    6d6e:	466f      	mov	r7, sp
    6d70:	b08d      	sub	sp, #52	@ 0x34
    6d72:	9000      	str	r0, [sp, #0]
    6d74:	9006      	str	r0, [sp, #24]
    6d76:	2101      	movs	r1, #1
        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
    6d78:	9107      	str	r1, [sp, #28]
    pub const unsafe fn add(self, count: usize) -> Self
    6d7a:	9108      	str	r1, [sp, #32]
                let ptr = self.ptr;
    6d7c:	6801      	ldr	r1, [r0, #0]
    6d7e:	9103      	str	r1, [sp, #12]
                let end_or_len = self.end_or_len;
    6d80:	6840      	ldr	r0, [r0, #4]
    6d82:	9001      	str	r0, [sp, #4]
    6d84:	9009      	str	r0, [sp, #36]	@ 0x24
                    if T::IS_ZST {
    6d86:	e7ff      	b.n	6d88 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E+0x1c>
    6d88:	9801      	ldr	r0, [sp, #4]
    6d8a:	a903      	add	r1, sp, #12
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
    6d8c:	910a      	str	r1, [sp, #40]	@ 0x28
    6d8e:	9004      	str	r0, [sp, #16]
    6d90:	a804      	add	r0, sp, #16
    6d92:	900b      	str	r0, [sp, #44]	@ 0x2c
        unsafe { mem::transmute::<Self, *mut T>(self) }
    6d94:	9803      	ldr	r0, [sp, #12]
    6d96:	9904      	ldr	r1, [sp, #16]
    6d98:	4288      	cmp	r0, r1
    6d9a:	d005      	beq.n	6da8 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E+0x3c>
    6d9c:	e7ff      	b.n	6d9e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E+0x32>
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
    6d9e:	9900      	ldr	r1, [sp, #0]
    6da0:	9803      	ldr	r0, [sp, #12]
    6da2:	3001      	adds	r0, #1
                        self.ptr = ptr.add(1);
    6da4:	6008      	str	r0, [r1, #0]
                    if T::IS_ZST {
    6da6:	e002      	b.n	6dae <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E+0x42>
    6da8:	2000      	movs	r0, #0
                            return None;
    6daa:	9002      	str	r0, [sp, #8]
    6dac:	e009      	b.n	6dc2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E+0x56>
                    Some({ptr}.$into_ref())
    6dae:	9803      	ldr	r0, [sp, #12]
    6db0:	9005      	str	r0, [sp, #20]
    6db2:	a805      	add	r0, sp, #20
    6db4:	900c      	str	r0, [sp, #48]	@ 0x30
        unsafe { &mut *self.as_ptr() }
    6db6:	9805      	ldr	r0, [sp, #20]
    6db8:	9002      	str	r0, [sp, #8]
            }
    6dba:	e7ff      	b.n	6dbc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E+0x50>
    6dbc:	9802      	ldr	r0, [sp, #8]
    6dbe:	b00d      	add	sp, #52	@ 0x34
    6dc0:	bd80      	pop	{r7, pc}
    6dc2:	e7fb      	b.n	6dbc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbd1eb53e27a36510E+0x50>

00006dc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h46b3d0894c23207cE>:
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    6dc4:	b580      	push	{r7, lr}
    6dc6:	466f      	mov	r7, sp
    6dc8:	b082      	sub	sp, #8
    6dca:	9000      	str	r0, [sp, #0]
    6dcc:	9101      	str	r1, [sp, #4]
        IterMut::new(self)
    6dce:	f7ff ffb7 	bl	6d40 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17ha9f7bd51295dcb61E>
    }
    6dd2:	b002      	add	sp, #8
    6dd4:	bd80      	pop	{r7, pc}

00006dd6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hfec3e1d4a4a9bd7eE>:
    pub const fn is_null(self) -> bool {
    6dd6:	b580      	push	{r7, lr}
    6dd8:	466f      	mov	r7, sp
    6dda:	b081      	sub	sp, #4
    6ddc:	9000      	str	r0, [sp, #0]
                ptr.addr() == 0
    6dde:	fab0 f080 	clz	r0, r0
    6de2:	0940      	lsrs	r0, r0, #5
    }
    6de4:	b001      	add	sp, #4
    6de6:	bd80      	pop	{r7, pc}

00006de8 <_ZN20embassy_hal_internal9interrupt101_$LT$impl$u20$core..convert..From$LT$embassy_hal_internal..interrupt..Priority$GT$$u20$for$u20$u8$GT$4from17h764c4e185f8e43deE>:
        unsafe { mem::transmute(priority & PRIO_MASK) }
    }
}

impl From<Priority> for u8 {
    fn from(p: Priority) -> Self {
    6de8:	b580      	push	{r7, lr}
    6dea:	466f      	mov	r7, sp
    6dec:	b081      	sub	sp, #4
    6dee:	f807 0c01 	strb.w	r0, [r7, #-1]
        p as u8
    }
    6df2:	b001      	add	sp, #4
    6df4:	bd80      	pop	{r7, pc}

00006df6 <_ZN4core3cmp3Ord3min17h658d976bee5822d2E>:
    fn min(self, other: Self) -> Self
    6df6:	b580      	push	{r7, lr}
    6df8:	466f      	mov	r7, sp
    6dfa:	b088      	sub	sp, #32
    6dfc:	9101      	str	r1, [sp, #4]
    6dfe:	9000      	str	r0, [sp, #0]
    6e00:	9303      	str	r3, [sp, #12]
    6e02:	9202      	str	r2, [sp, #8]
    6e04:	a802      	add	r0, sp, #8
    6e06:	9006      	str	r0, [sp, #24]
    6e08:	4668      	mov	r0, sp
    6e0a:	9007      	str	r0, [sp, #28]
            fn lt(&self, other: &Self) -> bool { *self <  *other }
    6e0c:	9a02      	ldr	r2, [sp, #8]
    6e0e:	9803      	ldr	r0, [sp, #12]
    6e10:	9b00      	ldr	r3, [sp, #0]
    6e12:	9901      	ldr	r1, [sp, #4]
    6e14:	1ad2      	subs	r2, r2, r3
    6e16:	4188      	sbcs	r0, r1
        if other < self { other } else { self }
    6e18:	d305      	bcc.n	6e26 <_ZN4core3cmp3Ord3min17h658d976bee5822d2E+0x30>
    6e1a:	e7ff      	b.n	6e1c <_ZN4core3cmp3Ord3min17h658d976bee5822d2E+0x26>
    6e1c:	9800      	ldr	r0, [sp, #0]
    6e1e:	9901      	ldr	r1, [sp, #4]
    6e20:	9105      	str	r1, [sp, #20]
    6e22:	9004      	str	r0, [sp, #16]
    }
    6e24:	e004      	b.n	6e30 <_ZN4core3cmp3Ord3min17h658d976bee5822d2E+0x3a>
        if other < self { other } else { self }
    6e26:	9802      	ldr	r0, [sp, #8]
    6e28:	9903      	ldr	r1, [sp, #12]
    6e2a:	9105      	str	r1, [sp, #20]
    6e2c:	9004      	str	r0, [sp, #16]
    }
    6e2e:	e003      	b.n	6e38 <_ZN4core3cmp3Ord3min17h658d976bee5822d2E+0x42>
    6e30:	9804      	ldr	r0, [sp, #16]
    6e32:	9905      	ldr	r1, [sp, #20]
    6e34:	b008      	add	sp, #32
    6e36:	bd80      	pop	{r7, pc}
    6e38:	e7fa      	b.n	6e30 <_ZN4core3cmp3Ord3min17h658d976bee5822d2E+0x3a>

00006e3a <_ZN4core3cmp3min17hcb13f8d3124a6ce4E>:
pub fn min<T: Ord>(v1: T, v2: T) -> T {
    6e3a:	b580      	push	{r7, lr}
    6e3c:	466f      	mov	r7, sp
    6e3e:	b084      	sub	sp, #16
    6e40:	9101      	str	r1, [sp, #4]
    6e42:	9000      	str	r0, [sp, #0]
    6e44:	9303      	str	r3, [sp, #12]
    6e46:	9202      	str	r2, [sp, #8]
    v1.min(v2)
    6e48:	f7ff ffd5 	bl	6df6 <_ZN4core3cmp3Ord3min17h658d976bee5822d2E>
}
    6e4c:	b004      	add	sp, #16
    6e4e:	bd80      	pop	{r7, pc}

00006e50 <_ZN4core4cell13Cell$LT$T$GT$3get17h99156f9b85005c36E>:
    pub const fn get(&self) -> T {
    6e50:	b580      	push	{r7, lr}
    6e52:	466f      	mov	r7, sp
    6e54:	b081      	sub	sp, #4
    6e56:	9000      	str	r0, [sp, #0]
        unsafe { *self.value.get() }
    6e58:	6800      	ldr	r0, [r0, #0]
    }
    6e5a:	b001      	add	sp, #4
    6e5c:	bd80      	pop	{r7, pc}

00006e5e <_ZN4core4cell13Cell$LT$T$GT$3get17he2081a591ba2b4c2E>:
    pub const fn get(&self) -> T {
    6e5e:	b580      	push	{r7, lr}
    6e60:	466f      	mov	r7, sp
    6e62:	b081      	sub	sp, #4
    6e64:	4601      	mov	r1, r0
    6e66:	9100      	str	r1, [sp, #0]
        unsafe { *self.value.get() }
    6e68:	6808      	ldr	r0, [r1, #0]
    6e6a:	6849      	ldr	r1, [r1, #4]
    }
    6e6c:	b001      	add	sp, #4
    6e6e:	bd80      	pop	{r7, pc}

00006e70 <_ZN4core4cell13Cell$LT$T$GT$3set17h83929fdb7f08304eE>:
    pub fn set(&self, val: T) {
    6e70:	b580      	push	{r7, lr}
    6e72:	466f      	mov	r7, sp
    6e74:	b084      	sub	sp, #16
    6e76:	9001      	str	r0, [sp, #4]
    6e78:	9303      	str	r3, [sp, #12]
    6e7a:	9202      	str	r2, [sp, #8]
    6e7c:	6043      	str	r3, [r0, #4]
    6e7e:	6002      	str	r2, [r0, #0]
    }
    6e80:	b004      	add	sp, #16
    6e82:	bd80      	pop	{r7, pc}

00006e84 <_ZN4core4cell13Cell$LT$T$GT$3set17hb9632cb4ac8c3c0aE>:
    pub fn set(&self, val: T) {
    6e84:	b580      	push	{r7, lr}
    6e86:	466f      	mov	r7, sp
    6e88:	b082      	sub	sp, #8
    6e8a:	9000      	str	r0, [sp, #0]
    6e8c:	9101      	str	r1, [sp, #4]
    6e8e:	6001      	str	r1, [r0, #0]
    }
    6e90:	b002      	add	sp, #8
    6e92:	bd80      	pop	{r7, pc}

00006e94 <_ZN4core4cell13Cell$LT$T$GT$7replace17h57dd27963a8f3cf8E>:
    pub const fn replace(&self, val: T) -> T {
    6e94:	b580      	push	{r7, lr}
    6e96:	466f      	mov	r7, sp
    6e98:	b082      	sub	sp, #8
    6e9a:	4602      	mov	r2, r0
    6e9c:	9200      	str	r2, [sp, #0]
    6e9e:	9101      	str	r1, [sp, #4]
        let result = crate::intrinsics::read_via_copy(dest);
    6ea0:	6810      	ldr	r0, [r2, #0]
        crate::intrinsics::write_via_move(dest, src);
    6ea2:	6011      	str	r1, [r2, #0]
    }
    6ea4:	b002      	add	sp, #8
    6ea6:	bd80      	pop	{r7, pc}

00006ea8 <_ZN4core6option15Option$LT$T$GT$7is_none17h9bec77f17823cacbE>:
    pub const fn is_none(&self) -> bool {
    6ea8:	b580      	push	{r7, lr}
    6eaa:	466f      	mov	r7, sp
    6eac:	b081      	sub	sp, #4
    6eae:	9000      	str	r0, [sp, #0]
        matches!(*self, Some(_))
    6eb0:	6800      	ldr	r0, [r0, #0]
    6eb2:	fab0 f080 	clz	r0, r0
    6eb6:	0940      	lsrs	r0, r0, #5
    }
    6eb8:	b001      	add	sp, #4
    6eba:	bd80      	pop	{r7, pc}

00006ebc <_ZN71_$LT$embassy_executor..raw..TaskRef$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha152c31e6fbef106E>:
#[derive(Clone, Copy, PartialEq)]
    6ebc:	b580      	push	{r7, lr}
    6ebe:	466f      	mov	r7, sp
    6ec0:	b082      	sub	sp, #8
    6ec2:	9000      	str	r0, [sp, #0]
    6ec4:	9101      	str	r1, [sp, #4]
    ptr: NonNull<TaskHeader>,
    6ec6:	f000 f802 	bl	6ece <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h4c5358c8e9c7f4b4E>
#[derive(Clone, Copy, PartialEq)]
    6eca:	b002      	add	sp, #8
    6ecc:	bd80      	pop	{r7, pc}

00006ece <_ZN78_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h4c5358c8e9c7f4b4E>:
    fn eq(&self, other: &Self) -> bool {
    6ece:	b580      	push	{r7, lr}
    6ed0:	466f      	mov	r7, sp
    6ed2:	b082      	sub	sp, #8
    6ed4:	9000      	str	r0, [sp, #0]
    6ed6:	9101      	str	r1, [sp, #4]
        self.as_ptr() == other.as_ptr()
    6ed8:	6800      	ldr	r0, [r0, #0]
    6eda:	6809      	ldr	r1, [r1, #0]
    6edc:	1a40      	subs	r0, r0, r1
    6ede:	fab0 f080 	clz	r0, r0
    6ee2:	0940      	lsrs	r0, r0, #5
    }
    6ee4:	b002      	add	sp, #8
    6ee6:	bd80      	pop	{r7, pc}

00006ee8 <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE>:

    /// Schedules a task to run at a specific time.
    ///
    /// If this function returns `true`, the called should find the next expiration time and set
    /// a new alarm for that time.
    pub fn schedule_wake(&mut self, at: u64, waker: &Waker) -> bool {
    6ee8:	b580      	push	{r7, lr}
    6eea:	466f      	mov	r7, sp
    6eec:	b090      	sub	sp, #64	@ 0x40
    6eee:	4601      	mov	r1, r0
    6ef0:	9101      	str	r1, [sp, #4]
    6ef2:	4618      	mov	r0, r3
    6ef4:	9002      	str	r0, [sp, #8]
    6ef6:	4610      	mov	r0, r2
    6ef8:	9003      	str	r0, [sp, #12]
    6efa:	68b8      	ldr	r0, [r7, #8]
    6efc:	910b      	str	r1, [sp, #44]	@ 0x2c
    6efe:	930d      	str	r3, [sp, #52]	@ 0x34
    6f00:	920c      	str	r2, [sp, #48]	@ 0x30
        let task = embassy_executor::raw::task_from_waker(waker);
    6f02:	f002 fbcb 	bl	969c <_ZN16embassy_executor3raw5waker15task_from_waker17h12439a98522045fbE>
    6f06:	9006      	str	r0, [sp, #24]
    6f08:	a806      	add	r0, sp, #24
        let item = task.timer_queue_item();
    6f0a:	f002 fbff 	bl	970c <_ZN16embassy_executor3raw7TaskRef16timer_queue_item17hf5744ba05b232187E>
    6f0e:	4601      	mov	r1, r0
    6f10:	9104      	str	r1, [sp, #16]
    6f12:	900f      	str	r0, [sp, #60]	@ 0x3c
        if item.next.get().is_none() {
    6f14:	3008      	adds	r0, #8
    6f16:	f7ff ff9b 	bl	6e50 <_ZN4core4cell13Cell$LT$T$GT$3get17h99156f9b85005c36E>
    6f1a:	9007      	str	r0, [sp, #28]
    6f1c:	a807      	add	r0, sp, #28
    6f1e:	f7ff ffc3 	bl	6ea8 <_ZN4core6option15Option$LT$T$GT$7is_none17h9bec77f17823cacbE>
    6f22:	b958      	cbnz	r0, 6f3c <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x54>
    6f24:	e7ff      	b.n	6f26 <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x3e>
            } else {
                prev
            });
            item.expires_at.set(at);
            true
        } else if at <= item.expires_at.get() {
    6f26:	9804      	ldr	r0, [sp, #16]
    6f28:	f7ff ff99 	bl	6e5e <_ZN4core4cell13Cell$LT$T$GT$3get17he2081a591ba2b4c2E>
    6f2c:	9b03      	ldr	r3, [sp, #12]
    6f2e:	4602      	mov	r2, r0
    6f30:	9802      	ldr	r0, [sp, #8]
    6f32:	1ad2      	subs	r2, r2, r3
    6f34:	eb71 0000 	sbcs.w	r0, r1, r0
    6f38:	d214      	bcs.n	6f64 <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x7c>
    6f3a:	e00f      	b.n	6f5c <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x74>
            let prev = self.head.replace(Some(task));
    6f3c:	9801      	ldr	r0, [sp, #4]
    6f3e:	9906      	ldr	r1, [sp, #24]
    6f40:	9109      	str	r1, [sp, #36]	@ 0x24
    6f42:	9909      	ldr	r1, [sp, #36]	@ 0x24
    6f44:	f7ff ffa6 	bl	6e94 <_ZN4core4cell13Cell$LT$T$GT$7replace17h57dd27963a8f3cf8E>
    6f48:	4601      	mov	r1, r0
    6f4a:	9804      	ldr	r0, [sp, #16]
    6f4c:	9108      	str	r1, [sp, #32]
            item.next.set(if prev.is_none() {
    6f4e:	3008      	adds	r0, #8
    6f50:	9000      	str	r0, [sp, #0]
    6f52:	a808      	add	r0, sp, #32
    6f54:	f7ff ffa8 	bl	6ea8 <_ZN4core6option15Option$LT$T$GT$7is_none17h9bec77f17823cacbE>
    6f58:	b9a0      	cbnz	r0, 6f84 <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x9c>
    6f5a:	e010      	b.n	6f7e <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x96>
    6f5c:	2000      	movs	r0, #0
            // If expiration is sooner than previously set, update.
            item.expires_at.set(at);
            true
        } else {
            // Task does not need to be updated.
            false
    6f5e:	f807 0c29 	strb.w	r0, [r7, #-41]
        } else if at <= item.expires_at.get() {
    6f62:	e008      	b.n	6f76 <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x8e>
            item.expires_at.set(at);
    6f64:	9b02      	ldr	r3, [sp, #8]
    6f66:	9a03      	ldr	r2, [sp, #12]
    6f68:	9804      	ldr	r0, [sp, #16]
    6f6a:	f7ff ff81 	bl	6e70 <_ZN4core4cell13Cell$LT$T$GT$3set17h83929fdb7f08304eE>
    6f6e:	2001      	movs	r0, #1
            true
    6f70:	f807 0c29 	strb.w	r0, [r7, #-41]
        } else if at <= item.expires_at.get() {
    6f74:	e7ff      	b.n	6f76 <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x8e>
        }
    }
    6f76:	f817 0c29 	ldrb.w	r0, [r7, #-41]
    6f7a:	b010      	add	sp, #64	@ 0x40
    6f7c:	bd80      	pop	{r7, pc}
                prev
    6f7e:	9808      	ldr	r0, [sp, #32]
    6f80:	900a      	str	r0, [sp, #40]	@ 0x28
            item.next.set(if prev.is_none() {
    6f82:	e003      	b.n	6f8c <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0xa4>
                Some(unsafe { TaskRef::dangling() })
    6f84:	f002 fbb4 	bl	96f0 <_ZN16embassy_executor3raw7TaskRef8dangling17he46ac951e1b89cdcE>
    6f88:	900a      	str	r0, [sp, #40]	@ 0x28
            item.next.set(if prev.is_none() {
    6f8a:	e7ff      	b.n	6f8c <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0xa4>
    6f8c:	9800      	ldr	r0, [sp, #0]
    6f8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
    6f90:	f7ff ff78 	bl	6e84 <_ZN4core4cell13Cell$LT$T$GT$3set17hb9632cb4ac8c3c0aE>
    6f94:	9804      	ldr	r0, [sp, #16]
    6f96:	9a03      	ldr	r2, [sp, #12]
    6f98:	9b02      	ldr	r3, [sp, #8]
            item.expires_at.set(at);
    6f9a:	f7ff ff69 	bl	6e70 <_ZN4core4cell13Cell$LT$T$GT$3set17h83929fdb7f08304eE>
    6f9e:	2001      	movs	r0, #1
            true
    6fa0:	f807 0c29 	strb.w	r0, [r7, #-41]
        if item.next.get().is_none() {
    6fa4:	e7e7      	b.n	6f76 <_ZN24embassy_time_queue_utils16queue_integrated5Queue13schedule_wake17h53e1371b1253394dE+0x8e>

00006fa6 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration17haef54b140ae69a08E>:

    /// Dequeues expired timers and returns the next alarm time.
    ///
    /// The provided callback will be called for each expired task. Tasks that never expire
    /// will be removed, but the callback will not be called.
    pub fn next_expiration(&mut self, now: u64) -> u64 {
    6fa6:	b580      	push	{r7, lr}
    6fa8:	466f      	mov	r7, sp
    6faa:	b086      	sub	sp, #24
    6fac:	9301      	str	r3, [sp, #4]
    6fae:	9200      	str	r2, [sp, #0]
    6fb0:	9005      	str	r0, [sp, #20]
    6fb2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
        let mut next_expiration = u64::MAX;
    6fb6:	9103      	str	r1, [sp, #12]
    6fb8:	9102      	str	r1, [sp, #8]
    6fba:	4669      	mov	r1, sp
    6fbc:	aa02      	add	r2, sp, #8

        self.retain(|p| {
    6fbe:	f000 f843 	bl	7048 <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE>
                next_expiration = min(next_expiration, expires);
                expires != u64::MAX
            }
        });

        next_expiration
    6fc2:	9802      	ldr	r0, [sp, #8]
    6fc4:	9903      	ldr	r1, [sp, #12]
    }
    6fc6:	b006      	add	sp, #24
    6fc8:	bd80      	pop	{r7, pc}

00006fca <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration28_$u7b$$u7b$closure$u7d$$u7d$17h4940f51c0650d900E>:
        self.retain(|p| {
    6fca:	b580      	push	{r7, lr}
    6fcc:	466f      	mov	r7, sp
    6fce:	b08a      	sub	sp, #40	@ 0x28
    6fd0:	9001      	str	r0, [sp, #4]
    6fd2:	9104      	str	r1, [sp, #16]
    6fd4:	9006      	str	r0, [sp, #24]
    6fd6:	a804      	add	r0, sp, #16
            let item = p.timer_queue_item();
    6fd8:	f002 fb98 	bl	970c <_ZN16embassy_executor3raw7TaskRef16timer_queue_item17hf5744ba05b232187E>
    6fdc:	9007      	str	r0, [sp, #28]
            let expires = item.expires_at.get();
    6fde:	f7ff ff3e 	bl	6e5e <_ZN4core4cell13Cell$LT$T$GT$3get17he2081a591ba2b4c2E>
    6fe2:	4603      	mov	r3, r0
    6fe4:	9801      	ldr	r0, [sp, #4]
    6fe6:	460a      	mov	r2, r1
    6fe8:	9202      	str	r2, [sp, #8]
    6fea:	461a      	mov	r2, r3
    6fec:	9203      	str	r2, [sp, #12]
    6fee:	9109      	str	r1, [sp, #36]	@ 0x24
    6ff0:	9308      	str	r3, [sp, #32]
            if expires <= now {
    6ff2:	6800      	ldr	r0, [r0, #0]
    6ff4:	6802      	ldr	r2, [r0, #0]
    6ff6:	6840      	ldr	r0, [r0, #4]
    6ff8:	1ad2      	subs	r2, r2, r3
    6ffa:	4188      	sbcs	r0, r1
    6ffc:	d219      	bcs.n	7032 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration28_$u7b$$u7b$closure$u7d$$u7d$17h4940f51c0650d900E+0x68>
    6ffe:	e7ff      	b.n	7000 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration28_$u7b$$u7b$closure$u7d$$u7d$17h4940f51c0650d900E+0x36>
                next_expiration = min(next_expiration, expires);
    7000:	9a03      	ldr	r2, [sp, #12]
    7002:	9b02      	ldr	r3, [sp, #8]
    7004:	9801      	ldr	r0, [sp, #4]
    7006:	6841      	ldr	r1, [r0, #4]
    7008:	6808      	ldr	r0, [r1, #0]
    700a:	6849      	ldr	r1, [r1, #4]
    700c:	f7ff ff15 	bl	6e3a <_ZN4core3cmp3min17hcb13f8d3124a6ce4E>
    7010:	9b01      	ldr	r3, [sp, #4]
    7012:	4602      	mov	r2, r0
    7014:	9803      	ldr	r0, [sp, #12]
    7016:	468c      	mov	ip, r1
    7018:	9902      	ldr	r1, [sp, #8]
    701a:	685b      	ldr	r3, [r3, #4]
    701c:	f8c3 c004 	str.w	ip, [r3, #4]
    7020:	601a      	str	r2, [r3, #0]
                expires != u64::MAX
    7022:	4008      	ands	r0, r1
    7024:	f1b0 30ff 	subs.w	r0, r0, #4294967295	@ 0xffffffff
    7028:	bf18      	it	ne
    702a:	2001      	movne	r0, #1
    702c:	f807 0c11 	strb.w	r0, [r7, #-17]
            if expires <= now {
    7030:	e006      	b.n	7040 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration28_$u7b$$u7b$closure$u7d$$u7d$17h4940f51c0650d900E+0x76>
                embassy_executor::raw::wake_task(p);
    7032:	9804      	ldr	r0, [sp, #16]
    7034:	f002 fc2b 	bl	988e <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE>
    7038:	2000      	movs	r0, #0
                false
    703a:	f807 0c11 	strb.w	r0, [r7, #-17]
            if expires <= now {
    703e:	e7ff      	b.n	7040 <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration28_$u7b$$u7b$closure$u7d$$u7d$17h4940f51c0650d900E+0x76>
        });
    7040:	f817 0c11 	ldrb.w	r0, [r7, #-17]
    7044:	b00a      	add	sp, #40	@ 0x28
    7046:	bd80      	pop	{r7, pc}

00007048 <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE>:

    fn retain(&self, mut f: impl FnMut(TaskRef) -> bool) {
    7048:	b580      	push	{r7, lr}
    704a:	466f      	mov	r7, sp
    704c:	b08c      	sub	sp, #48	@ 0x30
    704e:	9103      	str	r1, [sp, #12]
    7050:	9204      	str	r2, [sp, #16]
    7052:	900a      	str	r0, [sp, #40]	@ 0x28
        let mut prev = &self.head;
    7054:	9005      	str	r0, [sp, #20]
        while let Some(p) = prev.get() {
    7056:	e7ff      	b.n	7058 <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x10>
    7058:	9805      	ldr	r0, [sp, #20]
    705a:	f7ff fef9 	bl	6e50 <_ZN4core4cell13Cell$LT$T$GT$3get17h99156f9b85005c36E>
    705e:	9006      	str	r0, [sp, #24]
    7060:	9806      	ldr	r0, [sp, #24]
    7062:	b158      	cbz	r0, 707c <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x34>
    7064:	e7ff      	b.n	7066 <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x1e>
    7066:	9806      	ldr	r0, [sp, #24]
    7068:	9007      	str	r0, [sp, #28]
            if unsafe { p == TaskRef::dangling() } {
    706a:	f002 fb41 	bl	96f0 <_ZN16embassy_executor3raw7TaskRef8dangling17he46ac951e1b89cdcE>
    706e:	9008      	str	r0, [sp, #32]
    7070:	a807      	add	r0, sp, #28
    7072:	a908      	add	r1, sp, #32
    7074:	f7ff ff22 	bl	6ebc <_ZN71_$LT$embassy_executor..raw..TaskRef$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha152c31e6fbef106E>
    7078:	b110      	cbz	r0, 7080 <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x38>
    707a:	e7ff      	b.n	707c <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x34>
                // Remove it
                prev.set(item.next.get());
                item.next.set(None);
            }
        }
    }
    707c:	b00c      	add	sp, #48	@ 0x30
    707e:	bd80      	pop	{r7, pc}
    7080:	a807      	add	r0, sp, #28
            let item = p.timer_queue_item();
    7082:	f002 fb43 	bl	970c <_ZN16embassy_executor3raw7TaskRef16timer_queue_item17hf5744ba05b232187E>
    7086:	4601      	mov	r1, r0
    7088:	9102      	str	r1, [sp, #8]
    708a:	900b      	str	r0, [sp, #44]	@ 0x2c
            if f(p) {
    708c:	9907      	ldr	r1, [sp, #28]
    708e:	a803      	add	r0, sp, #12
    7090:	f7ff ff9b 	bl	6fca <_ZN24embassy_time_queue_utils16queue_integrated5Queue15next_expiration28_$u7b$$u7b$closure$u7d$$u7d$17h4940f51c0650d900E>
    7094:	b990      	cbnz	r0, 70bc <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x74>
    7096:	e7ff      	b.n	7098 <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x50>
                prev.set(item.next.get());
    7098:	9802      	ldr	r0, [sp, #8]
    709a:	9905      	ldr	r1, [sp, #20]
    709c:	9100      	str	r1, [sp, #0]
    709e:	3008      	adds	r0, #8
    70a0:	9001      	str	r0, [sp, #4]
    70a2:	f7ff fed5 	bl	6e50 <_ZN4core4cell13Cell$LT$T$GT$3get17h99156f9b85005c36E>
    70a6:	4601      	mov	r1, r0
    70a8:	9800      	ldr	r0, [sp, #0]
    70aa:	f7ff feeb 	bl	6e84 <_ZN4core4cell13Cell$LT$T$GT$3set17hb9632cb4ac8c3c0aE>
    70ae:	9801      	ldr	r0, [sp, #4]
    70b0:	2100      	movs	r1, #0
                item.next.set(None);
    70b2:	9109      	str	r1, [sp, #36]	@ 0x24
    70b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
    70b6:	f7ff fee5 	bl	6e84 <_ZN4core4cell13Cell$LT$T$GT$3set17hb9632cb4ac8c3c0aE>
    70ba:	e7cd      	b.n	7058 <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x10>
                prev = &item.next;
    70bc:	9802      	ldr	r0, [sp, #8]
    70be:	3008      	adds	r0, #8
    70c0:	9005      	str	r0, [sp, #20]
            if f(p) {
    70c2:	e7c9      	b.n	7058 <_ZN24embassy_time_queue_utils16queue_integrated5Queue6retain17ha6e45a2bc9cee3faE+0x10>

000070c4 <_ZN19embassy_time_driver3now17he20ffa15b03699c6E>:
pub fn now() -> u64 {
    70c4:	b580      	push	{r7, lr}
    70c6:	466f      	mov	r7, sp
    unsafe { _embassy_time_now() }
    70c8:	f7fe ff50 	bl	5f6c <_embassy_time_now>
}
    70cc:	bd80      	pop	{r7, pc}

000070ce <_ZN19embassy_time_driver13schedule_wake17h36b905f2968eb3d8E>:
pub fn schedule_wake(at: u64, waker: &Waker) {
    70ce:	b580      	push	{r7, lr}
    70d0:	466f      	mov	r7, sp
    70d2:	b084      	sub	sp, #16
    70d4:	9101      	str	r1, [sp, #4]
    70d6:	9000      	str	r0, [sp, #0]
    70d8:	9203      	str	r2, [sp, #12]
    unsafe { _embassy_time_schedule_wake(at, waker) }
    70da:	f7fe ff50 	bl	5f7e <_embassy_time_schedule_wake>
}
    70de:	b004      	add	sp, #16
    70e0:	bd80      	pop	{r7, pc}

000070e2 <_ZN16critical_section4with17h1e29f6925bb3b9ffE>:
pub fn with<R>(f: impl FnOnce(CriticalSection) -> R) -> R {
    70e2:	b580      	push	{r7, lr}
    70e4:	466f      	mov	r7, sp
    70e6:	b086      	sub	sp, #24
    70e8:	9100      	str	r1, [sp, #0]
    70ea:	9001      	str	r0, [sp, #4]
    70ec:	9003      	str	r0, [sp, #12]
    70ee:	9104      	str	r1, [sp, #16]
    RestoreState(_critical_section_1_0_acquire())
    70f0:	f003 f8ce 	bl	a290 <_critical_section_1_0_acquire>
    70f4:	9900      	ldr	r1, [sp, #0]
    70f6:	4602      	mov	r2, r0
    let state = unsafe { acquire() };
    70f8:	9801      	ldr	r0, [sp, #4]
    70fa:	f807 2c01 	strb.w	r2, [r7, #-1]
    let _guard = Guard { state };
    70fe:	f807 2c0d 	strb.w	r2, [r7, #-13]
    unsafe { f(CriticalSection::new()) }
    7102:	f000 f89f 	bl	7244 <_ZN122_$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$u20$as$u20$embassy_sync..blocking_mutex..raw..RawMutex$GT$4lock28_$u7b$$u7b$closure$u7d$$u7d$17h4ed677b477235b0fE>
    7106:	f1a7 000d 	sub.w	r0, r7, #13
}
    710a:	f000 f817 	bl	713c <_ZN4core3ptr50drop_in_place$LT$critical_section..with..Guard$GT$17h82a7466148a2f4a1E>
    710e:	b006      	add	sp, #24
    7110:	bd80      	pop	{r7, pc}

00007112 <_ZN16critical_section4with17ha5883856b0e0641dE>:
pub fn with<R>(f: impl FnOnce(CriticalSection) -> R) -> R {
    7112:	b580      	push	{r7, lr}
    7114:	466f      	mov	r7, sp
    7116:	b084      	sub	sp, #16
    7118:	9000      	str	r0, [sp, #0]
    711a:	9002      	str	r0, [sp, #8]
    RestoreState(_critical_section_1_0_acquire())
    711c:	f003 f8b8 	bl	a290 <_critical_section_1_0_acquire>
    7120:	4601      	mov	r1, r0
    let state = unsafe { acquire() };
    7122:	9800      	ldr	r0, [sp, #0]
    7124:	f807 1c01 	strb.w	r1, [r7, #-1]
    let _guard = Guard { state };
    7128:	f807 1c09 	strb.w	r1, [r7, #-9]
    unsafe { f(CriticalSection::new()) }
    712c:	f000 f893 	bl	7256 <_ZN122_$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$u20$as$u20$embassy_sync..blocking_mutex..raw..RawMutex$GT$4lock28_$u7b$$u7b$closure$u7d$$u7d$17hc20a15227b6c5ddfE>
    7130:	f1a7 0009 	sub.w	r0, r7, #9
}
    7134:	f000 f802 	bl	713c <_ZN4core3ptr50drop_in_place$LT$critical_section..with..Guard$GT$17h82a7466148a2f4a1E>
    7138:	b004      	add	sp, #16
    713a:	bd80      	pop	{r7, pc}

0000713c <_ZN4core3ptr50drop_in_place$LT$critical_section..with..Guard$GT$17h82a7466148a2f4a1E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    713c:	b580      	push	{r7, lr}
    713e:	466f      	mov	r7, sp
    7140:	b084      	sub	sp, #16
    7142:	9001      	str	r0, [sp, #4]
    7144:	9002      	str	r0, [sp, #8]
            unsafe { release(self.state) }
    7146:	7800      	ldrb	r0, [r0, #0]
    7148:	f807 0c01 	strb.w	r0, [r7, #-1]
    _critical_section_1_0_release(restore_state.0)
    714c:	f003 f8a5 	bl	a29a <_critical_section_1_0_release>
    7150:	b004      	add	sp, #16
    7152:	bd80      	pop	{r7, pc}

00007154 <_ZN4core4cell13Cell$LT$T$GT$3set17h1cd9153f83590f50E>:
    pub fn set(&self, val: T) {
    7154:	b580      	push	{r7, lr}
    7156:	466f      	mov	r7, sp
    7158:	b086      	sub	sp, #24
    715a:	9003      	str	r0, [sp, #12]
    715c:	9104      	str	r1, [sp, #16]
    715e:	9205      	str	r2, [sp, #20]
        let result = crate::intrinsics::read_via_copy(dest);
    7160:	f8d0 c000 	ldr.w	ip, [r0]
    7164:	6843      	ldr	r3, [r0, #4]
    7166:	f8cd c004 	str.w	ip, [sp, #4]
    716a:	9302      	str	r3, [sp, #8]
        crate::intrinsics::write_via_move(dest, src);
    716c:	6001      	str	r1, [r0, #0]
    716e:	6042      	str	r2, [r0, #4]
    7170:	a801      	add	r0, sp, #4
        self.replace(val);
    7172:	f000 f951 	bl	7418 <_ZN4core3ptr72drop_in_place$LT$core..option..Option$LT$core..task..wake..Waker$GT$$GT$17h03f93c5e6a4faed6E>
    }
    7176:	b006      	add	sp, #24
    7178:	bd80      	pop	{r7, pc}

0000717a <_ZN4core4cell13Cell$LT$T$GT$7replace17h7b32bbd167272b0eE>:
    pub const fn replace(&self, val: T) -> T {
    717a:	b580      	push	{r7, lr}
    717c:	466f      	mov	r7, sp
    717e:	b083      	sub	sp, #12
    7180:	468c      	mov	ip, r1
    7182:	4603      	mov	r3, r0
    7184:	9300      	str	r3, [sp, #0]
    7186:	f8cd c004 	str.w	ip, [sp, #4]
    718a:	9202      	str	r2, [sp, #8]
        let result = crate::intrinsics::read_via_copy(dest);
    718c:	6818      	ldr	r0, [r3, #0]
    718e:	6859      	ldr	r1, [r3, #4]
        crate::intrinsics::write_via_move(dest, src);
    7190:	f8c3 c000 	str.w	ip, [r3]
    7194:	605a      	str	r2, [r3, #4]
    }
    7196:	b003      	add	sp, #12
    7198:	bd80      	pop	{r7, pc}

0000719a <_ZN4core4task4wake5Waker11wake_by_ref17h91713e15eb8ca436E>:
    /// This is similar to [`wake()`](Self::wake), but may be slightly less efficient in
    /// the case where an owned `Waker` is available. This method should be preferred to
    /// calling `waker.clone().wake()`.
    #[inline]
    #[stable(feature = "futures_api", since = "1.36.0")]
    pub fn wake_by_ref(&self) {
    719a:	b580      	push	{r7, lr}
    719c:	466f      	mov	r7, sp
    719e:	b082      	sub	sp, #8
    71a0:	9001      	str	r0, [sp, #4]
        // The actual wakeup call is delegated through a virtual function call
        // to the implementation which is defined by the executor.

        // SAFETY: see `wake`
        unsafe { (self.waker.vtable.wake_by_ref)(self.waker.data) }
    71a2:	6801      	ldr	r1, [r0, #0]
    71a4:	6840      	ldr	r0, [r0, #4]
    71a6:	6889      	ldr	r1, [r1, #8]
    71a8:	4788      	blx	r1
    }
    71aa:	b002      	add	sp, #8
    71ac:	bd80      	pop	{r7, pc}

000071ae <_ZN4core4task4wake5Waker9will_wake17h431270091df11298E>:
    /// this type's [`clone_from`](Self::clone_from) implementation uses it to
    /// avoid cloning the waker when they would wake the same task anyway.
    #[inline]
    #[must_use]
    #[stable(feature = "futures_api", since = "1.36.0")]
    pub fn will_wake(&self, other: &Waker) -> bool {
    71ae:	b580      	push	{r7, lr}
    71b0:	466f      	mov	r7, sp
    71b2:	b089      	sub	sp, #36	@ 0x24
    71b4:	460a      	mov	r2, r1
    71b6:	4601      	mov	r1, r0
    71b8:	9103      	str	r1, [sp, #12]
    71ba:	9204      	str	r2, [sp, #16]
        // We optimize this by comparing vtable addresses instead of vtable contents.
        // This is permitted since the function is documented as best-effort.
        let RawWaker { data: a_data, vtable: a_vtable } = self.waker;
    71bc:	6848      	ldr	r0, [r1, #4]
    71be:	9005      	str	r0, [sp, #20]
    71c0:	6809      	ldr	r1, [r1, #0]
    71c2:	9100      	str	r1, [sp, #0]
    71c4:	9106      	str	r1, [sp, #24]
        let RawWaker { data: b_data, vtable: b_vtable } = other.waker;
    71c6:	6851      	ldr	r1, [r2, #4]
    71c8:	9107      	str	r1, [sp, #28]
    71ca:	6812      	ldr	r2, [r2, #0]
    71cc:	9201      	str	r2, [sp, #4]
    71ce:	9208      	str	r2, [sp, #32]
        a_data == b_data && ptr::eq(a_vtable, b_vtable)
    71d0:	4288      	cmp	r0, r1
    71d2:	d004      	beq.n	71de <_ZN4core4task4wake5Waker9will_wake17h431270091df11298E+0x30>
    71d4:	e7ff      	b.n	71d6 <_ZN4core4task4wake5Waker9will_wake17h431270091df11298E+0x28>
    71d6:	2000      	movs	r0, #0
    71d8:	f807 0c19 	strb.w	r0, [r7, #-25]
    71dc:	e008      	b.n	71f0 <_ZN4core4task4wake5Waker9will_wake17h431270091df11298E+0x42>
#[inline(always)]
#[must_use = "pointer comparison produces a value"]
#[rustc_diagnostic_item = "ptr_eq"]
#[allow(ambiguous_wide_pointer_comparisons)] // it's actually clear here
pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
    a == b
    71de:	9800      	ldr	r0, [sp, #0]
    71e0:	9901      	ldr	r1, [sp, #4]
    71e2:	1a40      	subs	r0, r0, r1
    71e4:	fab0 f080 	clz	r0, r0
    71e8:	0940      	lsrs	r0, r0, #5
    71ea:	f807 0c19 	strb.w	r0, [r7, #-25]
    71ee:	e7ff      	b.n	71f0 <_ZN4core4task4wake5Waker9will_wake17h431270091df11298E+0x42>
    }
    71f0:	f817 0c19 	ldrb.w	r0, [r7, #-25]
    71f4:	b009      	add	sp, #36	@ 0x24
    71f6:	bd80      	pop	{r7, pc}

000071f8 <_ZN62_$LT$core..task..wake..Waker$u20$as$u20$core..clone..Clone$GT$5clone17h84df8f04e93435ecE>:
}

#[stable(feature = "futures_api", since = "1.36.0")]
impl Clone for Waker {
    #[inline]
    fn clone(&self) -> Self {
    71f8:	b580      	push	{r7, lr}
    71fa:	466f      	mov	r7, sp
    71fc:	b082      	sub	sp, #8
    71fe:	9001      	str	r0, [sp, #4]
        Waker {
            // SAFETY: This is safe because `Waker::from_raw` is the only way
            // to initialize `clone` and `data` requiring the user to acknowledge
            // that the contract of [`RawWaker`] is upheld.
            waker: unsafe { (self.waker.vtable.clone)(self.waker.data) },
    7200:	6801      	ldr	r1, [r0, #0]
    7202:	6840      	ldr	r0, [r0, #4]
    7204:	6809      	ldr	r1, [r1, #0]
    7206:	4788      	blx	r1
        }
    }
    7208:	b002      	add	sp, #8
    720a:	bd80      	pop	{r7, pc}

0000720c <_ZN122_$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$u20$as$u20$embassy_sync..blocking_mutex..raw..RawMutex$GT$4lock17h3a878c52ebdabebaE>:
}

unsafe impl RawMutex for CriticalSectionRawMutex {
    const INIT: Self = Self::new();

    fn lock<R>(&self, f: impl FnOnce() -> R) -> R {
    720c:	b580      	push	{r7, lr}
    720e:	466f      	mov	r7, sp
    7210:	b084      	sub	sp, #16
    7212:	9101      	str	r1, [sp, #4]
    7214:	4601      	mov	r1, r0
    7216:	9801      	ldr	r0, [sp, #4]
    7218:	9102      	str	r1, [sp, #8]
    721a:	9003      	str	r0, [sp, #12]
        critical_section::with(|_| f())
    721c:	f7ff ff79 	bl	7112 <_ZN16critical_section4with17ha5883856b0e0641dE>
    }
    7220:	b004      	add	sp, #16
    7222:	bd80      	pop	{r7, pc}

00007224 <_ZN122_$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$u20$as$u20$embassy_sync..blocking_mutex..raw..RawMutex$GT$4lock17h6b3f7c03682e5379E>:
    fn lock<R>(&self, f: impl FnOnce() -> R) -> R {
    7224:	b580      	push	{r7, lr}
    7226:	466f      	mov	r7, sp
    7228:	b086      	sub	sp, #24
    722a:	9201      	str	r2, [sp, #4]
    722c:	460a      	mov	r2, r1
    722e:	9901      	ldr	r1, [sp, #4]
    7230:	9202      	str	r2, [sp, #8]
    7232:	4602      	mov	r2, r0
    7234:	9802      	ldr	r0, [sp, #8]
    7236:	9203      	str	r2, [sp, #12]
    7238:	9004      	str	r0, [sp, #16]
    723a:	9105      	str	r1, [sp, #20]
        critical_section::with(|_| f())
    723c:	f7ff ff51 	bl	70e2 <_ZN16critical_section4with17h1e29f6925bb3b9ffE>
    }
    7240:	b006      	add	sp, #24
    7242:	bd80      	pop	{r7, pc}

00007244 <_ZN122_$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$u20$as$u20$embassy_sync..blocking_mutex..raw..RawMutex$GT$4lock28_$u7b$$u7b$closure$u7d$$u7d$17h4ed677b477235b0fE>:
        critical_section::with(|_| f())
    7244:	b580      	push	{r7, lr}
    7246:	466f      	mov	r7, sp
    7248:	b084      	sub	sp, #16
    724a:	9001      	str	r0, [sp, #4]
    724c:	9102      	str	r1, [sp, #8]
    724e:	f000 f82c 	bl	72aa <_ZN12embassy_sync14blocking_mutex18Mutex$LT$R$C$T$GT$4lock28_$u7b$$u7b$closure$u7d$$u7d$17h8384f6064654c7a6E>
    7252:	b004      	add	sp, #16
    7254:	bd80      	pop	{r7, pc}

00007256 <_ZN122_$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$u20$as$u20$embassy_sync..blocking_mutex..raw..RawMutex$GT$4lock28_$u7b$$u7b$closure$u7d$$u7d$17hc20a15227b6c5ddfE>:
    7256:	b580      	push	{r7, lr}
    7258:	466f      	mov	r7, sp
    725a:	b082      	sub	sp, #8
    725c:	9000      	str	r0, [sp, #0]
    725e:	f000 f818 	bl	7292 <_ZN12embassy_sync14blocking_mutex18Mutex$LT$R$C$T$GT$4lock28_$u7b$$u7b$closure$u7d$$u7d$17h23acb6a8048aba8dE>
    7262:	b002      	add	sp, #8
    7264:	bd80      	pop	{r7, pc}

00007266 <_ZN12embassy_sync14blocking_mutex18Mutex$LT$R$C$T$GT$4lock17h13a679505edacf6fE>:
    pub fn lock<U>(&self, f: impl FnOnce(&T) -> U) -> U {
    7266:	b580      	push	{r7, lr}
    7268:	466f      	mov	r7, sp
    726a:	b082      	sub	sp, #8
    726c:	4601      	mov	r1, r0
    726e:	9100      	str	r1, [sp, #0]
        self.raw.lock(|| {
    7270:	4608      	mov	r0, r1
    7272:	f7ff ffcb 	bl	720c <_ZN122_$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$u20$as$u20$embassy_sync..blocking_mutex..raw..RawMutex$GT$4lock17h3a878c52ebdabebaE>
    }
    7276:	b002      	add	sp, #8
    7278:	bd80      	pop	{r7, pc}

0000727a <_ZN12embassy_sync14blocking_mutex18Mutex$LT$R$C$T$GT$4lock17hf603db56d9413de3E>:
    pub fn lock<U>(&self, f: impl FnOnce(&T) -> U) -> U {
    727a:	b580      	push	{r7, lr}
    727c:	466f      	mov	r7, sp
    727e:	b082      	sub	sp, #8
    7280:	460a      	mov	r2, r1
    7282:	4601      	mov	r1, r0
    7284:	9100      	str	r1, [sp, #0]
    7286:	9201      	str	r2, [sp, #4]
        self.raw.lock(|| {
    7288:	4608      	mov	r0, r1
    728a:	f7ff ffcb 	bl	7224 <_ZN122_$LT$embassy_sync..blocking_mutex..raw..CriticalSectionRawMutex$u20$as$u20$embassy_sync..blocking_mutex..raw..RawMutex$GT$4lock17h6b3f7c03682e5379E>
    }
    728e:	b002      	add	sp, #8
    7290:	bd80      	pop	{r7, pc}

00007292 <_ZN12embassy_sync14blocking_mutex18Mutex$LT$R$C$T$GT$4lock28_$u7b$$u7b$closure$u7d$$u7d$17h23acb6a8048aba8dE>:
        self.raw.lock(|| {
    7292:	b580      	push	{r7, lr}
    7294:	466f      	mov	r7, sp
    7296:	b084      	sub	sp, #16
    7298:	9000      	str	r0, [sp, #0]
            let ptr = self.data.get() as *const T;
    729a:	9800      	ldr	r0, [sp, #0]
    729c:	9003      	str	r0, [sp, #12]
    729e:	9001      	str	r0, [sp, #4]
            let inner = unsafe { &*ptr };
    72a0:	9002      	str	r0, [sp, #8]
            f(inner)
    72a2:	f000 f866 	bl	7372 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E>
        })
    72a6:	b004      	add	sp, #16
    72a8:	bd80      	pop	{r7, pc}

000072aa <_ZN12embassy_sync14blocking_mutex18Mutex$LT$R$C$T$GT$4lock28_$u7b$$u7b$closure$u7d$$u7d$17h8384f6064654c7a6E>:
        self.raw.lock(|| {
    72aa:	b580      	push	{r7, lr}
    72ac:	466f      	mov	r7, sp
    72ae:	b086      	sub	sp, #24
    72b0:	9001      	str	r0, [sp, #4]
    72b2:	9102      	str	r1, [sp, #8]
            let ptr = self.data.get() as *const T;
    72b4:	9901      	ldr	r1, [sp, #4]
    72b6:	9105      	str	r1, [sp, #20]
    72b8:	9103      	str	r1, [sp, #12]
            let inner = unsafe { &*ptr };
    72ba:	9104      	str	r1, [sp, #16]
            f(inner)
    72bc:	9802      	ldr	r0, [sp, #8]
    72be:	f000 f80b 	bl	72d8 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE>
        })
    72c2:	b006      	add	sp, #24
    72c4:	bd80      	pop	{r7, pc}

000072c6 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register17h66352035f07247f3E>:
            waker: Mutex::const_new(mutex, Cell::new(None)),
        }
    }

    /// Register a waker. Overwrites the previous waker, if any.
    pub fn register(&self, w: &Waker) {
    72c6:	b580      	push	{r7, lr}
    72c8:	466f      	mov	r7, sp
    72ca:	b082      	sub	sp, #8
    72cc:	9000      	str	r0, [sp, #0]
    72ce:	9101      	str	r1, [sp, #4]
        self.waker.lock(|cell| {
    72d0:	f7ff ffd3 	bl	727a <_ZN12embassy_sync14blocking_mutex18Mutex$LT$R$C$T$GT$4lock17hf603db56d9413de3E>
            cell.set(match cell.replace(None) {
                Some(w2) if (w2.will_wake(w)) => Some(w2),
                _ => Some(w.clone()),
            })
        })
    }
    72d4:	b002      	add	sp, #8
    72d6:	bd80      	pop	{r7, pc}

000072d8 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE>:
        self.waker.lock(|cell| {
    72d8:	b580      	push	{r7, lr}
    72da:	466f      	mov	r7, sp
    72dc:	b08e      	sub	sp, #56	@ 0x38
    72de:	9101      	str	r1, [sp, #4]
    72e0:	4601      	mov	r1, r0
    72e2:	9801      	ldr	r0, [sp, #4]
    72e4:	9102      	str	r1, [sp, #8]
    72e6:	900a      	str	r0, [sp, #40]	@ 0x28
    72e8:	2100      	movs	r1, #0
            cell.set(match cell.replace(None) {
    72ea:	f807 1c11 	strb.w	r1, [r7, #-17]
    72ee:	9107      	str	r1, [sp, #28]
    72f0:	9907      	ldr	r1, [sp, #28]
    72f2:	9a08      	ldr	r2, [sp, #32]
    72f4:	f7ff ff41 	bl	717a <_ZN4core4cell13Cell$LT$T$GT$7replace17h7b32bbd167272b0eE>
    72f8:	9005      	str	r0, [sp, #20]
    72fa:	9106      	str	r1, [sp, #24]
    72fc:	2001      	movs	r0, #1
    72fe:	f807 0c11 	strb.w	r0, [r7, #-17]
    7302:	9805      	ldr	r0, [sp, #20]
    7304:	b138      	cbz	r0, 7316 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x3e>
    7306:	e7ff      	b.n	7308 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x30>
    7308:	a805      	add	r0, sp, #20
                Some(w2) if (w2.will_wake(w)) => Some(w2),
    730a:	900b      	str	r0, [sp, #44]	@ 0x2c
    730c:	9902      	ldr	r1, [sp, #8]
    730e:	f7ff ff4e 	bl	71ae <_ZN4core4task4wake5Waker9will_wake17h431270091df11298E>
    7312:	b930      	cbnz	r0, 7322 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x4a>
    7314:	e7ff      	b.n	7316 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x3e>
                _ => Some(w.clone()),
    7316:	9802      	ldr	r0, [sp, #8]
    7318:	f7ff ff6e 	bl	71f8 <_ZN62_$LT$core..task..wake..Waker$u20$as$u20$core..clone..Clone$GT$5clone17h84df8f04e93435ecE>
    731c:	9003      	str	r0, [sp, #12]
    731e:	9104      	str	r1, [sp, #16]
    7320:	e009      	b.n	7336 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x5e>
    7322:	2000      	movs	r0, #0
                Some(w2) if (w2.will_wake(w)) => Some(w2),
    7324:	f807 0c11 	strb.w	r0, [r7, #-17]
    7328:	9905      	ldr	r1, [sp, #20]
    732a:	9806      	ldr	r0, [sp, #24]
    732c:	910c      	str	r1, [sp, #48]	@ 0x30
    732e:	900d      	str	r0, [sp, #52]	@ 0x34
    7330:	9103      	str	r1, [sp, #12]
    7332:	9004      	str	r0, [sp, #16]
    7334:	e7ff      	b.n	7336 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x5e>
            cell.set(match cell.replace(None) {
    7336:	9801      	ldr	r0, [sp, #4]
    7338:	9903      	ldr	r1, [sp, #12]
    733a:	9a04      	ldr	r2, [sp, #16]
    733c:	f7ff ff0a 	bl	7154 <_ZN4core4cell13Cell$LT$T$GT$3set17h1cd9153f83590f50E>
        })
    7340:	9805      	ldr	r0, [sp, #20]
    7342:	b128      	cbz	r0, 7350 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x78>
    7344:	e7ff      	b.n	7346 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x6e>
    7346:	f817 0c11 	ldrb.w	r0, [r7, #-17]
    734a:	07c0      	lsls	r0, r0, #31
    734c:	b928      	cbnz	r0, 735a <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x82>
    734e:	e7ff      	b.n	7350 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x78>
    7350:	2000      	movs	r0, #0
    7352:	f807 0c11 	strb.w	r0, [r7, #-17]
    7356:	b00e      	add	sp, #56	@ 0x38
    7358:	bd80      	pop	{r7, pc}
    735a:	a805      	add	r0, sp, #20
    735c:	f000 f854 	bl	7408 <_ZN4core3ptr44drop_in_place$LT$core..task..wake..Waker$GT$17h8f3d27706aadafabE>
    7360:	e7f6      	b.n	7350 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register28_$u7b$$u7b$closure$u7d$$u7d$17hfda182e1eb5facafE+0x78>

00007362 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake17hf7f2d28be1b53c91E>:

    /// Wake the registered waker, if any.
    pub fn wake(&self) {
    7362:	b580      	push	{r7, lr}
    7364:	466f      	mov	r7, sp
    7366:	b082      	sub	sp, #8
    7368:	9001      	str	r0, [sp, #4]
        self.waker.lock(|cell| {
    736a:	f7ff ff7c 	bl	7266 <_ZN12embassy_sync14blocking_mutex18Mutex$LT$R$C$T$GT$4lock17h13a679505edacf6fE>
            if let Some(w) = cell.replace(None) {
                w.wake_by_ref();
                cell.set(Some(w));
            }
        })
    }
    736e:	b002      	add	sp, #8
    7370:	bd80      	pop	{r7, pc}

00007372 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E>:
        self.waker.lock(|cell| {
    7372:	b580      	push	{r7, lr}
    7374:	466f      	mov	r7, sp
    7376:	b08c      	sub	sp, #48	@ 0x30
    7378:	9001      	str	r0, [sp, #4]
    737a:	900b      	str	r0, [sp, #44]	@ 0x2c
    737c:	2100      	movs	r1, #0
            if let Some(w) = cell.replace(None) {
    737e:	f807 1c06 	strb.w	r1, [r7, #-6]
    7382:	9104      	str	r1, [sp, #16]
    7384:	9904      	ldr	r1, [sp, #16]
    7386:	9a05      	ldr	r2, [sp, #20]
    7388:	f7ff fef7 	bl	717a <_ZN4core4cell13Cell$LT$T$GT$7replace17h7b32bbd167272b0eE>
    738c:	9002      	str	r0, [sp, #8]
    738e:	9103      	str	r1, [sp, #12]
    7390:	2001      	movs	r0, #1
    7392:	f807 0c06 	strb.w	r0, [r7, #-6]
    7396:	9802      	ldr	r0, [sp, #8]
    7398:	b1a0      	cbz	r0, 73c4 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E+0x52>
    739a:	e7ff      	b.n	739c <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E+0x2a>
    739c:	2000      	movs	r0, #0
    739e:	f807 0c06 	strb.w	r0, [r7, #-6]
    73a2:	9902      	ldr	r1, [sp, #8]
    73a4:	9803      	ldr	r0, [sp, #12]
    73a6:	9106      	str	r1, [sp, #24]
    73a8:	9007      	str	r0, [sp, #28]
    73aa:	a806      	add	r0, sp, #24
                w.wake_by_ref();
    73ac:	f7ff fef5 	bl	719a <_ZN4core4task4wake5Waker11wake_by_ref17h91713e15eb8ca436E>
    73b0:	9801      	ldr	r0, [sp, #4]
                cell.set(Some(w));
    73b2:	9a06      	ldr	r2, [sp, #24]
    73b4:	9907      	ldr	r1, [sp, #28]
    73b6:	9208      	str	r2, [sp, #32]
    73b8:	9109      	str	r1, [sp, #36]	@ 0x24
    73ba:	9908      	ldr	r1, [sp, #32]
    73bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    73be:	f7ff fec9 	bl	7154 <_ZN4core4cell13Cell$LT$T$GT$3set17h1cd9153f83590f50E>
    73c2:	e7ff      	b.n	73c4 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E+0x52>
        })
    73c4:	9802      	ldr	r0, [sp, #8]
    73c6:	b128      	cbz	r0, 73d4 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E+0x62>
    73c8:	e7ff      	b.n	73ca <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E+0x58>
    73ca:	f817 0c06 	ldrb.w	r0, [r7, #-6]
    73ce:	07c0      	lsls	r0, r0, #31
    73d0:	b928      	cbnz	r0, 73de <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E+0x6c>
    73d2:	e7ff      	b.n	73d4 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E+0x62>
    73d4:	2000      	movs	r0, #0
    73d6:	f807 0c06 	strb.w	r0, [r7, #-6]
    73da:	b00c      	add	sp, #48	@ 0x30
    73dc:	bd80      	pop	{r7, pc}
    73de:	a802      	add	r0, sp, #8
    73e0:	f000 f812 	bl	7408 <_ZN4core3ptr44drop_in_place$LT$core..task..wake..Waker$GT$17h8f3d27706aadafabE>
    73e4:	e7f6      	b.n	73d4 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake28_$u7b$$u7b$closure$u7d$$u7d$17h4737b0cd4bcc2e71E+0x62>

000073e6 <_ZN12embassy_sync9waitqueue12atomic_waker11AtomicWaker8register17hf17cf2d6985e8e98E>:
            waker: GenericAtomicWaker::new(CriticalSectionRawMutex::new()),
        }
    }

    /// Register a waker. Overwrites the previous waker, if any.
    pub fn register(&self, w: &Waker) {
    73e6:	b580      	push	{r7, lr}
    73e8:	466f      	mov	r7, sp
    73ea:	b082      	sub	sp, #8
    73ec:	9000      	str	r0, [sp, #0]
    73ee:	9101      	str	r1, [sp, #4]
        self.waker.register(w);
    73f0:	f7ff ff69 	bl	72c6 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$8register17h66352035f07247f3E>
    }
    73f4:	b002      	add	sp, #8
    73f6:	bd80      	pop	{r7, pc}

000073f8 <_ZN12embassy_sync9waitqueue12atomic_waker11AtomicWaker4wake17h8492fb69456d8b05E>:

    /// Wake the registered waker, if any.
    pub fn wake(&self) {
    73f8:	b580      	push	{r7, lr}
    73fa:	466f      	mov	r7, sp
    73fc:	b082      	sub	sp, #8
    73fe:	9001      	str	r0, [sp, #4]
        self.waker.wake();
    7400:	f7ff ffaf 	bl	7362 <_ZN12embassy_sync9waitqueue12atomic_waker27GenericAtomicWaker$LT$M$GT$4wake17hf7f2d28be1b53c91E>
    }
    7404:	b002      	add	sp, #8
    7406:	bd80      	pop	{r7, pc}

00007408 <_ZN4core3ptr44drop_in_place$LT$core..task..wake..Waker$GT$17h8f3d27706aadafabE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    7408:	b580      	push	{r7, lr}
    740a:	466f      	mov	r7, sp
    740c:	b082      	sub	sp, #8
    740e:	9001      	str	r0, [sp, #4]
    7410:	f000 f810 	bl	7434 <_ZN65_$LT$core..task..wake..Waker$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf3926ca1fe210bc6E>
    7414:	b002      	add	sp, #8
    7416:	bd80      	pop	{r7, pc}

00007418 <_ZN4core3ptr72drop_in_place$LT$core..option..Option$LT$core..task..wake..Waker$GT$$GT$17h03f93c5e6a4faed6E>:
    7418:	b580      	push	{r7, lr}
    741a:	466f      	mov	r7, sp
    741c:	b082      	sub	sp, #8
    741e:	9000      	str	r0, [sp, #0]
    7420:	9001      	str	r0, [sp, #4]
    7422:	6800      	ldr	r0, [r0, #0]
    7424:	b910      	cbnz	r0, 742c <_ZN4core3ptr72drop_in_place$LT$core..option..Option$LT$core..task..wake..Waker$GT$$GT$17h03f93c5e6a4faed6E+0x14>
    7426:	e7ff      	b.n	7428 <_ZN4core3ptr72drop_in_place$LT$core..option..Option$LT$core..task..wake..Waker$GT$$GT$17h03f93c5e6a4faed6E+0x10>
    7428:	b002      	add	sp, #8
    742a:	bd80      	pop	{r7, pc}
    742c:	9800      	ldr	r0, [sp, #0]
    742e:	f7ff ffeb 	bl	7408 <_ZN4core3ptr44drop_in_place$LT$core..task..wake..Waker$GT$17h8f3d27706aadafabE>
    7432:	e7f9      	b.n	7428 <_ZN4core3ptr72drop_in_place$LT$core..option..Option$LT$core..task..wake..Waker$GT$$GT$17h03f93c5e6a4faed6E+0x10>

00007434 <_ZN65_$LT$core..task..wake..Waker$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf3926ca1fe210bc6E>:
}

#[stable(feature = "futures_api", since = "1.36.0")]
impl Drop for Waker {
    #[inline]
    fn drop(&mut self) {
    7434:	b580      	push	{r7, lr}
    7436:	466f      	mov	r7, sp
    7438:	b082      	sub	sp, #8
    743a:	9001      	str	r0, [sp, #4]
        // SAFETY: This is safe because `Waker::from_raw` is the only way
        // to initialize `drop` and `data` requiring the user to acknowledge
        // that the contract of `RawWaker` is upheld.
        unsafe { (self.waker.vtable.drop)(self.waker.data) }
    743c:	6801      	ldr	r1, [r0, #0]
    743e:	6840      	ldr	r0, [r0, #4]
    7440:	68c9      	ldr	r1, [r1, #12]
    7442:	4788      	blx	r1
    }
    7444:	b002      	add	sp, #8
    7446:	bd80      	pop	{r7, pc}

00007448 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0282a50597d86e14E>:
macro_rules! fmt_refs {
    ($($tr:ident),*) => {
        $(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<T: ?Sized + $tr> $tr for &T {
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    7448:	b580      	push	{r7, lr}
    744a:	466f      	mov	r7, sp
    744c:	b082      	sub	sp, #8
    744e:	9000      	str	r0, [sp, #0]
    7450:	9101      	str	r1, [sp, #4]
    7452:	6800      	ldr	r0, [r0, #0]
    7454:	f002 ff8a 	bl	a36c <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h31e6d42fa2f9de00E>
    7458:	b002      	add	sp, #8
    745a:	bd80      	pop	{r7, pc}

0000745c <_ZN4core4sync6atomic10AtomicBool4load17h57427c0315431ec1E>:
    pub fn load(&self, order: Ordering) -> bool {
    745c:	b580      	push	{r7, lr}
    745e:	466f      	mov	r7, sp
    7460:	b084      	sub	sp, #16
    7462:	9001      	str	r0, [sp, #4]
    7464:	f807 1c05 	strb.w	r1, [r7, #-5]
        unsafe { atomic_load(self.v.get(), order) != 0 }
    7468:	9003      	str	r0, [sp, #12]
    746a:	f000 f813 	bl	7494 <_ZN4core4sync6atomic11atomic_load17hf89c49ab5f5100ecE>
    746e:	b2c0      	uxtb	r0, r0
    7470:	2800      	cmp	r0, #0
    7472:	bf18      	it	ne
    7474:	2001      	movne	r0, #1
    }
    7476:	b004      	add	sp, #16
    7478:	bd80      	pop	{r7, pc}

0000747a <_ZN4core4sync6atomic10AtomicBool5store17h213692616c73e228E>:
    pub fn store(&self, val: bool, order: Ordering) {
    747a:	b580      	push	{r7, lr}
    747c:	466f      	mov	r7, sp
    747e:	b084      	sub	sp, #16
    7480:	9001      	str	r0, [sp, #4]
    7482:	f807 1c06 	strb.w	r1, [r7, #-6]
    7486:	f807 2c05 	strb.w	r2, [r7, #-5]
            atomic_store(self.v.get(), val as u8, order);
    748a:	9003      	str	r0, [sp, #12]
    748c:	f000 f868 	bl	7560 <_ZN4core4sync6atomic12atomic_store17h2047fd04c7112c94E>
    }
    7490:	b004      	add	sp, #16
    7492:	bd80      	pop	{r7, pc}

00007494 <_ZN4core4sync6atomic11atomic_load17hf89c49ab5f5100ecE>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    7494:	b580      	push	{r7, lr}
    7496:	466f      	mov	r7, sp
    7498:	b094      	sub	sp, #80	@ 0x50
    749a:	9001      	str	r0, [sp, #4]
    749c:	9010      	str	r0, [sp, #64]	@ 0x40
    749e:	f807 1c09 	strb.w	r1, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    74a2:	f24d 6058 	movw	r0, #54872	@ 0xd658
    74a6:	f2c0 0000 	movt	r0, #0
    74aa:	9012      	str	r0, [sp, #72]	@ 0x48
    74ac:	f24d 6088 	movw	r0, #54920	@ 0xd688
    74b0:	f2c0 0000 	movt	r0, #0
    74b4:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    74b6:	b2c8      	uxtb	r0, r1
    74b8:	9002      	str	r0, [sp, #8]
    74ba:	9902      	ldr	r1, [sp, #8]
    74bc:	e8df f001 	tbb	[pc, r1]
    74c0:	2a230904 	.word	0x2a230904
    74c4:	0044      	.short	0x0044
    74c6:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    74c8:	9801      	ldr	r0, [sp, #4]
    74ca:	7800      	ldrb	r0, [r0, #0]
    74cc:	f807 0c41 	strb.w	r0, [r7, #-65]
    74d0:	e041      	b.n	7556 <_ZN4core4sync6atomic11atomic_load17hf89c49ab5f5100ecE+0xc2>
        Arguments { pieces, fmt: None, args: &[] }
    74d2:	f24d 6088 	movw	r0, #54920	@ 0xd688
    74d6:	f2c0 0000 	movt	r0, #0
    74da:	9004      	str	r0, [sp, #16]
    74dc:	2001      	movs	r0, #1
    74de:	9005      	str	r0, [sp, #20]
    74e0:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    74e4:	f2c0 0000 	movt	r0, #0
    74e8:	6801      	ldr	r1, [r0, #0]
    74ea:	6840      	ldr	r0, [r0, #4]
    74ec:	9108      	str	r1, [sp, #32]
    74ee:	9009      	str	r0, [sp, #36]	@ 0x24
    74f0:	2004      	movs	r0, #4
    74f2:	9006      	str	r0, [sp, #24]
    74f4:	2000      	movs	r0, #0
    74f6:	9007      	str	r0, [sp, #28]
            Release => panic!("there is no such thing as a release load"),
    74f8:	f24d 7108 	movw	r1, #55048	@ 0xd708
    74fc:	f2c0 0100 	movt	r1, #0
    7500:	a804      	add	r0, sp, #16
    7502:	f002 ff93 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Acquire => intrinsics::atomic_load_acquire(dst),
    7506:	9801      	ldr	r0, [sp, #4]
    7508:	7800      	ldrb	r0, [r0, #0]
    750a:	f3bf 8f5f 	dmb	sy
    750e:	f807 0c41 	strb.w	r0, [r7, #-65]
    7512:	e020      	b.n	7556 <_ZN4core4sync6atomic11atomic_load17hf89c49ab5f5100ecE+0xc2>
    7514:	f24d 6058 	movw	r0, #54872	@ 0xd658
    7518:	f2c0 0000 	movt	r0, #0
    751c:	900a      	str	r0, [sp, #40]	@ 0x28
    751e:	2001      	movs	r0, #1
    7520:	900b      	str	r0, [sp, #44]	@ 0x2c
    7522:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7526:	f2c0 0000 	movt	r0, #0
    752a:	6801      	ldr	r1, [r0, #0]
    752c:	6840      	ldr	r0, [r0, #4]
    752e:	910e      	str	r1, [sp, #56]	@ 0x38
    7530:	900f      	str	r0, [sp, #60]	@ 0x3c
    7532:	2004      	movs	r0, #4
    7534:	900c      	str	r0, [sp, #48]	@ 0x30
    7536:	2000      	movs	r0, #0
    7538:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release load"),
    753a:	f24d 7118 	movw	r1, #55064	@ 0xd718
    753e:	f2c0 0100 	movt	r1, #0
    7542:	a80a      	add	r0, sp, #40	@ 0x28
    7544:	f002 ff72 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_load_seqcst(dst),
    7548:	9801      	ldr	r0, [sp, #4]
    754a:	7800      	ldrb	r0, [r0, #0]
    754c:	f3bf 8f5f 	dmb	sy
    7550:	f807 0c41 	strb.w	r0, [r7, #-65]
    7554:	e7ff      	b.n	7556 <_ZN4core4sync6atomic11atomic_load17hf89c49ab5f5100ecE+0xc2>
}
    7556:	f817 0c41 	ldrb.w	r0, [r7, #-65]
    755a:	b014      	add	sp, #80	@ 0x50
    755c:	bd80      	pop	{r7, pc}
    755e:	d4d4      	bmi.n	750a <_ZN4core4sync6atomic11atomic_load17hf89c49ab5f5100ecE+0x76>

00007560 <_ZN4core4sync6atomic12atomic_store17h2047fd04c7112c94E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    7560:	b580      	push	{r7, lr}
    7562:	466f      	mov	r7, sp
    7564:	b094      	sub	sp, #80	@ 0x50
    7566:	9001      	str	r0, [sp, #4]
    7568:	460b      	mov	r3, r1
    756a:	9302      	str	r3, [sp, #8]
    756c:	9010      	str	r0, [sp, #64]	@ 0x40
    756e:	f807 1c0a 	strb.w	r1, [r7, #-10]
    7572:	f807 2c09 	strb.w	r2, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    7576:	f24d 705c 	movw	r0, #55132	@ 0xd75c
    757a:	f2c0 0000 	movt	r0, #0
    757e:	9012      	str	r0, [sp, #72]	@ 0x48
    7580:	f24d 7090 	movw	r0, #55184	@ 0xd790
    7584:	f2c0 0000 	movt	r0, #0
    7588:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    758a:	b2d0      	uxtb	r0, r2
    758c:	9003      	str	r0, [sp, #12]
    758e:	9903      	ldr	r1, [sp, #12]
    7590:	e8df f001 	tbb	[pc, r1]
    7594:	280e0804 	.word	0x280e0804
    7598:	0042      	.short	0x0042
    759a:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    759c:	9802      	ldr	r0, [sp, #8]
    759e:	9901      	ldr	r1, [sp, #4]
    75a0:	7008      	strb	r0, [r1, #0]
    75a2:	e041      	b.n	7628 <_ZN4core4sync6atomic12atomic_store17h2047fd04c7112c94E+0xc8>
            Release => intrinsics::atomic_store_release(dst, val),
    75a4:	9802      	ldr	r0, [sp, #8]
    75a6:	9901      	ldr	r1, [sp, #4]
    75a8:	f3bf 8f5f 	dmb	sy
    75ac:	7008      	strb	r0, [r1, #0]
    75ae:	e03b      	b.n	7628 <_ZN4core4sync6atomic12atomic_store17h2047fd04c7112c94E+0xc8>
        Arguments { pieces, fmt: None, args: &[] }
    75b0:	f24d 7090 	movw	r0, #55184	@ 0xd790
    75b4:	f2c0 0000 	movt	r0, #0
    75b8:	9004      	str	r0, [sp, #16]
    75ba:	2001      	movs	r0, #1
    75bc:	9005      	str	r0, [sp, #20]
    75be:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    75c2:	f2c0 0000 	movt	r0, #0
    75c6:	6801      	ldr	r1, [r0, #0]
    75c8:	6840      	ldr	r0, [r0, #4]
    75ca:	9108      	str	r1, [sp, #32]
    75cc:	9009      	str	r0, [sp, #36]	@ 0x24
    75ce:	2004      	movs	r0, #4
    75d0:	9006      	str	r0, [sp, #24]
    75d2:	2000      	movs	r0, #0
    75d4:	9007      	str	r0, [sp, #28]
            Acquire => panic!("there is no such thing as an acquire store"),
    75d6:	f24d 7198 	movw	r1, #55192	@ 0xd798
    75da:	f2c0 0100 	movt	r1, #0
    75de:	a804      	add	r0, sp, #16
    75e0:	f002 ff24 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    75e4:	f24d 705c 	movw	r0, #55132	@ 0xd75c
    75e8:	f2c0 0000 	movt	r0, #0
    75ec:	900a      	str	r0, [sp, #40]	@ 0x28
    75ee:	2001      	movs	r0, #1
    75f0:	900b      	str	r0, [sp, #44]	@ 0x2c
    75f2:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    75f6:	f2c0 0000 	movt	r0, #0
    75fa:	6801      	ldr	r1, [r0, #0]
    75fc:	6840      	ldr	r0, [r0, #4]
    75fe:	910e      	str	r1, [sp, #56]	@ 0x38
    7600:	900f      	str	r0, [sp, #60]	@ 0x3c
    7602:	2004      	movs	r0, #4
    7604:	900c      	str	r0, [sp, #48]	@ 0x30
    7606:	2000      	movs	r0, #0
    7608:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release store"),
    760a:	f24d 71a8 	movw	r1, #55208	@ 0xd7a8
    760e:	f2c0 0100 	movt	r1, #0
    7612:	a80a      	add	r0, sp, #40	@ 0x28
    7614:	f002 ff0a 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
    7618:	9802      	ldr	r0, [sp, #8]
    761a:	9901      	ldr	r1, [sp, #4]
    761c:	f3bf 8f5f 	dmb	sy
    7620:	7008      	strb	r0, [r1, #0]
    7622:	f3bf 8f5f 	dmb	sy
    7626:	e7ff      	b.n	7628 <_ZN4core4sync6atomic12atomic_store17h2047fd04c7112c94E+0xc8>
}
    7628:	b014      	add	sp, #80	@ 0x50
    762a:	bd80      	pop	{r7, pc}

0000762c <_ZN5defmt6export3fmt17hd14b83efed30caacE>:
pub fn fmt<T: Format + ?Sized>(f: &T) {
    762c:	b580      	push	{r7, lr}
    762e:	466f      	mov	r7, sp
    7630:	b084      	sub	sp, #16
    7632:	9001      	str	r0, [sp, #4]
    7634:	9003      	str	r0, [sp, #12]
    istr(&T::_format_tag());
    7636:	f000 f80a 	bl	764e <_ZN88_$LT$defmt..impls..adapter..Display2Format$LT$T$GT$$u20$as$u20$defmt..traits..Format$GT$11_format_tag17h218fc70a0a51152dE>
    763a:	f827 0c06 	strh.w	r0, [r7, #-6]
    763e:	1fb8      	subs	r0, r7, #6
    7640:	f002 fbf0 	bl	9e24 <_ZN5defmt6export4istr17h6a3148ca5bdcd2a2E>
    7644:	9801      	ldr	r0, [sp, #4]
    f._format_data();
    7646:	f000 f80b 	bl	7660 <_ZN88_$LT$defmt..impls..adapter..Display2Format$LT$T$GT$$u20$as$u20$defmt..traits..Format$GT$12_format_data17h774920d86c0cf38eE>
}
    764a:	b004      	add	sp, #16
    764c:	bd80      	pop	{r7, pc}

0000764e <_ZN88_$LT$defmt..impls..adapter..Display2Format$LT$T$GT$$u20$as$u20$defmt..traits..Format$GT$11_format_tag17h218fc70a0a51152dE>:
}

impl<T: fmt::Display + ?Sized> Format for Display2Format<'_, T> {
    default_format!();

    fn _format_tag() -> Str {
    764e:	b580      	push	{r7, lr}
    7650:	466f      	mov	r7, sp
        defmt_macros::internp!("{=__internal_Display}")
    7652:	f240 0001 	movw	r0, #1
    7656:	f2c0 0000 	movt	r0, #0
    765a:	f002 fbc2 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    }
    765e:	bd80      	pop	{r7, pc}

00007660 <_ZN88_$LT$defmt..impls..adapter..Display2Format$LT$T$GT$$u20$as$u20$defmt..traits..Format$GT$12_format_data17h774920d86c0cf38eE>:

    fn _format_data(&self) {
    7660:	b580      	push	{r7, lr}
    7662:	466f      	mov	r7, sp
    7664:	b082      	sub	sp, #8
    7666:	9001      	str	r0, [sp, #4]
        export::display(&self.0);
    7668:	f24d 71b8 	movw	r1, #55224	@ 0xd7b8
    766c:	f2c0 0100 	movt	r1, #0
    7670:	f002 fbee 	bl	9e50 <_ZN5defmt6export7display17h66a6ad0d9a4f8d3fE>
    }
    7674:	b002      	add	sp, #8
    7676:	bd80      	pop	{r7, pc}

00007678 <_ZN8cortex_m3asm3udf17h4d4ff31e1f530bd0E>:
pub fn udf() -> ! {
    7678:	b580      	push	{r7, lr}
    767a:	466f      	mov	r7, sp
    767c:	f002 fe31 	bl	a2e2 <__udf>

00007680 <_ZN8cortex_m9interrupt7disable17hdc09b2612b46ca78E>:
    }
}

/// Disables all interrupts
#[inline]
pub fn disable() {
    7680:	b580      	push	{r7, lr}
    7682:	466f      	mov	r7, sp
    7684:	f002 fe21 	bl	a2ca <__cpsid>
    call_asm!(__cpsid());
}
    7688:	bd80      	pop	{r7, pc}

0000768a <_RNvCscSpY9Juk0HT_7___rustc17rust_begin_unwind>:

    #[cfg(not(any(feature = "print-rtt", feature = "print-defmt")))]
    fn print(_: &core::panic::PanicInfo) {}

    #[panic_handler]
    fn panic(info: &PanicInfo) -> ! {
    768a:	b580      	push	{r7, lr}
    768c:	466f      	mov	r7, sp
    768e:	b084      	sub	sp, #16
    7690:	9001      	str	r0, [sp, #4]
    7692:	9003      	str	r0, [sp, #12]
        static PANICKED: AtomicBool = AtomicBool::new(false);

        cortex_m::interrupt::disable();
    7694:	f7ff fff4 	bl	7680 <_ZN8cortex_m9interrupt7disable17hdc09b2612b46ca78E>
    7698:	2000      	movs	r0, #0

        // Guard against infinite recursion, just in case.
        if !PANICKED.load(Ordering::Relaxed) {
    769a:	f807 0c06 	strb.w	r0, [r7, #-6]
    769e:	f817 1c06 	ldrb.w	r1, [r7, #-6]
    76a2:	f240 2015 	movw	r0, #533	@ 0x215
    76a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    76aa:	f7ff fed7 	bl	745c <_ZN4core4sync6atomic10AtomicBool4load17h57427c0315431ec1E>
    76ae:	b980      	cbnz	r0, 76d2 <_RNvCscSpY9Juk0HT_7___rustc17rust_begin_unwind+0x48>
    76b0:	e7ff      	b.n	76b2 <_RNvCscSpY9Juk0HT_7___rustc17rust_begin_unwind+0x28>
    76b2:	2000      	movs	r0, #0
            PANICKED.store(true, Ordering::Relaxed);
    76b4:	f807 0c05 	strb.w	r0, [r7, #-5]
    76b8:	f817 2c05 	ldrb.w	r2, [r7, #-5]
    76bc:	f240 2015 	movw	r0, #533	@ 0x215
    76c0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    76c4:	2101      	movs	r1, #1
    76c6:	f7ff fed8 	bl	747a <_ZN4core4sync6atomic10AtomicBool5store17h213692616c73e228E>
    76ca:	9801      	ldr	r0, [sp, #4]

            print(info);
    76cc:	f000 f819 	bl	7702 <_ZN11panic_probe11print_defmt5print17h31d7a57d972cd14cE>
    76d0:	e7ff      	b.n	76d2 <_RNvCscSpY9Juk0HT_7___rustc17rust_begin_unwind+0x48>
        }

        crate::hard_fault();
    76d2:	f000 f800 	bl	76d6 <_ZN11panic_probe10hard_fault17hfcaa2040a9819e11E>

000076d6 <_ZN11panic_probe10hard_fault17hfcaa2040a9819e11E>:
/// fn panic() -> ! {
///     panic_probe::hard_fault();
/// }
/// ```
#[cfg(target_os = "none")]
pub fn hard_fault() -> ! {
    76d6:	b580      	push	{r7, lr}
    76d8:	466f      	mov	r7, sp
    76da:	b082      	sub	sp, #8
    76dc:	f64e 5024 	movw	r0, #60708	@ 0xed24
    76e0:	f2ce 0000 	movt	r0, #57344	@ 0xe000
    {
        const SHCSR: *mut u32 = 0xE000ED24usize as _;
        const USGFAULTENA: usize = 18;

        unsafe {
            let mut shcsr = core::ptr::read_volatile(SHCSR);
    76e4:	9000      	str	r0, [sp, #0]
    76e6:	f002 fc60 	bl	9faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>
    76ea:	4601      	mov	r1, r0
    76ec:	9800      	ldr	r0, [sp, #0]
    76ee:	9101      	str	r1, [sp, #4]
            shcsr &= !(1 << USGFAULTENA);
    76f0:	9901      	ldr	r1, [sp, #4]
    76f2:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
    76f6:	9101      	str	r1, [sp, #4]
            core::ptr::write_volatile(SHCSR, shcsr);
    76f8:	9901      	ldr	r1, [sp, #4]
    76fa:	f002 fcda 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
        }
    }

    cortex_m::asm::udf();
    76fe:	f7ff ffbb 	bl	7678 <_ZN8cortex_m3asm3udf17h4d4ff31e1f530bd0E>

00007702 <_ZN11panic_probe11print_defmt5print17h31d7a57d972cd14cE>:

#[cfg(feature = "print-defmt")]
mod print_defmt {
    use core::panic::PanicInfo;

    pub fn print(info: &PanicInfo) {
    7702:	b580      	push	{r7, lr}
    7704:	466f      	mov	r7, sp
    7706:	b086      	sub	sp, #24
    7708:	9004      	str	r0, [sp, #16]
        defmt::error!("{}", defmt::Display2Format(info));
    770a:	9002      	str	r0, [sp, #8]
    770c:	a802      	add	r0, sp, #8
    770e:	9001      	str	r0, [sp, #4]
    7710:	9005      	str	r0, [sp, #20]
    7712:	f240 0007 	movw	r0, #7
    7716:	f2c0 0000 	movt	r0, #0
    771a:	f002 fb62 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    771e:	f827 0c0a 	strh.w	r0, [r7, #-10]
    7722:	f1a7 000a 	sub.w	r0, r7, #10
    7726:	f002 fbbb 	bl	9ea0 <_ZN5defmt6export18acquire_and_header17h16cffd26e27c4a0bE>
    772a:	9801      	ldr	r0, [sp, #4]
    772c:	f7ff ff7e 	bl	762c <_ZN5defmt6export3fmt17hd14b83efed30caacE>
    _defmt_release()
    7730:	f000 ffad 	bl	868e <_defmt_release>
    }
    7734:	b006      	add	sp, #24
    7736:	bd80      	pop	{r7, pc}

00007738 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17hfe133c8fb5383946E>:
            const fn precondition_check($($name:$ty),*) {
    7738:	b580      	push	{r7, lr}
    773a:	466f      	mov	r7, sp
    773c:	b086      	sub	sp, #24
    773e:	9201      	str	r2, [sp, #4]
    7740:	9102      	str	r1, [sp, #8]
    7742:	9003      	str	r0, [sp, #12]
    7744:	9104      	str	r1, [sp, #16]
    7746:	9205      	str	r2, [sp, #20]
            "slice::get_unchecked requires that the range is within the slice",
            (
                start: usize = self.start,
                end: usize = self.end,
                len: usize = slice.len()
            ) => end >= start && end <= len
    7748:	4281      	cmp	r1, r0
    774a:	d207      	bcs.n	775c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17hfe133c8fb5383946E+0x24>
    774c:	e7ff      	b.n	774e <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17hfe133c8fb5383946E+0x16>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    774e:	f24d 70c8 	movw	r0, #55240	@ 0xd7c8
    7752:	f2c0 0000 	movt	r0, #0
    7756:	21d6      	movs	r1, #214	@ 0xd6
    7758:	f002 fe9a 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
    775c:	9802      	ldr	r0, [sp, #8]
    775e:	9901      	ldr	r1, [sp, #4]
    7760:	4288      	cmp	r0, r1
    7762:	d8f4      	bhi.n	774e <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17hfe133c8fb5383946E+0x16>
    7764:	e7ff      	b.n	7766 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17hfe133c8fb5383946E+0x2e>
            }
    7766:	b006      	add	sp, #24
    7768:	bd80      	pop	{r7, pc}

0000776a <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hcc19f1685f67a3cdE>:
        // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
    }

    #[inline]
    fn index(self, slice: &[T]) -> &[T] {
    776a:	b580      	push	{r7, lr}
    776c:	466f      	mov	r7, sp
    776e:	b08a      	sub	sp, #40	@ 0x28
    7770:	9300      	str	r3, [sp, #0]
    7772:	9201      	str	r2, [sp, #4]
    7774:	9102      	str	r1, [sp, #8]
    7776:	9003      	str	r0, [sp, #12]
    7778:	9004      	str	r0, [sp, #16]
    777a:	9105      	str	r1, [sp, #20]
    777c:	9206      	str	r2, [sp, #24]
        if self.start > slice.len() {
    777e:	9007      	str	r0, [sp, #28]
    7780:	9208      	str	r2, [sp, #32]
    7782:	4290      	cmp	r0, r2
    7784:	d801      	bhi.n	778a <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hcc19f1685f67a3cdE+0x20>
    7786:	e7ff      	b.n	7788 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hcc19f1685f67a3cdE+0x1e>
            if ::core::ub_checks::$kind() {
    7788:	e004      	b.n	7794 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hcc19f1685f67a3cdE+0x2a>
            slice_start_index_len_fail(self.start, slice.len());
    778a:	9a00      	ldr	r2, [sp, #0]
    778c:	9901      	ldr	r1, [sp, #4]
    778e:	9803      	ldr	r0, [sp, #12]
    7790:	f003 fa05 	bl	ab9e <_ZN4core5slice5index26slice_start_index_len_fail17hf0e445734c2ea2eeE>
                precondition_check($($arg,)*);
    7794:	9a01      	ldr	r2, [sp, #4]
    7796:	9803      	ldr	r0, [sp, #12]
    7798:	4611      	mov	r1, r2
    779a:	f7ff ffcd 	bl	7738 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17hfe133c8fb5383946E>
    779e:	e7ff      	b.n	77a0 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hcc19f1685f67a3cdE+0x36>
            let new_len = crate::intrinsics::unchecked_sub(self.end, self.start);
    77a0:	9802      	ldr	r0, [sp, #8]
    77a2:	9a03      	ldr	r2, [sp, #12]
    77a4:	9901      	ldr	r1, [sp, #4]
    77a6:	1a89      	subs	r1, r1, r2
    77a8:	9109      	str	r1, [sp, #36]	@ 0x24
    unsafe { crate::intrinsics::offset(ptr, index) }
    77aa:	4410      	add	r0, r2
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }
    77ac:	b00a      	add	sp, #40	@ 0x28
    77ae:	bd80      	pop	{r7, pc}

000077b0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE>:
            const fn precondition_check($($name:$ty),*) {
    77b0:	b580      	push	{r7, lr}
    77b2:	466f      	mov	r7, sp
    77b4:	b0a4      	sub	sp, #144	@ 0x90
    77b6:	9303      	str	r3, [sp, #12]
    77b8:	9204      	str	r2, [sp, #16]
    77ba:	9105      	str	r1, [sp, #20]
    77bc:	4684      	mov	ip, r0
    77be:	f8cd c018 	str.w	ip, [sp, #24]
    77c2:	68b8      	ldr	r0, [r7, #8]
    77c4:	9007      	str	r0, [sp, #28]
    77c6:	f8cd c06c 	str.w	ip, [sp, #108]	@ 0x6c
    77ca:	911c      	str	r1, [sp, #112]	@ 0x70
    77cc:	921d      	str	r2, [sp, #116]	@ 0x74
    77ce:	931e      	str	r3, [sp, #120]	@ 0x78
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    77d0:	f64d 01c8 	movw	r1, #55496	@ 0xd8c8
    77d4:	f2c0 0100 	movt	r1, #0
    77d8:	911f      	str	r1, [sp, #124]	@ 0x7c
    77da:	9120      	str	r1, [sp, #128]	@ 0x80
            dst: *mut () = dst as *mut (),
            size: usize = size_of::<T>(),
            align: usize = align_of::<T>(),
            count: usize = count,
        ) => {
            let zero_size = count == 0 || size == 0;
    77dc:	bb10      	cbnz	r0, 7824 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x74>
    77de:	e7ff      	b.n	77e0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x30>
    77e0:	9803      	ldr	r0, [sp, #12]
    77e2:	2101      	movs	r1, #1
    77e4:	f807 1c6d 	strb.w	r1, [r7, #-109]
            ub_checks::maybe_is_aligned_and_not_null(src, align, zero_size)
    77e8:	9009      	str	r0, [sp, #36]	@ 0x24
    77ea:	f817 1c6d 	ldrb.w	r1, [r7, #-109]
    77ee:	f807 1c65 	strb.w	r1, [r7, #-101]
    77f2:	f04f 3155 	mov.w	r1, #1431655765	@ 0x55555555
            return intrinsics::ctpop(self);
    77f6:	ea01 0150 	and.w	r1, r1, r0, lsr #1
    77fa:	1a40      	subs	r0, r0, r1
    77fc:	f04f 3133 	mov.w	r1, #858993459	@ 0x33333333
    7800:	ea01 0190 	and.w	r1, r1, r0, lsr #2
    7804:	f020 30cc 	bic.w	r0, r0, #3435973836	@ 0xcccccccc
    7808:	4408      	add	r0, r1
    780a:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    780e:	f020 30f0 	bic.w	r0, r0, #4042322160	@ 0xf0f0f0f0
    7812:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
    7816:	4348      	muls	r0, r1
    7818:	0e00      	lsrs	r0, r0, #24
    781a:	9014      	str	r0, [sp, #80]	@ 0x50
        if !align.is_power_of_two() {
    781c:	9814      	ldr	r0, [sp, #80]	@ 0x50
    781e:	2801      	cmp	r0, #1
    7820:	d025      	beq.n	786e <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0xbe>
    7822:	e030      	b.n	7886 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0xd6>
            let zero_size = count == 0 || size == 0;
    7824:	9803      	ldr	r0, [sp, #12]
    7826:	9904      	ldr	r1, [sp, #16]
    7828:	fab1 f181 	clz	r1, r1
    782c:	0949      	lsrs	r1, r1, #5
    782e:	f807 1c6d 	strb.w	r1, [r7, #-109]
            ub_checks::maybe_is_aligned_and_not_null(src, align, zero_size)
    7832:	9009      	str	r0, [sp, #36]	@ 0x24
    7834:	f817 1c6d 	ldrb.w	r1, [r7, #-109]
    7838:	f807 1c65 	strb.w	r1, [r7, #-101]
    783c:	f04f 3155 	mov.w	r1, #1431655765	@ 0x55555555
    7840:	ea01 0150 	and.w	r1, r1, r0, lsr #1
    7844:	1a40      	subs	r0, r0, r1
    7846:	f04f 3133 	mov.w	r1, #858993459	@ 0x33333333
    784a:	ea01 0190 	and.w	r1, r1, r0, lsr #2
    784e:	f020 30cc 	bic.w	r0, r0, #3435973836	@ 0xcccccccc
    7852:	4408      	add	r0, r1
    7854:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    7858:	f020 30f0 	bic.w	r0, r0, #4042322160	@ 0xf0f0f0f0
    785c:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
    7860:	4348      	muls	r0, r1
    7862:	0e00      	lsrs	r0, r0, #24
    7864:	9014      	str	r0, [sp, #80]	@ 0x50
    7866:	9814      	ldr	r0, [sp, #80]	@ 0x50
    7868:	2801      	cmp	r0, #1
    786a:	d029      	beq.n	78c0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x110>
    786c:	e00b      	b.n	7886 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0xd6>
        unsafe { mem::transmute(self.cast::<()>()) }
    786e:	9803      	ldr	r0, [sp, #12]
    7870:	9906      	ldr	r1, [sp, #24]
    7872:	9112      	str	r1, [sp, #72]	@ 0x48
        self.addr() & (align - 1) == 0
    7874:	3801      	subs	r0, #1
    7876:	9013      	str	r0, [sp, #76]	@ 0x4c
    7878:	9812      	ldr	r0, [sp, #72]	@ 0x48
    787a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
    787c:	4008      	ands	r0, r1
    787e:	9011      	str	r0, [sp, #68]	@ 0x44
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    7880:	9811      	ldr	r0, [sp, #68]	@ 0x44
    7882:	b1d0      	cbz	r0, 78ba <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x10a>
    7884:	e01a      	b.n	78bc <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x10c>
        Arguments { pieces, fmt: None, args: &[] }
    7886:	f64d 00c8 	movw	r0, #55496	@ 0xd8c8
    788a:	f2c0 0000 	movt	r0, #0
    788e:	900b      	str	r0, [sp, #44]	@ 0x2c
    7890:	2001      	movs	r0, #1
    7892:	900c      	str	r0, [sp, #48]	@ 0x30
    7894:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7898:	f2c0 0000 	movt	r0, #0
    789c:	6801      	ldr	r1, [r0, #0]
    789e:	6840      	ldr	r0, [r0, #4]
    78a0:	910f      	str	r1, [sp, #60]	@ 0x3c
    78a2:	9010      	str	r0, [sp, #64]	@ 0x40
    78a4:	2004      	movs	r0, #4
    78a6:	900d      	str	r0, [sp, #52]	@ 0x34
    78a8:	2000      	movs	r0, #0
    78aa:	900e      	str	r0, [sp, #56]	@ 0x38
            panic!("is_aligned_to: align is not a power-of-two");
    78ac:	f64d 1148 	movw	r1, #55624	@ 0xd948
    78b0:	f2c0 0100 	movt	r1, #0
    78b4:	a80b      	add	r0, sp, #44	@ 0x2c
    78b6:	f002 fdb9 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    78ba:	e000      	b.n	78be <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x10e>
    78bc:	e016      	b.n	78ec <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x13c>
    78be:	e016      	b.n	78ee <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x13e>
        unsafe { mem::transmute(self.cast::<()>()) }
    78c0:	9803      	ldr	r0, [sp, #12]
    78c2:	9906      	ldr	r1, [sp, #24]
    78c4:	9112      	str	r1, [sp, #72]	@ 0x48
        self.addr() & (align - 1) == 0
    78c6:	3801      	subs	r0, #1
    78c8:	9013      	str	r0, [sp, #76]	@ 0x4c
    78ca:	9812      	ldr	r0, [sp, #72]	@ 0x48
    78cc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
    78ce:	4008      	ands	r0, r1
    78d0:	9011      	str	r0, [sp, #68]	@ 0x44
    78d2:	9811      	ldr	r0, [sp, #68]	@ 0x44
    78d4:	2800      	cmp	r0, #0
    78d6:	d1f1      	bne.n	78bc <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x10c>
    78d8:	e7ff      	b.n	78da <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x12a>
    78da:	f817 0c65 	ldrb.w	r0, [r7, #-101]
    78de:	07c0      	lsls	r0, r0, #31
    78e0:	2800      	cmp	r0, #0
    78e2:	d1ec      	bne.n	78be <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x10e>
    78e4:	e7ff      	b.n	78e6 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x136>
                ptr.addr() == 0
    78e6:	9812      	ldr	r0, [sp, #72]	@ 0x48
    78e8:	b908      	cbnz	r0, 78ee <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x13e>
    78ea:	e7ff      	b.n	78ec <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x13c>
    78ec:	e05e      	b.n	79ac <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1fc>
                && ub_checks::maybe_is_aligned_and_not_null(dst, align, zero_size)
    78ee:	9803      	ldr	r0, [sp, #12]
    78f0:	9905      	ldr	r1, [sp, #20]
    78f2:	9121      	str	r1, [sp, #132]	@ 0x84
    78f4:	f817 1c6d 	ldrb.w	r1, [r7, #-109]
    78f8:	460a      	mov	r2, r1
    78fa:	9202      	str	r2, [sp, #8]
    78fc:	f807 1c05 	strb.w	r1, [r7, #-5]
    7900:	f04f 3155 	mov.w	r1, #1431655765	@ 0x55555555
    7904:	ea01 0150 	and.w	r1, r1, r0, lsr #1
    7908:	1a40      	subs	r0, r0, r1
    790a:	f04f 3133 	mov.w	r1, #858993459	@ 0x33333333
    790e:	ea01 0190 	and.w	r1, r1, r0, lsr #2
    7912:	f020 30cc 	bic.w	r0, r0, #3435973836	@ 0xcccccccc
    7916:	4408      	add	r0, r1
    7918:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    791c:	f020 30f0 	bic.w	r0, r0, #4042322160	@ 0xf0f0f0f0
    7920:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
    7924:	4348      	muls	r0, r1
    7926:	0e00      	lsrs	r0, r0, #24
    7928:	9023      	str	r0, [sp, #140]	@ 0x8c
    792a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
        if !align.is_power_of_two() {
    792c:	2801      	cmp	r0, #1
    792e:	d107      	bne.n	7940 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x190>
    7930:	e7ff      	b.n	7932 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x182>
        unsafe { mem::transmute(self.cast::<()>()) }
    7932:	9805      	ldr	r0, [sp, #20]
    7934:	4601      	mov	r1, r0
        self.addr() & (align - 1) == 0
    7936:	9101      	str	r1, [sp, #4]
    7938:	9913      	ldr	r1, [sp, #76]	@ 0x4c
    793a:	4208      	tst	r0, r1
    793c:	d01a      	beq.n	7974 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1c4>
    793e:	e01d      	b.n	797c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1cc>
    7940:	f64d 00c8 	movw	r0, #55496	@ 0xd8c8
    7944:	f2c0 0000 	movt	r0, #0
    7948:	9015      	str	r0, [sp, #84]	@ 0x54
    794a:	2001      	movs	r0, #1
    794c:	9016      	str	r0, [sp, #88]	@ 0x58
    794e:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7952:	f2c0 0000 	movt	r0, #0
    7956:	6801      	ldr	r1, [r0, #0]
    7958:	6840      	ldr	r0, [r0, #4]
    795a:	9119      	str	r1, [sp, #100]	@ 0x64
    795c:	901a      	str	r0, [sp, #104]	@ 0x68
    795e:	2004      	movs	r0, #4
    7960:	9017      	str	r0, [sp, #92]	@ 0x5c
    7962:	2000      	movs	r0, #0
    7964:	9018      	str	r0, [sp, #96]	@ 0x60
            panic!("is_aligned_to: align is not a power-of-two");
    7966:	f64d 1148 	movw	r1, #55624	@ 0xd948
    796a:	f2c0 0100 	movt	r1, #0
    796e:	a815      	add	r0, sp, #84	@ 0x54
    7970:	f002 fd5c 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    7974:	9802      	ldr	r0, [sp, #8]
    7976:	07c0      	lsls	r0, r0, #31
    7978:	b920      	cbnz	r0, 7984 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1d4>
    797a:	e000      	b.n	797e <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1ce>
    797c:	e003      	b.n	7986 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1d6>
    797e:	9801      	ldr	r0, [sp, #4]
    7980:	b910      	cbnz	r0, 7988 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1d8>
    7982:	e000      	b.n	7986 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1d6>
    7984:	e000      	b.n	7988 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1d8>
    7986:	e011      	b.n	79ac <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1fc>
        const_eval_select(($($val,)*), compiletime, runtime)
    7988:	9b07      	ldr	r3, [sp, #28]
    798a:	9a04      	ldr	r2, [sp, #16]
    798c:	9905      	ldr	r1, [sp, #20]
    798e:	9806      	ldr	r0, [sp, #24]
    7990:	f000 fa22 	bl	7dd8 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17h70c660d3b0aa9a4fE>
        ) => {
    7994:	b940      	cbnz	r0, 79a8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1f8>
    7996:	e7ff      	b.n	7998 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1e8>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    7998:	f64d 1058 	movw	r0, #55640	@ 0xd958
    799c:	f2c0 0000 	movt	r0, #0
    79a0:	f240 111b 	movw	r1, #283	@ 0x11b
    79a4:	f002 fd74 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
            }
    79a8:	b024      	add	sp, #144	@ 0x90
    79aa:	bd80      	pop	{r7, pc}
    79ac:	e7f4      	b.n	7998 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE+0x1e8>

000079ae <_ZN4core3cmp3Ord3min17h128d512d1cb2c35dE>:
    fn min(self, other: Self) -> Self
    79ae:	b580      	push	{r7, lr}
    79b0:	466f      	mov	r7, sp
    79b2:	b085      	sub	sp, #20
    79b4:	9000      	str	r0, [sp, #0]
    79b6:	9101      	str	r1, [sp, #4]
    79b8:	a801      	add	r0, sp, #4
    79ba:	9003      	str	r0, [sp, #12]
    79bc:	4668      	mov	r0, sp
    79be:	9004      	str	r0, [sp, #16]
            fn lt(&self, other: &Self) -> bool { *self <  *other }
    79c0:	9801      	ldr	r0, [sp, #4]
    79c2:	9900      	ldr	r1, [sp, #0]
        if other < self { other } else { self }
    79c4:	4288      	cmp	r0, r1
    79c6:	d303      	bcc.n	79d0 <_ZN4core3cmp3Ord3min17h128d512d1cb2c35dE+0x22>
    79c8:	e7ff      	b.n	79ca <_ZN4core3cmp3Ord3min17h128d512d1cb2c35dE+0x1c>
    79ca:	9800      	ldr	r0, [sp, #0]
    79cc:	9002      	str	r0, [sp, #8]
    }
    79ce:	e002      	b.n	79d6 <_ZN4core3cmp3Ord3min17h128d512d1cb2c35dE+0x28>
        if other < self { other } else { self }
    79d0:	9801      	ldr	r0, [sp, #4]
    79d2:	9002      	str	r0, [sp, #8]
    }
    79d4:	e002      	b.n	79dc <_ZN4core3cmp3Ord3min17h128d512d1cb2c35dE+0x2e>
    79d6:	9802      	ldr	r0, [sp, #8]
    79d8:	b005      	add	sp, #20
    79da:	bd80      	pop	{r7, pc}
    79dc:	e7fb      	b.n	79d6 <_ZN4core3cmp3Ord3min17h128d512d1cb2c35dE+0x28>

000079de <_ZN4core3fmt9Arguments9new_const17h679986b37acb50eeE>:
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    79de:	b580      	push	{r7, lr}
    79e0:	466f      	mov	r7, sp
    79e2:	b082      	sub	sp, #8
    79e4:	9100      	str	r1, [sp, #0]
    79e6:	4601      	mov	r1, r0
    79e8:	9800      	ldr	r0, [sp, #0]
    79ea:	9001      	str	r0, [sp, #4]
        Arguments { pieces, fmt: None, args: &[] }
    79ec:	6008      	str	r0, [r1, #0]
    79ee:	2001      	movs	r0, #1
    79f0:	6048      	str	r0, [r1, #4]
    79f2:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    79f6:	f2c0 0000 	movt	r0, #0
    79fa:	6802      	ldr	r2, [r0, #0]
    79fc:	6840      	ldr	r0, [r0, #4]
    79fe:	610a      	str	r2, [r1, #16]
    7a00:	6148      	str	r0, [r1, #20]
    7a02:	2004      	movs	r0, #4
    7a04:	6088      	str	r0, [r1, #8]
    7a06:	2000      	movs	r0, #0
    7a08:	60c8      	str	r0, [r1, #12]
    }
    7a0a:	b002      	add	sp, #8
    7a0c:	bd80      	pop	{r7, pc}

00007a0e <_ZN4core4sync6atomic10AtomicBool4load17h6530ee351e7698c1E>:
    pub fn load(&self, order: Ordering) -> bool {
    7a0e:	b580      	push	{r7, lr}
    7a10:	466f      	mov	r7, sp
    7a12:	b084      	sub	sp, #16
    7a14:	9001      	str	r0, [sp, #4]
    7a16:	f807 1c05 	strb.w	r1, [r7, #-5]
        unsafe { atomic_load(self.v.get(), order) != 0 }
    7a1a:	9003      	str	r0, [sp, #12]
    7a1c:	f000 f88c 	bl	7b38 <_ZN4core4sync6atomic11atomic_load17h3e9e0abd6db66db1E>
    7a20:	b2c0      	uxtb	r0, r0
    7a22:	2800      	cmp	r0, #0
    7a24:	bf18      	it	ne
    7a26:	2001      	movne	r0, #1
    }
    7a28:	b004      	add	sp, #16
    7a2a:	bd80      	pop	{r7, pc}

00007a2c <_ZN4core4sync6atomic10AtomicBool5store17hc725cbc8f59520dbE>:
    pub fn store(&self, val: bool, order: Ordering) {
    7a2c:	b580      	push	{r7, lr}
    7a2e:	466f      	mov	r7, sp
    7a30:	b084      	sub	sp, #16
    7a32:	9001      	str	r0, [sp, #4]
    7a34:	f807 1c06 	strb.w	r1, [r7, #-6]
    7a38:	f807 2c05 	strb.w	r2, [r7, #-5]
            atomic_store(self.v.get(), val as u8, order);
    7a3c:	9003      	str	r0, [sp, #12]
    7a3e:	f000 f8e1 	bl	7c04 <_ZN4core4sync6atomic12atomic_store17h1b3e4610626ed9f5E>
    }
    7a42:	b004      	add	sp, #16
    7a44:	bd80      	pop	{r7, pc}

00007a46 <_ZN4core4sync6atomic11AtomicUsize4load17hfe561a44da5776a8E>:
            pub fn load(&self, order: Ordering) -> $int_type {
    7a46:	b580      	push	{r7, lr}
    7a48:	466f      	mov	r7, sp
    7a4a:	b084      	sub	sp, #16
    7a4c:	9001      	str	r0, [sp, #4]
    7a4e:	f807 1c05 	strb.w	r1, [r7, #-5]
                unsafe { atomic_load(self.v.get(), order) }
    7a52:	9003      	str	r0, [sp, #12]
    7a54:	f000 f80e 	bl	7a74 <_ZN4core4sync6atomic11atomic_load17h059e4908f778e4c2E>
            }
    7a58:	b004      	add	sp, #16
    7a5a:	bd80      	pop	{r7, pc}

00007a5c <_ZN4core4sync6atomic11AtomicUsize5store17h185ab23ce76d668aE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
    7a5c:	b580      	push	{r7, lr}
    7a5e:	466f      	mov	r7, sp
    7a60:	b084      	sub	sp, #16
    7a62:	9000      	str	r0, [sp, #0]
    7a64:	9101      	str	r1, [sp, #4]
    7a66:	f807 2c05 	strb.w	r2, [r7, #-5]
                unsafe { atomic_store(self.v.get(), val, order); }
    7a6a:	9003      	str	r0, [sp, #12]
    7a6c:	f000 f930 	bl	7cd0 <_ZN4core4sync6atomic12atomic_store17h34073bf10e32a997E>
            }
    7a70:	b004      	add	sp, #16
    7a72:	bd80      	pop	{r7, pc}

00007a74 <_ZN4core4sync6atomic11atomic_load17h059e4908f778e4c2E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    7a74:	b580      	push	{r7, lr}
    7a76:	466f      	mov	r7, sp
    7a78:	b094      	sub	sp, #80	@ 0x50
    7a7a:	9001      	str	r0, [sp, #4]
    7a7c:	9010      	str	r0, [sp, #64]	@ 0x40
    7a7e:	f807 1c09 	strb.w	r1, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    7a82:	f64d 20a4 	movw	r0, #55972	@ 0xdaa4
    7a86:	f2c0 0000 	movt	r0, #0
    7a8a:	9012      	str	r0, [sp, #72]	@ 0x48
    7a8c:	f64d 20d4 	movw	r0, #56020	@ 0xdad4
    7a90:	f2c0 0000 	movt	r0, #0
    7a94:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    7a96:	b2c8      	uxtb	r0, r1
    7a98:	9002      	str	r0, [sp, #8]
    7a9a:	9902      	ldr	r1, [sp, #8]
    7a9c:	e8df f001 	tbb	[pc, r1]
    7aa0:	28220804 	.word	0x28220804
    7aa4:	0042      	.short	0x0042
    7aa6:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    7aa8:	9801      	ldr	r0, [sp, #4]
    7aaa:	6800      	ldr	r0, [r0, #0]
    7aac:	9003      	str	r0, [sp, #12]
    7aae:	e03f      	b.n	7b30 <_ZN4core4sync6atomic11atomic_load17h059e4908f778e4c2E+0xbc>
        Arguments { pieces, fmt: None, args: &[] }
    7ab0:	f64d 20d4 	movw	r0, #56020	@ 0xdad4
    7ab4:	f2c0 0000 	movt	r0, #0
    7ab8:	9004      	str	r0, [sp, #16]
    7aba:	2001      	movs	r0, #1
    7abc:	9005      	str	r0, [sp, #20]
    7abe:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7ac2:	f2c0 0000 	movt	r0, #0
    7ac6:	6801      	ldr	r1, [r0, #0]
    7ac8:	6840      	ldr	r0, [r0, #4]
    7aca:	9108      	str	r1, [sp, #32]
    7acc:	9009      	str	r0, [sp, #36]	@ 0x24
    7ace:	2004      	movs	r0, #4
    7ad0:	9006      	str	r0, [sp, #24]
    7ad2:	2000      	movs	r0, #0
    7ad4:	9007      	str	r0, [sp, #28]
            Release => panic!("there is no such thing as a release load"),
    7ad6:	f64d 3154 	movw	r1, #56148	@ 0xdb54
    7ada:	f2c0 0100 	movt	r1, #0
    7ade:	a804      	add	r0, sp, #16
    7ae0:	f002 fca4 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Acquire => intrinsics::atomic_load_acquire(dst),
    7ae4:	9801      	ldr	r0, [sp, #4]
    7ae6:	6800      	ldr	r0, [r0, #0]
    7ae8:	f3bf 8f5f 	dmb	sy
    7aec:	9003      	str	r0, [sp, #12]
    7aee:	e01f      	b.n	7b30 <_ZN4core4sync6atomic11atomic_load17h059e4908f778e4c2E+0xbc>
    7af0:	f64d 20a4 	movw	r0, #55972	@ 0xdaa4
    7af4:	f2c0 0000 	movt	r0, #0
    7af8:	900a      	str	r0, [sp, #40]	@ 0x28
    7afa:	2001      	movs	r0, #1
    7afc:	900b      	str	r0, [sp, #44]	@ 0x2c
    7afe:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7b02:	f2c0 0000 	movt	r0, #0
    7b06:	6801      	ldr	r1, [r0, #0]
    7b08:	6840      	ldr	r0, [r0, #4]
    7b0a:	910e      	str	r1, [sp, #56]	@ 0x38
    7b0c:	900f      	str	r0, [sp, #60]	@ 0x3c
    7b0e:	2004      	movs	r0, #4
    7b10:	900c      	str	r0, [sp, #48]	@ 0x30
    7b12:	2000      	movs	r0, #0
    7b14:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release load"),
    7b16:	f64d 3164 	movw	r1, #56164	@ 0xdb64
    7b1a:	f2c0 0100 	movt	r1, #0
    7b1e:	a80a      	add	r0, sp, #40	@ 0x28
    7b20:	f002 fc84 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_load_seqcst(dst),
    7b24:	9801      	ldr	r0, [sp, #4]
    7b26:	6800      	ldr	r0, [r0, #0]
    7b28:	f3bf 8f5f 	dmb	sy
    7b2c:	9003      	str	r0, [sp, #12]
    7b2e:	e7ff      	b.n	7b30 <_ZN4core4sync6atomic11atomic_load17h059e4908f778e4c2E+0xbc>
}
    7b30:	9803      	ldr	r0, [sp, #12]
    7b32:	b014      	add	sp, #80	@ 0x50
    7b34:	bd80      	pop	{r7, pc}
    7b36:	d4d4      	bmi.n	7ae2 <_ZN4core4sync6atomic11atomic_load17h059e4908f778e4c2E+0x6e>

00007b38 <_ZN4core4sync6atomic11atomic_load17h3e9e0abd6db66db1E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    7b38:	b580      	push	{r7, lr}
    7b3a:	466f      	mov	r7, sp
    7b3c:	b094      	sub	sp, #80	@ 0x50
    7b3e:	9001      	str	r0, [sp, #4]
    7b40:	9010      	str	r0, [sp, #64]	@ 0x40
    7b42:	f807 1c09 	strb.w	r1, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    7b46:	f64d 20a4 	movw	r0, #55972	@ 0xdaa4
    7b4a:	f2c0 0000 	movt	r0, #0
    7b4e:	9012      	str	r0, [sp, #72]	@ 0x48
    7b50:	f64d 20d4 	movw	r0, #56020	@ 0xdad4
    7b54:	f2c0 0000 	movt	r0, #0
    7b58:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    7b5a:	b2c8      	uxtb	r0, r1
    7b5c:	9002      	str	r0, [sp, #8]
    7b5e:	9902      	ldr	r1, [sp, #8]
    7b60:	e8df f001 	tbb	[pc, r1]
    7b64:	2a230904 	.word	0x2a230904
    7b68:	0044      	.short	0x0044
    7b6a:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    7b6c:	9801      	ldr	r0, [sp, #4]
    7b6e:	7800      	ldrb	r0, [r0, #0]
    7b70:	f807 0c41 	strb.w	r0, [r7, #-65]
    7b74:	e041      	b.n	7bfa <_ZN4core4sync6atomic11atomic_load17h3e9e0abd6db66db1E+0xc2>
        Arguments { pieces, fmt: None, args: &[] }
    7b76:	f64d 20d4 	movw	r0, #56020	@ 0xdad4
    7b7a:	f2c0 0000 	movt	r0, #0
    7b7e:	9004      	str	r0, [sp, #16]
    7b80:	2001      	movs	r0, #1
    7b82:	9005      	str	r0, [sp, #20]
    7b84:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7b88:	f2c0 0000 	movt	r0, #0
    7b8c:	6801      	ldr	r1, [r0, #0]
    7b8e:	6840      	ldr	r0, [r0, #4]
    7b90:	9108      	str	r1, [sp, #32]
    7b92:	9009      	str	r0, [sp, #36]	@ 0x24
    7b94:	2004      	movs	r0, #4
    7b96:	9006      	str	r0, [sp, #24]
    7b98:	2000      	movs	r0, #0
    7b9a:	9007      	str	r0, [sp, #28]
            Release => panic!("there is no such thing as a release load"),
    7b9c:	f64d 3154 	movw	r1, #56148	@ 0xdb54
    7ba0:	f2c0 0100 	movt	r1, #0
    7ba4:	a804      	add	r0, sp, #16
    7ba6:	f002 fc41 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Acquire => intrinsics::atomic_load_acquire(dst),
    7baa:	9801      	ldr	r0, [sp, #4]
    7bac:	7800      	ldrb	r0, [r0, #0]
    7bae:	f3bf 8f5f 	dmb	sy
    7bb2:	f807 0c41 	strb.w	r0, [r7, #-65]
    7bb6:	e020      	b.n	7bfa <_ZN4core4sync6atomic11atomic_load17h3e9e0abd6db66db1E+0xc2>
    7bb8:	f64d 20a4 	movw	r0, #55972	@ 0xdaa4
    7bbc:	f2c0 0000 	movt	r0, #0
    7bc0:	900a      	str	r0, [sp, #40]	@ 0x28
    7bc2:	2001      	movs	r0, #1
    7bc4:	900b      	str	r0, [sp, #44]	@ 0x2c
    7bc6:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7bca:	f2c0 0000 	movt	r0, #0
    7bce:	6801      	ldr	r1, [r0, #0]
    7bd0:	6840      	ldr	r0, [r0, #4]
    7bd2:	910e      	str	r1, [sp, #56]	@ 0x38
    7bd4:	900f      	str	r0, [sp, #60]	@ 0x3c
    7bd6:	2004      	movs	r0, #4
    7bd8:	900c      	str	r0, [sp, #48]	@ 0x30
    7bda:	2000      	movs	r0, #0
    7bdc:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release load"),
    7bde:	f64d 3164 	movw	r1, #56164	@ 0xdb64
    7be2:	f2c0 0100 	movt	r1, #0
    7be6:	a80a      	add	r0, sp, #40	@ 0x28
    7be8:	f002 fc20 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_load_seqcst(dst),
    7bec:	9801      	ldr	r0, [sp, #4]
    7bee:	7800      	ldrb	r0, [r0, #0]
    7bf0:	f3bf 8f5f 	dmb	sy
    7bf4:	f807 0c41 	strb.w	r0, [r7, #-65]
    7bf8:	e7ff      	b.n	7bfa <_ZN4core4sync6atomic11atomic_load17h3e9e0abd6db66db1E+0xc2>
}
    7bfa:	f817 0c41 	ldrb.w	r0, [r7, #-65]
    7bfe:	b014      	add	sp, #80	@ 0x50
    7c00:	bd80      	pop	{r7, pc}
    7c02:	d4d4      	bmi.n	7bae <_ZN4core4sync6atomic11atomic_load17h3e9e0abd6db66db1E+0x76>

00007c04 <_ZN4core4sync6atomic12atomic_store17h1b3e4610626ed9f5E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    7c04:	b580      	push	{r7, lr}
    7c06:	466f      	mov	r7, sp
    7c08:	b094      	sub	sp, #80	@ 0x50
    7c0a:	9001      	str	r0, [sp, #4]
    7c0c:	460b      	mov	r3, r1
    7c0e:	9302      	str	r3, [sp, #8]
    7c10:	9010      	str	r0, [sp, #64]	@ 0x40
    7c12:	f807 1c0a 	strb.w	r1, [r7, #-10]
    7c16:	f807 2c09 	strb.w	r2, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    7c1a:	f64d 30a8 	movw	r0, #56232	@ 0xdba8
    7c1e:	f2c0 0000 	movt	r0, #0
    7c22:	9012      	str	r0, [sp, #72]	@ 0x48
    7c24:	f64d 30dc 	movw	r0, #56284	@ 0xdbdc
    7c28:	f2c0 0000 	movt	r0, #0
    7c2c:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    7c2e:	b2d0      	uxtb	r0, r2
    7c30:	9003      	str	r0, [sp, #12]
    7c32:	9903      	ldr	r1, [sp, #12]
    7c34:	e8df f001 	tbb	[pc, r1]
    7c38:	280e0804 	.word	0x280e0804
    7c3c:	0042      	.short	0x0042
    7c3e:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    7c40:	9802      	ldr	r0, [sp, #8]
    7c42:	9901      	ldr	r1, [sp, #4]
    7c44:	7008      	strb	r0, [r1, #0]
    7c46:	e041      	b.n	7ccc <_ZN4core4sync6atomic12atomic_store17h1b3e4610626ed9f5E+0xc8>
            Release => intrinsics::atomic_store_release(dst, val),
    7c48:	9802      	ldr	r0, [sp, #8]
    7c4a:	9901      	ldr	r1, [sp, #4]
    7c4c:	f3bf 8f5f 	dmb	sy
    7c50:	7008      	strb	r0, [r1, #0]
    7c52:	e03b      	b.n	7ccc <_ZN4core4sync6atomic12atomic_store17h1b3e4610626ed9f5E+0xc8>
        Arguments { pieces, fmt: None, args: &[] }
    7c54:	f64d 30dc 	movw	r0, #56284	@ 0xdbdc
    7c58:	f2c0 0000 	movt	r0, #0
    7c5c:	9004      	str	r0, [sp, #16]
    7c5e:	2001      	movs	r0, #1
    7c60:	9005      	str	r0, [sp, #20]
    7c62:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7c66:	f2c0 0000 	movt	r0, #0
    7c6a:	6801      	ldr	r1, [r0, #0]
    7c6c:	6840      	ldr	r0, [r0, #4]
    7c6e:	9108      	str	r1, [sp, #32]
    7c70:	9009      	str	r0, [sp, #36]	@ 0x24
    7c72:	2004      	movs	r0, #4
    7c74:	9006      	str	r0, [sp, #24]
    7c76:	2000      	movs	r0, #0
    7c78:	9007      	str	r0, [sp, #28]
            Acquire => panic!("there is no such thing as an acquire store"),
    7c7a:	f64d 31e4 	movw	r1, #56292	@ 0xdbe4
    7c7e:	f2c0 0100 	movt	r1, #0
    7c82:	a804      	add	r0, sp, #16
    7c84:	f002 fbd2 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    7c88:	f64d 30a8 	movw	r0, #56232	@ 0xdba8
    7c8c:	f2c0 0000 	movt	r0, #0
    7c90:	900a      	str	r0, [sp, #40]	@ 0x28
    7c92:	2001      	movs	r0, #1
    7c94:	900b      	str	r0, [sp, #44]	@ 0x2c
    7c96:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7c9a:	f2c0 0000 	movt	r0, #0
    7c9e:	6801      	ldr	r1, [r0, #0]
    7ca0:	6840      	ldr	r0, [r0, #4]
    7ca2:	910e      	str	r1, [sp, #56]	@ 0x38
    7ca4:	900f      	str	r0, [sp, #60]	@ 0x3c
    7ca6:	2004      	movs	r0, #4
    7ca8:	900c      	str	r0, [sp, #48]	@ 0x30
    7caa:	2000      	movs	r0, #0
    7cac:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release store"),
    7cae:	f64d 31f4 	movw	r1, #56308	@ 0xdbf4
    7cb2:	f2c0 0100 	movt	r1, #0
    7cb6:	a80a      	add	r0, sp, #40	@ 0x28
    7cb8:	f002 fbb8 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
    7cbc:	9802      	ldr	r0, [sp, #8]
    7cbe:	9901      	ldr	r1, [sp, #4]
    7cc0:	f3bf 8f5f 	dmb	sy
    7cc4:	7008      	strb	r0, [r1, #0]
    7cc6:	f3bf 8f5f 	dmb	sy
    7cca:	e7ff      	b.n	7ccc <_ZN4core4sync6atomic12atomic_store17h1b3e4610626ed9f5E+0xc8>
}
    7ccc:	b014      	add	sp, #80	@ 0x50
    7cce:	bd80      	pop	{r7, pc}

00007cd0 <_ZN4core4sync6atomic12atomic_store17h34073bf10e32a997E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    7cd0:	b580      	push	{r7, lr}
    7cd2:	466f      	mov	r7, sp
    7cd4:	b094      	sub	sp, #80	@ 0x50
    7cd6:	9100      	str	r1, [sp, #0]
    7cd8:	9001      	str	r0, [sp, #4]
    7cda:	900f      	str	r0, [sp, #60]	@ 0x3c
    7cdc:	9110      	str	r1, [sp, #64]	@ 0x40
    7cde:	f807 2c09 	strb.w	r2, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    7ce2:	f64d 30a8 	movw	r0, #56232	@ 0xdba8
    7ce6:	f2c0 0000 	movt	r0, #0
    7cea:	9012      	str	r0, [sp, #72]	@ 0x48
    7cec:	f64d 30dc 	movw	r0, #56284	@ 0xdbdc
    7cf0:	f2c0 0000 	movt	r0, #0
    7cf4:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    7cf6:	b2d0      	uxtb	r0, r2
    7cf8:	9002      	str	r0, [sp, #8]
    7cfa:	9902      	ldr	r1, [sp, #8]
    7cfc:	e8df f001 	tbb	[pc, r1]
    7d00:	280e0804 	.word	0x280e0804
    7d04:	0042      	.short	0x0042
    7d06:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    7d08:	9800      	ldr	r0, [sp, #0]
    7d0a:	9901      	ldr	r1, [sp, #4]
    7d0c:	6008      	str	r0, [r1, #0]
    7d0e:	e041      	b.n	7d94 <_ZN4core4sync6atomic12atomic_store17h34073bf10e32a997E+0xc4>
            Release => intrinsics::atomic_store_release(dst, val),
    7d10:	9800      	ldr	r0, [sp, #0]
    7d12:	9901      	ldr	r1, [sp, #4]
    7d14:	f3bf 8f5f 	dmb	sy
    7d18:	6008      	str	r0, [r1, #0]
    7d1a:	e03b      	b.n	7d94 <_ZN4core4sync6atomic12atomic_store17h34073bf10e32a997E+0xc4>
        Arguments { pieces, fmt: None, args: &[] }
    7d1c:	f64d 30dc 	movw	r0, #56284	@ 0xdbdc
    7d20:	f2c0 0000 	movt	r0, #0
    7d24:	9003      	str	r0, [sp, #12]
    7d26:	2001      	movs	r0, #1
    7d28:	9004      	str	r0, [sp, #16]
    7d2a:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7d2e:	f2c0 0000 	movt	r0, #0
    7d32:	6801      	ldr	r1, [r0, #0]
    7d34:	6840      	ldr	r0, [r0, #4]
    7d36:	9107      	str	r1, [sp, #28]
    7d38:	9008      	str	r0, [sp, #32]
    7d3a:	2004      	movs	r0, #4
    7d3c:	9005      	str	r0, [sp, #20]
    7d3e:	2000      	movs	r0, #0
    7d40:	9006      	str	r0, [sp, #24]
            Acquire => panic!("there is no such thing as an acquire store"),
    7d42:	f64d 31e4 	movw	r1, #56292	@ 0xdbe4
    7d46:	f2c0 0100 	movt	r1, #0
    7d4a:	a803      	add	r0, sp, #12
    7d4c:	f002 fb6e 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    7d50:	f64d 30a8 	movw	r0, #56232	@ 0xdba8
    7d54:	f2c0 0000 	movt	r0, #0
    7d58:	9009      	str	r0, [sp, #36]	@ 0x24
    7d5a:	2001      	movs	r0, #1
    7d5c:	900a      	str	r0, [sp, #40]	@ 0x28
    7d5e:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    7d62:	f2c0 0000 	movt	r0, #0
    7d66:	6801      	ldr	r1, [r0, #0]
    7d68:	6840      	ldr	r0, [r0, #4]
    7d6a:	910d      	str	r1, [sp, #52]	@ 0x34
    7d6c:	900e      	str	r0, [sp, #56]	@ 0x38
    7d6e:	2004      	movs	r0, #4
    7d70:	900b      	str	r0, [sp, #44]	@ 0x2c
    7d72:	2000      	movs	r0, #0
    7d74:	900c      	str	r0, [sp, #48]	@ 0x30
            AcqRel => panic!("there is no such thing as an acquire-release store"),
    7d76:	f64d 31f4 	movw	r1, #56308	@ 0xdbf4
    7d7a:	f2c0 0100 	movt	r1, #0
    7d7e:	a809      	add	r0, sp, #36	@ 0x24
    7d80:	f002 fb54 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
    7d84:	9800      	ldr	r0, [sp, #0]
    7d86:	9901      	ldr	r1, [sp, #4]
    7d88:	f3bf 8f5f 	dmb	sy
    7d8c:	6008      	str	r0, [r1, #0]
    7d8e:	f3bf 8f5f 	dmb	sy
    7d92:	e7ff      	b.n	7d94 <_ZN4core4sync6atomic12atomic_store17h34073bf10e32a997E+0xc4>
}
    7d94:	b014      	add	sp, #80	@ 0x50
    7d96:	bd80      	pop	{r7, pc}

00007d98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h436190a4a789108dE>:
    pub const fn is_empty(&self) -> bool {
    7d98:	b580      	push	{r7, lr}
    7d9a:	466f      	mov	r7, sp
    7d9c:	b082      	sub	sp, #8
    7d9e:	9000      	str	r0, [sp, #0]
    7da0:	9101      	str	r1, [sp, #4]
        self.len() == 0
    7da2:	fab1 f081 	clz	r0, r1
    7da6:	0940      	lsrs	r0, r0, #5
    }
    7da8:	b002      	add	sp, #8
    7daa:	bd80      	pop	{r7, pc}

00007dac <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17he5264ccf79942584E>:
    fn into_iter(self) -> Iter<'a, T> {
    7dac:	b580      	push	{r7, lr}
    7dae:	466f      	mov	r7, sp
    7db0:	b08a      	sub	sp, #40	@ 0x28
    7db2:	9100      	str	r1, [sp, #0]
    7db4:	9001      	str	r0, [sp, #4]
    7db6:	9003      	str	r0, [sp, #12]
    7db8:	9104      	str	r1, [sp, #16]
        let len = slice.len();
    7dba:	9105      	str	r1, [sp, #20]
        unsafe { NonNull { pointer: r as *const T } }
    7dbc:	9006      	str	r0, [sp, #24]
    7dbe:	9107      	str	r1, [sp, #28]
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
    7dc0:	9008      	str	r0, [sp, #32]
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
    7dc2:	e7ff      	b.n	7dc4 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17he5264ccf79942584E+0x18>
        unsafe { mem::transmute::<Self, *mut T>(self) }
    7dc4:	9801      	ldr	r0, [sp, #4]
    7dc6:	9900      	ldr	r1, [sp, #0]
    7dc8:	9009      	str	r0, [sp, #36]	@ 0x24
        unsafe { intrinsics::offset(self, count) }
    7dca:	4408      	add	r0, r1
    7dcc:	9002      	str	r0, [sp, #8]
    7dce:	e7ff      	b.n	7dd0 <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17he5264ccf79942584E+0x24>
            Self { ptr, end_or_len, _marker: PhantomData }
    7dd0:	9801      	ldr	r0, [sp, #4]
    7dd2:	9902      	ldr	r1, [sp, #8]
    }
    7dd4:	b00a      	add	sp, #40	@ 0x28
    7dd6:	bd80      	pop	{r7, pc}

00007dd8 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17h70c660d3b0aa9a4fE>:
        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {
    7dd8:	b580      	push	{r7, lr}
    7dda:	466f      	mov	r7, sp
    7ddc:	b090      	sub	sp, #64	@ 0x40
    7dde:	9007      	str	r0, [sp, #28]
    7de0:	9108      	str	r1, [sp, #32]
    7de2:	9209      	str	r2, [sp, #36]	@ 0x24
    7de4:	930a      	str	r3, [sp, #40]	@ 0x28
        unsafe { mem::transmute(self.cast::<()>()) }
    7de6:	4684      	mov	ip, r0
    7de8:	f8cd c004 	str.w	ip, [sp, #4]
    7dec:	900b      	str	r0, [sp, #44]	@ 0x2c
    7dee:	4608      	mov	r0, r1
    7df0:	9002      	str	r0, [sp, #8]
    7df2:	910c      	str	r1, [sp, #48]	@ 0x30
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    7df4:	fba2 0103 	umull	r0, r1, r2, r3
    7df8:	2900      	cmp	r1, #0
    7dfa:	bf18      	it	ne
    7dfc:	2101      	movne	r1, #1
    7dfe:	4602      	mov	r2, r0
    7e00:	9203      	str	r2, [sp, #12]
    7e02:	f807 1c09 	strb.w	r1, [r7, #-9]
            (a as Self, b)
    7e06:	900e      	str	r0, [sp, #56]	@ 0x38
    if b {
    7e08:	d10c      	bne.n	7e24 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17h70c660d3b0aa9a4fE+0x4c>
    7e0a:	e7ff      	b.n	7e0c <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17h70c660d3b0aa9a4fE+0x34>
            if intrinsics::unlikely(b) { None } else { Some(a) }
    7e0c:	9801      	ldr	r0, [sp, #4]
    7e0e:	9902      	ldr	r1, [sp, #8]
    7e10:	9a03      	ldr	r2, [sp, #12]
    7e12:	9205      	str	r2, [sp, #20]
    7e14:	2201      	movs	r2, #1
    7e16:	9204      	str	r2, [sp, #16]
        if const {
            true
        } else {
            let src_usize = src.addr();
            let dst_usize = dst.addr();
            let Some(size) = size.checked_mul(count) else {
    7e18:	9a05      	ldr	r2, [sp, #20]
    7e1a:	9200      	str	r2, [sp, #0]
    7e1c:	920f      	str	r2, [sp, #60]	@ 0x3c
                if self < other {
    7e1e:	4288      	cmp	r0, r1
    7e20:	d30c      	bcc.n	7e3c <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17h70c660d3b0aa9a4fE+0x64>
    7e22:	e006      	b.n	7e32 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17h70c660d3b0aa9a4fE+0x5a>
                crate::panicking::panic_nounwind(
    7e24:	f64d 4004 	movw	r0, #56324	@ 0xdc04
    7e28:	f2c0 0000 	movt	r0, #0
    7e2c:	213d      	movs	r1, #61	@ 0x3d
    7e2e:	f002 fb2f 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
                    self - other
    7e32:	9801      	ldr	r0, [sp, #4]
    7e34:	9902      	ldr	r1, [sp, #8]
    7e36:	1a40      	subs	r0, r0, r1
    7e38:	9006      	str	r0, [sp, #24]
                if self < other {
    7e3a:	e004      	b.n	7e46 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17h70c660d3b0aa9a4fE+0x6e>
                    other - self
    7e3c:	9802      	ldr	r0, [sp, #8]
    7e3e:	9901      	ldr	r1, [sp, #4]
    7e40:	1a40      	subs	r0, r0, r1
    7e42:	9006      	str	r0, [sp, #24]
                if self < other {
    7e44:	e7ff      	b.n	7e46 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17h70c660d3b0aa9a4fE+0x6e>
                )
            };
            let diff = src_usize.abs_diff(dst_usize);
            // If the absolute distance between the ptrs is at least as big as the size of the buffer,
            // they do not overlap.
            diff >= size
    7e46:	9900      	ldr	r1, [sp, #0]
    7e48:	9806      	ldr	r0, [sp, #24]
    7e4a:	4288      	cmp	r0, r1
    7e4c:	f04f 0000 	mov.w	r0, #0
    7e50:	bf28      	it	cs
    7e52:	2001      	movcs	r0, #1
        }
    7e54:	b010      	add	sp, #64	@ 0x40
    7e56:	bd80      	pop	{r7, pc}

00007e58 <_ZN5defmt8encoding5inner7Encoder11start_frame17ha1db11d99e8afb28E>:
            zeros: 0,
            started: false,
        }
    }

    pub fn start_frame(&mut self, mut write: impl FnMut(&[u8])) {
    7e58:	b580      	push	{r7, lr}
    7e5a:	466f      	mov	r7, sp
    7e5c:	b084      	sub	sp, #16
    7e5e:	9000      	str	r0, [sp, #0]
    7e60:	9002      	str	r0, [sp, #8]
        let mut write_byte = move |b: u8| write(&[b]);
        if !self.started {
    7e62:	7800      	ldrb	r0, [r0, #0]
    7e64:	07c0      	lsls	r0, r0, #31
    7e66:	b948      	cbnz	r0, 7e7c <_ZN5defmt8encoding5inner7Encoder11start_frame17ha1db11d99e8afb28E+0x24>
    7e68:	e7ff      	b.n	7e6a <_ZN5defmt8encoding5inner7Encoder11start_frame17ha1db11d99e8afb28E+0x12>
    7e6a:	9900      	ldr	r1, [sp, #0]
    7e6c:	2001      	movs	r0, #1
            self.started = true;
    7e6e:	7008      	strb	r0, [r1, #0]
    7e70:	f1a7 0009 	sub.w	r0, r7, #9
    7e74:	2100      	movs	r1, #0

            // Write a frame-separator at the very beginning. This allows the
            // decoder to correctly decode the first frame if a previous boot had left a
            // partly-written frame.
            write_byte(0x00);
    7e76:	f000 f803 	bl	7e80 <_ZN5defmt8encoding5inner7Encoder11start_frame28_$u7b$$u7b$closure$u7d$$u7d$17h1b6dbe0b6cc9a828E>
    7e7a:	e7ff      	b.n	7e7c <_ZN5defmt8encoding5inner7Encoder11start_frame17ha1db11d99e8afb28E+0x24>
        }
    }
    7e7c:	b004      	add	sp, #16
    7e7e:	bd80      	pop	{r7, pc}

00007e80 <_ZN5defmt8encoding5inner7Encoder11start_frame28_$u7b$$u7b$closure$u7d$$u7d$17h1b6dbe0b6cc9a828E>:
        let mut write_byte = move |b: u8| write(&[b]);
    7e80:	b580      	push	{r7, lr}
    7e82:	466f      	mov	r7, sp
    7e84:	b084      	sub	sp, #16
    7e86:	9002      	str	r0, [sp, #8]
    7e88:	f807 1c01 	strb.w	r1, [r7, #-1]
    7e8c:	f807 1c09 	strb.w	r1, [r7, #-9]
    7e90:	f1a7 0109 	sub.w	r1, r7, #9
    7e94:	2201      	movs	r2, #1
    7e96:	f000 fb61 	bl	855c <_ZN9defmt_rtt10RttEncoder7acquire28_$u7b$$u7b$closure$u7d$$u7d$17hbb90341c3a2d7637E>
    7e9a:	b004      	add	sp, #16
    7e9c:	bd80      	pop	{r7, pc}

00007e9e <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE>:

        self.run = 0;
        self.zeros = 0;
    }

    pub fn write(&mut self, data: &[u8], mut write: impl FnMut(&[u8])) {
    7e9e:	b580      	push	{r7, lr}
    7ea0:	466f      	mov	r7, sp
    7ea2:	b090      	sub	sp, #64	@ 0x40
    7ea4:	9205      	str	r2, [sp, #20]
    7ea6:	460a      	mov	r2, r1
    7ea8:	9905      	ldr	r1, [sp, #20]
    7eaa:	9206      	str	r2, [sp, #24]
    7eac:	4602      	mov	r2, r0
    7eae:	9806      	ldr	r0, [sp, #24]
    7eb0:	9207      	str	r2, [sp, #28]
    7eb2:	920c      	str	r2, [sp, #48]	@ 0x30
    7eb4:	900d      	str	r0, [sp, #52]	@ 0x34
    7eb6:	910e      	str	r1, [sp, #56]	@ 0x38
        let mut write_byte = move |b: u8| write(&[b]);

        for &byte in data {
    7eb8:	f7ff ff78 	bl	7dac <_ZN4core5slice4iter87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17he5264ccf79942584E>
    7ebc:	9009      	str	r0, [sp, #36]	@ 0x24
    7ebe:	910a      	str	r1, [sp, #40]	@ 0x28
    7ec0:	e7ff      	b.n	7ec2 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x24>
    7ec2:	a809      	add	r0, sp, #36	@ 0x24
    7ec4:	f000 f925 	bl	8112 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE>
    7ec8:	900b      	str	r0, [sp, #44]	@ 0x2c
    7eca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    7ecc:	b158      	cbz	r0, 7ee6 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x48>
    7ece:	e7ff      	b.n	7ed0 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x32>
    7ed0:	9807      	ldr	r0, [sp, #28]
    7ed2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    7ed4:	7809      	ldrb	r1, [r1, #0]
    7ed6:	460a      	mov	r2, r1
    7ed8:	9204      	str	r2, [sp, #16]
    7eda:	f807 1c01 	strb.w	r1, [r7, #-1]
            if self.run < 7 {
    7ede:	7840      	ldrb	r0, [r0, #1]
    7ee0:	2807      	cmp	r0, #7
    7ee2:	d306      	bcc.n	7ef2 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x54>
    7ee4:	e001      	b.n	7eea <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x4c>
                    self.run = 0;
                    self.zeros = 0;
                }
            }
        }
    }
    7ee6:	b010      	add	sp, #64	@ 0x40
    7ee8:	bd80      	pop	{r7, pc}
            } else if byte == 0 {
    7eea:	9804      	ldr	r0, [sp, #16]
    7eec:	0600      	lsls	r0, r0, #24
    7eee:	b128      	cbz	r0, 7efc <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x5e>
    7ef0:	e00b      	b.n	7f0a <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x6c>
                if byte == 0 {
    7ef2:	9804      	ldr	r0, [sp, #16]
    7ef4:	0600      	lsls	r0, r0, #24
    7ef6:	2800      	cmp	r0, #0
    7ef8:	d03e      	beq.n	7f78 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0xda>
    7efa:	e044      	b.n	7f86 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0xe8>
                write_byte((self.run - 7) | 0x80);
    7efc:	9807      	ldr	r0, [sp, #28]
    7efe:	7840      	ldrb	r0, [r0, #1]
    7f00:	1fc1      	subs	r1, r0, #7
    7f02:	9103      	str	r1, [sp, #12]
    7f04:	2807      	cmp	r0, #7
    7f06:	d31a      	bcc.n	7f3e <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0xa0>
    7f08:	e00d      	b.n	7f26 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x88>
                write_byte(byte);
    7f0a:	9904      	ldr	r1, [sp, #16]
    7f0c:	f1a7 001d 	sub.w	r0, r7, #29
    7f10:	f000 f877 	bl	8002 <_ZN5defmt8encoding5inner7Encoder5write28_$u7b$$u7b$closure$u7d$$u7d$17h0db566b02e2df09aE>
    7f14:	9807      	ldr	r0, [sp, #28]
                self.run += 1;
    7f16:	7840      	ldrb	r0, [r0, #1]
    7f18:	1c41      	adds	r1, r0, #1
    7f1a:	b2c8      	uxtb	r0, r1
    7f1c:	460a      	mov	r2, r1
    7f1e:	9202      	str	r2, [sp, #8]
    7f20:	4288      	cmp	r0, r1
    7f22:	d119      	bne.n	7f58 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0xba>
    7f24:	e011      	b.n	7f4a <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0xac>
                write_byte((self.run - 7) | 0x80);
    7f26:	9803      	ldr	r0, [sp, #12]
    7f28:	f060 017f 	orn	r1, r0, #127	@ 0x7f
    7f2c:	f1a7 001d 	sub.w	r0, r7, #29
    7f30:	f000 f867 	bl	8002 <_ZN5defmt8encoding5inner7Encoder5write28_$u7b$$u7b$closure$u7d$$u7d$17h0db566b02e2df09aE>
    7f34:	9907      	ldr	r1, [sp, #28]
    7f36:	2000      	movs	r0, #0
                self.run = 0;
    7f38:	7048      	strb	r0, [r1, #1]
                self.zeros = 0;
    7f3a:	7088      	strb	r0, [r1, #2]
            } else if byte == 0 {
    7f3c:	e7c1      	b.n	7ec2 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x24>
                write_byte((self.run - 7) | 0x80);
    7f3e:	f64d 40ac 	movw	r0, #56492	@ 0xdcac
    7f42:	f2c0 0000 	movt	r0, #0
    7f46:	f003 f903 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
                self.run += 1;
    7f4a:	9807      	ldr	r0, [sp, #28]
    7f4c:	9902      	ldr	r1, [sp, #8]
    7f4e:	7041      	strb	r1, [r0, #1]
                if self.run == 134 {
    7f50:	7840      	ldrb	r0, [r0, #1]
    7f52:	2886      	cmp	r0, #134	@ 0x86
    7f54:	d006      	beq.n	7f64 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0xc6>
    7f56:	e7b4      	b.n	7ec2 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x24>
                self.run += 1;
    7f58:	f64d 40bc 	movw	r0, #56508	@ 0xdcbc
    7f5c:	f2c0 0000 	movt	r0, #0
    7f60:	f003 f8e3 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    7f64:	f1a7 001d 	sub.w	r0, r7, #29
    7f68:	21ff      	movs	r1, #255	@ 0xff
                    write_byte(0xFF);
    7f6a:	f000 f84a 	bl	8002 <_ZN5defmt8encoding5inner7Encoder5write28_$u7b$$u7b$closure$u7d$$u7d$17h0db566b02e2df09aE>
    7f6e:	9907      	ldr	r1, [sp, #28]
    7f70:	2000      	movs	r0, #0
                    self.run = 0;
    7f72:	7048      	strb	r0, [r1, #1]
                    self.zeros = 0;
    7f74:	7088      	strb	r0, [r1, #2]
                if self.run == 134 {
    7f76:	e7a4      	b.n	7ec2 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x24>
                    self.zeros |= 1 << self.run;
    7f78:	9807      	ldr	r0, [sp, #28]
    7f7a:	7840      	ldrb	r0, [r0, #1]
    7f7c:	4601      	mov	r1, r0
    7f7e:	9101      	str	r1, [sp, #4]
    7f80:	2808      	cmp	r0, #8
    7f82:	d306      	bcc.n	7f92 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0xf4>
    7f84:	e010      	b.n	7fa8 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x10a>
                    write_byte(byte);
    7f86:	9904      	ldr	r1, [sp, #16]
    7f88:	f1a7 001d 	sub.w	r0, r7, #29
    7f8c:	f000 f839 	bl	8002 <_ZN5defmt8encoding5inner7Encoder5write28_$u7b$$u7b$closure$u7d$$u7d$17h0db566b02e2df09aE>
    7f90:	e010      	b.n	7fb4 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x116>
                    self.zeros |= 1 << self.run;
    7f92:	9907      	ldr	r1, [sp, #28]
    7f94:	9801      	ldr	r0, [sp, #4]
    7f96:	f000 0207 	and.w	r2, r0, #7
    7f9a:	2001      	movs	r0, #1
    7f9c:	fa00 f202 	lsl.w	r2, r0, r2
    7fa0:	7888      	ldrb	r0, [r1, #2]
    7fa2:	4310      	orrs	r0, r2
    7fa4:	7088      	strb	r0, [r1, #2]
                if byte == 0 {
    7fa6:	e005      	b.n	7fb4 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x116>
                    self.zeros |= 1 << self.run;
    7fa8:	f64d 40cc 	movw	r0, #56524	@ 0xdccc
    7fac:	f2c0 0000 	movt	r0, #0
    7fb0:	f003 f907 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>
                self.run += 1;
    7fb4:	9807      	ldr	r0, [sp, #28]
    7fb6:	7840      	ldrb	r0, [r0, #1]
    7fb8:	1c41      	adds	r1, r0, #1
    7fba:	b2c8      	uxtb	r0, r1
    7fbc:	460a      	mov	r2, r1
    7fbe:	9200      	str	r2, [sp, #0]
    7fc0:	4288      	cmp	r0, r1
    7fc2:	d107      	bne.n	7fd4 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x136>
    7fc4:	e7ff      	b.n	7fc6 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x128>
    7fc6:	9807      	ldr	r0, [sp, #28]
    7fc8:	9900      	ldr	r1, [sp, #0]
    7fca:	7041      	strb	r1, [r0, #1]
                if self.run == 7 && self.zeros != 0x00 {
    7fcc:	7840      	ldrb	r0, [r0, #1]
    7fce:	2807      	cmp	r0, #7
    7fd0:	d006      	beq.n	7fe0 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x142>
    7fd2:	e776      	b.n	7ec2 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x24>
                self.run += 1;
    7fd4:	f64d 40dc 	movw	r0, #56540	@ 0xdcdc
    7fd8:	f2c0 0000 	movt	r0, #0
    7fdc:	f003 f8a5 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
                if self.run == 7 && self.zeros != 0x00 {
    7fe0:	9807      	ldr	r0, [sp, #28]
    7fe2:	7880      	ldrb	r0, [r0, #2]
    7fe4:	2800      	cmp	r0, #0
    7fe6:	f43f af6c 	beq.w	7ec2 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x24>
    7fea:	e7ff      	b.n	7fec <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x14e>
                    write_byte(self.zeros);
    7fec:	9807      	ldr	r0, [sp, #28]
    7fee:	7881      	ldrb	r1, [r0, #2]
    7ff0:	f1a7 001d 	sub.w	r0, r7, #29
    7ff4:	f000 f805 	bl	8002 <_ZN5defmt8encoding5inner7Encoder5write28_$u7b$$u7b$closure$u7d$$u7d$17h0db566b02e2df09aE>
    7ff8:	9907      	ldr	r1, [sp, #28]
    7ffa:	2000      	movs	r0, #0
                    self.run = 0;
    7ffc:	7048      	strb	r0, [r1, #1]
                    self.zeros = 0;
    7ffe:	7088      	strb	r0, [r1, #2]
                if self.run == 7 && self.zeros != 0x00 {
    8000:	e75f      	b.n	7ec2 <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE+0x24>

00008002 <_ZN5defmt8encoding5inner7Encoder5write28_$u7b$$u7b$closure$u7d$$u7d$17h0db566b02e2df09aE>:
        let mut write_byte = move |b: u8| write(&[b]);
    8002:	b580      	push	{r7, lr}
    8004:	466f      	mov	r7, sp
    8006:	b084      	sub	sp, #16
    8008:	9002      	str	r0, [sp, #8]
    800a:	f807 1c01 	strb.w	r1, [r7, #-1]
    800e:	f807 1c09 	strb.w	r1, [r7, #-9]
    8012:	f1a7 0109 	sub.w	r1, r7, #9
    8016:	2201      	movs	r2, #1
    8018:	f000 fabc 	bl	8594 <_ZN9defmt_rtt10RttEncoder5write28_$u7b$$u7b$closure$u7d$$u7d$17h615a2c54f6a9a3d8E>
    801c:	b004      	add	sp, #16
    801e:	bd80      	pop	{r7, pc}

00008020 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E>:
    pub fn end_frame(&mut self, mut write: impl FnMut(&[u8])) {
    8020:	b580      	push	{r7, lr}
    8022:	466f      	mov	r7, sp
    8024:	b088      	sub	sp, #32
    8026:	9004      	str	r0, [sp, #16]
    8028:	9006      	str	r0, [sp, #24]
        match self.run {
    802a:	7840      	ldrb	r0, [r0, #1]
    802c:	b960      	cbnz	r0, 8048 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x28>
    802e:	e7ff      	b.n	8030 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x10>
    8030:	f1a7 0009 	sub.w	r0, r7, #9
    8034:	2100      	movs	r1, #0
        write_byte(0x00);
    8036:	9103      	str	r1, [sp, #12]
    8038:	f000 f842 	bl	80c0 <_ZN5defmt8encoding5inner7Encoder9end_frame28_$u7b$$u7b$closure$u7d$$u7d$17hb5708badff841264E>
    803c:	9904      	ldr	r1, [sp, #16]
    803e:	9803      	ldr	r0, [sp, #12]
        self.run = 0;
    8040:	7048      	strb	r0, [r1, #1]
        self.zeros = 0;
    8042:	7088      	strb	r0, [r1, #2]
    }
    8044:	b008      	add	sp, #32
    8046:	bd80      	pop	{r7, pc}
            1..=6 => write_byte((self.zeros | (0xFF << self.run)) & 0x7F),
    8048:	9804      	ldr	r0, [sp, #16]
    804a:	7840      	ldrb	r0, [r0, #1]
    804c:	b938      	cbnz	r0, 805e <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x3e>
    804e:	e7ff      	b.n	8050 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x30>
            _ => write_byte((self.run - 7) | 0x80),
    8050:	9804      	ldr	r0, [sp, #16]
    8052:	7840      	ldrb	r0, [r0, #1]
    8054:	1fc1      	subs	r1, r0, #7
    8056:	9102      	str	r1, [sp, #8]
    8058:	2807      	cmp	r0, #7
    805a:	d316      	bcc.n	808a <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x6a>
    805c:	e00d      	b.n	807a <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x5a>
            1..=6 => write_byte((self.zeros | (0xFF << self.run)) & 0x7F),
    805e:	9804      	ldr	r0, [sp, #16]
    8060:	7840      	ldrb	r0, [r0, #1]
    8062:	2806      	cmp	r0, #6
    8064:	d8f4      	bhi.n	8050 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x30>
    8066:	e7ff      	b.n	8068 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x48>
    8068:	9904      	ldr	r1, [sp, #16]
    806a:	7848      	ldrb	r0, [r1, #1]
    806c:	7889      	ldrb	r1, [r1, #2]
    806e:	9100      	str	r1, [sp, #0]
    8070:	4601      	mov	r1, r0
    8072:	9101      	str	r1, [sp, #4]
    8074:	2808      	cmp	r0, #8
    8076:	d30e      	bcc.n	8096 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x76>
    8078:	e01c      	b.n	80b4 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x94>
            _ => write_byte((self.run - 7) | 0x80),
    807a:	9802      	ldr	r0, [sp, #8]
    807c:	f060 017f 	orn	r1, r0, #127	@ 0x7f
    8080:	f1a7 0009 	sub.w	r0, r7, #9
    8084:	f000 f81c 	bl	80c0 <_ZN5defmt8encoding5inner7Encoder9end_frame28_$u7b$$u7b$closure$u7d$$u7d$17hb5708badff841264E>
    8088:	e7d2      	b.n	8030 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x10>
    808a:	f64d 40ec 	movw	r0, #56556	@ 0xdcec
    808e:	f2c0 0000 	movt	r0, #0
    8092:	f003 f85d 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
            1..=6 => write_byte((self.zeros | (0xFF << self.run)) & 0x7F),
    8096:	9800      	ldr	r0, [sp, #0]
    8098:	9901      	ldr	r1, [sp, #4]
    809a:	f001 0207 	and.w	r2, r1, #7
    809e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
    80a2:	4091      	lsls	r1, r2
    80a4:	4308      	orrs	r0, r1
    80a6:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
    80aa:	f1a7 0009 	sub.w	r0, r7, #9
    80ae:	f000 f807 	bl	80c0 <_ZN5defmt8encoding5inner7Encoder9end_frame28_$u7b$$u7b$closure$u7d$$u7d$17hb5708badff841264E>
    80b2:	e7bd      	b.n	8030 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E+0x10>
    80b4:	f64d 40fc 	movw	r0, #56572	@ 0xdcfc
    80b8:	f2c0 0000 	movt	r0, #0
    80bc:	f003 f881 	bl	b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>

000080c0 <_ZN5defmt8encoding5inner7Encoder9end_frame28_$u7b$$u7b$closure$u7d$$u7d$17hb5708badff841264E>:
        let mut write_byte = move |b: u8| write(&[b]);
    80c0:	b580      	push	{r7, lr}
    80c2:	466f      	mov	r7, sp
    80c4:	b084      	sub	sp, #16
    80c6:	9002      	str	r0, [sp, #8]
    80c8:	f807 1c01 	strb.w	r1, [r7, #-1]
    80cc:	f807 1c09 	strb.w	r1, [r7, #-9]
    80d0:	f1a7 0109 	sub.w	r1, r7, #9
    80d4:	2201      	movs	r2, #1
    80d6:	f000 faa5 	bl	8624 <_ZN9defmt_rtt10RttEncoder7release28_$u7b$$u7b$closure$u7d$$u7d$17he7b1974c82f8d4bcE>
    80da:	b004      	add	sp, #16
    80dc:	bd80      	pop	{r7, pc}

000080de <_ZN5defmt8encoding7Encoder11start_frame17ha99e41e021885319E>:
    /// You may only call `start_frame` when no frame is currently being encoded.
    /// Failure to do so may result in corrupted data on the wire.
    ///
    /// The `write` closure will be called with the encoded data that must
    /// be sent on the wire. It may be called zero, one, or multiple times.
    pub fn start_frame(&mut self, write: impl FnMut(&[u8])) {
    80de:	b580      	push	{r7, lr}
    80e0:	466f      	mov	r7, sp
    80e2:	b082      	sub	sp, #8
    80e4:	9000      	str	r0, [sp, #0]
        self.inner.start_frame(write)
    80e6:	f7ff feb7 	bl	7e58 <_ZN5defmt8encoding5inner7Encoder11start_frame17ha1db11d99e8afb28E>
    }
    80ea:	b002      	add	sp, #8
    80ec:	bd80      	pop	{r7, pc}

000080ee <_ZN5defmt8encoding7Encoder5write17h7862f6bf3061c978E>:
    /// You may only call `write` when a frame is currently being encoded.
    /// Failure to do so may result in corrupted data on the wire.
    ///
    /// The `write` closure will be called with the encoded data that must
    /// be sent on the wire. It may be called zero, one, or multiple times.
    pub fn write(&mut self, data: &[u8], write: impl FnMut(&[u8])) {
    80ee:	b580      	push	{r7, lr}
    80f0:	466f      	mov	r7, sp
    80f2:	b084      	sub	sp, #16
    80f4:	9000      	str	r0, [sp, #0]
    80f6:	9101      	str	r1, [sp, #4]
    80f8:	9202      	str	r2, [sp, #8]
        self.inner.write(data, write)
    80fa:	f7ff fed0 	bl	7e9e <_ZN5defmt8encoding5inner7Encoder5write17h0000277850e5507bE>
    }
    80fe:	b004      	add	sp, #16
    8100:	bd80      	pop	{r7, pc}

00008102 <_ZN5defmt8encoding7Encoder9end_frame17h1beb2f0016646dfeE>:
    pub fn end_frame(&mut self, write: impl FnMut(&[u8])) {
    8102:	b580      	push	{r7, lr}
    8104:	466f      	mov	r7, sp
    8106:	b082      	sub	sp, #8
    8108:	9000      	str	r0, [sp, #0]
        self.inner.end_frame(write)
    810a:	f7ff ff89 	bl	8020 <_ZN5defmt8encoding5inner7Encoder9end_frame17h80a8a74f004f5d36E>
    }
    810e:	b002      	add	sp, #8
    8110:	bd80      	pop	{r7, pc}

00008112 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE>:
            fn next(&mut self) -> Option<$elem> {
    8112:	b580      	push	{r7, lr}
    8114:	466f      	mov	r7, sp
    8116:	b08d      	sub	sp, #52	@ 0x34
    8118:	9000      	str	r0, [sp, #0]
    811a:	9006      	str	r0, [sp, #24]
    811c:	2101      	movs	r1, #1
        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
    811e:	9107      	str	r1, [sp, #28]
    pub const unsafe fn add(self, count: usize) -> Self
    8120:	9108      	str	r1, [sp, #32]
                let ptr = self.ptr;
    8122:	6801      	ldr	r1, [r0, #0]
    8124:	9103      	str	r1, [sp, #12]
                let end_or_len = self.end_or_len;
    8126:	6840      	ldr	r0, [r0, #4]
    8128:	9001      	str	r0, [sp, #4]
    812a:	9009      	str	r0, [sp, #36]	@ 0x24
                    if T::IS_ZST {
    812c:	e7ff      	b.n	812e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE+0x1c>
    812e:	9801      	ldr	r0, [sp, #4]
    8130:	a903      	add	r1, sp, #12
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
    8132:	910a      	str	r1, [sp, #40]	@ 0x28
    8134:	9004      	str	r0, [sp, #16]
    8136:	a804      	add	r0, sp, #16
    8138:	900b      	str	r0, [sp, #44]	@ 0x2c
        unsafe { mem::transmute::<Self, *mut T>(self) }
    813a:	9803      	ldr	r0, [sp, #12]
    813c:	9904      	ldr	r1, [sp, #16]
    813e:	4288      	cmp	r0, r1
    8140:	d005      	beq.n	814e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE+0x3c>
    8142:	e7ff      	b.n	8144 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE+0x32>
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
    8144:	9900      	ldr	r1, [sp, #0]
    8146:	9803      	ldr	r0, [sp, #12]
    8148:	3001      	adds	r0, #1
                        self.ptr = ptr.add(1);
    814a:	6008      	str	r0, [r1, #0]
                    if T::IS_ZST {
    814c:	e002      	b.n	8154 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE+0x42>
    814e:	2000      	movs	r0, #0
                            return None;
    8150:	9002      	str	r0, [sp, #8]
    8152:	e009      	b.n	8168 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE+0x56>
                    Some({ptr}.$into_ref())
    8154:	9803      	ldr	r0, [sp, #12]
    8156:	9005      	str	r0, [sp, #20]
    8158:	a805      	add	r0, sp, #20
    815a:	900c      	str	r0, [sp, #48]	@ 0x30
        self as _
    815c:	9803      	ldr	r0, [sp, #12]
    815e:	9002      	str	r0, [sp, #8]
            }
    8160:	e7ff      	b.n	8162 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE+0x50>
    8162:	9802      	ldr	r0, [sp, #8]
    8164:	b00d      	add	sp, #52	@ 0x34
    8166:	bd80      	pop	{r7, pc}
    8168:	e7fb      	b.n	8162 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd3831f7670c52ffeE+0x50>

0000816a <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE>:
    /// Currently, only the lowest 2 bits are used to set the channel mode (see constants below).
    pub flags: AtomicUsize,
}

impl Channel {
    pub fn write_all(&self, mut bytes: &[u8]) {
    816a:	b580      	push	{r7, lr}
    816c:	466f      	mov	r7, sp
    816e:	b08a      	sub	sp, #40	@ 0x28
    8170:	9001      	str	r0, [sp, #4]
    8172:	9102      	str	r1, [sp, #8]
    8174:	9203      	str	r2, [sp, #12]
    8176:	9005      	str	r0, [sp, #20]
        // the host-connection-status is only modified after RAM initialization while the device is
        // halted, so we only need to check it once before the write-loop
        let write = match self.host_is_connected() {
    8178:	f000 f945 	bl	8406 <_ZN9defmt_rtt7channel7Channel17host_is_connected17h82d1da889a6eedf1E>
    817c:	b930      	cbnz	r0, 818c <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x22>
    817e:	e7ff      	b.n	8180 <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x16>
            _ if cfg!(feature = "disable-blocking-mode") => Self::nonblocking_write,
            true => Self::blocking_write,
            false => Self::nonblocking_write,
    8180:	f248 206d 	movw	r0, #33389	@ 0x826d
    8184:	f2c0 0000 	movt	r0, #0
    8188:	9004      	str	r0, [sp, #16]
    818a:	e005      	b.n	8198 <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x2e>
            true => Self::blocking_write,
    818c:	f248 10dd 	movw	r0, #33245	@ 0x81dd
    8190:	f2c0 0000 	movt	r0, #0
    8194:	9004      	str	r0, [sp, #16]
    8196:	e7ff      	b.n	8198 <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x2e>
        };

        while !bytes.is_empty() {
    8198:	9802      	ldr	r0, [sp, #8]
    819a:	9903      	ldr	r1, [sp, #12]
    819c:	f7ff fdfc 	bl	7d98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h436190a4a789108dE>
    81a0:	b958      	cbnz	r0, 81ba <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x50>
    81a2:	e7ff      	b.n	81a4 <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x3a>
            let consumed = write(self, bytes);
    81a4:	9801      	ldr	r0, [sp, #4]
    81a6:	9b04      	ldr	r3, [sp, #16]
    81a8:	9902      	ldr	r1, [sp, #8]
    81aa:	9a03      	ldr	r2, [sp, #12]
    81ac:	4798      	blx	r3
    81ae:	4601      	mov	r1, r0
    81b0:	9100      	str	r1, [sp, #0]
    81b2:	9006      	str	r0, [sp, #24]
            if consumed != 0 {
    81b4:	2800      	cmp	r0, #0
    81b6:	d0ef      	beq.n	8198 <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x2e>
    81b8:	e001      	b.n	81be <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x54>
                bytes = &bytes[consumed..];
            }
        }
    }
    81ba:	b00a      	add	sp, #40	@ 0x28
    81bc:	bd80      	pop	{r7, pc}
                bytes = &bytes[consumed..];
    81be:	9800      	ldr	r0, [sp, #0]
    81c0:	9902      	ldr	r1, [sp, #8]
    81c2:	9a03      	ldr	r2, [sp, #12]
    81c4:	9107      	str	r1, [sp, #28]
    81c6:	9208      	str	r2, [sp, #32]
    81c8:	9009      	str	r0, [sp, #36]	@ 0x24
        index.index(self)
    81ca:	f64d 5374 	movw	r3, #56692	@ 0xdd74
    81ce:	f2c0 0300 	movt	r3, #0
    81d2:	f7ff faca 	bl	776a <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17hcc19f1685f67a3cdE>
    81d6:	9002      	str	r0, [sp, #8]
    81d8:	9103      	str	r1, [sp, #12]
            if consumed != 0 {
    81da:	e7dd      	b.n	8198 <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE+0x2e>

000081dc <_ZN9defmt_rtt7channel7Channel14blocking_write17hcb94bcd6b4ac97d8E>:

    fn blocking_write(&self, bytes: &[u8]) -> usize {
    81dc:	b580      	push	{r7, lr}
    81de:	466f      	mov	r7, sp
    81e0:	b090      	sub	sp, #64	@ 0x40
    81e2:	9205      	str	r2, [sp, #20]
    81e4:	460a      	mov	r2, r1
    81e6:	9905      	ldr	r1, [sp, #20]
    81e8:	9206      	str	r2, [sp, #24]
    81ea:	4602      	mov	r2, r0
    81ec:	9806      	ldr	r0, [sp, #24]
    81ee:	9207      	str	r2, [sp, #28]
    81f0:	920a      	str	r2, [sp, #40]	@ 0x28
    81f2:	900b      	str	r0, [sp, #44]	@ 0x2c
    81f4:	910c      	str	r1, [sp, #48]	@ 0x30
        if bytes.is_empty() {
    81f6:	f7ff fdcf 	bl	7d98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h436190a4a789108dE>
    81fa:	bb08      	cbnz	r0, 8240 <_ZN9defmt_rtt7channel7Channel14blocking_write17hcb94bcd6b4ac97d8E+0x64>
    81fc:	e7ff      	b.n	81fe <_ZN9defmt_rtt7channel7Channel14blocking_write17hcb94bcd6b4ac97d8E+0x22>
            return 0;
        }

        // calculate how much space is left in the buffer
        let read = self.read.load(Ordering::Relaxed);
    81fe:	9807      	ldr	r0, [sp, #28]
    8200:	3010      	adds	r0, #16
    8202:	2100      	movs	r1, #0
    8204:	f807 1c1a 	strb.w	r1, [r7, #-26]
    8208:	f817 1c1a 	ldrb.w	r1, [r7, #-26]
    820c:	f7ff fc1b 	bl	7a46 <_ZN4core4sync6atomic11AtomicUsize4load17hfe561a44da5776a8E>
    8210:	4601      	mov	r1, r0
    8212:	9807      	ldr	r0, [sp, #28]
    8214:	9102      	str	r1, [sp, #8]
    8216:	910d      	str	r1, [sp, #52]	@ 0x34
        let write = self.write.load(Ordering::Acquire);
    8218:	300c      	adds	r0, #12
    821a:	2102      	movs	r1, #2
    821c:	f807 1c19 	strb.w	r1, [r7, #-25]
    8220:	f817 1c19 	ldrb.w	r1, [r7, #-25]
    8224:	f7ff fc0f 	bl	7a46 <_ZN4core4sync6atomic11AtomicUsize4load17hfe561a44da5776a8E>
    8228:	4601      	mov	r1, r0
    822a:	9802      	ldr	r0, [sp, #8]
    822c:	460a      	mov	r2, r1
    822e:	9203      	str	r2, [sp, #12]
    8230:	910e      	str	r1, [sp, #56]	@ 0x38
        let available = available_buffer_size(read, write);
    8232:	f000 f8fc 	bl	842e <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE>
    8236:	4601      	mov	r1, r0
    8238:	9104      	str	r1, [sp, #16]
    823a:	900f      	str	r0, [sp, #60]	@ 0x3c

        // abort if buffer is full
        if available == 0 {
    823c:	b118      	cbz	r0, 8246 <_ZN9defmt_rtt7channel7Channel14blocking_write17hcb94bcd6b4ac97d8E+0x6a>
    823e:	e005      	b.n	824c <_ZN9defmt_rtt7channel7Channel14blocking_write17hcb94bcd6b4ac97d8E+0x70>
    8240:	2000      	movs	r0, #0
            return 0;
    8242:	9008      	str	r0, [sp, #32]
    8244:	e00f      	b.n	8266 <_ZN9defmt_rtt7channel7Channel14blocking_write17hcb94bcd6b4ac97d8E+0x8a>
    8246:	2000      	movs	r0, #0
            return 0;
    8248:	9008      	str	r0, [sp, #32]
    824a:	e00c      	b.n	8266 <_ZN9defmt_rtt7channel7Channel14blocking_write17hcb94bcd6b4ac97d8E+0x8a>
        }

        self.write_impl(bytes, write, available)
    824c:	9b03      	ldr	r3, [sp, #12]
    824e:	9a05      	ldr	r2, [sp, #20]
    8250:	9906      	ldr	r1, [sp, #24]
    8252:	9807      	ldr	r0, [sp, #28]
    8254:	f8dd c010 	ldr.w	ip, [sp, #16]
    8258:	46ee      	mov	lr, sp
    825a:	f8ce c000 	str.w	ip, [lr]
    825e:	f000 f824 	bl	82aa <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E>
    8262:	9008      	str	r0, [sp, #32]
    8264:	e7ff      	b.n	8266 <_ZN9defmt_rtt7channel7Channel14blocking_write17hcb94bcd6b4ac97d8E+0x8a>
    }
    8266:	9808      	ldr	r0, [sp, #32]
    8268:	b010      	add	sp, #64	@ 0x40
    826a:	bd80      	pop	{r7, pc}

0000826c <_ZN9defmt_rtt7channel7Channel17nonblocking_write17hcb7babfdc5d38901E>:

    fn nonblocking_write(&self, bytes: &[u8]) -> usize {
    826c:	b580      	push	{r7, lr}
    826e:	466f      	mov	r7, sp
    8270:	b08a      	sub	sp, #40	@ 0x28
    8272:	9203      	str	r2, [sp, #12]
    8274:	9102      	str	r1, [sp, #8]
    8276:	9004      	str	r0, [sp, #16]
    8278:	9006      	str	r0, [sp, #24]
    827a:	9107      	str	r1, [sp, #28]
    827c:	9208      	str	r2, [sp, #32]
        let write = self.write.load(Ordering::Acquire);
    827e:	300c      	adds	r0, #12
    8280:	2102      	movs	r1, #2
    8282:	f807 1c11 	strb.w	r1, [r7, #-17]
    8286:	f817 1c11 	ldrb.w	r1, [r7, #-17]
    828a:	f7ff fbdc 	bl	7a46 <_ZN4core4sync6atomic11AtomicUsize4load17hfe561a44da5776a8E>
    828e:	9902      	ldr	r1, [sp, #8]
    8290:	9a03      	ldr	r2, [sp, #12]
    8292:	4603      	mov	r3, r0
    8294:	9804      	ldr	r0, [sp, #16]
    8296:	9309      	str	r3, [sp, #36]	@ 0x24

        // NOTE truncate at BUF_SIZE to avoid more than one "wrap-around" in a single `write` call
        self.write_impl(bytes, write, BUF_SIZE)
    8298:	46ee      	mov	lr, sp
    829a:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
    829e:	f8ce c000 	str.w	ip, [lr]
    82a2:	f000 f802 	bl	82aa <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E>
    }
    82a6:	b00a      	add	sp, #40	@ 0x28
    82a8:	bd80      	pop	{r7, pc}

000082aa <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E>:

    fn write_impl(&self, bytes: &[u8], cursor: usize, available: usize) -> usize {
    82aa:	b580      	push	{r7, lr}
    82ac:	466f      	mov	r7, sp
    82ae:	b0ac      	sub	sp, #176	@ 0xb0
    82b0:	930b      	str	r3, [sp, #44]	@ 0x2c
    82b2:	9209      	str	r2, [sp, #36]	@ 0x24
    82b4:	460a      	mov	r2, r1
    82b6:	9208      	str	r2, [sp, #32]
    82b8:	4684      	mov	ip, r0
    82ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
    82bc:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
    82c0:	68b9      	ldr	r1, [r7, #8]
    82c2:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
    82c6:	9210      	str	r2, [sp, #64]	@ 0x40
    82c8:	9011      	str	r0, [sp, #68]	@ 0x44
    82ca:	9312      	str	r3, [sp, #72]	@ 0x48
        let len = bytes.len().min(available);
    82cc:	f7ff fb6f 	bl	79ae <_ZN4core3cmp3Ord3min17h128d512d1cb2c35dE>
    82d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    82d2:	4601      	mov	r1, r0
    82d4:	910c      	str	r1, [sp, #48]	@ 0x30
    82d6:	9013      	str	r0, [sp, #76]	@ 0x4c

        // copy `bytes[..len]` to the RTT buffer
        unsafe {
            if cursor + len > BUF_SIZE {
    82d8:	4418      	add	r0, r3
    82da:	4298      	cmp	r0, r3
    82dc:	900d      	str	r0, [sp, #52]	@ 0x34
    82de:	d305      	bcc.n	82ec <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x42>
    82e0:	e7ff      	b.n	82e2 <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x38>
    82e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
    82e4:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
    82e8:	d823      	bhi.n	8332 <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x88>
    82ea:	e005      	b.n	82f8 <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x4e>
    82ec:	f64d 5084 	movw	r0, #56708	@ 0xdd84
    82f0:	f2c0 0000 	movt	r0, #0
    82f4:	f002 ff19 	bl	b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>
    82f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    82fa:	9808      	ldr	r0, [sp, #32]
    82fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    82fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
    8300:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
    8304:	902a      	str	r0, [sp, #168]	@ 0xa8
    8306:	f8cd c0ac 	str.w	ip, [sp, #172]	@ 0xac
                let pivot = BUF_SIZE - cursor;
                ptr::copy_nonoverlapping(bytes.as_ptr(), self.buffer.add(cursor), pivot);
                ptr::copy_nonoverlapping(bytes.as_ptr().add(pivot), self.buffer, len - pivot);
            } else {
                // single memcpy
                ptr::copy_nonoverlapping(bytes.as_ptr(), self.buffer.add(cursor), len);
    830a:	6849      	ldr	r1, [r1, #4]
    830c:	9122      	str	r1, [sp, #136]	@ 0x88
    830e:	9323      	str	r3, [sp, #140]	@ 0x8c
        unsafe { intrinsics::offset(self, count) }
    8310:	4419      	add	r1, r3
    8312:	9107      	str	r1, [sp, #28]
    8314:	901b      	str	r0, [sp, #108]	@ 0x6c
    8316:	911c      	str	r1, [sp, #112]	@ 0x70
    8318:	921d      	str	r2, [sp, #116]	@ 0x74
                precondition_check($($arg,)*);
    831a:	466b      	mov	r3, sp
    831c:	601a      	str	r2, [r3, #0]
    831e:	2301      	movs	r3, #1
    8320:	461a      	mov	r2, r3
    8322:	f7ff fa45 	bl	77b0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE>
    8326:	9807      	ldr	r0, [sp, #28]
    8328:	9908      	ldr	r1, [sp, #32]
    832a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
        }
    );

    // SAFETY: the safety contract for `copy_nonoverlapping` must be
    // upheld by the caller.
    unsafe { copy_nonoverlapping(src, dst, count) }
    832c:	f003 f97f 	bl	b62e <__aeabi_memcpy>
    8330:	e007      	b.n	8342 <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x98>
                let pivot = BUF_SIZE - cursor;
    8332:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    8334:	f5c0 6180 	rsb	r1, r0, #1024	@ 0x400
    8338:	9106      	str	r1, [sp, #24]
    833a:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
    833e:	d844      	bhi.n	83ca <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x120>
    8340:	e012      	b.n	8368 <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0xbe>
            }
        }

        // adjust the write pointer, so the host knows that there is new data
        self.write
    8342:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    8344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    8346:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8348:	300c      	adds	r0, #12
    834a:	911e      	str	r1, [sp, #120]	@ 0x78
    834c:	921f      	str	r2, [sp, #124]	@ 0x7c
            intrinsics::wrapping_add(self, rhs)
    834e:	4411      	add	r1, r2
            .store(cursor.wrapping_add(len) % BUF_SIZE, Ordering::Release);
    8350:	f36f 219f 	bfc	r1, #10, #22
    8354:	2201      	movs	r2, #1
    8356:	f807 2c75 	strb.w	r2, [r7, #-117]
        self.write
    835a:	f817 2c75 	ldrb.w	r2, [r7, #-117]
    835e:	f7ff fb7d 	bl	7a5c <_ZN4core4sync6atomic11AtomicUsize5store17h185ab23ce76d668aE>
    8362:	980c      	ldr	r0, [sp, #48]	@ 0x30

        // return the number of bytes written
        len
    }
    8364:	b02c      	add	sp, #176	@ 0xb0
    8366:	bd80      	pop	{r7, pc}
                let pivot = BUF_SIZE - cursor;
    8368:	9a06      	ldr	r2, [sp, #24]
    836a:	990a      	ldr	r1, [sp, #40]	@ 0x28
    836c:	9808      	ldr	r0, [sp, #32]
    836e:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
    8372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    8374:	9214      	str	r2, [sp, #80]	@ 0x50
    8376:	9028      	str	r0, [sp, #160]	@ 0xa0
    8378:	f8cd c0a4 	str.w	ip, [sp, #164]	@ 0xa4
                ptr::copy_nonoverlapping(bytes.as_ptr(), self.buffer.add(cursor), pivot);
    837c:	6849      	ldr	r1, [r1, #4]
    837e:	9120      	str	r1, [sp, #128]	@ 0x80
    8380:	9321      	str	r3, [sp, #132]	@ 0x84
    8382:	4419      	add	r1, r3
    8384:	9102      	str	r1, [sp, #8]
    8386:	9018      	str	r0, [sp, #96]	@ 0x60
    8388:	9119      	str	r1, [sp, #100]	@ 0x64
    838a:	921a      	str	r2, [sp, #104]	@ 0x68
    838c:	466b      	mov	r3, sp
    838e:	601a      	str	r2, [r3, #0]
    8390:	2301      	movs	r3, #1
    8392:	461a      	mov	r2, r3
    8394:	f7ff fa0c 	bl	77b0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE>
    8398:	9802      	ldr	r0, [sp, #8]
    839a:	9908      	ldr	r1, [sp, #32]
    839c:	9a06      	ldr	r2, [sp, #24]
    839e:	f003 f946 	bl	b62e <__aeabi_memcpy>
    83a2:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
    83a6:	9b08      	ldr	r3, [sp, #32]
    83a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    83aa:	9906      	ldr	r1, [sp, #24]
    83ac:	980c      	ldr	r0, [sp, #48]	@ 0x30
    83ae:	9326      	str	r3, [sp, #152]	@ 0x98
    83b0:	f8cd c09c 	str.w	ip, [sp, #156]	@ 0x9c
    83b4:	9324      	str	r3, [sp, #144]	@ 0x90
    83b6:	9125      	str	r1, [sp, #148]	@ 0x94
        unsafe { intrinsics::offset(self, count) }
    83b8:	440b      	add	r3, r1
                ptr::copy_nonoverlapping(bytes.as_ptr().add(pivot), self.buffer, len - pivot);
    83ba:	9303      	str	r3, [sp, #12]
    83bc:	6852      	ldr	r2, [r2, #4]
    83be:	9204      	str	r2, [sp, #16]
    83c0:	1a42      	subs	r2, r0, r1
    83c2:	9205      	str	r2, [sp, #20]
    83c4:	4288      	cmp	r0, r1
    83c6:	d318      	bcc.n	83fa <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x150>
    83c8:	e005      	b.n	83d6 <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x12c>
                let pivot = BUF_SIZE - cursor;
    83ca:	f64d 5094 	movw	r0, #56724	@ 0xdd94
    83ce:	f2c0 0000 	movt	r0, #0
    83d2:	f002 febd 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    83d6:	9a05      	ldr	r2, [sp, #20]
    83d8:	9803      	ldr	r0, [sp, #12]
    83da:	9904      	ldr	r1, [sp, #16]
    83dc:	9015      	str	r0, [sp, #84]	@ 0x54
    83de:	9116      	str	r1, [sp, #88]	@ 0x58
    83e0:	9217      	str	r2, [sp, #92]	@ 0x5c
    83e2:	466b      	mov	r3, sp
    83e4:	601a      	str	r2, [r3, #0]
    83e6:	2301      	movs	r3, #1
    83e8:	461a      	mov	r2, r3
    83ea:	f7ff f9e1 	bl	77b0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hb3313395cf925f8eE>
    83ee:	9804      	ldr	r0, [sp, #16]
    83f0:	9903      	ldr	r1, [sp, #12]
    83f2:	9a05      	ldr	r2, [sp, #20]
    83f4:	f003 f91b 	bl	b62e <__aeabi_memcpy>
                ptr::copy_nonoverlapping(bytes.as_ptr().add(pivot), self.buffer, len - pivot);
    83f8:	e7a3      	b.n	8342 <_ZN9defmt_rtt7channel7Channel10write_impl17h3f5a0a9153c41b56E+0x98>
    83fa:	f64d 50a4 	movw	r0, #56740	@ 0xdda4
    83fe:	f2c0 0000 	movt	r0, #0
    8402:	f002 fea5 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>

00008406 <_ZN9defmt_rtt7channel7Channel17host_is_connected17h82d1da889a6eedf1E>:
        let read = || self.read.load(Ordering::Relaxed);
        let write = || self.write.load(Ordering::Relaxed);
        while read() != write() {}
    }

    fn host_is_connected(&self) -> bool {
    8406:	b580      	push	{r7, lr}
    8408:	466f      	mov	r7, sp
    840a:	b082      	sub	sp, #8
    840c:	9001      	str	r0, [sp, #4]
        // we assume that a host is connected if we are in blocking-mode. this is what probe-run does.
        self.flags.load(Ordering::Relaxed) & MODE_MASK == MODE_BLOCK_IF_FULL
    840e:	3014      	adds	r0, #20
    8410:	2100      	movs	r1, #0
    8412:	f807 1c05 	strb.w	r1, [r7, #-5]
    8416:	f817 1c05 	ldrb.w	r1, [r7, #-5]
    841a:	f7ff fb14 	bl	7a46 <_ZN4core4sync6atomic11AtomicUsize4load17hfe561a44da5776a8E>
    841e:	f000 0003 	and.w	r0, r0, #3
    8422:	3802      	subs	r0, #2
    8424:	fab0 f080 	clz	r0, r0
    8428:	0940      	lsrs	r0, r0, #5
    }
    842a:	b002      	add	sp, #8
    842c:	bd80      	pop	{r7, pc}

0000842e <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE>:
}

/// How much space is left in the buffer?
fn available_buffer_size(read_cursor: usize, write_cursor: usize) -> usize {
    842e:	b580      	push	{r7, lr}
    8430:	466f      	mov	r7, sp
    8432:	b08a      	sub	sp, #40	@ 0x28
    8434:	9105      	str	r1, [sp, #20]
    8436:	9006      	str	r0, [sp, #24]
    8438:	9008      	str	r0, [sp, #32]
    843a:	9109      	str	r1, [sp, #36]	@ 0x24
    if read_cursor > write_cursor {
    843c:	4288      	cmp	r0, r1
    843e:	d803      	bhi.n	8448 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x1a>
    8440:	e7ff      	b.n	8442 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x14>
        read_cursor - write_cursor - 1
    } else if read_cursor == 0 {
    8442:	9806      	ldr	r0, [sp, #24]
    8444:	b138      	cbz	r0, 8456 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x28>
    8446:	e00e      	b.n	8466 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x38>
        read_cursor - write_cursor - 1
    8448:	9806      	ldr	r0, [sp, #24]
    844a:	9905      	ldr	r1, [sp, #20]
    844c:	1a42      	subs	r2, r0, r1
    844e:	9204      	str	r2, [sp, #16]
    8450:	4288      	cmp	r0, r1
    8452:	d335      	bcc.n	84c0 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x92>
    8454:	e02f      	b.n	84b6 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x88>
        BUF_SIZE - write_cursor - 1
    8456:	9805      	ldr	r0, [sp, #20]
    8458:	f5c0 6180 	rsb	r1, r0, #1024	@ 0x400
    845c:	9103      	str	r1, [sp, #12]
    845e:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
    8462:	d80d      	bhi.n	8480 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x52>
    8464:	e007      	b.n	8476 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x48>
    } else {
        BUF_SIZE - write_cursor
    8466:	9805      	ldr	r0, [sp, #20]
    8468:	f5c0 6180 	rsb	r1, r0, #1024	@ 0x400
    846c:	9102      	str	r1, [sp, #8]
    846e:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
    8472:	d81a      	bhi.n	84aa <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x7c>
    8474:	e016      	b.n	84a4 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x76>
        BUF_SIZE - write_cursor - 1
    8476:	9803      	ldr	r0, [sp, #12]
    8478:	1e41      	subs	r1, r0, #1
    847a:	9101      	str	r1, [sp, #4]
    847c:	b148      	cbz	r0, 8492 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x64>
    847e:	e005      	b.n	848c <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x5e>
    8480:	f64d 50b4 	movw	r0, #56756	@ 0xddb4
    8484:	f2c0 0000 	movt	r0, #0
    8488:	f002 fe62 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    848c:	9801      	ldr	r0, [sp, #4]
    848e:	9007      	str	r0, [sp, #28]
    } else if read_cursor == 0 {
    8490:	e005      	b.n	849e <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x70>
        BUF_SIZE - write_cursor - 1
    8492:	f64d 50b4 	movw	r0, #56756	@ 0xddb4
    8496:	f2c0 0000 	movt	r0, #0
    849a:	f002 fe59 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    }
}
    849e:	9807      	ldr	r0, [sp, #28]
    84a0:	b00a      	add	sp, #40	@ 0x28
    84a2:	bd80      	pop	{r7, pc}
        BUF_SIZE - write_cursor
    84a4:	9802      	ldr	r0, [sp, #8]
    84a6:	9007      	str	r0, [sp, #28]
    } else if read_cursor == 0 {
    84a8:	e7f9      	b.n	849e <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x70>
        BUF_SIZE - write_cursor
    84aa:	f64d 50c4 	movw	r0, #56772	@ 0xddc4
    84ae:	f2c0 0000 	movt	r0, #0
    84b2:	f002 fe4d 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
        read_cursor - write_cursor - 1
    84b6:	9804      	ldr	r0, [sp, #16]
    84b8:	1e41      	subs	r1, r0, #1
    84ba:	9100      	str	r1, [sp, #0]
    84bc:	b148      	cbz	r0, 84d2 <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0xa4>
    84be:	e005      	b.n	84cc <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x9e>
    84c0:	f64d 50d4 	movw	r0, #56788	@ 0xddd4
    84c4:	f2c0 0000 	movt	r0, #0
    84c8:	f002 fe42 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>
    84cc:	9800      	ldr	r0, [sp, #0]
    84ce:	9007      	str	r0, [sp, #28]
    if read_cursor > write_cursor {
    84d0:	e7e5      	b.n	849e <_ZN9defmt_rtt7channel21available_buffer_size17h3ac446cc025a664dE+0x70>
        read_cursor - write_cursor - 1
    84d2:	f64d 50d4 	movw	r0, #56788	@ 0xddd4
    84d6:	f2c0 0000 	movt	r0, #0
    84da:	f002 fe39 	bl	b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>

000084de <_ZN9defmt_rtt10RttEncoder7acquire17h44d23e3c0a880c76E>:
            encoder: UnsafeCell::new(defmt::Encoder::new()),
        }
    }

    /// Acquire the defmt encoder.
    fn acquire(&self) {
    84de:	b580      	push	{r7, lr}
    84e0:	466f      	mov	r7, sp
    84e2:	b092      	sub	sp, #72	@ 0x48
    84e4:	9001      	str	r0, [sp, #4]
    84e6:	900b      	str	r0, [sp, #44]	@ 0x2c
    RestoreState(_critical_section_1_0_acquire())
    84e8:	f001 fed2 	bl	a290 <_critical_section_1_0_acquire>
    84ec:	4601      	mov	r1, r0
    84ee:	9801      	ldr	r0, [sp, #4]
    84f0:	460a      	mov	r2, r1
        // safety: Must be paired with corresponding call to release(), see below
        let restore = unsafe { critical_section::acquire() };
    84f2:	9202      	str	r2, [sp, #8]
    84f4:	f807 1c15 	strb.w	r1, [r7, #-21]
    84f8:	2100      	movs	r1, #0

        // NB: You can re-enter critical sections but we need to make sure
        // no-one does that.
        if self.taken.load(Ordering::Relaxed) {
    84fa:	f807 1c39 	strb.w	r1, [r7, #-57]
    84fe:	f817 1c39 	ldrb.w	r1, [r7, #-57]
    8502:	f7ff fa84 	bl	7a0e <_ZN4core4sync6atomic10AtomicBool4load17h6530ee351e7698c1E>
    8506:	b9d0      	cbnz	r0, 853e <_ZN9defmt_rtt10RttEncoder7acquire17h44d23e3c0a880c76E+0x60>
    8508:	e7ff      	b.n	850a <_ZN9defmt_rtt10RttEncoder7acquire17h44d23e3c0a880c76E+0x2c>
    850a:	9801      	ldr	r0, [sp, #4]
    850c:	2100      	movs	r1, #0
            panic!("defmt logger taken reentrantly")
        }

        // no need for CAS because we are in a critical section
        self.taken.store(true, Ordering::Relaxed);
    850e:	f807 1c1d 	strb.w	r1, [r7, #-29]
    8512:	f817 2c1d 	ldrb.w	r2, [r7, #-29]
    8516:	2101      	movs	r1, #1
    8518:	f7ff fa88 	bl	7a2c <_ZN4core4sync6atomic10AtomicBool5store17hc725cbc8f59520dbE>
    851c:	9902      	ldr	r1, [sp, #8]
    851e:	9801      	ldr	r0, [sp, #4]

        // safety: accessing the cell is OK because we have acquired a critical
        // section.
        unsafe {
            self.cs_restore.get().write(restore);
    8520:	1c42      	adds	r2, r0, #1
    8522:	9211      	str	r2, [sp, #68]	@ 0x44
    8524:	920e      	str	r2, [sp, #56]	@ 0x38
    8526:	f001 0101 	and.w	r1, r1, #1
    852a:	f807 1c09 	strb.w	r1, [r7, #-9]
        intrinsics::write_via_move(dst, src)
    852e:	7041      	strb	r1, [r0, #1]
            let encoder: &mut defmt::Encoder = &mut *self.encoder.get();
    8530:	3002      	adds	r0, #2
    8532:	9010      	str	r0, [sp, #64]	@ 0x40
    8534:	900d      	str	r0, [sp, #52]	@ 0x34
            encoder.start_frame(|b| {
    8536:	f7ff fdd2 	bl	80de <_ZN5defmt8encoding7Encoder11start_frame17ha99e41e021885319E>
                _SEGGER_RTT.up_channel.write_all(b);
            });
        }
    }
    853a:	b012      	add	sp, #72	@ 0x48
    853c:	bd80      	pop	{r7, pc}
            panic!("defmt logger taken reentrantly")
    853e:	f64d 6104 	movw	r1, #56836	@ 0xde04
    8542:	f2c0 0100 	movt	r1, #0
    8546:	a804      	add	r0, sp, #16
    8548:	9000      	str	r0, [sp, #0]
    854a:	f7ff fa48 	bl	79de <_ZN4core3fmt9Arguments9new_const17h679986b37acb50eeE>
    854e:	9800      	ldr	r0, [sp, #0]
    8550:	f64d 6170 	movw	r1, #56944	@ 0xde70
    8554:	f2c0 0100 	movt	r1, #0
    8558:	f001 ff68 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000855c <_ZN9defmt_rtt10RttEncoder7acquire28_$u7b$$u7b$closure$u7d$$u7d$17hbb90341c3a2d7637E>:
            encoder.start_frame(|b| {
    855c:	b580      	push	{r7, lr}
    855e:	466f      	mov	r7, sp
    8560:	b084      	sub	sp, #16
    8562:	9001      	str	r0, [sp, #4]
    8564:	9102      	str	r1, [sp, #8]
    8566:	9203      	str	r2, [sp, #12]
                _SEGGER_RTT.up_channel.write_all(b);
    8568:	f240 0020 	movw	r0, #32
    856c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    8570:	3018      	adds	r0, #24
    8572:	f7ff fdfa 	bl	816a <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE>
            });
    8576:	b004      	add	sp, #16
    8578:	bd80      	pop	{r7, pc}

0000857a <_ZN9defmt_rtt10RttEncoder5write17h1a13053a5e9808c7E>:
    /// Write bytes to the defmt encoder.
    ///
    /// # Safety
    ///
    /// Do not call unless you have called `acquire`.
    unsafe fn write(&self, bytes: &[u8]) {
    857a:	b580      	push	{r7, lr}
    857c:	466f      	mov	r7, sp
    857e:	b086      	sub	sp, #24
    8580:	9001      	str	r0, [sp, #4]
    8582:	9102      	str	r1, [sp, #8]
    8584:	9203      	str	r2, [sp, #12]
        // safety: accessing the cell is OK because we have acquired a critical
        // section.
        unsafe {
            let encoder: &mut defmt::Encoder = &mut *self.encoder.get();
    8586:	3002      	adds	r0, #2
    8588:	9005      	str	r0, [sp, #20]
    858a:	9004      	str	r0, [sp, #16]
            encoder.write(bytes, |b| {
    858c:	f7ff fdaf 	bl	80ee <_ZN5defmt8encoding7Encoder5write17h7862f6bf3061c978E>
                _SEGGER_RTT.up_channel.write_all(b);
            });
        }
    }
    8590:	b006      	add	sp, #24
    8592:	bd80      	pop	{r7, pc}

00008594 <_ZN9defmt_rtt10RttEncoder5write28_$u7b$$u7b$closure$u7d$$u7d$17h615a2c54f6a9a3d8E>:
            encoder.write(bytes, |b| {
    8594:	b580      	push	{r7, lr}
    8596:	466f      	mov	r7, sp
    8598:	b084      	sub	sp, #16
    859a:	9001      	str	r0, [sp, #4]
    859c:	9102      	str	r1, [sp, #8]
    859e:	9203      	str	r2, [sp, #12]
                _SEGGER_RTT.up_channel.write_all(b);
    85a0:	f240 0020 	movw	r0, #32
    85a4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    85a8:	3018      	adds	r0, #24
    85aa:	f7ff fdde 	bl	816a <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE>
            });
    85ae:	b004      	add	sp, #16
    85b0:	bd80      	pop	{r7, pc}

000085b2 <_ZN9defmt_rtt10RttEncoder7release17h1b8570e4096eaea5E>:
    /// # Safety
    ///
    /// Do not call unless you have called `acquire`. This will release
    /// your lock - do not call `flush` and `write` until you have done another
    /// `acquire`.
    unsafe fn release(&self) {
    85b2:	b580      	push	{r7, lr}
    85b4:	466f      	mov	r7, sp
    85b6:	b092      	sub	sp, #72	@ 0x48
    85b8:	9003      	str	r0, [sp, #12]
    85ba:	900c      	str	r0, [sp, #48]	@ 0x30
    85bc:	2100      	movs	r1, #0
        if !self.taken.load(Ordering::Relaxed) {
    85be:	f807 1c35 	strb.w	r1, [r7, #-53]
    85c2:	f817 1c35 	ldrb.w	r1, [r7, #-53]
    85c6:	f7ff fa22 	bl	7a0e <_ZN4core4sync6atomic10AtomicBool4load17h6530ee351e7698c1E>
    85ca:	b978      	cbnz	r0, 85ec <_ZN9defmt_rtt10RttEncoder7release17h1b8570e4096eaea5E+0x3a>
    85cc:	e7ff      	b.n	85ce <_ZN9defmt_rtt10RttEncoder7release17h1b8570e4096eaea5E+0x1c>
            panic!("defmt release out of context")
    85ce:	f64d 619c 	movw	r1, #56988	@ 0xde9c
    85d2:	f2c0 0100 	movt	r1, #0
    85d6:	a805      	add	r0, sp, #20
    85d8:	9002      	str	r0, [sp, #8]
    85da:	f7ff fa00 	bl	79de <_ZN4core3fmt9Arguments9new_const17h679986b37acb50eeE>
    85de:	9802      	ldr	r0, [sp, #8]
    85e0:	f64d 61a4 	movw	r1, #56996	@ 0xdea4
    85e4:	f2c0 0100 	movt	r1, #0
    85e8:	f001 ff20 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
        }

        // safety: accessing the cell is OK because we have acquired a critical
        // section.
        unsafe {
            let encoder: &mut defmt::Encoder = &mut *self.encoder.get();
    85ec:	9803      	ldr	r0, [sp, #12]
    85ee:	3002      	adds	r0, #2
    85f0:	9010      	str	r0, [sp, #64]	@ 0x40
    85f2:	900d      	str	r0, [sp, #52]	@ 0x34
            encoder.end_frame(|b| {
    85f4:	f7ff fd85 	bl	8102 <_ZN5defmt8encoding7Encoder9end_frame17h1beb2f0016646dfeE>
    85f8:	9803      	ldr	r0, [sp, #12]
                _SEGGER_RTT.up_channel.write_all(b);
            });
            let restore = self.cs_restore.get().read();
    85fa:	1c41      	adds	r1, r0, #1
    85fc:	9111      	str	r1, [sp, #68]	@ 0x44
    85fe:	910f      	str	r1, [sp, #60]	@ 0x3c
        crate::intrinsics::read_via_copy(src)
    8600:	7841      	ldrb	r1, [r0, #1]
    8602:	9101      	str	r1, [sp, #4]
    8604:	f807 1c0e 	strb.w	r1, [r7, #-14]
    8608:	2100      	movs	r1, #0
            self.taken.store(false, Ordering::Relaxed);
    860a:	f807 1c19 	strb.w	r1, [r7, #-25]
    860e:	f817 2c19 	ldrb.w	r2, [r7, #-25]
    8612:	f7ff fa0b 	bl	7a2c <_ZN4core4sync6atomic10AtomicBool5store17hc725cbc8f59520dbE>
    8616:	9801      	ldr	r0, [sp, #4]
    8618:	f807 0c0d 	strb.w	r0, [r7, #-13]
    _critical_section_1_0_release(restore_state.0)
    861c:	f001 fe3d 	bl	a29a <_critical_section_1_0_release>
            // paired with exactly one acquire call
            critical_section::release(restore);
        }
    }
    8620:	b012      	add	sp, #72	@ 0x48
    8622:	bd80      	pop	{r7, pc}

00008624 <_ZN9defmt_rtt10RttEncoder7release28_$u7b$$u7b$closure$u7d$$u7d$17he7b1974c82f8d4bcE>:
            encoder.end_frame(|b| {
    8624:	b580      	push	{r7, lr}
    8626:	466f      	mov	r7, sp
    8628:	b084      	sub	sp, #16
    862a:	9001      	str	r0, [sp, #4]
    862c:	9102      	str	r1, [sp, #8]
    862e:	9203      	str	r2, [sp, #12]
                _SEGGER_RTT.up_channel.write_all(b);
    8630:	f240 0020 	movw	r0, #32
    8634:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    8638:	3018      	adds	r0, #24
    863a:	f7ff fd96 	bl	816a <_ZN9defmt_rtt7channel7Channel9write_all17h75dbe16629d76f8bE>
            });
    863e:	b004      	add	sp, #16
    8640:	bd80      	pop	{r7, pc}

00008642 <_ZN59_$LT$defmt_rtt..Logger$u20$as$u20$defmt..traits..Logger$GT$7acquire17hcc1772739a3d574fE>:
}

unsafe impl Sync for RttEncoder {}

unsafe impl defmt::Logger for Logger {
    fn acquire() {
    8642:	b580      	push	{r7, lr}
    8644:	466f      	mov	r7, sp
        RTT_ENCODER.acquire();
    8646:	f240 2016 	movw	r0, #534	@ 0x216
    864a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    864e:	f7ff ff46 	bl	84de <_ZN9defmt_rtt10RttEncoder7acquire17h44d23e3c0a880c76E>
    }
    8652:	bd80      	pop	{r7, pc}

00008654 <_ZN59_$LT$defmt_rtt..Logger$u20$as$u20$defmt..traits..Logger$GT$5write17h9ccfbf226fc2cdc3E>:

    unsafe fn write(bytes: &[u8]) {
    8654:	b580      	push	{r7, lr}
    8656:	466f      	mov	r7, sp
    8658:	b082      	sub	sp, #8
    865a:	460a      	mov	r2, r1
    865c:	4601      	mov	r1, r0
    865e:	9100      	str	r1, [sp, #0]
    8660:	9201      	str	r2, [sp, #4]
        unsafe {
            RTT_ENCODER.write(bytes);
    8662:	f240 2016 	movw	r0, #534	@ 0x216
    8666:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    866a:	f7ff ff86 	bl	857a <_ZN9defmt_rtt10RttEncoder5write17h1a13053a5e9808c7E>
        }
    }
    866e:	b002      	add	sp, #8
    8670:	bd80      	pop	{r7, pc}

00008672 <_ZN59_$LT$defmt_rtt..Logger$u20$as$u20$defmt..traits..Logger$GT$7release17h9f169f360ba18710E>:
        unsafe {
            RTT_ENCODER.flush();
        }
    }

    unsafe fn release() {
    8672:	b580      	push	{r7, lr}
    8674:	466f      	mov	r7, sp
        unsafe {
            RTT_ENCODER.release();
    8676:	f240 2016 	movw	r0, #534	@ 0x216
    867a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    867e:	f7ff ff98 	bl	85b2 <_ZN9defmt_rtt10RttEncoder7release17h1b8570e4096eaea5E>
        }
    }
    8682:	bd80      	pop	{r7, pc}

00008684 <_defmt_acquire>:
#[defmt::global_logger]
    8684:	b580      	push	{r7, lr}
    8686:	466f      	mov	r7, sp
    8688:	f7ff ffdb 	bl	8642 <_ZN59_$LT$defmt_rtt..Logger$u20$as$u20$defmt..traits..Logger$GT$7acquire17hcc1772739a3d574fE>
    868c:	bd80      	pop	{r7, pc}

0000868e <_defmt_release>:
    868e:	b580      	push	{r7, lr}
    8690:	466f      	mov	r7, sp
    8692:	f7ff ffee 	bl	8672 <_ZN59_$LT$defmt_rtt..Logger$u20$as$u20$defmt..traits..Logger$GT$7release17h9f169f360ba18710E>
    8696:	bd80      	pop	{r7, pc}

00008698 <_defmt_write>:
    8698:	b580      	push	{r7, lr}
    869a:	466f      	mov	r7, sp
    869c:	b082      	sub	sp, #8
    869e:	9000      	str	r0, [sp, #0]
    86a0:	9101      	str	r1, [sp, #4]
    86a2:	f7ff ffd7 	bl	8654 <_ZN59_$LT$defmt_rtt..Logger$u20$as$u20$defmt..traits..Logger$GT$5write17h9ccfbf226fc2cdc3E>
    86a6:	b002      	add	sp, #8
    86a8:	bd80      	pop	{r7, pc}

000086aa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17hf2abadbcae1fe544E>:
    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T> {
    86aa:	b580      	push	{r7, lr}
    86ac:	466f      	mov	r7, sp
    86ae:	b083      	sub	sp, #12
    86b0:	9000      	str	r0, [sp, #0]
    86b2:	9002      	str	r0, [sp, #8]
        if self.is_null() { None } else { unsafe { Some(&*self) } }
    86b4:	b918      	cbnz	r0, 86be <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17hf2abadbcae1fe544E+0x14>
    86b6:	e7ff      	b.n	86b8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17hf2abadbcae1fe544E+0xe>
    86b8:	2000      	movs	r0, #0
    86ba:	9001      	str	r0, [sp, #4]
    86bc:	e002      	b.n	86c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17hf2abadbcae1fe544E+0x1a>
    86be:	9800      	ldr	r0, [sp, #0]
    86c0:	9001      	str	r0, [sp, #4]
    86c2:	e7ff      	b.n	86c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17hf2abadbcae1fe544E+0x1a>
    }
    86c4:	9801      	ldr	r0, [sp, #4]
    86c6:	b003      	add	sp, #12
    86c8:	bd80      	pop	{r7, pc}

000086ca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc0db22b49f52938dE>:
    pub const fn is_null(self) -> bool {
    86ca:	b580      	push	{r7, lr}
    86cc:	466f      	mov	r7, sp
    86ce:	b081      	sub	sp, #4
    86d0:	9000      	str	r0, [sp, #0]
                ptr.addr() == 0
    86d2:	fab0 f080 	clz	r0, r0
    86d6:	0940      	lsrs	r0, r0, #5
    }
    86d8:	b001      	add	sp, #4
    86da:	bd80      	pop	{r7, pc}

000086dc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haa5f16f4f157b762E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    86dc:	b580      	push	{r7, lr}
    86de:	466f      	mov	r7, sp
    86e0:	b082      	sub	sp, #8
    86e2:	9000      	str	r0, [sp, #0]
    86e4:	9001      	str	r0, [sp, #4]
            if ::core::ub_checks::$kind() {
    86e6:	e7ff      	b.n	86e8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haa5f16f4f157b762E+0xc>
                precondition_check($($arg,)*);
    86e8:	9800      	ldr	r0, [sp, #0]
    86ea:	f000 f804 	bl	86f6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbb2a3c8abb9111d9E>
            if ::core::ub_checks::$kind() {
    86ee:	e7ff      	b.n	86f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haa5f16f4f157b762E+0x14>
    }
    86f0:	9800      	ldr	r0, [sp, #0]
    86f2:	b002      	add	sp, #8
    86f4:	bd80      	pop	{r7, pc}

000086f6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbb2a3c8abb9111d9E>:
            const fn precondition_check($($name:$ty),*) {
    86f6:	b580      	push	{r7, lr}
    86f8:	466f      	mov	r7, sp
    86fa:	b082      	sub	sp, #8
    86fc:	9001      	str	r0, [sp, #4]
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
    86fe:	b938      	cbnz	r0, 8710 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbb2a3c8abb9111d9E+0x1a>
    8700:	e7ff      	b.n	8702 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbb2a3c8abb9111d9E+0xc>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    8702:	f64d 60b4 	movw	r0, #57012	@ 0xdeb4
    8706:	f2c0 0000 	movt	r0, #0
    870a:	21d2      	movs	r1, #210	@ 0xd2
    870c:	f001 fec0 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
            }
    8710:	b002      	add	sp, #8
    8712:	bd80      	pop	{r7, pc}

00008714 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E>:
    pub const fn new(ptr: *mut T) -> Option<Self> {
    8714:	b580      	push	{r7, lr}
    8716:	466f      	mov	r7, sp
    8718:	b084      	sub	sp, #16
    871a:	9001      	str	r0, [sp, #4]
    871c:	9003      	str	r0, [sp, #12]
        if !ptr.is_null() {
    871e:	b918      	cbnz	r0, 8728 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E+0x14>
    8720:	e7ff      	b.n	8722 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E+0xe>
    8722:	2000      	movs	r0, #0
            None
    8724:	9002      	str	r0, [sp, #8]
        if !ptr.is_null() {
    8726:	e000      	b.n	872a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E+0x16>
            if ::core::ub_checks::$kind() {
    8728:	e002      	b.n	8730 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E+0x1c>
    }
    872a:	9802      	ldr	r0, [sp, #8]
    872c:	b004      	add	sp, #16
    872e:	bd80      	pop	{r7, pc}
                precondition_check($($arg,)*);
    8730:	9801      	ldr	r0, [sp, #4]
    8732:	f7ff ffe0 	bl	86f6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbb2a3c8abb9111d9E>
            if ::core::ub_checks::$kind() {
    8736:	e7ff      	b.n	8738 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E+0x24>
            Some(unsafe { Self::new_unchecked(ptr) })
    8738:	9801      	ldr	r0, [sp, #4]
    873a:	9002      	str	r0, [sp, #8]
        if !ptr.is_null() {
    873c:	e7f5      	b.n	872a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E+0x16>

0000873e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$8dangling17h57c68de6288a128dE>:
    pub const fn dangling() -> Self {
    873e:	b580      	push	{r7, lr}
    8740:	466f      	mov	r7, sp
    8742:	2008      	movs	r0, #8
    }
    8744:	bd80      	pop	{r7, pc}

00008746 <_ZN4core4hint21unreachable_unchecked18precondition_check17hf6437e23eaa38e7aE>:
            const fn precondition_check($($name:$ty),*) {
    8746:	b580      	push	{r7, lr}
    8748:	466f      	mov	r7, sp
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    874a:	f64d 7086 	movw	r0, #57222	@ 0xdf86
    874e:	f2c0 0000 	movt	r0, #0
    8752:	21c7      	movs	r1, #199	@ 0xc7
    8754:	f001 fe9c 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>

00008758 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E>:
    pub fn swap(&self, val: bool, order: Ordering) -> bool {
    8758:	b580      	push	{r7, lr}
    875a:	466f      	mov	r7, sp
    875c:	b094      	sub	sp, #80	@ 0x50
    875e:	900a      	str	r0, [sp, #40]	@ 0x28
    8760:	900e      	str	r0, [sp, #56]	@ 0x38
    8762:	f807 1c12 	strb.w	r1, [r7, #-18]
    8766:	f807 2c11 	strb.w	r2, [r7, #-17]
    876a:	2301      	movs	r3, #1
    pub fn fetch_or(&self, val: bool, order: Ordering) -> bool {
    876c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    8770:	f807 3c0f 	strb.w	r3, [r7, #-15]
    8774:	2300      	movs	r3, #0
    pub fn fetch_and(&self, val: bool, order: Ordering) -> bool {
    8776:	f807 3c0e 	strb.w	r3, [r7, #-14]
unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    877a:	f807 3c0d 	strb.w	r3, [r7, #-13]
            unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }
    877e:	9011      	str	r0, [sp, #68]	@ 0x44
        self as *const UnsafeCell<T> as *const T as *mut T
    8780:	9012      	str	r0, [sp, #72]	@ 0x48
    8782:	4608      	mov	r0, r1
    8784:	900b      	str	r0, [sp, #44]	@ 0x2c
    8786:	f807 1c01 	strb.w	r1, [r7, #-1]
        match order {
    878a:	b2d0      	uxtb	r0, r2
    878c:	900c      	str	r0, [sp, #48]	@ 0x30
    878e:	990c      	ldr	r1, [sp, #48]	@ 0x30
    8790:	e8df f001 	tbb	[pc, r1]
    8794:	65442304 	.word	0x65442304
    8798:	0088      	.short	0x0088
    879a:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),
    879c:	980a      	ldr	r0, [sp, #40]	@ 0x28
    879e:	7800      	ldrb	r0, [r0, #0]
    87a0:	9009      	str	r0, [sp, #36]	@ 0x24
    87a2:	e7ff      	b.n	87a4 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x4c>
    87a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
    87a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    87a8:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
    87ac:	b2c9      	uxtb	r1, r1
    87ae:	e8d3 0f4f 	ldrexb	r0, [r3]
    87b2:	4508      	cmp	r0, r1
    87b4:	d103      	bne.n	87be <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x66>
    87b6:	e8c3 cf42 	strexb	r2, ip, [r3]
    87ba:	2a00      	cmp	r2, #0
    87bc:	d1f7      	bne.n	87ae <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x56>
    87be:	9008      	str	r0, [sp, #32]
    87c0:	b2c9      	uxtb	r1, r1
    87c2:	1a41      	subs	r1, r0, r1
    87c4:	fab1 f181 	clz	r1, r1
    87c8:	0949      	lsrs	r1, r1, #5
    87ca:	2901      	cmp	r1, #1
    87cc:	9009      	str	r0, [sp, #36]	@ 0x24
    87ce:	d1e9      	bne.n	87a4 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x4c>
    87d0:	e7ff      	b.n	87d2 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x7a>
    87d2:	9808      	ldr	r0, [sp, #32]
    87d4:	f807 0c19 	strb.w	r0, [r7, #-25]
    87d8:	e087      	b.n	88ea <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x192>
            Release => intrinsics::atomic_xchg_release(dst, val),
    87da:	980a      	ldr	r0, [sp, #40]	@ 0x28
    87dc:	f3bf 8f5f 	dmb	sy
    87e0:	7800      	ldrb	r0, [r0, #0]
    87e2:	9007      	str	r0, [sp, #28]
    87e4:	e7ff      	b.n	87e6 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x8e>
    87e6:	9907      	ldr	r1, [sp, #28]
    87e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    87ea:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
    87ee:	b2c9      	uxtb	r1, r1
    87f0:	e8d3 0f4f 	ldrexb	r0, [r3]
    87f4:	4508      	cmp	r0, r1
    87f6:	d103      	bne.n	8800 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0xa8>
    87f8:	e8c3 cf42 	strexb	r2, ip, [r3]
    87fc:	2a00      	cmp	r2, #0
    87fe:	d1f7      	bne.n	87f0 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x98>
    8800:	9006      	str	r0, [sp, #24]
    8802:	b2c9      	uxtb	r1, r1
    8804:	1a41      	subs	r1, r0, r1
    8806:	fab1 f181 	clz	r1, r1
    880a:	0949      	lsrs	r1, r1, #5
    880c:	2901      	cmp	r1, #1
    880e:	9007      	str	r0, [sp, #28]
    8810:	d1e9      	bne.n	87e6 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x8e>
    8812:	e7ff      	b.n	8814 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0xbc>
    8814:	9806      	ldr	r0, [sp, #24]
    8816:	f807 0c19 	strb.w	r0, [r7, #-25]
    881a:	e066      	b.n	88ea <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x192>
            Acquire => intrinsics::atomic_xchg_acquire(dst, val),
    881c:	980a      	ldr	r0, [sp, #40]	@ 0x28
    881e:	7800      	ldrb	r0, [r0, #0]
    8820:	9005      	str	r0, [sp, #20]
    8822:	e7ff      	b.n	8824 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0xcc>
    8824:	9905      	ldr	r1, [sp, #20]
    8826:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    8828:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
    882c:	b2c9      	uxtb	r1, r1
    882e:	e8d3 0f4f 	ldrexb	r0, [r3]
    8832:	4508      	cmp	r0, r1
    8834:	d103      	bne.n	883e <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0xe6>
    8836:	e8c3 cf42 	strexb	r2, ip, [r3]
    883a:	2a00      	cmp	r2, #0
    883c:	d1f7      	bne.n	882e <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0xd6>
    883e:	9004      	str	r0, [sp, #16]
    8840:	b2c9      	uxtb	r1, r1
    8842:	1a41      	subs	r1, r0, r1
    8844:	fab1 f181 	clz	r1, r1
    8848:	0949      	lsrs	r1, r1, #5
    884a:	2901      	cmp	r1, #1
    884c:	9005      	str	r0, [sp, #20]
    884e:	d1e9      	bne.n	8824 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0xcc>
    8850:	e7ff      	b.n	8852 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0xfa>
    8852:	9804      	ldr	r0, [sp, #16]
    8854:	f3bf 8f5f 	dmb	sy
    8858:	f807 0c19 	strb.w	r0, [r7, #-25]
    885c:	e045      	b.n	88ea <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x192>
            AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),
    885e:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8860:	f3bf 8f5f 	dmb	sy
    8864:	7800      	ldrb	r0, [r0, #0]
    8866:	9003      	str	r0, [sp, #12]
    8868:	e7ff      	b.n	886a <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x112>
    886a:	9903      	ldr	r1, [sp, #12]
    886c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    886e:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
    8872:	b2c9      	uxtb	r1, r1
    8874:	e8d3 0f4f 	ldrexb	r0, [r3]
    8878:	4508      	cmp	r0, r1
    887a:	d103      	bne.n	8884 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x12c>
    887c:	e8c3 cf42 	strexb	r2, ip, [r3]
    8880:	2a00      	cmp	r2, #0
    8882:	d1f7      	bne.n	8874 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x11c>
    8884:	9002      	str	r0, [sp, #8]
    8886:	b2c9      	uxtb	r1, r1
    8888:	1a41      	subs	r1, r0, r1
    888a:	fab1 f181 	clz	r1, r1
    888e:	0949      	lsrs	r1, r1, #5
    8890:	2901      	cmp	r1, #1
    8892:	9003      	str	r0, [sp, #12]
    8894:	d1e9      	bne.n	886a <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x112>
    8896:	e7ff      	b.n	8898 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x140>
    8898:	9802      	ldr	r0, [sp, #8]
    889a:	f3bf 8f5f 	dmb	sy
    889e:	f807 0c19 	strb.w	r0, [r7, #-25]
    88a2:	e022      	b.n	88ea <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x192>
            SeqCst => intrinsics::atomic_xchg_seqcst(dst, val),
    88a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
    88a6:	f3bf 8f5f 	dmb	sy
    88aa:	7800      	ldrb	r0, [r0, #0]
    88ac:	9001      	str	r0, [sp, #4]
    88ae:	e7ff      	b.n	88b0 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x158>
    88b0:	9901      	ldr	r1, [sp, #4]
    88b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    88b4:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
    88b8:	b2c9      	uxtb	r1, r1
    88ba:	e8d3 0f4f 	ldrexb	r0, [r3]
    88be:	4508      	cmp	r0, r1
    88c0:	d103      	bne.n	88ca <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x172>
    88c2:	e8c3 cf42 	strexb	r2, ip, [r3]
    88c6:	2a00      	cmp	r2, #0
    88c8:	d1f7      	bne.n	88ba <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x162>
    88ca:	9000      	str	r0, [sp, #0]
    88cc:	b2c9      	uxtb	r1, r1
    88ce:	1a41      	subs	r1, r0, r1
    88d0:	fab1 f181 	clz	r1, r1
    88d4:	0949      	lsrs	r1, r1, #5
    88d6:	2901      	cmp	r1, #1
    88d8:	9001      	str	r0, [sp, #4]
    88da:	d1e9      	bne.n	88b0 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x158>
    88dc:	e7ff      	b.n	88de <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x186>
    88de:	9800      	ldr	r0, [sp, #0]
    88e0:	f3bf 8f5f 	dmb	sy
    88e4:	f807 0c19 	strb.w	r0, [r7, #-25]
    88e8:	e7ff      	b.n	88ea <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x192>
            unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }
    88ea:	f817 0c19 	ldrb.w	r0, [r7, #-25]
    88ee:	2800      	cmp	r0, #0
    88f0:	bf18      	it	ne
    88f2:	2001      	movne	r0, #1
    }
    88f4:	b014      	add	sp, #80	@ 0x50
    88f6:	bd80      	pop	{r7, pc}

000088f8 <_ZN4core4sync6atomic10AtomicBool5store17h6e5938d8ab2b30dbE>:
    pub fn store(&self, val: bool, order: Ordering) {
    88f8:	b580      	push	{r7, lr}
    88fa:	466f      	mov	r7, sp
    88fc:	b084      	sub	sp, #16
    88fe:	9001      	str	r0, [sp, #4]
    8900:	f807 1c06 	strb.w	r1, [r7, #-6]
    8904:	f807 2c05 	strb.w	r2, [r7, #-5]
            atomic_store(self.v.get(), val as u8, order);
    8908:	9003      	str	r0, [sp, #12]
    890a:	f000 f92b 	bl	8b64 <_ZN4core4sync6atomic12atomic_store17hfc0a016d91044543E>
    }
    890e:	b004      	add	sp, #16
    8910:	bd80      	pop	{r7, pc}
    8912:	d4d4      	bmi.n	88be <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E+0x166>

00008914 <_ZN4core4sync6atomic11atomic_load17h51b38bfcafba8eddE>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    8914:	b580      	push	{r7, lr}
    8916:	466f      	mov	r7, sp
    8918:	b094      	sub	sp, #80	@ 0x50
    891a:	9001      	str	r0, [sp, #4]
    891c:	9010      	str	r0, [sp, #64]	@ 0x40
    891e:	f807 1c09 	strb.w	r1, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    8922:	f24e 0080 	movw	r0, #57472	@ 0xe080
    8926:	f2c0 0000 	movt	r0, #0
    892a:	9012      	str	r0, [sp, #72]	@ 0x48
    892c:	f24e 00b0 	movw	r0, #57520	@ 0xe0b0
    8930:	f2c0 0000 	movt	r0, #0
    8934:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    8936:	b2c8      	uxtb	r0, r1
    8938:	9002      	str	r0, [sp, #8]
    893a:	9902      	ldr	r1, [sp, #8]
    893c:	e8df f001 	tbb	[pc, r1]
    8940:	28220804 	.word	0x28220804
    8944:	0042      	.short	0x0042
    8946:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    8948:	9801      	ldr	r0, [sp, #4]
    894a:	6800      	ldr	r0, [r0, #0]
    894c:	9003      	str	r0, [sp, #12]
    894e:	e03f      	b.n	89d0 <_ZN4core4sync6atomic11atomic_load17h51b38bfcafba8eddE+0xbc>
        Arguments { pieces, fmt: None, args: &[] }
    8950:	f24e 00b0 	movw	r0, #57520	@ 0xe0b0
    8954:	f2c0 0000 	movt	r0, #0
    8958:	9004      	str	r0, [sp, #16]
    895a:	2001      	movs	r0, #1
    895c:	9005      	str	r0, [sp, #20]
    895e:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    8962:	f2c0 0000 	movt	r0, #0
    8966:	6801      	ldr	r1, [r0, #0]
    8968:	6840      	ldr	r0, [r0, #4]
    896a:	9108      	str	r1, [sp, #32]
    896c:	9009      	str	r0, [sp, #36]	@ 0x24
    896e:	2004      	movs	r0, #4
    8970:	9006      	str	r0, [sp, #24]
    8972:	2000      	movs	r0, #0
    8974:	9007      	str	r0, [sp, #28]
            Release => panic!("there is no such thing as a release load"),
    8976:	f24e 1130 	movw	r1, #57648	@ 0xe130
    897a:	f2c0 0100 	movt	r1, #0
    897e:	a804      	add	r0, sp, #16
    8980:	f001 fd54 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Acquire => intrinsics::atomic_load_acquire(dst),
    8984:	9801      	ldr	r0, [sp, #4]
    8986:	6800      	ldr	r0, [r0, #0]
    8988:	f3bf 8f5f 	dmb	sy
    898c:	9003      	str	r0, [sp, #12]
    898e:	e01f      	b.n	89d0 <_ZN4core4sync6atomic11atomic_load17h51b38bfcafba8eddE+0xbc>
    8990:	f24e 0080 	movw	r0, #57472	@ 0xe080
    8994:	f2c0 0000 	movt	r0, #0
    8998:	900a      	str	r0, [sp, #40]	@ 0x28
    899a:	2001      	movs	r0, #1
    899c:	900b      	str	r0, [sp, #44]	@ 0x2c
    899e:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    89a2:	f2c0 0000 	movt	r0, #0
    89a6:	6801      	ldr	r1, [r0, #0]
    89a8:	6840      	ldr	r0, [r0, #4]
    89aa:	910e      	str	r1, [sp, #56]	@ 0x38
    89ac:	900f      	str	r0, [sp, #60]	@ 0x3c
    89ae:	2004      	movs	r0, #4
    89b0:	900c      	str	r0, [sp, #48]	@ 0x30
    89b2:	2000      	movs	r0, #0
    89b4:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release load"),
    89b6:	f24e 1140 	movw	r1, #57664	@ 0xe140
    89ba:	f2c0 0100 	movt	r1, #0
    89be:	a80a      	add	r0, sp, #40	@ 0x28
    89c0:	f001 fd34 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_load_seqcst(dst),
    89c4:	9801      	ldr	r0, [sp, #4]
    89c6:	6800      	ldr	r0, [r0, #0]
    89c8:	f3bf 8f5f 	dmb	sy
    89cc:	9003      	str	r0, [sp, #12]
    89ce:	e7ff      	b.n	89d0 <_ZN4core4sync6atomic11atomic_load17h51b38bfcafba8eddE+0xbc>
}
    89d0:	9803      	ldr	r0, [sp, #12]
    89d2:	b014      	add	sp, #80	@ 0x50
    89d4:	bd80      	pop	{r7, pc}
    89d6:	d4d4      	bmi.n	8982 <_ZN4core4sync6atomic11atomic_load17h51b38bfcafba8eddE+0x6e>

000089d8 <_ZN4core4sync6atomic11atomic_load17h9edac1a57922a642E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    89d8:	b580      	push	{r7, lr}
    89da:	466f      	mov	r7, sp
    89dc:	b094      	sub	sp, #80	@ 0x50
    89de:	9001      	str	r0, [sp, #4]
    89e0:	9010      	str	r0, [sp, #64]	@ 0x40
    89e2:	f807 1c09 	strb.w	r1, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    89e6:	f24e 0080 	movw	r0, #57472	@ 0xe080
    89ea:	f2c0 0000 	movt	r0, #0
    89ee:	9012      	str	r0, [sp, #72]	@ 0x48
    89f0:	f24e 00b0 	movw	r0, #57520	@ 0xe0b0
    89f4:	f2c0 0000 	movt	r0, #0
    89f8:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    89fa:	b2c8      	uxtb	r0, r1
    89fc:	9002      	str	r0, [sp, #8]
    89fe:	9902      	ldr	r1, [sp, #8]
    8a00:	e8df f001 	tbb	[pc, r1]
    8a04:	28220804 	.word	0x28220804
    8a08:	0042      	.short	0x0042
    8a0a:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    8a0c:	9801      	ldr	r0, [sp, #4]
    8a0e:	6800      	ldr	r0, [r0, #0]
    8a10:	9003      	str	r0, [sp, #12]
    8a12:	e03f      	b.n	8a94 <_ZN4core4sync6atomic11atomic_load17h9edac1a57922a642E+0xbc>
        Arguments { pieces, fmt: None, args: &[] }
    8a14:	f24e 00b0 	movw	r0, #57520	@ 0xe0b0
    8a18:	f2c0 0000 	movt	r0, #0
    8a1c:	9004      	str	r0, [sp, #16]
    8a1e:	2001      	movs	r0, #1
    8a20:	9005      	str	r0, [sp, #20]
    8a22:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    8a26:	f2c0 0000 	movt	r0, #0
    8a2a:	6801      	ldr	r1, [r0, #0]
    8a2c:	6840      	ldr	r0, [r0, #4]
    8a2e:	9108      	str	r1, [sp, #32]
    8a30:	9009      	str	r0, [sp, #36]	@ 0x24
    8a32:	2004      	movs	r0, #4
    8a34:	9006      	str	r0, [sp, #24]
    8a36:	2000      	movs	r0, #0
    8a38:	9007      	str	r0, [sp, #28]
            Release => panic!("there is no such thing as a release load"),
    8a3a:	f24e 1130 	movw	r1, #57648	@ 0xe130
    8a3e:	f2c0 0100 	movt	r1, #0
    8a42:	a804      	add	r0, sp, #16
    8a44:	f001 fcf2 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Acquire => intrinsics::atomic_load_acquire(dst),
    8a48:	9801      	ldr	r0, [sp, #4]
    8a4a:	6800      	ldr	r0, [r0, #0]
    8a4c:	f3bf 8f5f 	dmb	sy
    8a50:	9003      	str	r0, [sp, #12]
    8a52:	e01f      	b.n	8a94 <_ZN4core4sync6atomic11atomic_load17h9edac1a57922a642E+0xbc>
    8a54:	f24e 0080 	movw	r0, #57472	@ 0xe080
    8a58:	f2c0 0000 	movt	r0, #0
    8a5c:	900a      	str	r0, [sp, #40]	@ 0x28
    8a5e:	2001      	movs	r0, #1
    8a60:	900b      	str	r0, [sp, #44]	@ 0x2c
    8a62:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    8a66:	f2c0 0000 	movt	r0, #0
    8a6a:	6801      	ldr	r1, [r0, #0]
    8a6c:	6840      	ldr	r0, [r0, #4]
    8a6e:	910e      	str	r1, [sp, #56]	@ 0x38
    8a70:	900f      	str	r0, [sp, #60]	@ 0x3c
    8a72:	2004      	movs	r0, #4
    8a74:	900c      	str	r0, [sp, #48]	@ 0x30
    8a76:	2000      	movs	r0, #0
    8a78:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release load"),
    8a7a:	f24e 1140 	movw	r1, #57664	@ 0xe140
    8a7e:	f2c0 0100 	movt	r1, #0
    8a82:	a80a      	add	r0, sp, #40	@ 0x28
    8a84:	f001 fcd2 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_load_seqcst(dst),
    8a88:	9801      	ldr	r0, [sp, #4]
    8a8a:	6800      	ldr	r0, [r0, #0]
    8a8c:	f3bf 8f5f 	dmb	sy
    8a90:	9003      	str	r0, [sp, #12]
    8a92:	e7ff      	b.n	8a94 <_ZN4core4sync6atomic11atomic_load17h9edac1a57922a642E+0xbc>
}
    8a94:	9803      	ldr	r0, [sp, #12]
    8a96:	b014      	add	sp, #80	@ 0x50
    8a98:	bd80      	pop	{r7, pc}
    8a9a:	d4d4      	bmi.n	8a46 <_ZN4core4sync6atomic11atomic_load17h9edac1a57922a642E+0x6e>

00008a9c <_ZN4core4sync6atomic12atomic_store17h05dbdb98fb061a89E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    8a9c:	b580      	push	{r7, lr}
    8a9e:	466f      	mov	r7, sp
    8aa0:	b094      	sub	sp, #80	@ 0x50
    8aa2:	9100      	str	r1, [sp, #0]
    8aa4:	9001      	str	r0, [sp, #4]
    8aa6:	900f      	str	r0, [sp, #60]	@ 0x3c
    8aa8:	9110      	str	r1, [sp, #64]	@ 0x40
    8aaa:	f807 2c09 	strb.w	r2, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    8aae:	f24e 1084 	movw	r0, #57732	@ 0xe184
    8ab2:	f2c0 0000 	movt	r0, #0
    8ab6:	9012      	str	r0, [sp, #72]	@ 0x48
    8ab8:	f24e 10b8 	movw	r0, #57784	@ 0xe1b8
    8abc:	f2c0 0000 	movt	r0, #0
    8ac0:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    8ac2:	b2d0      	uxtb	r0, r2
    8ac4:	9002      	str	r0, [sp, #8]
    8ac6:	9902      	ldr	r1, [sp, #8]
    8ac8:	e8df f001 	tbb	[pc, r1]
    8acc:	280e0804 	.word	0x280e0804
    8ad0:	0042      	.short	0x0042
    8ad2:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    8ad4:	9800      	ldr	r0, [sp, #0]
    8ad6:	9901      	ldr	r1, [sp, #4]
    8ad8:	6008      	str	r0, [r1, #0]
    8ada:	e041      	b.n	8b60 <_ZN4core4sync6atomic12atomic_store17h05dbdb98fb061a89E+0xc4>
            Release => intrinsics::atomic_store_release(dst, val),
    8adc:	9800      	ldr	r0, [sp, #0]
    8ade:	9901      	ldr	r1, [sp, #4]
    8ae0:	f3bf 8f5f 	dmb	sy
    8ae4:	6008      	str	r0, [r1, #0]
    8ae6:	e03b      	b.n	8b60 <_ZN4core4sync6atomic12atomic_store17h05dbdb98fb061a89E+0xc4>
        Arguments { pieces, fmt: None, args: &[] }
    8ae8:	f24e 10b8 	movw	r0, #57784	@ 0xe1b8
    8aec:	f2c0 0000 	movt	r0, #0
    8af0:	9003      	str	r0, [sp, #12]
    8af2:	2001      	movs	r0, #1
    8af4:	9004      	str	r0, [sp, #16]
    8af6:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    8afa:	f2c0 0000 	movt	r0, #0
    8afe:	6801      	ldr	r1, [r0, #0]
    8b00:	6840      	ldr	r0, [r0, #4]
    8b02:	9107      	str	r1, [sp, #28]
    8b04:	9008      	str	r0, [sp, #32]
    8b06:	2004      	movs	r0, #4
    8b08:	9005      	str	r0, [sp, #20]
    8b0a:	2000      	movs	r0, #0
    8b0c:	9006      	str	r0, [sp, #24]
            Acquire => panic!("there is no such thing as an acquire store"),
    8b0e:	f24e 11c0 	movw	r1, #57792	@ 0xe1c0
    8b12:	f2c0 0100 	movt	r1, #0
    8b16:	a803      	add	r0, sp, #12
    8b18:	f001 fc88 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    8b1c:	f24e 1084 	movw	r0, #57732	@ 0xe184
    8b20:	f2c0 0000 	movt	r0, #0
    8b24:	9009      	str	r0, [sp, #36]	@ 0x24
    8b26:	2001      	movs	r0, #1
    8b28:	900a      	str	r0, [sp, #40]	@ 0x28
    8b2a:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    8b2e:	f2c0 0000 	movt	r0, #0
    8b32:	6801      	ldr	r1, [r0, #0]
    8b34:	6840      	ldr	r0, [r0, #4]
    8b36:	910d      	str	r1, [sp, #52]	@ 0x34
    8b38:	900e      	str	r0, [sp, #56]	@ 0x38
    8b3a:	2004      	movs	r0, #4
    8b3c:	900b      	str	r0, [sp, #44]	@ 0x2c
    8b3e:	2000      	movs	r0, #0
    8b40:	900c      	str	r0, [sp, #48]	@ 0x30
            AcqRel => panic!("there is no such thing as an acquire-release store"),
    8b42:	f24e 11d0 	movw	r1, #57808	@ 0xe1d0
    8b46:	f2c0 0100 	movt	r1, #0
    8b4a:	a809      	add	r0, sp, #36	@ 0x24
    8b4c:	f001 fc6e 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
    8b50:	9800      	ldr	r0, [sp, #0]
    8b52:	9901      	ldr	r1, [sp, #4]
    8b54:	f3bf 8f5f 	dmb	sy
    8b58:	6008      	str	r0, [r1, #0]
    8b5a:	f3bf 8f5f 	dmb	sy
    8b5e:	e7ff      	b.n	8b60 <_ZN4core4sync6atomic12atomic_store17h05dbdb98fb061a89E+0xc4>
}
    8b60:	b014      	add	sp, #80	@ 0x50
    8b62:	bd80      	pop	{r7, pc}

00008b64 <_ZN4core4sync6atomic12atomic_store17hfc0a016d91044543E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    8b64:	b580      	push	{r7, lr}
    8b66:	466f      	mov	r7, sp
    8b68:	b094      	sub	sp, #80	@ 0x50
    8b6a:	9001      	str	r0, [sp, #4]
    8b6c:	460b      	mov	r3, r1
    8b6e:	9302      	str	r3, [sp, #8]
    8b70:	9010      	str	r0, [sp, #64]	@ 0x40
    8b72:	f807 1c0a 	strb.w	r1, [r7, #-10]
    8b76:	f807 2c09 	strb.w	r2, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    8b7a:	f24e 1084 	movw	r0, #57732	@ 0xe184
    8b7e:	f2c0 0000 	movt	r0, #0
    8b82:	9012      	str	r0, [sp, #72]	@ 0x48
    8b84:	f24e 10b8 	movw	r0, #57784	@ 0xe1b8
    8b88:	f2c0 0000 	movt	r0, #0
    8b8c:	9013      	str	r0, [sp, #76]	@ 0x4c
        match order {
    8b8e:	b2d0      	uxtb	r0, r2
    8b90:	9003      	str	r0, [sp, #12]
    8b92:	9903      	ldr	r1, [sp, #12]
    8b94:	e8df f001 	tbb	[pc, r1]
    8b98:	280e0804 	.word	0x280e0804
    8b9c:	0042      	.short	0x0042
    8b9e:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    8ba0:	9802      	ldr	r0, [sp, #8]
    8ba2:	9901      	ldr	r1, [sp, #4]
    8ba4:	7008      	strb	r0, [r1, #0]
    8ba6:	e041      	b.n	8c2c <_ZN4core4sync6atomic12atomic_store17hfc0a016d91044543E+0xc8>
            Release => intrinsics::atomic_store_release(dst, val),
    8ba8:	9802      	ldr	r0, [sp, #8]
    8baa:	9901      	ldr	r1, [sp, #4]
    8bac:	f3bf 8f5f 	dmb	sy
    8bb0:	7008      	strb	r0, [r1, #0]
    8bb2:	e03b      	b.n	8c2c <_ZN4core4sync6atomic12atomic_store17hfc0a016d91044543E+0xc8>
        Arguments { pieces, fmt: None, args: &[] }
    8bb4:	f24e 10b8 	movw	r0, #57784	@ 0xe1b8
    8bb8:	f2c0 0000 	movt	r0, #0
    8bbc:	9004      	str	r0, [sp, #16]
    8bbe:	2001      	movs	r0, #1
    8bc0:	9005      	str	r0, [sp, #20]
    8bc2:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    8bc6:	f2c0 0000 	movt	r0, #0
    8bca:	6801      	ldr	r1, [r0, #0]
    8bcc:	6840      	ldr	r0, [r0, #4]
    8bce:	9108      	str	r1, [sp, #32]
    8bd0:	9009      	str	r0, [sp, #36]	@ 0x24
    8bd2:	2004      	movs	r0, #4
    8bd4:	9006      	str	r0, [sp, #24]
    8bd6:	2000      	movs	r0, #0
    8bd8:	9007      	str	r0, [sp, #28]
            Acquire => panic!("there is no such thing as an acquire store"),
    8bda:	f24e 11c0 	movw	r1, #57792	@ 0xe1c0
    8bde:	f2c0 0100 	movt	r1, #0
    8be2:	a804      	add	r0, sp, #16
    8be4:	f001 fc22 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    8be8:	f24e 1084 	movw	r0, #57732	@ 0xe184
    8bec:	f2c0 0000 	movt	r0, #0
    8bf0:	900a      	str	r0, [sp, #40]	@ 0x28
    8bf2:	2001      	movs	r0, #1
    8bf4:	900b      	str	r0, [sp, #44]	@ 0x2c
    8bf6:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    8bfa:	f2c0 0000 	movt	r0, #0
    8bfe:	6801      	ldr	r1, [r0, #0]
    8c00:	6840      	ldr	r0, [r0, #4]
    8c02:	910e      	str	r1, [sp, #56]	@ 0x38
    8c04:	900f      	str	r0, [sp, #60]	@ 0x3c
    8c06:	2004      	movs	r0, #4
    8c08:	900c      	str	r0, [sp, #48]	@ 0x30
    8c0a:	2000      	movs	r0, #0
    8c0c:	900d      	str	r0, [sp, #52]	@ 0x34
            AcqRel => panic!("there is no such thing as an acquire-release store"),
    8c0e:	f24e 11d0 	movw	r1, #57808	@ 0xe1d0
    8c12:	f2c0 0100 	movt	r1, #0
    8c16:	a80a      	add	r0, sp, #40	@ 0x28
    8c18:	f001 fc08 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
    8c1c:	9802      	ldr	r0, [sp, #8]
    8c1e:	9901      	ldr	r1, [sp, #4]
    8c20:	f3bf 8f5f 	dmb	sy
    8c24:	7008      	strb	r0, [r1, #0]
    8c26:	f3bf 8f5f 	dmb	sy
    8c2a:	e7ff      	b.n	8c2c <_ZN4core4sync6atomic12atomic_store17hfc0a016d91044543E+0xc8>
}
    8c2c:	b014      	add	sp, #80	@ 0x50
    8c2e:	bd80      	pop	{r7, pc}

00008c30 <_ZN4core4sync6atomic14compiler_fence17h6f2a5c417daf54bbE>:
pub fn compiler_fence(order: Ordering) {
    8c30:	b580      	push	{r7, lr}
    8c32:	466f      	mov	r7, sp
    8c34:	b08a      	sub	sp, #40	@ 0x28
    8c36:	f807 0c05 	strb.w	r0, [r7, #-5]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    8c3a:	f24e 2114 	movw	r1, #57876	@ 0xe214
    8c3e:	f2c0 0100 	movt	r1, #0
    8c42:	9109      	str	r1, [sp, #36]	@ 0x24
        match order {
    8c44:	b2c0      	uxtb	r0, r0
    8c46:	9001      	str	r0, [sp, #4]
    8c48:	9901      	ldr	r1, [sp, #4]
    8c4a:	e8df f001 	tbb	[pc, r1]
    8c4e:	1e04      	.short	0x1e04
    8c50:	0021201f 	.word	0x0021201f
    8c54:	defe      	udf	#254	@ 0xfe
        Arguments { pieces, fmt: None, args: &[] }
    8c56:	f24e 2014 	movw	r0, #57876	@ 0xe214
    8c5a:	f2c0 0000 	movt	r0, #0
    8c5e:	9002      	str	r0, [sp, #8]
    8c60:	2001      	movs	r0, #1
    8c62:	9003      	str	r0, [sp, #12]
    8c64:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    8c68:	f2c0 0000 	movt	r0, #0
    8c6c:	6801      	ldr	r1, [r0, #0]
    8c6e:	6840      	ldr	r0, [r0, #4]
    8c70:	9106      	str	r1, [sp, #24]
    8c72:	9007      	str	r0, [sp, #28]
    8c74:	2004      	movs	r0, #4
    8c76:	9004      	str	r0, [sp, #16]
    8c78:	2000      	movs	r0, #0
    8c7a:	9005      	str	r0, [sp, #20]
            Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
    8c7c:	f24e 211c 	movw	r1, #57884	@ 0xe21c
    8c80:	f2c0 0100 	movt	r1, #0
    8c84:	a802      	add	r0, sp, #8
    8c86:	f001 fbd1 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
            Release => intrinsics::atomic_singlethreadfence_release(),
    8c8a:	e002      	b.n	8c92 <_ZN4core4sync6atomic14compiler_fence17h6f2a5c417daf54bbE+0x62>
            Acquire => intrinsics::atomic_singlethreadfence_acquire(),
    8c8c:	e001      	b.n	8c92 <_ZN4core4sync6atomic14compiler_fence17h6f2a5c417daf54bbE+0x62>
            AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
    8c8e:	e000      	b.n	8c92 <_ZN4core4sync6atomic14compiler_fence17h6f2a5c417daf54bbE+0x62>
            SeqCst => intrinsics::atomic_singlethreadfence_seqcst(),
    8c90:	e7ff      	b.n	8c92 <_ZN4core4sync6atomic14compiler_fence17h6f2a5c417daf54bbE+0x62>
}
    8c92:	b00a      	add	sp, #40	@ 0x28
    8c94:	bd80      	pop	{r7, pc}

00008c96 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE>:
    pub fn fetch_update<F>(
    8c96:	b580      	push	{r7, lr}
    8c98:	466f      	mov	r7, sp
    8c9a:	b096      	sub	sp, #88	@ 0x58
    8c9c:	469c      	mov	ip, r3
    8c9e:	9202      	str	r2, [sp, #8]
    8ca0:	460a      	mov	r2, r1
    8ca2:	9902      	ldr	r1, [sp, #8]
    8ca4:	9003      	str	r0, [sp, #12]
    8ca6:	68bb      	ldr	r3, [r7, #8]
    8ca8:	468e      	mov	lr, r1
    8caa:	f8cd e010 	str.w	lr, [sp, #16]
    8cae:	4696      	mov	lr, r2
    8cb0:	f8cd e014 	str.w	lr, [sp, #20]
    8cb4:	f8cd c018 	str.w	ip, [sp, #24]
    8cb8:	9307      	str	r3, [sp, #28]
    8cba:	900f      	str	r0, [sp, #60]	@ 0x3c
    8cbc:	f807 2c16 	strb.w	r2, [r7, #-22]
    8cc0:	f807 1c15 	strb.w	r1, [r7, #-21]
        unsafe { atomic_load(self.p.get(), order) }
    8cc4:	9011      	str	r0, [sp, #68]	@ 0x44
    8cc6:	f7ff fe25 	bl	8914 <_ZN4core4sync6atomic11atomic_load17h51b38bfcafba8eddE>
    8cca:	900a      	str	r0, [sp, #40]	@ 0x28
        while let Some(next) = f(prev) {
    8ccc:	e7ff      	b.n	8cce <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE+0x38>
    8cce:	990a      	ldr	r1, [sp, #40]	@ 0x28
    8cd0:	a806      	add	r0, sp, #24
    8cd2:	f000 fc0a 	bl	94ea <_ZN16embassy_executor3raw9run_queue8RunQueue7enqueue28_$u7b$$u7b$closure$u7d$$u7d$17h18cf72d8a5a4f2b1E>
    8cd6:	900b      	str	r0, [sp, #44]	@ 0x2c
    8cd8:	910c      	str	r1, [sp, #48]	@ 0x30
    8cda:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    8cdc:	07c0      	lsls	r0, r0, #31
    8cde:	b1a0      	cbz	r0, 8d0a <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE+0x74>
    8ce0:	e7ff      	b.n	8ce2 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE+0x4c>
    8ce2:	9b05      	ldr	r3, [sp, #20]
    8ce4:	9803      	ldr	r0, [sp, #12]
    8ce6:	f8dd c010 	ldr.w	ip, [sp, #16]
    8cea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    8cec:	9212      	str	r2, [sp, #72]	@ 0x48
            match self.compare_exchange_weak(prev, next, set_order, fetch_order) {
    8cee:	990a      	ldr	r1, [sp, #40]	@ 0x28
    8cf0:	9113      	str	r1, [sp, #76]	@ 0x4c
        unsafe { atomic_compare_exchange_weak(self.p.get(), current, new, success, failure) }
    8cf2:	9014      	str	r0, [sp, #80]	@ 0x50
    8cf4:	46ee      	mov	lr, sp
    8cf6:	f8ce c000 	str.w	ip, [lr]
    8cfa:	f000 f8f1 	bl	8ee0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE>
    8cfe:	900d      	str	r0, [sp, #52]	@ 0x34
    8d00:	910e      	str	r1, [sp, #56]	@ 0x38
            match self.compare_exchange_weak(prev, next, set_order, fetch_order) {
    8d02:	980d      	ldr	r0, [sp, #52]	@ 0x34
    8d04:	07c0      	lsls	r0, r0, #31
    8d06:	b928      	cbnz	r0, 8d14 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE+0x7e>
    8d08:	e008      	b.n	8d1c <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE+0x86>
        Err(prev)
    8d0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8d0c:	9009      	str	r0, [sp, #36]	@ 0x24
    8d0e:	2001      	movs	r0, #1
    8d10:	9008      	str	r0, [sp, #32]
    }
    8d12:	e008      	b.n	8d26 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE+0x90>
                Err(next_prev) => prev = next_prev,
    8d14:	980e      	ldr	r0, [sp, #56]	@ 0x38
    8d16:	9015      	str	r0, [sp, #84]	@ 0x54
    8d18:	900a      	str	r0, [sp, #40]	@ 0x28
        while let Some(next) = f(prev) {
    8d1a:	e7d8      	b.n	8cce <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE+0x38>
                x @ Ok(_) => return x,
    8d1c:	990d      	ldr	r1, [sp, #52]	@ 0x34
    8d1e:	980e      	ldr	r0, [sp, #56]	@ 0x38
    8d20:	9108      	str	r1, [sp, #32]
    8d22:	9009      	str	r0, [sp, #36]	@ 0x24
    }
    8d24:	e7ff      	b.n	8d26 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE+0x90>
    8d26:	9808      	ldr	r0, [sp, #32]
    8d28:	9909      	ldr	r1, [sp, #36]	@ 0x24
    8d2a:	b016      	add	sp, #88	@ 0x58
    8d2c:	bd80      	pop	{r7, pc}

00008d2e <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$3new17h14c1a04561cdfa5fE>:
    pub const fn new(p: *mut T) -> AtomicPtr<T> {
    8d2e:	b580      	push	{r7, lr}
    8d30:	466f      	mov	r7, sp
    8d32:	b082      	sub	sp, #8
    8d34:	9001      	str	r0, [sp, #4]
        AtomicPtr { p: UnsafeCell::new(p) }
    8d36:	9000      	str	r0, [sp, #0]
    }
    8d38:	9800      	ldr	r0, [sp, #0]
    8d3a:	b002      	add	sp, #8
    8d3c:	bd80      	pop	{r7, pc}

00008d3e <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17h0c708234ebce0a48E>:
    pub fn load(&self, order: Ordering) -> *mut T {
    8d3e:	b580      	push	{r7, lr}
    8d40:	466f      	mov	r7, sp
    8d42:	b084      	sub	sp, #16
    8d44:	9001      	str	r0, [sp, #4]
    8d46:	f807 1c05 	strb.w	r1, [r7, #-5]
        unsafe { atomic_load(self.p.get(), order) }
    8d4a:	9003      	str	r0, [sp, #12]
    8d4c:	f7ff fe44 	bl	89d8 <_ZN4core4sync6atomic11atomic_load17h9edac1a57922a642E>
    }
    8d50:	b004      	add	sp, #16
    8d52:	bd80      	pop	{r7, pc}

00008d54 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E>:
    pub fn swap(&self, ptr: *mut T, order: Ordering) -> *mut T {
    8d54:	b580      	push	{r7, lr}
    8d56:	466f      	mov	r7, sp
    8d58:	b098      	sub	sp, #96	@ 0x60
    8d5a:	910f      	str	r1, [sp, #60]	@ 0x3c
    8d5c:	9010      	str	r0, [sp, #64]	@ 0x40
    8d5e:	9013      	str	r0, [sp, #76]	@ 0x4c
    8d60:	9114      	str	r1, [sp, #80]	@ 0x50
    8d62:	f807 2c09 	strb.w	r2, [r7, #-9]
        unsafe { atomic_swap(self.p.get(), ptr, order) }
    8d66:	9016      	str	r0, [sp, #88]	@ 0x58
    8d68:	9017      	str	r0, [sp, #92]	@ 0x5c
        match order {
    8d6a:	b2d0      	uxtb	r0, r2
    8d6c:	9011      	str	r0, [sp, #68]	@ 0x44
    8d6e:	9911      	ldr	r1, [sp, #68]	@ 0x44
    8d70:	e8df f001 	tbb	[pc, r1]
    8d74:	62422204 	.word	0x62422204
    8d78:	0084      	.short	0x0084
    8d7a:	defe      	udf	#254	@ 0xfe
            Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),
    8d7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
    8d7e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    8d80:	910d      	str	r1, [sp, #52]	@ 0x34
    8d82:	6800      	ldr	r0, [r0, #0]
    8d84:	900e      	str	r0, [sp, #56]	@ 0x38
    8d86:	e7ff      	b.n	8d88 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x34>
    8d88:	990e      	ldr	r1, [sp, #56]	@ 0x38
    8d8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    8d8c:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
    8d90:	e853 0f00 	ldrex	r0, [r3]
    8d94:	4508      	cmp	r0, r1
    8d96:	d103      	bne.n	8da0 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x4c>
    8d98:	e843 c200 	strex	r2, ip, [r3]
    8d9c:	2a00      	cmp	r2, #0
    8d9e:	d1f7      	bne.n	8d90 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x3c>
    8da0:	900c      	str	r0, [sp, #48]	@ 0x30
    8da2:	1a41      	subs	r1, r0, r1
    8da4:	fab1 f181 	clz	r1, r1
    8da8:	0949      	lsrs	r1, r1, #5
    8daa:	2901      	cmp	r1, #1
    8dac:	900e      	str	r0, [sp, #56]	@ 0x38
    8dae:	d1eb      	bne.n	8d88 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x34>
    8db0:	e7ff      	b.n	8db2 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x5e>
    8db2:	980c      	ldr	r0, [sp, #48]	@ 0x30
    8db4:	9012      	str	r0, [sp, #72]	@ 0x48
    8db6:	e083      	b.n	8ec0 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x16c>
            Release => intrinsics::atomic_xchg_release(dst, val),
    8db8:	9810      	ldr	r0, [sp, #64]	@ 0x40
    8dba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    8dbc:	910a      	str	r1, [sp, #40]	@ 0x28
    8dbe:	f3bf 8f5f 	dmb	sy
    8dc2:	6800      	ldr	r0, [r0, #0]
    8dc4:	900b      	str	r0, [sp, #44]	@ 0x2c
    8dc6:	e7ff      	b.n	8dc8 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x74>
    8dc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    8dca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    8dcc:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
    8dd0:	e853 0f00 	ldrex	r0, [r3]
    8dd4:	4508      	cmp	r0, r1
    8dd6:	d103      	bne.n	8de0 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x8c>
    8dd8:	e843 c200 	strex	r2, ip, [r3]
    8ddc:	2a00      	cmp	r2, #0
    8dde:	d1f7      	bne.n	8dd0 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x7c>
    8de0:	9009      	str	r0, [sp, #36]	@ 0x24
    8de2:	1a41      	subs	r1, r0, r1
    8de4:	fab1 f181 	clz	r1, r1
    8de8:	0949      	lsrs	r1, r1, #5
    8dea:	2901      	cmp	r1, #1
    8dec:	900b      	str	r0, [sp, #44]	@ 0x2c
    8dee:	d1eb      	bne.n	8dc8 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x74>
    8df0:	e7ff      	b.n	8df2 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x9e>
    8df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
    8df4:	9012      	str	r0, [sp, #72]	@ 0x48
    8df6:	e063      	b.n	8ec0 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x16c>
            Acquire => intrinsics::atomic_xchg_acquire(dst, val),
    8df8:	9810      	ldr	r0, [sp, #64]	@ 0x40
    8dfa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    8dfc:	9107      	str	r1, [sp, #28]
    8dfe:	6800      	ldr	r0, [r0, #0]
    8e00:	9008      	str	r0, [sp, #32]
    8e02:	e7ff      	b.n	8e04 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0xb0>
    8e04:	9908      	ldr	r1, [sp, #32]
    8e06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    8e08:	f8dd c01c 	ldr.w	ip, [sp, #28]
    8e0c:	e853 0f00 	ldrex	r0, [r3]
    8e10:	4508      	cmp	r0, r1
    8e12:	d103      	bne.n	8e1c <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0xc8>
    8e14:	e843 c200 	strex	r2, ip, [r3]
    8e18:	2a00      	cmp	r2, #0
    8e1a:	d1f7      	bne.n	8e0c <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0xb8>
    8e1c:	9006      	str	r0, [sp, #24]
    8e1e:	1a41      	subs	r1, r0, r1
    8e20:	fab1 f181 	clz	r1, r1
    8e24:	0949      	lsrs	r1, r1, #5
    8e26:	2901      	cmp	r1, #1
    8e28:	9008      	str	r0, [sp, #32]
    8e2a:	d1eb      	bne.n	8e04 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0xb0>
    8e2c:	e7ff      	b.n	8e2e <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0xda>
    8e2e:	9806      	ldr	r0, [sp, #24]
    8e30:	f3bf 8f5f 	dmb	sy
    8e34:	9012      	str	r0, [sp, #72]	@ 0x48
    8e36:	e043      	b.n	8ec0 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x16c>
            AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),
    8e38:	9810      	ldr	r0, [sp, #64]	@ 0x40
    8e3a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    8e3c:	9104      	str	r1, [sp, #16]
    8e3e:	f3bf 8f5f 	dmb	sy
    8e42:	6800      	ldr	r0, [r0, #0]
    8e44:	9005      	str	r0, [sp, #20]
    8e46:	e7ff      	b.n	8e48 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0xf4>
    8e48:	9905      	ldr	r1, [sp, #20]
    8e4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    8e4c:	f8dd c010 	ldr.w	ip, [sp, #16]
    8e50:	e853 0f00 	ldrex	r0, [r3]
    8e54:	4508      	cmp	r0, r1
    8e56:	d103      	bne.n	8e60 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x10c>
    8e58:	e843 c200 	strex	r2, ip, [r3]
    8e5c:	2a00      	cmp	r2, #0
    8e5e:	d1f7      	bne.n	8e50 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0xfc>
    8e60:	9003      	str	r0, [sp, #12]
    8e62:	1a41      	subs	r1, r0, r1
    8e64:	fab1 f181 	clz	r1, r1
    8e68:	0949      	lsrs	r1, r1, #5
    8e6a:	2901      	cmp	r1, #1
    8e6c:	9005      	str	r0, [sp, #20]
    8e6e:	d1eb      	bne.n	8e48 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0xf4>
    8e70:	e7ff      	b.n	8e72 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x11e>
    8e72:	9803      	ldr	r0, [sp, #12]
    8e74:	f3bf 8f5f 	dmb	sy
    8e78:	9012      	str	r0, [sp, #72]	@ 0x48
    8e7a:	e021      	b.n	8ec0 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x16c>
            SeqCst => intrinsics::atomic_xchg_seqcst(dst, val),
    8e7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
    8e7e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    8e80:	9101      	str	r1, [sp, #4]
    8e82:	f3bf 8f5f 	dmb	sy
    8e86:	6800      	ldr	r0, [r0, #0]
    8e88:	9002      	str	r0, [sp, #8]
    8e8a:	e7ff      	b.n	8e8c <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x138>
    8e8c:	9902      	ldr	r1, [sp, #8]
    8e8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    8e90:	f8dd c004 	ldr.w	ip, [sp, #4]
    8e94:	e853 0f00 	ldrex	r0, [r3]
    8e98:	4508      	cmp	r0, r1
    8e9a:	d103      	bne.n	8ea4 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x150>
    8e9c:	e843 c200 	strex	r2, ip, [r3]
    8ea0:	2a00      	cmp	r2, #0
    8ea2:	d1f7      	bne.n	8e94 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x140>
    8ea4:	9000      	str	r0, [sp, #0]
    8ea6:	1a41      	subs	r1, r0, r1
    8ea8:	fab1 f181 	clz	r1, r1
    8eac:	0949      	lsrs	r1, r1, #5
    8eae:	2901      	cmp	r1, #1
    8eb0:	9002      	str	r0, [sp, #8]
    8eb2:	d1eb      	bne.n	8e8c <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x138>
    8eb4:	e7ff      	b.n	8eb6 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x162>
    8eb6:	9800      	ldr	r0, [sp, #0]
    8eb8:	f3bf 8f5f 	dmb	sy
    8ebc:	9012      	str	r0, [sp, #72]	@ 0x48
    8ebe:	e7ff      	b.n	8ec0 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x16c>
    }
    8ec0:	9812      	ldr	r0, [sp, #72]	@ 0x48
    8ec2:	b018      	add	sp, #96	@ 0x60
    8ec4:	bd80      	pop	{r7, pc}

00008ec6 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hadc1ddd897cd6c18E>:
    pub fn store(&self, ptr: *mut T, order: Ordering) {
    8ec6:	b580      	push	{r7, lr}
    8ec8:	466f      	mov	r7, sp
    8eca:	b084      	sub	sp, #16
    8ecc:	9000      	str	r0, [sp, #0]
    8ece:	9101      	str	r1, [sp, #4]
    8ed0:	f807 2c05 	strb.w	r2, [r7, #-5]
            atomic_store(self.p.get(), ptr, order);
    8ed4:	9003      	str	r0, [sp, #12]
    8ed6:	f7ff fde1 	bl	8a9c <_ZN4core4sync6atomic12atomic_store17h05dbdb98fb061a89E>
    }
    8eda:	b004      	add	sp, #16
    8edc:	bd80      	pop	{r7, pc}
    8ede:	d4d4      	bmi.n	8e8a <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E+0x136>

00008ee0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE>:
unsafe fn atomic_compare_exchange_weak<T: Copy>(
    8ee0:	b580      	push	{r7, lr}
    8ee2:	466f      	mov	r7, sp
    8ee4:	b0a4      	sub	sp, #144	@ 0x90
    8ee6:	9207      	str	r2, [sp, #28]
    8ee8:	9108      	str	r1, [sp, #32]
    8eea:	4684      	mov	ip, r0
    8eec:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
    8ef0:	68b8      	ldr	r0, [r7, #8]
    8ef2:	900a      	str	r0, [sp, #40]	@ 0x28
    8ef4:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
    8ef8:	911d      	str	r1, [sp, #116]	@ 0x74
    8efa:	921e      	str	r2, [sp, #120]	@ 0x78
    8efc:	f807 3c12 	strb.w	r3, [r7, #-18]
    8f00:	f807 0c11 	strb.w	r0, [r7, #-17]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    8f04:	f24e 2060 	movw	r0, #57952	@ 0xe260
    8f08:	f2c0 0000 	movt	r0, #0
    8f0c:	9020      	str	r0, [sp, #128]	@ 0x80
    8f0e:	f24e 20a8 	movw	r0, #58024	@ 0xe2a8
    8f12:	f2c0 0000 	movt	r0, #0
    8f16:	9021      	str	r0, [sp, #132]	@ 0x84
        match (success, failure) {
    8f18:	b2d8      	uxtb	r0, r3
    8f1a:	900b      	str	r0, [sp, #44]	@ 0x2c
    8f1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    8f1e:	e8df f001 	tbb	[pc, r1]
    8f22:	1304      	.short	0x1304
    8f24:	00493725 	.word	0x00493725
    8f28:	defe      	udf	#254	@ 0xfe
    8f2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8f2c:	b2c0      	uxtb	r0, r0
    8f2e:	4601      	mov	r1, r0
    8f30:	9106      	str	r1, [sp, #24]
    8f32:	2800      	cmp	r0, #0
    8f34:	d056      	beq.n	8fe4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x104>
    8f36:	e7ff      	b.n	8f38 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x58>
    8f38:	9806      	ldr	r0, [sp, #24]
    8f3a:	2802      	cmp	r0, #2
    8f3c:	d066      	beq.n	900c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x12c>
    8f3e:	e7ff      	b.n	8f40 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x60>
    8f40:	9806      	ldr	r0, [sp, #24]
    8f42:	2804      	cmp	r0, #4
    8f44:	d078      	beq.n	9038 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x158>
    8f46:	e047      	b.n	8fd8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xf8>
    8f48:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8f4a:	b2c0      	uxtb	r0, r0
    8f4c:	4601      	mov	r1, r0
    8f4e:	9105      	str	r1, [sp, #20]
    8f50:	2800      	cmp	r0, #0
    8f52:	f000 8095 	beq.w	9080 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x1a0>
    8f56:	e7ff      	b.n	8f58 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x78>
    8f58:	9805      	ldr	r0, [sp, #20]
    8f5a:	2802      	cmp	r0, #2
    8f5c:	f000 80a6 	beq.w	90ac <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x1cc>
    8f60:	e7ff      	b.n	8f62 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x82>
    8f62:	9805      	ldr	r0, [sp, #20]
    8f64:	2804      	cmp	r0, #4
    8f66:	f000 80b9 	beq.w	90dc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x1fc>
    8f6a:	e035      	b.n	8fd8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xf8>
    8f6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8f6e:	b2c0      	uxtb	r0, r0
    8f70:	4601      	mov	r1, r0
    8f72:	9104      	str	r1, [sp, #16]
    8f74:	2800      	cmp	r0, #0
    8f76:	f000 80c9 	beq.w	910c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x22c>
    8f7a:	e7ff      	b.n	8f7c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x9c>
    8f7c:	9804      	ldr	r0, [sp, #16]
    8f7e:	2802      	cmp	r0, #2
    8f80:	f000 80da 	beq.w	9138 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x258>
    8f84:	e7ff      	b.n	8f86 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xa6>
    8f86:	9804      	ldr	r0, [sp, #16]
    8f88:	2804      	cmp	r0, #4
    8f8a:	f000 80eb 	beq.w	9164 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x284>
    8f8e:	e023      	b.n	8fd8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xf8>
    8f90:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8f92:	b2c0      	uxtb	r0, r0
    8f94:	4601      	mov	r1, r0
    8f96:	9103      	str	r1, [sp, #12]
    8f98:	2800      	cmp	r0, #0
    8f9a:	f000 80fb 	beq.w	9194 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x2b4>
    8f9e:	e7ff      	b.n	8fa0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xc0>
    8fa0:	9803      	ldr	r0, [sp, #12]
    8fa2:	2802      	cmp	r0, #2
    8fa4:	f000 810e 	beq.w	91c4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x2e4>
    8fa8:	e7ff      	b.n	8faa <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xca>
    8faa:	9803      	ldr	r0, [sp, #12]
    8fac:	2804      	cmp	r0, #4
    8fae:	f000 8121 	beq.w	91f4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x314>
    8fb2:	e011      	b.n	8fd8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xf8>
    8fb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8fb6:	b2c0      	uxtb	r0, r0
    8fb8:	4601      	mov	r1, r0
    8fba:	9102      	str	r1, [sp, #8]
    8fbc:	2800      	cmp	r0, #0
    8fbe:	f000 8131 	beq.w	9224 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x344>
    8fc2:	e7ff      	b.n	8fc4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xe4>
    8fc4:	9802      	ldr	r0, [sp, #8]
    8fc6:	2802      	cmp	r0, #2
    8fc8:	f000 8144 	beq.w	9254 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x374>
    8fcc:	e7ff      	b.n	8fce <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xee>
    8fce:	9802      	ldr	r0, [sp, #8]
    8fd0:	2804      	cmp	r0, #4
    8fd2:	f000 8157 	beq.w	9284 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x3a4>
    8fd6:	e7ff      	b.n	8fd8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0xf8>
    8fd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
    8fda:	b2c0      	uxtb	r0, r0
    8fdc:	2801      	cmp	r0, #1
    8fde:	f000 8177 	beq.w	92d0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x3f0>
    8fe2:	e18f      	b.n	9304 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x424>
            (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
    8fe4:	9808      	ldr	r0, [sp, #32]
    8fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    8fe8:	f8dd c01c 	ldr.w	ip, [sp, #28]
    8fec:	e853 1f00 	ldrex	r1, [r3]
    8ff0:	4501      	cmp	r1, r0
    8ff2:	d103      	bne.n	8ffc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x11c>
    8ff4:	e843 c200 	strex	r2, ip, [r3]
    8ff8:	2a00      	cmp	r2, #0
    8ffa:	d1f7      	bne.n	8fec <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x10c>
    8ffc:	1a08      	subs	r0, r1, r0
    8ffe:	fab0 f080 	clz	r0, r0
    9002:	0940      	lsrs	r0, r0, #5
    9004:	910e      	str	r1, [sp, #56]	@ 0x38
    9006:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    900a:	e02d      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),
    900c:	9808      	ldr	r0, [sp, #32]
    900e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    9010:	f8dd c01c 	ldr.w	ip, [sp, #28]
    9014:	e853 1f00 	ldrex	r1, [r3]
    9018:	4501      	cmp	r1, r0
    901a:	d103      	bne.n	9024 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x144>
    901c:	e843 c200 	strex	r2, ip, [r3]
    9020:	2a00      	cmp	r2, #0
    9022:	d1f7      	bne.n	9014 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x134>
    9024:	1a08      	subs	r0, r1, r0
    9026:	fab0 f080 	clz	r0, r0
    902a:	0940      	lsrs	r0, r0, #5
    902c:	f3bf 8f5f 	dmb	sy
    9030:	910e      	str	r1, [sp, #56]	@ 0x38
    9032:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    9036:	e017      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),
    9038:	9808      	ldr	r0, [sp, #32]
    903a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    903c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    9040:	f3bf 8f5f 	dmb	sy
    9044:	e853 1f00 	ldrex	r1, [r3]
    9048:	4501      	cmp	r1, r0
    904a:	d103      	bne.n	9054 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x174>
    904c:	e843 c200 	strex	r2, ip, [r3]
    9050:	2a00      	cmp	r2, #0
    9052:	d1f7      	bne.n	9044 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x164>
    9054:	1a08      	subs	r0, r1, r0
    9056:	fab0 f080 	clz	r0, r0
    905a:	0940      	lsrs	r0, r0, #5
    905c:	f3bf 8f5f 	dmb	sy
    9060:	910e      	str	r1, [sp, #56]	@ 0x38
    9062:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    9066:	e7ff      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
    let (val, ok) = unsafe {
    9068:	980e      	ldr	r0, [sp, #56]	@ 0x38
    906a:	9001      	str	r0, [sp, #4]
    906c:	9022      	str	r0, [sp, #136]	@ 0x88
    906e:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
    9072:	f807 0c01 	strb.w	r0, [r7, #-1]
    if ok { Ok(val) } else { Err(val) }
    9076:	07c0      	lsls	r0, r0, #31
    9078:	2800      	cmp	r0, #0
    907a:	f040 8120 	bne.w	92be <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x3de>
    907e:	e119      	b.n	92b4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x3d4>
            (Release, Relaxed) => intrinsics::atomic_cxchgweak_release_relaxed(dst, old, new),
    9080:	9808      	ldr	r0, [sp, #32]
    9082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    9084:	f8dd c01c 	ldr.w	ip, [sp, #28]
    9088:	f3bf 8f5f 	dmb	sy
    908c:	e853 1f00 	ldrex	r1, [r3]
    9090:	4501      	cmp	r1, r0
    9092:	d103      	bne.n	909c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x1bc>
    9094:	e843 c200 	strex	r2, ip, [r3]
    9098:	2a00      	cmp	r2, #0
    909a:	d1f7      	bne.n	908c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x1ac>
    909c:	1a08      	subs	r0, r1, r0
    909e:	fab0 f080 	clz	r0, r0
    90a2:	0940      	lsrs	r0, r0, #5
    90a4:	910e      	str	r1, [sp, #56]	@ 0x38
    90a6:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    90aa:	e7dd      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),
    90ac:	9808      	ldr	r0, [sp, #32]
    90ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    90b0:	f8dd c01c 	ldr.w	ip, [sp, #28]
    90b4:	f3bf 8f5f 	dmb	sy
    90b8:	e853 1f00 	ldrex	r1, [r3]
    90bc:	4501      	cmp	r1, r0
    90be:	d103      	bne.n	90c8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x1e8>
    90c0:	e843 c200 	strex	r2, ip, [r3]
    90c4:	2a00      	cmp	r2, #0
    90c6:	d1f7      	bne.n	90b8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x1d8>
    90c8:	1a08      	subs	r0, r1, r0
    90ca:	fab0 f080 	clz	r0, r0
    90ce:	0940      	lsrs	r0, r0, #5
    90d0:	f3bf 8f5f 	dmb	sy
    90d4:	910e      	str	r1, [sp, #56]	@ 0x38
    90d6:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    90da:	e7c5      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),
    90dc:	9808      	ldr	r0, [sp, #32]
    90de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    90e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
    90e4:	f3bf 8f5f 	dmb	sy
    90e8:	e853 1f00 	ldrex	r1, [r3]
    90ec:	4501      	cmp	r1, r0
    90ee:	d103      	bne.n	90f8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x218>
    90f0:	e843 c200 	strex	r2, ip, [r3]
    90f4:	2a00      	cmp	r2, #0
    90f6:	d1f7      	bne.n	90e8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x208>
    90f8:	1a08      	subs	r0, r1, r0
    90fa:	fab0 f080 	clz	r0, r0
    90fe:	0940      	lsrs	r0, r0, #5
    9100:	f3bf 8f5f 	dmb	sy
    9104:	910e      	str	r1, [sp, #56]	@ 0x38
    9106:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    910a:	e7ad      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acquire_relaxed(dst, old, new),
    910c:	9808      	ldr	r0, [sp, #32]
    910e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    9110:	f8dd c01c 	ldr.w	ip, [sp, #28]
    9114:	e853 1f00 	ldrex	r1, [r3]
    9118:	4501      	cmp	r1, r0
    911a:	d103      	bne.n	9124 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x244>
    911c:	e843 c200 	strex	r2, ip, [r3]
    9120:	2a00      	cmp	r2, #0
    9122:	d1f7      	bne.n	9114 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x234>
    9124:	1a08      	subs	r0, r1, r0
    9126:	fab0 f080 	clz	r0, r0
    912a:	0940      	lsrs	r0, r0, #5
    912c:	f3bf 8f5f 	dmb	sy
    9130:	910e      	str	r1, [sp, #56]	@ 0x38
    9132:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    9136:	e797      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acquire_acquire(dst, old, new),
    9138:	9808      	ldr	r0, [sp, #32]
    913a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    913c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    9140:	e853 1f00 	ldrex	r1, [r3]
    9144:	4501      	cmp	r1, r0
    9146:	d103      	bne.n	9150 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x270>
    9148:	e843 c200 	strex	r2, ip, [r3]
    914c:	2a00      	cmp	r2, #0
    914e:	d1f7      	bne.n	9140 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x260>
    9150:	1a08      	subs	r0, r1, r0
    9152:	fab0 f080 	clz	r0, r0
    9156:	0940      	lsrs	r0, r0, #5
    9158:	f3bf 8f5f 	dmb	sy
    915c:	910e      	str	r1, [sp, #56]	@ 0x38
    915e:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    9162:	e781      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),
    9164:	9808      	ldr	r0, [sp, #32]
    9166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    9168:	f8dd c01c 	ldr.w	ip, [sp, #28]
    916c:	f3bf 8f5f 	dmb	sy
    9170:	e853 1f00 	ldrex	r1, [r3]
    9174:	4501      	cmp	r1, r0
    9176:	d103      	bne.n	9180 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x2a0>
    9178:	e843 c200 	strex	r2, ip, [r3]
    917c:	2a00      	cmp	r2, #0
    917e:	d1f7      	bne.n	9170 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x290>
    9180:	1a08      	subs	r0, r1, r0
    9182:	fab0 f080 	clz	r0, r0
    9186:	0940      	lsrs	r0, r0, #5
    9188:	f3bf 8f5f 	dmb	sy
    918c:	910e      	str	r1, [sp, #56]	@ 0x38
    918e:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    9192:	e769      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_relaxed(dst, old, new),
    9194:	9808      	ldr	r0, [sp, #32]
    9196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    9198:	f8dd c01c 	ldr.w	ip, [sp, #28]
    919c:	f3bf 8f5f 	dmb	sy
    91a0:	e853 1f00 	ldrex	r1, [r3]
    91a4:	4501      	cmp	r1, r0
    91a6:	d103      	bne.n	91b0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x2d0>
    91a8:	e843 c200 	strex	r2, ip, [r3]
    91ac:	2a00      	cmp	r2, #0
    91ae:	d1f7      	bne.n	91a0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x2c0>
    91b0:	1a08      	subs	r0, r1, r0
    91b2:	fab0 f080 	clz	r0, r0
    91b6:	0940      	lsrs	r0, r0, #5
    91b8:	f3bf 8f5f 	dmb	sy
    91bc:	910e      	str	r1, [sp, #56]	@ 0x38
    91be:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    91c2:	e751      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel_acquire(dst, old, new),
    91c4:	9808      	ldr	r0, [sp, #32]
    91c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    91c8:	f8dd c01c 	ldr.w	ip, [sp, #28]
    91cc:	f3bf 8f5f 	dmb	sy
    91d0:	e853 1f00 	ldrex	r1, [r3]
    91d4:	4501      	cmp	r1, r0
    91d6:	d103      	bne.n	91e0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x300>
    91d8:	e843 c200 	strex	r2, ip, [r3]
    91dc:	2a00      	cmp	r2, #0
    91de:	d1f7      	bne.n	91d0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x2f0>
    91e0:	1a08      	subs	r0, r1, r0
    91e2:	fab0 f080 	clz	r0, r0
    91e6:	0940      	lsrs	r0, r0, #5
    91e8:	f3bf 8f5f 	dmb	sy
    91ec:	910e      	str	r1, [sp, #56]	@ 0x38
    91ee:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    91f2:	e739      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),
    91f4:	9808      	ldr	r0, [sp, #32]
    91f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    91f8:	f8dd c01c 	ldr.w	ip, [sp, #28]
    91fc:	f3bf 8f5f 	dmb	sy
    9200:	e853 1f00 	ldrex	r1, [r3]
    9204:	4501      	cmp	r1, r0
    9206:	d103      	bne.n	9210 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x330>
    9208:	e843 c200 	strex	r2, ip, [r3]
    920c:	2a00      	cmp	r2, #0
    920e:	d1f7      	bne.n	9200 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x320>
    9210:	1a08      	subs	r0, r1, r0
    9212:	fab0 f080 	clz	r0, r0
    9216:	0940      	lsrs	r0, r0, #5
    9218:	f3bf 8f5f 	dmb	sy
    921c:	910e      	str	r1, [sp, #56]	@ 0x38
    921e:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    9222:	e721      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_seqcst_relaxed(dst, old, new),
    9224:	9808      	ldr	r0, [sp, #32]
    9226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    9228:	f8dd c01c 	ldr.w	ip, [sp, #28]
    922c:	f3bf 8f5f 	dmb	sy
    9230:	e853 1f00 	ldrex	r1, [r3]
    9234:	4501      	cmp	r1, r0
    9236:	d103      	bne.n	9240 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x360>
    9238:	e843 c200 	strex	r2, ip, [r3]
    923c:	2a00      	cmp	r2, #0
    923e:	d1f7      	bne.n	9230 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x350>
    9240:	1a08      	subs	r0, r1, r0
    9242:	fab0 f080 	clz	r0, r0
    9246:	0940      	lsrs	r0, r0, #5
    9248:	f3bf 8f5f 	dmb	sy
    924c:	910e      	str	r1, [sp, #56]	@ 0x38
    924e:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    9252:	e709      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_seqcst_acquire(dst, old, new),
    9254:	9808      	ldr	r0, [sp, #32]
    9256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    9258:	f8dd c01c 	ldr.w	ip, [sp, #28]
    925c:	f3bf 8f5f 	dmb	sy
    9260:	e853 1f00 	ldrex	r1, [r3]
    9264:	4501      	cmp	r1, r0
    9266:	d103      	bne.n	9270 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x390>
    9268:	e843 c200 	strex	r2, ip, [r3]
    926c:	2a00      	cmp	r2, #0
    926e:	d1f7      	bne.n	9260 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x380>
    9270:	1a08      	subs	r0, r1, r0
    9272:	fab0 f080 	clz	r0, r0
    9276:	0940      	lsrs	r0, r0, #5
    9278:	f3bf 8f5f 	dmb	sy
    927c:	910e      	str	r1, [sp, #56]	@ 0x38
    927e:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    9282:	e6f1      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
            (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak_seqcst_seqcst(dst, old, new),
    9284:	9808      	ldr	r0, [sp, #32]
    9286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    9288:	f8dd c01c 	ldr.w	ip, [sp, #28]
    928c:	f3bf 8f5f 	dmb	sy
    9290:	e853 1f00 	ldrex	r1, [r3]
    9294:	4501      	cmp	r1, r0
    9296:	d103      	bne.n	92a0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x3c0>
    9298:	e843 c200 	strex	r2, ip, [r3]
    929c:	2a00      	cmp	r2, #0
    929e:	d1f7      	bne.n	9290 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x3b0>
    92a0:	1a08      	subs	r0, r1, r0
    92a2:	fab0 f080 	clz	r0, r0
    92a6:	0940      	lsrs	r0, r0, #5
    92a8:	f3bf 8f5f 	dmb	sy
    92ac:	910e      	str	r1, [sp, #56]	@ 0x38
    92ae:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
    92b2:	e6d9      	b.n	9068 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x188>
    if ok { Ok(val) } else { Err(val) }
    92b4:	9801      	ldr	r0, [sp, #4]
    92b6:	900d      	str	r0, [sp, #52]	@ 0x34
    92b8:	2001      	movs	r0, #1
    92ba:	900c      	str	r0, [sp, #48]	@ 0x30
    92bc:	e004      	b.n	92c8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x3e8>
    92be:	9801      	ldr	r0, [sp, #4]
    92c0:	900d      	str	r0, [sp, #52]	@ 0x34
    92c2:	2000      	movs	r0, #0
    92c4:	900c      	str	r0, [sp, #48]	@ 0x30
    92c6:	e7ff      	b.n	92c8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17hbf15dc9a6502811cE+0x3e8>
}
    92c8:	980c      	ldr	r0, [sp, #48]	@ 0x30
    92ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
    92cc:	b024      	add	sp, #144	@ 0x90
    92ce:	bd80      	pop	{r7, pc}
        Arguments { pieces, fmt: None, args: &[] }
    92d0:	f24e 2060 	movw	r0, #57952	@ 0xe260
    92d4:	f2c0 0000 	movt	r0, #0
    92d8:	9016      	str	r0, [sp, #88]	@ 0x58
    92da:	2001      	movs	r0, #1
    92dc:	9017      	str	r0, [sp, #92]	@ 0x5c
    92de:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    92e2:	f2c0 0000 	movt	r0, #0
    92e6:	6801      	ldr	r1, [r0, #0]
    92e8:	6840      	ldr	r0, [r0, #4]
    92ea:	911a      	str	r1, [sp, #104]	@ 0x68
    92ec:	901b      	str	r0, [sp, #108]	@ 0x6c
    92ee:	2004      	movs	r0, #4
    92f0:	9018      	str	r0, [sp, #96]	@ 0x60
    92f2:	2000      	movs	r0, #0
    92f4:	9019      	str	r0, [sp, #100]	@ 0x64
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
    92f6:	f24e 21b0 	movw	r1, #58032	@ 0xe2b0
    92fa:	f2c0 0100 	movt	r1, #0
    92fe:	a816      	add	r0, sp, #88	@ 0x58
    9300:	f001 f894 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    9304:	f24e 20a8 	movw	r0, #58024	@ 0xe2a8
    9308:	f2c0 0000 	movt	r0, #0
    930c:	9010      	str	r0, [sp, #64]	@ 0x40
    930e:	2001      	movs	r0, #1
    9310:	9011      	str	r0, [sp, #68]	@ 0x44
    9312:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    9316:	f2c0 0000 	movt	r0, #0
    931a:	6801      	ldr	r1, [r0, #0]
    931c:	6840      	ldr	r0, [r0, #4]
    931e:	9114      	str	r1, [sp, #80]	@ 0x50
    9320:	9015      	str	r0, [sp, #84]	@ 0x54
    9322:	2004      	movs	r0, #4
    9324:	9012      	str	r0, [sp, #72]	@ 0x48
    9326:	2000      	movs	r0, #0
    9328:	9013      	str	r0, [sp, #76]	@ 0x4c
            (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
    932a:	f24e 21c0 	movw	r1, #58048	@ 0xe2c0
    932e:	f2c0 0100 	movt	r1, #0
    9332:	a810      	add	r0, sp, #64	@ 0x40
    9334:	f001 f87a 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

00009338 <_ZN4core4task4wake5Waker4data17hf1388a8c4e3687d3E>:
    pub fn data(&self) -> *const () {
    9338:	b580      	push	{r7, lr}
    933a:	466f      	mov	r7, sp
    933c:	b081      	sub	sp, #4
    933e:	9000      	str	r0, [sp, #0]
        self.waker.data
    9340:	6840      	ldr	r0, [r0, #4]
    }
    9342:	b001      	add	sp, #4
    9344:	bd80      	pop	{r7, pc}

00009346 <_ZN4core4task4wake5Waker6vtable17he794e2b910751fe7E>:
    pub fn vtable(&self) -> &'static RawWakerVTable {
    9346:	b580      	push	{r7, lr}
    9348:	466f      	mov	r7, sp
    934a:	b081      	sub	sp, #4
    934c:	9000      	str	r0, [sp, #0]
        self.waker.vtable
    934e:	6800      	ldr	r0, [r0, #0]
    }
    9350:	b001      	add	sp, #4
    9352:	bd80      	pop	{r7, pc}

00009354 <_ZN4core4task4wake5Waker8from_raw17h1a0c16eb477569e1E>:
    pub const unsafe fn from_raw(waker: RawWaker) -> Waker {
    9354:	b580      	push	{r7, lr}
    9356:	466f      	mov	r7, sp
    9358:	b082      	sub	sp, #8
    935a:	9000      	str	r0, [sp, #0]
    935c:	9101      	str	r1, [sp, #4]
    }
    935e:	b002      	add	sp, #8
    9360:	bd80      	pop	{r7, pc}

00009362 <_ZN4core4task4wake8RawWaker3new17hdc549fe110245ae2E>:
    pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {
    9362:	b580      	push	{r7, lr}
    9364:	466f      	mov	r7, sp
    9366:	b083      	sub	sp, #12
    9368:	9100      	str	r1, [sp, #0]
    936a:	4601      	mov	r1, r0
    936c:	9800      	ldr	r0, [sp, #0]
    936e:	9101      	str	r1, [sp, #4]
    9370:	9002      	str	r0, [sp, #8]
    }
    9372:	b003      	add	sp, #12
    9374:	bd80      	pop	{r7, pc}

00009376 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h1f9e56b18fa314dbE>:
    pub const unsafe fn unwrap_unchecked(self) -> T {
    9376:	b580      	push	{r7, lr}
    9378:	466f      	mov	r7, sp
    937a:	b082      	sub	sp, #8
    937c:	9000      	str	r0, [sp, #0]
        match self {
    937e:	9800      	ldr	r0, [sp, #0]
    9380:	b120      	cbz	r0, 938c <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h1f9e56b18fa314dbE+0x16>
    9382:	e7ff      	b.n	9384 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h1f9e56b18fa314dbE+0xe>
            Some(val) => val,
    9384:	9800      	ldr	r0, [sp, #0]
    9386:	9001      	str	r0, [sp, #4]
    }
    9388:	b002      	add	sp, #8
    938a:	bd80      	pop	{r7, pc}
                precondition_check($($arg,)*);
    938c:	f7ff f9db 	bl	8746 <_ZN4core4hint21unreachable_unchecked18precondition_check17hf6437e23eaa38e7aE>
    9390:	e7ff      	b.n	9392 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h1f9e56b18fa314dbE+0x1c>
    9392:	defe      	udf	#254	@ 0xfe

00009394 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h4693fae279ff0dcbE>:
    pub const unsafe fn unwrap_unchecked(self) -> T {
    9394:	b580      	push	{r7, lr}
    9396:	466f      	mov	r7, sp
    9398:	b082      	sub	sp, #8
    939a:	9000      	str	r0, [sp, #0]
        match self {
    939c:	9800      	ldr	r0, [sp, #0]
    939e:	b120      	cbz	r0, 93aa <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h4693fae279ff0dcbE+0x16>
    93a0:	e7ff      	b.n	93a2 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h4693fae279ff0dcbE+0xe>
            Some(val) => val,
    93a2:	9800      	ldr	r0, [sp, #0]
    93a4:	9001      	str	r0, [sp, #4]
    }
    93a6:	b002      	add	sp, #8
    93a8:	bd80      	pop	{r7, pc}
    93aa:	f7ff f9cc 	bl	8746 <_ZN4core4hint21unreachable_unchecked18precondition_check17hf6437e23eaa38e7aE>
    93ae:	e7ff      	b.n	93b0 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h4693fae279ff0dcbE+0x1c>
    93b0:	defe      	udf	#254	@ 0xfe

000093b2 <_ZN4core6option15Option$LT$T$GT$3map17h202d6545da9b63e5E>:
    pub fn map<U, F>(self, f: F) -> Option<U>
    93b2:	b580      	push	{r7, lr}
    93b4:	466f      	mov	r7, sp
    93b6:	b084      	sub	sp, #16
    93b8:	9000      	str	r0, [sp, #0]
        match self {
    93ba:	9800      	ldr	r0, [sp, #0]
    93bc:	b130      	cbz	r0, 93cc <_ZN4core6option15Option$LT$T$GT$3map17h202d6545da9b63e5E+0x1a>
    93be:	e7ff      	b.n	93c0 <_ZN4core6option15Option$LT$T$GT$3map17h202d6545da9b63e5E+0xe>
            Some(x) => Some(f(x)),
    93c0:	9800      	ldr	r0, [sp, #0]
    93c2:	9003      	str	r0, [sp, #12]
    93c4:	f000 f904 	bl	95d0 <_ZN16embassy_executor3raw9run_queue8RunQueue11dequeue_all28_$u7b$$u7b$closure$u7d$$u7d$17h7f1034c45322a162E>
    93c8:	9001      	str	r0, [sp, #4]
    93ca:	e002      	b.n	93d2 <_ZN4core6option15Option$LT$T$GT$3map17h202d6545da9b63e5E+0x20>
    93cc:	2000      	movs	r0, #0
            None => None,
    93ce:	9001      	str	r0, [sp, #4]
    }
    93d0:	e7ff      	b.n	93d2 <_ZN4core6option15Option$LT$T$GT$3map17h202d6545da9b63e5E+0x20>
    93d2:	9801      	ldr	r0, [sp, #4]
    93d4:	b004      	add	sp, #16
    93d6:	bd80      	pop	{r7, pc}

000093d8 <_ZN4core6option15Option$LT$T$GT$3map17hcd104ae9fc16c77aE>:
    pub fn map<U, F>(self, f: F) -> Option<U>
    93d8:	b580      	push	{r7, lr}
    93da:	466f      	mov	r7, sp
    93dc:	b084      	sub	sp, #16
    93de:	9000      	str	r0, [sp, #0]
        match self {
    93e0:	9800      	ldr	r0, [sp, #0]
    93e2:	b130      	cbz	r0, 93f2 <_ZN4core6option15Option$LT$T$GT$3map17hcd104ae9fc16c77aE+0x1a>
    93e4:	e7ff      	b.n	93e6 <_ZN4core6option15Option$LT$T$GT$3map17hcd104ae9fc16c77aE+0xe>
            Some(x) => Some(f(x)),
    93e6:	9800      	ldr	r0, [sp, #0]
    93e8:	9003      	str	r0, [sp, #12]
    93ea:	f000 f8aa 	bl	9542 <_ZN16embassy_executor3raw9run_queue8RunQueue7enqueue28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h33ccea26c4822fc6E>
    93ee:	9001      	str	r0, [sp, #4]
    93f0:	e002      	b.n	93f8 <_ZN4core6option15Option$LT$T$GT$3map17hcd104ae9fc16c77aE+0x20>
    93f2:	2000      	movs	r0, #0
            None => None,
    93f4:	9001      	str	r0, [sp, #4]
    }
    93f6:	e7ff      	b.n	93f8 <_ZN4core6option15Option$LT$T$GT$3map17hcd104ae9fc16c77aE+0x20>
    93f8:	9801      	ldr	r0, [sp, #4]
    93fa:	b004      	add	sp, #16
    93fc:	bd80      	pop	{r7, pc}

000093fe <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE>:
    pub fn ok(self) -> Option<T> {
    93fe:	b580      	push	{r7, lr}
    9400:	466f      	mov	r7, sp
    9402:	b085      	sub	sp, #20
    9404:	9000      	str	r0, [sp, #0]
    9406:	9101      	str	r1, [sp, #4]
        match self {
    9408:	9800      	ldr	r0, [sp, #0]
    940a:	07c0      	lsls	r0, r0, #31
    940c:	b118      	cbz	r0, 9416 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE+0x18>
    940e:	e7ff      	b.n	9410 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE+0x12>
    9410:	2000      	movs	r0, #0
            Err(_) => None,
    9412:	9002      	str	r0, [sp, #8]
    9414:	e005      	b.n	9422 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE+0x24>
            Ok(x) => Some(x),
    9416:	9801      	ldr	r0, [sp, #4]
    9418:	9004      	str	r0, [sp, #16]
    941a:	9003      	str	r0, [sp, #12]
    941c:	2001      	movs	r0, #1
    941e:	9002      	str	r0, [sp, #8]
    9420:	e7ff      	b.n	9422 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE+0x24>
    }
    9422:	9800      	ldr	r0, [sp, #0]
    9424:	07c0      	lsls	r0, r0, #31
    9426:	b108      	cbz	r0, 942c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE+0x2e>
    9428:	e7ff      	b.n	942a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE+0x2c>
    942a:	e7ff      	b.n	942c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE+0x2e>
    942c:	9802      	ldr	r0, [sp, #8]
    942e:	9903      	ldr	r1, [sp, #12]
    9430:	b005      	add	sp, #20
    9432:	bd80      	pop	{r7, pc}

00009434 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$7request17h8cddf0fced7bd9cbE>:
    pub fn request<I>(&mut self, interrupt: I)
    9434:	b580      	push	{r7, lr}
    9436:	466f      	mov	r7, sp
    9438:	b08c      	sub	sp, #48	@ 0x30
    943a:	9101      	str	r1, [sp, #4]
    943c:	4601      	mov	r1, r0
    943e:	9801      	ldr	r0, [sp, #4]
    9440:	9102      	str	r1, [sp, #8]
    9442:	9103      	str	r1, [sp, #12]
    9444:	f8ad 0010 	strh.w	r0, [sp, #16]
        let nr = interrupt.number();
    9448:	f000 f82a 	bl	94a0 <_ZN94_$LT$embassy_executor..arch..__pender..Irq$u20$as$u20$cortex_m..interrupt..InterruptNumber$GT$6number17hfd3f62d549fe34b3E>
    944c:	9902      	ldr	r1, [sp, #8]
    944e:	f827 0c1e 	strh.w	r0, [r7, #-30]
    9452:	910b      	str	r1, [sp, #44]	@ 0x2c
    9454:	f827 0c12 	strh.w	r0, [r7, #-18]
    9458:	b281      	uxth	r1, r0
    945a:	f64e 7000 	movw	r0, #61184	@ 0xef00
    945e:	f2ce 0000 	movt	r0, #57344	@ 0xe000
    9462:	9005      	str	r0, [sp, #20]
    9464:	9106      	str	r1, [sp, #24]
    9466:	9008      	str	r0, [sp, #32]
    9468:	9109      	str	r1, [sp, #36]	@ 0x24
    946a:	900a      	str	r0, [sp, #40]	@ 0x28
    946c:	f000 fe21 	bl	a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>
    }
    9470:	b00c      	add	sp, #48	@ 0x30
    9472:	bd80      	pop	{r7, pc}

00009474 <__pender>:
fn __pender(context: *mut ()) {
    9474:	b580      	push	{r7, lr}
    9476:	466f      	mov	r7, sp
    9478:	b086      	sub	sp, #24
    947a:	9002      	str	r0, [sp, #8]
        let context = context as usize;
    947c:	4601      	mov	r1, r0
    947e:	9100      	str	r1, [sp, #0]
    9480:	9004      	str	r0, [sp, #16]
        if !cfg!(feature = "executor-interrupt") || context == THREAD_PENDER {
    9482:	3001      	adds	r0, #1
    9484:	b140      	cbz	r0, 9498 <__pender+0x24>
    9486:	e7ff      	b.n	9488 <__pender+0x14>
            let irq = Irq(context as u16);
    9488:	9900      	ldr	r1, [sp, #0]
    948a:	f827 1c02 	strh.w	r1, [r7, #-2]
    948e:	f1a7 0011 	sub.w	r0, r7, #17
                nvic.request(irq);
    9492:	f7ff ffcf 	bl	9434 <_ZN8cortex_m10peripheral4nvic44_$LT$impl$u20$cortex_m..peripheral..NVIC$GT$7request17h8cddf0fced7bd9cbE>
    9496:	e001      	b.n	949c <__pender+0x28>
            core::arch::asm!("sev");
    9498:	bf40      	sev
    949a:	e7ff      	b.n	949c <__pender+0x28>
}
    949c:	b006      	add	sp, #24
    949e:	bd80      	pop	{r7, pc}

000094a0 <_ZN94_$LT$embassy_executor..arch..__pender..Irq$u20$as$u20$cortex_m..interrupt..InterruptNumber$GT$6number17hfd3f62d549fe34b3E>:
                fn number(self) -> u16 {
    94a0:	b580      	push	{r7, lr}
    94a2:	466f      	mov	r7, sp
    94a4:	b081      	sub	sp, #4
    94a6:	f827 0c02 	strh.w	r0, [r7, #-2]
                }
    94aa:	b001      	add	sp, #4
    94ac:	bd80      	pop	{r7, pc}

000094ae <_ZN16embassy_executor4arch6thread8Executor3new17h270c35b6a8c0be72E>:
        pub fn new() -> Self {
    94ae:	b580      	push	{r7, lr}
    94b0:	466f      	mov	r7, sp
    94b2:	b084      	sub	sp, #16
                inner: raw::Executor::new(THREAD_PENDER as *mut ()),
    94b4:	9001      	str	r0, [sp, #4]
    94b6:	a802      	add	r0, sp, #8
    94b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
    94bc:	f000 f9bf 	bl	983e <_ZN16embassy_executor3raw8Executor3new17h81cd4d5b68eae0dbE>
    94c0:	9901      	ldr	r1, [sp, #4]
            Self {
    94c2:	9802      	ldr	r0, [sp, #8]
    94c4:	9a03      	ldr	r2, [sp, #12]
    94c6:	604a      	str	r2, [r1, #4]
    94c8:	6008      	str	r0, [r1, #0]
        }
    94ca:	b004      	add	sp, #16
    94cc:	bd80      	pop	{r7, pc}

000094ce <_ZN16embassy_executor3raw9run_queue8RunQueue3new17h640c60947bf54114E>:
pub(crate) struct RunQueue {
    head: AtomicPtr<TaskHeader>,
}

impl RunQueue {
    pub const fn new() -> Self {
    94ce:	b580      	push	{r7, lr}
    94d0:	466f      	mov	r7, sp
    94d2:	b084      	sub	sp, #16
    94d4:	2000      	movs	r0, #0
        Self {
            head: AtomicPtr::new(ptr::null_mut()),
    94d6:	f7ff fc2a 	bl	8d2e <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$3new17h14c1a04561cdfa5fE>
    94da:	9003      	str	r0, [sp, #12]
    94dc:	9803      	ldr	r0, [sp, #12]
    94de:	9002      	str	r0, [sp, #8]
        Self {
    94e0:	9802      	ldr	r0, [sp, #8]
    94e2:	9001      	str	r0, [sp, #4]
        }
    }
    94e4:	9801      	ldr	r0, [sp, #4]
    94e6:	b004      	add	sp, #16
    94e8:	bd80      	pop	{r7, pc}

000094ea <_ZN16embassy_executor3raw9run_queue8RunQueue7enqueue28_$u7b$$u7b$closure$u7d$$u7d$17h18cf72d8a5a4f2b1E>:
    #[inline(always)]
    pub(crate) unsafe fn enqueue(&self, task: TaskRef, _: super::state::Token) -> bool {
        let mut was_empty = false;

        self.head
            .fetch_update(Ordering::SeqCst, Ordering::SeqCst, |prev| {
    94ea:	b580      	push	{r7, lr}
    94ec:	466f      	mov	r7, sp
    94ee:	b088      	sub	sp, #32
    94f0:	9100      	str	r1, [sp, #0]
    94f2:	4601      	mov	r1, r0
    94f4:	9800      	ldr	r0, [sp, #0]
    94f6:	9102      	str	r1, [sp, #8]
    94f8:	9105      	str	r1, [sp, #20]
    94fa:	9006      	str	r0, [sp, #24]
                was_empty = prev.is_null();
    94fc:	f7ff f8e5 	bl	86ca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc0db22b49f52938dE>
    9500:	9a02      	ldr	r2, [sp, #8]
    9502:	4601      	mov	r1, r0
    9504:	9800      	ldr	r0, [sp, #0]
    9506:	6812      	ldr	r2, [r2, #0]
    9508:	7011      	strb	r1, [r2, #0]
                unsafe {
                    // safety: the pointer is either null or valid
                    let prev = NonNull::new(prev).map(|ptr| TaskRef::from_ptr(ptr.as_ptr()));
    950a:	f7ff f903 	bl	8714 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E>
    950e:	f7ff ff63 	bl	93d8 <_ZN4core6option15Option$LT$T$GT$3map17hcd104ae9fc16c77aE>
    9512:	4601      	mov	r1, r0
    9514:	9802      	ldr	r0, [sp, #8]
    9516:	9101      	str	r1, [sp, #4]
    9518:	9107      	str	r1, [sp, #28]
                    // safety: there are no concurrent accesses to `next`
                    task.header().run_queue_item.next.set(prev);
    951a:	6840      	ldr	r0, [r0, #4]
    951c:	6800      	ldr	r0, [r0, #0]
    951e:	f000 f8ec 	bl	96fa <_ZN16embassy_executor3raw7TaskRef6header17hd12d56945c9aeeb8E>
    9522:	9901      	ldr	r1, [sp, #4]
    9524:	3014      	adds	r0, #20
    9526:	f000 f874 	bl	9612 <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3set17h3df240f58b26ea0bE>
    952a:	9802      	ldr	r0, [sp, #8]
                }
                Some(task.as_ptr() as *mut _)
    952c:	6840      	ldr	r0, [r0, #4]
    952e:	6800      	ldr	r0, [r0, #0]
    9530:	f000 f8f5 	bl	971e <_ZN16embassy_executor3raw7TaskRef6as_ptr17h4e14071552633612E>
    9534:	9004      	str	r0, [sp, #16]
    9536:	2001      	movs	r0, #1
    9538:	9003      	str	r0, [sp, #12]
            })
    953a:	9803      	ldr	r0, [sp, #12]
    953c:	9904      	ldr	r1, [sp, #16]
    953e:	b008      	add	sp, #32
    9540:	bd80      	pop	{r7, pc}

00009542 <_ZN16embassy_executor3raw9run_queue8RunQueue7enqueue28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h33ccea26c4822fc6E>:
                    let prev = NonNull::new(prev).map(|ptr| TaskRef::from_ptr(ptr.as_ptr()));
    9542:	b580      	push	{r7, lr}
    9544:	466f      	mov	r7, sp
    9546:	b084      	sub	sp, #16
    9548:	9002      	str	r0, [sp, #8]
    954a:	9003      	str	r0, [sp, #12]
    954c:	f000 f8c8 	bl	96e0 <_ZN16embassy_executor3raw7TaskRef8from_ptr17he7e62cf205c9325bE>
    9550:	b004      	add	sp, #16
    9552:	bd80      	pop	{r7, pc}

00009554 <_ZN16embassy_executor3raw9run_queue8RunQueue11dequeue_all17h13ad6b04b80f1405E>:
    }

    /// Empty the queue, then call `on_task` for each task that was in the queue.
    /// NOTE: It is OK for `on_task` to enqueue more tasks. In this case they're left in the queue
    /// and will be processed by the *next* call to `dequeue_all`, *not* the current one.
    pub(crate) fn dequeue_all(&self, on_task: impl Fn(TaskRef)) {
    9554:	b580      	push	{r7, lr}
    9556:	466f      	mov	r7, sp
    9558:	b08a      	sub	sp, #40	@ 0x28
    955a:	9005      	str	r0, [sp, #20]
    955c:	2103      	movs	r1, #3
        // Atomically empty the queue.
        let ptr = self.head.swap(ptr::null_mut(), Ordering::AcqRel);
    955e:	f807 1c19 	strb.w	r1, [r7, #-25]
    9562:	f817 2c19 	ldrb.w	r2, [r7, #-25]
    9566:	2100      	movs	r1, #0
    9568:	f7ff fbf4 	bl	8d54 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4swap17h17984b7b855b2f87E>
    956c:	9006      	str	r0, [sp, #24]

        // safety: the pointer is either null or valid
        let mut next = unsafe { NonNull::new(ptr).map(|ptr| TaskRef::from_ptr(ptr.as_ptr())) };
    956e:	f7ff f8d1 	bl	8714 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17haaad3012ebab8153E>
    9572:	f7ff ff1e 	bl	93b2 <_ZN4core6option15Option$LT$T$GT$3map17h202d6545da9b63e5E>
    9576:	9004      	str	r0, [sp, #16]
    9578:	e7ff      	b.n	957a <_ZN16embassy_executor3raw9run_queue8RunQueue11dequeue_all17h13ad6b04b80f1405E+0x26>

        // Iterate the linked list of tasks that were previously in the queue.
        while let Some(task) = next {
    957a:	9804      	ldr	r0, [sp, #16]
    957c:	b330      	cbz	r0, 95cc <_ZN16embassy_executor3raw9run_queue8RunQueue11dequeue_all17h13ad6b04b80f1405E+0x78>
    957e:	e7ff      	b.n	9580 <_ZN16embassy_executor3raw9run_queue8RunQueue11dequeue_all17h13ad6b04b80f1405E+0x2c>
    9580:	9804      	ldr	r0, [sp, #16]
    9582:	9002      	str	r0, [sp, #8]
    9584:	9007      	str	r0, [sp, #28]
            // If the task re-enqueues itself, the `next` pointer will get overwritten.
            // Therefore, first read the next pointer, and only then process the task.
            // safety: there are no concurrent accesses to `next`
            next = unsafe { task.header().run_queue_item.next.get() };
    9586:	f000 f8b8 	bl	96fa <_ZN16embassy_executor3raw7TaskRef6header17hd12d56945c9aeeb8E>
    958a:	3014      	adds	r0, #20
    958c:	f000 f852 	bl	9634 <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3get17he1def9ecccc0596aE>
    9590:	4601      	mov	r1, r0
    9592:	9802      	ldr	r0, [sp, #8]
    9594:	9104      	str	r1, [sp, #16]

            task.header().state.run_dequeue();
    9596:	f000 f8b0 	bl	96fa <_ZN16embassy_executor3raw7TaskRef6header17hd12d56945c9aeeb8E>
    959a:	9001      	str	r0, [sp, #4]
    959c:	3010      	adds	r0, #16
    959e:	9009      	str	r0, [sp, #36]	@ 0x24
    95a0:	2001      	movs	r0, #1
    }

    /// Unmark the task as run-queued. Return whether the task is spawned.
    #[inline(always)]
    pub fn run_dequeue(&self) {
        compiler_fence(Ordering::Release);
    95a2:	f807 0c06 	strb.w	r0, [r7, #-6]
    95a6:	f817 0c06 	ldrb.w	r0, [r7, #-6]
    95aa:	f7ff fb41 	bl	8c30 <_ZN4core4sync6atomic14compiler_fence17h6f2a5c417daf54bbE>
    95ae:	9801      	ldr	r0, [sp, #4]

        self.run_queued.store(false, Ordering::Relaxed);
    95b0:	3011      	adds	r0, #17
    95b2:	2100      	movs	r1, #0
    95b4:	f807 1c05 	strb.w	r1, [r7, #-5]
    95b8:	f817 2c05 	ldrb.w	r2, [r7, #-5]
    95bc:	f7ff f99c 	bl	88f8 <_ZN4core4sync6atomic10AtomicBool5store17h6e5938d8ab2b30dbE>
    95c0:	9902      	ldr	r1, [sp, #8]
    95c2:	f1a7 001a 	sub.w	r0, r7, #26
            on_task(task);
    95c6:	f000 f921 	bl	980c <_ZN16embassy_executor3raw12SyncExecutor4poll28_$u7b$$u7b$closure$u7d$$u7d$17hf6b41a7c911f0e0bE>
    95ca:	e7d6      	b.n	957a <_ZN16embassy_executor3raw9run_queue8RunQueue11dequeue_all17h13ad6b04b80f1405E+0x26>
        }
    }
    95cc:	b00a      	add	sp, #40	@ 0x28
    95ce:	bd80      	pop	{r7, pc}

000095d0 <_ZN16embassy_executor3raw9run_queue8RunQueue11dequeue_all28_$u7b$$u7b$closure$u7d$$u7d$17h7f1034c45322a162E>:
        let mut next = unsafe { NonNull::new(ptr).map(|ptr| TaskRef::from_ptr(ptr.as_ptr())) };
    95d0:	b580      	push	{r7, lr}
    95d2:	466f      	mov	r7, sp
    95d4:	b084      	sub	sp, #16
    95d6:	9002      	str	r0, [sp, #8]
    95d8:	9003      	str	r0, [sp, #12]
    95da:	f000 f881 	bl	96e0 <_ZN16embassy_executor3raw7TaskRef8from_ptr17he7e62cf205c9325bE>
    95de:	b004      	add	sp, #16
    95e0:	bd80      	pop	{r7, pc}

000095e2 <_ZN16embassy_executor3raw5state6locked17h3168074fc605358fE>:
pub(crate) fn locked<R>(f: impl FnOnce(Token) -> R) -> R {
    95e2:	b580      	push	{r7, lr}
    95e4:	466f      	mov	r7, sp
    95e6:	b082      	sub	sp, #8
    95e8:	9000      	str	r0, [sp, #0]
    95ea:	9101      	str	r1, [sp, #4]
    f(Token(()))
    95ec:	f000 f8d8 	bl	97a0 <_ZN16embassy_executor3raw12SyncExecutor5spawn28_$u7b$$u7b$closure$u7d$$u7d$17h3fa3be20c3ec9ee5E>
}
    95f0:	b002      	add	sp, #8
    95f2:	bd80      	pop	{r7, pc}

000095f4 <_ZN16embassy_executor3raw5state6locked17hff93f10e0f260cb6E>:
pub(crate) fn locked<R>(f: impl FnOnce(Token) -> R) -> R {
    95f4:	b580      	push	{r7, lr}
    95f6:	466f      	mov	r7, sp
    95f8:	b082      	sub	sp, #8
    95fa:	9000      	str	r0, [sp, #0]
    95fc:	9101      	str	r1, [sp, #4]
    f(Token(()))
    95fe:	f000 f978 	bl	98f2 <_ZN16embassy_executor3raw9wake_task28_$u7b$$u7b$closure$u7d$$u7d$17hb86b8469d7f90ed9E>
}
    9602:	b002      	add	sp, #8
    9604:	bd80      	pop	{r7, pc}

00009606 <_ZN16embassy_executor3raw5state5State6as_u3217h2de4fd4b41425cedE>:
    fn as_u32(&self) -> &AtomicU32 {
    9606:	b580      	push	{r7, lr}
    9608:	466f      	mov	r7, sp
    960a:	b081      	sub	sp, #4
    960c:	9000      	str	r0, [sp, #0]
    }
    960e:	b001      	add	sp, #4
    9610:	bd80      	pop	{r7, pc}

00009612 <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3set17h3df240f58b26ea0bE>:
    pub unsafe fn set(&self, value: T) {
    9612:	b580      	push	{r7, lr}
    9614:	466f      	mov	r7, sp
    9616:	b083      	sub	sp, #12
    9618:	9000      	str	r0, [sp, #0]
    961a:	9101      	str	r1, [sp, #4]
    961c:	9002      	str	r0, [sp, #8]
        *self.value.get() = value;
    961e:	6001      	str	r1, [r0, #0]
    }
    9620:	b003      	add	sp, #12
    9622:	bd80      	pop	{r7, pc}

00009624 <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3get17h479d6e9d4e32169dE>:

    pub unsafe fn get(&self) -> T
    9624:	b580      	push	{r7, lr}
    9626:	466f      	mov	r7, sp
    9628:	b082      	sub	sp, #8
    962a:	9000      	str	r0, [sp, #0]
    962c:	9001      	str	r0, [sp, #4]
    where
        T: Copy,
    {
        *self.value.get()
    962e:	6800      	ldr	r0, [r0, #0]
    }
    9630:	b002      	add	sp, #8
    9632:	bd80      	pop	{r7, pc}

00009634 <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3get17he1def9ecccc0596aE>:
    pub unsafe fn get(&self) -> T
    9634:	b580      	push	{r7, lr}
    9636:	466f      	mov	r7, sp
    9638:	b082      	sub	sp, #8
    963a:	9000      	str	r0, [sp, #0]
    963c:	9001      	str	r0, [sp, #4]
        *self.value.get()
    963e:	6800      	ldr	r0, [r0, #0]
    }
    9640:	b002      	add	sp, #8
    9642:	bd80      	pop	{r7, pc}

00009644 <_ZN16embassy_executor3raw5waker5clone17hc3c5b7225760eecbE>:

use super::{wake_task, TaskHeader, TaskRef};

static VTABLE: RawWakerVTable = RawWakerVTable::new(clone, wake, wake, drop);

unsafe fn clone(p: *const ()) -> RawWaker {
    9644:	b580      	push	{r7, lr}
    9646:	466f      	mov	r7, sp
    9648:	b082      	sub	sp, #8
    964a:	9001      	str	r0, [sp, #4]
    RawWaker::new(p, &VTABLE)
    964c:	f24e 21d0 	movw	r1, #58064	@ 0xe2d0
    9650:	f2c0 0100 	movt	r1, #0
    9654:	f7ff fe85 	bl	9362 <_ZN4core4task4wake8RawWaker3new17hdc549fe110245ae2E>
}
    9658:	b002      	add	sp, #8
    965a:	bd80      	pop	{r7, pc}

0000965c <_ZN16embassy_executor3raw5waker4wake17hfe5c171341270fadE>:

unsafe fn wake(p: *const ()) {
    965c:	b580      	push	{r7, lr}
    965e:	466f      	mov	r7, sp
    9660:	b082      	sub	sp, #8
    9662:	9001      	str	r0, [sp, #4]
    wake_task(TaskRef::from_ptr(p as *const TaskHeader))
    9664:	f000 f83c 	bl	96e0 <_ZN16embassy_executor3raw7TaskRef8from_ptr17he7e62cf205c9325bE>
    9668:	f000 f911 	bl	988e <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE>
}
    966c:	b002      	add	sp, #8
    966e:	bd80      	pop	{r7, pc}

00009670 <_ZN16embassy_executor3raw5waker4drop17h5d1f402ef190d1c7E>:

unsafe fn drop(_: *const ()) {
    9670:	b580      	push	{r7, lr}
    9672:	466f      	mov	r7, sp
    9674:	b081      	sub	sp, #4
    9676:	9000      	str	r0, [sp, #0]
    // nop
}
    9678:	b001      	add	sp, #4
    967a:	bd80      	pop	{r7, pc}

0000967c <_ZN16embassy_executor3raw5waker9from_task17hf8dbfc94448a63d2E>:

pub(crate) unsafe fn from_task(p: TaskRef) -> Waker {
    967c:	b580      	push	{r7, lr}
    967e:	466f      	mov	r7, sp
    9680:	b082      	sub	sp, #8
    9682:	9001      	str	r0, [sp, #4]
    Waker::from_raw(RawWaker::new(p.as_ptr() as _, &VTABLE))
    9684:	f000 f84b 	bl	971e <_ZN16embassy_executor3raw7TaskRef6as_ptr17h4e14071552633612E>
    9688:	f24e 21d0 	movw	r1, #58064	@ 0xe2d0
    968c:	f2c0 0100 	movt	r1, #0
    9690:	f7ff fe67 	bl	9362 <_ZN4core4task4wake8RawWaker3new17hdc549fe110245ae2E>
    9694:	f7ff fe5e 	bl	9354 <_ZN4core4task4wake5Waker8from_raw17h1a0c16eb477569e1E>
}
    9698:	b002      	add	sp, #8
    969a:	bd80      	pop	{r7, pc}

0000969c <_ZN16embassy_executor3raw5waker15task_from_waker17h12439a98522045fbE>:
/// You can use the returned task pointer to wake the task with [`wake_task`](super::wake_task).
///
/// # Panics
///
/// Panics if the waker is not created by the Embassy executor.
pub fn task_from_waker(waker: &Waker) -> TaskRef {
    969c:	b580      	push	{r7, lr}
    969e:	466f      	mov	r7, sp
    96a0:	b084      	sub	sp, #16
    96a2:	9001      	str	r0, [sp, #4]
    96a4:	9003      	str	r0, [sp, #12]
    // make sure to compare vtable addresses. Doing `==` on the references
    // will compare the contents, which is slower.
    if waker.vtable() as *const _ != &VTABLE as *const _ {
    96a6:	f7ff fe4e 	bl	9346 <_ZN4core4task4wake5Waker6vtable17he794e2b910751fe7E>
    96aa:	f24e 21d0 	movw	r1, #58064	@ 0xe2d0
    96ae:	f2c0 0100 	movt	r1, #0
    96b2:	4288      	cmp	r0, r1
    96b4:	d107      	bne.n	96c6 <_ZN16embassy_executor3raw5waker15task_from_waker17h12439a98522045fbE+0x2a>
    96b6:	e7ff      	b.n	96b8 <_ZN16embassy_executor3raw5waker15task_from_waker17h12439a98522045fbE+0x1c>
        panic!("Found waker not created by the Embassy executor. `embassy_time::Timer` only works with the Embassy executor.")
    }
    // safety: our wakers are always created with `TaskRef::as_ptr`
    unsafe { TaskRef::from_ptr(waker.data() as *const TaskHeader) }
    96b8:	9801      	ldr	r0, [sp, #4]
    96ba:	f7ff fe3d 	bl	9338 <_ZN4core4task4wake5Waker4data17hf1388a8c4e3687d3E>
    96be:	f000 f80f 	bl	96e0 <_ZN16embassy_executor3raw7TaskRef8from_ptr17he7e62cf205c9325bE>
}
    96c2:	b004      	add	sp, #16
    96c4:	bd80      	pop	{r7, pc}
        panic!("Found waker not created by the Embassy executor. `embassy_time::Timer` only works with the Embassy executor.")
    96c6:	f240 0008 	movw	r0, #8
    96ca:	f2c0 0000 	movt	r0, #0
    96ce:	f000 fb88 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    96d2:	f827 0c06 	strh.w	r0, [r7, #-6]
    96d6:	1fb8      	subs	r0, r7, #6
    96d8:	f000 fbf2 	bl	9ec0 <_ZN5defmt6export26acquire_header_and_release17h7ce8ef2ffd00dd1bE>
    unsafe { _defmt_panic() }
    96dc:	f000 fc20 	bl	9f20 <__defmt_default_panic>

000096e0 <_ZN16embassy_executor3raw7TaskRef8from_ptr17he7e62cf205c9325bE>:
    pub(crate) unsafe fn from_ptr(ptr: *const TaskHeader) -> Self {
    96e0:	b580      	push	{r7, lr}
    96e2:	466f      	mov	r7, sp
    96e4:	b082      	sub	sp, #8
    96e6:	9001      	str	r0, [sp, #4]
            ptr: NonNull::new_unchecked(ptr as *mut TaskHeader),
    96e8:	f7fe fff8 	bl	86dc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haa5f16f4f157b762E>
    }
    96ec:	b002      	add	sp, #8
    96ee:	bd80      	pop	{r7, pc}

000096f0 <_ZN16embassy_executor3raw7TaskRef8dangling17he46ac951e1b89cdcE>:
    pub const unsafe fn dangling() -> Self {
    96f0:	b580      	push	{r7, lr}
    96f2:	466f      	mov	r7, sp
            ptr: NonNull::dangling(),
    96f4:	f7ff f823 	bl	873e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$8dangling17h57c68de6288a128dE>
    }
    96f8:	bd80      	pop	{r7, pc}

000096fa <_ZN16embassy_executor3raw7TaskRef6header17hd12d56945c9aeeb8E>:
    pub(crate) fn header(self) -> &'static TaskHeader {
    96fa:	b580      	push	{r7, lr}
    96fc:	466f      	mov	r7, sp
    96fe:	b082      	sub	sp, #8
    9700:	9000      	str	r0, [sp, #0]
    9702:	4668      	mov	r0, sp
    9704:	9001      	str	r0, [sp, #4]
        unsafe { &*self.as_ptr().cast_const() }
    9706:	9800      	ldr	r0, [sp, #0]
    }
    9708:	b002      	add	sp, #8
    970a:	bd80      	pop	{r7, pc}

0000970c <_ZN16embassy_executor3raw7TaskRef16timer_queue_item17hf5744ba05b232187E>:
    pub fn timer_queue_item(&self) -> &'static timer_queue::TimerQueueItem {
    970c:	b580      	push	{r7, lr}
    970e:	466f      	mov	r7, sp
    9710:	b082      	sub	sp, #8
    9712:	9001      	str	r0, [sp, #4]
        &self.header().timer_queue_item
    9714:	6800      	ldr	r0, [r0, #0]
    9716:	f7ff fff0 	bl	96fa <_ZN16embassy_executor3raw7TaskRef6header17hd12d56945c9aeeb8E>
    }
    971a:	b002      	add	sp, #8
    971c:	bd80      	pop	{r7, pc}

0000971e <_ZN16embassy_executor3raw7TaskRef6as_ptr17h4e14071552633612E>:
    pub(crate) fn as_ptr(self) -> *const TaskHeader {
    971e:	b580      	push	{r7, lr}
    9720:	466f      	mov	r7, sp
    9722:	b082      	sub	sp, #8
    9724:	9000      	str	r0, [sp, #0]
    9726:	9001      	str	r0, [sp, #4]
    }
    9728:	b002      	add	sp, #8
    972a:	bd80      	pop	{r7, pc}

0000972c <_ZN16embassy_executor3raw11poll_exited17hfd5b40237e42c657E>:
unsafe fn poll_exited(_p: TaskRef) {
    972c:	b580      	push	{r7, lr}
    972e:	466f      	mov	r7, sp
    9730:	b081      	sub	sp, #4
    9732:	9000      	str	r0, [sp, #0]
}
    9734:	b001      	add	sp, #4
    9736:	bd80      	pop	{r7, pc}

00009738 <_ZN16embassy_executor3raw6Pender4pend17h1a40b965e4cfde3fE>:

unsafe impl Send for Pender {}
unsafe impl Sync for Pender {}

impl Pender {
    pub(crate) fn pend(self) {
    9738:	b580      	push	{r7, lr}
    973a:	466f      	mov	r7, sp
    973c:	b082      	sub	sp, #8
    973e:	9001      	str	r0, [sp, #4]
        extern "Rust" {
            fn __pender(context: *mut ());
        }
        unsafe { __pender(self.0) };
    9740:	f7ff fe98 	bl	9474 <__pender>
    }
    9744:	b002      	add	sp, #8
    9746:	bd80      	pop	{r7, pc}

00009748 <_ZN16embassy_executor3raw12SyncExecutor3new17he9cd83bbdee3c62fE>:
    run_queue: RunQueue,
    pender: Pender,
}

impl SyncExecutor {
    pub(crate) fn new(pender: Pender) -> Self {
    9748:	b580      	push	{r7, lr}
    974a:	466f      	mov	r7, sp
    974c:	b086      	sub	sp, #24
    974e:	9101      	str	r1, [sp, #4]
    9750:	9002      	str	r0, [sp, #8]
    9752:	9104      	str	r1, [sp, #16]
        Self {
            run_queue: RunQueue::new(),
    9754:	f7ff febb 	bl	94ce <_ZN16embassy_executor3raw9run_queue8RunQueue3new17h640c60947bf54114E>
    9758:	9901      	ldr	r1, [sp, #4]
    975a:	4602      	mov	r2, r0
    975c:	9802      	ldr	r0, [sp, #8]
    975e:	9205      	str	r2, [sp, #20]
    9760:	9a05      	ldr	r2, [sp, #20]
    9762:	9203      	str	r2, [sp, #12]
        Self {
    9764:	9a03      	ldr	r2, [sp, #12]
    9766:	6002      	str	r2, [r0, #0]
    9768:	6041      	str	r1, [r0, #4]
            pender,
        }
    }
    976a:	b006      	add	sp, #24
    976c:	bd80      	pop	{r7, pc}

0000976e <_ZN16embassy_executor3raw12SyncExecutor5spawn17h5709113c7670fb89E>:
        if self.run_queue.enqueue(task, l) {
            self.pender.pend();
        }
    }

    pub(super) unsafe fn spawn(&'static self, task: TaskRef) {
    976e:	b580      	push	{r7, lr}
    9770:	466f      	mov	r7, sp
    9772:	b086      	sub	sp, #24
    9774:	9001      	str	r0, [sp, #4]
    9776:	9102      	str	r1, [sp, #8]
    9778:	9004      	str	r0, [sp, #16]
        task.header()
    977a:	9802      	ldr	r0, [sp, #8]
    977c:	f7ff ffbd 	bl	96fa <_ZN16embassy_executor3raw7TaskRef6header17hd12d56945c9aeeb8E>
    9780:	9901      	ldr	r1, [sp, #4]
    9782:	3018      	adds	r0, #24
    9784:	9105      	str	r1, [sp, #20]
    9786:	2200      	movs	r2, #0
            .executor
            .store((self as *const Self).cast_mut(), Ordering::Relaxed);
    9788:	f807 2c09 	strb.w	r2, [r7, #-9]
        task.header()
    978c:	f817 2c09 	ldrb.w	r2, [r7, #-9]
    9790:	f7ff fb99 	bl	8ec6 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hadc1ddd897cd6c18E>
    9794:	9801      	ldr	r0, [sp, #4]
    9796:	a902      	add	r1, sp, #8

        #[cfg(feature = "trace")]
        trace::task_new(self, &task);

        state::locked(|l| {
    9798:	f7ff ff23 	bl	95e2 <_ZN16embassy_executor3raw5state6locked17h3168074fc605358fE>
            self.enqueue(task, l);
        })
    }
    979c:	b006      	add	sp, #24
    979e:	bd80      	pop	{r7, pc}

000097a0 <_ZN16embassy_executor3raw12SyncExecutor5spawn28_$u7b$$u7b$closure$u7d$$u7d$17h3fa3be20c3ec9ee5E>:
        state::locked(|l| {
    97a0:	b580      	push	{r7, lr}
    97a2:	466f      	mov	r7, sp
    97a4:	b08a      	sub	sp, #40	@ 0x28
    97a6:	9002      	str	r0, [sp, #8]
    97a8:	9103      	str	r1, [sp, #12]
            self.enqueue(task, l);
    97aa:	9802      	ldr	r0, [sp, #8]
    97ac:	9001      	str	r0, [sp, #4]
    97ae:	9903      	ldr	r1, [sp, #12]
    97b0:	6809      	ldr	r1, [r1, #0]
    97b2:	9005      	str	r0, [sp, #20]
    97b4:	9106      	str	r1, [sp, #24]
    97b6:	9107      	str	r1, [sp, #28]
    97b8:	9009      	str	r0, [sp, #36]	@ 0x24
    97ba:	2100      	movs	r1, #0
        let mut was_empty = false;
    97bc:	f807 1c07 	strb.w	r1, [r7, #-7]
    97c0:	2104      	movs	r1, #4
            .fetch_update(Ordering::SeqCst, Ordering::SeqCst, |prev| {
    97c2:	f807 1c06 	strb.w	r1, [r7, #-6]
    97c6:	f807 1c05 	strb.w	r1, [r7, #-5]
        self.head
    97ca:	f817 2c05 	ldrb.w	r2, [r7, #-5]
    97ce:	f817 1c06 	ldrb.w	r1, [r7, #-6]
    97d2:	46ec      	mov	ip, sp
    97d4:	ab07      	add	r3, sp, #28
    97d6:	f8cc 3000 	str.w	r3, [ip]
    97da:	1ffb      	subs	r3, r7, #7
    97dc:	f7ff fa5b 	bl	8c96 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE>
    97e0:	f7ff fe0d 	bl	93fe <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE>
        was_empty
    97e4:	f817 0c07 	ldrb.w	r0, [r7, #-7]
        if self.run_queue.enqueue(task, l) {
    97e8:	07c0      	lsls	r0, r0, #31
    97ea:	b128      	cbz	r0, 97f8 <_ZN16embassy_executor3raw12SyncExecutor5spawn28_$u7b$$u7b$closure$u7d$$u7d$17h3fa3be20c3ec9ee5E+0x58>
    97ec:	e7ff      	b.n	97ee <_ZN16embassy_executor3raw12SyncExecutor5spawn28_$u7b$$u7b$closure$u7d$$u7d$17h3fa3be20c3ec9ee5E+0x4e>
            self.pender.pend();
    97ee:	9801      	ldr	r0, [sp, #4]
    97f0:	6840      	ldr	r0, [r0, #4]
    97f2:	f7ff ffa1 	bl	9738 <_ZN16embassy_executor3raw6Pender4pend17h1a40b965e4cfde3fE>
    97f6:	e7ff      	b.n	97f8 <_ZN16embassy_executor3raw12SyncExecutor5spawn28_$u7b$$u7b$closure$u7d$$u7d$17h3fa3be20c3ec9ee5E+0x58>
        })
    97f8:	b00a      	add	sp, #40	@ 0x28
    97fa:	bd80      	pop	{r7, pc}

000097fc <_ZN16embassy_executor3raw12SyncExecutor4poll17h1648c9abe771619cE>:

    /// # Safety
    ///
    /// Same as [`Executor::poll`], plus you must only call this on the thread this executor was created.
    pub(crate) unsafe fn poll(&'static self) {
    97fc:	b580      	push	{r7, lr}
    97fe:	466f      	mov	r7, sp
    9800:	b082      	sub	sp, #8
    9802:	9001      	str	r0, [sp, #4]
        self.run_queue.dequeue_all(|p| {
    9804:	f7ff fea6 	bl	9554 <_ZN16embassy_executor3raw9run_queue8RunQueue11dequeue_all17h13ad6b04b80f1405E>
            trace::task_exec_end(self, &p);
        });

        #[cfg(feature = "trace")]
        trace::executor_idle(self)
    }
    9808:	b002      	add	sp, #8
    980a:	bd80      	pop	{r7, pc}

0000980c <_ZN16embassy_executor3raw12SyncExecutor4poll28_$u7b$$u7b$closure$u7d$$u7d$17hf6b41a7c911f0e0bE>:
        self.run_queue.dequeue_all(|p| {
    980c:	b580      	push	{r7, lr}
    980e:	466f      	mov	r7, sp
    9810:	b084      	sub	sp, #16
    9812:	9100      	str	r1, [sp, #0]
    9814:	4601      	mov	r1, r0
    9816:	9800      	ldr	r0, [sp, #0]
    9818:	9101      	str	r1, [sp, #4]
    981a:	9002      	str	r0, [sp, #8]
            let task = p.header();
    981c:	f7ff ff6d 	bl	96fa <_ZN16embassy_executor3raw7TaskRef6header17hd12d56945c9aeeb8E>
    9820:	9003      	str	r0, [sp, #12]
            task.poll_fn.get().unwrap_unchecked()(p);
    9822:	301c      	adds	r0, #28
    9824:	f7ff fefe 	bl	9624 <_ZN16embassy_executor3raw4util23SyncUnsafeCell$LT$T$GT$3get17h479d6e9d4e32169dE>
    9828:	f24e 3150 	movw	r1, #58192	@ 0xe350
    982c:	f2c0 0100 	movt	r1, #0
    9830:	f7ff fdb0 	bl	9394 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h4693fae279ff0dcbE>
    9834:	4601      	mov	r1, r0
    9836:	9800      	ldr	r0, [sp, #0]
    9838:	4788      	blx	r1
        });
    983a:	b004      	add	sp, #16
    983c:	bd80      	pop	{r7, pc}

0000983e <_ZN16embassy_executor3raw8Executor3new17h81cd4d5b68eae0dbE>:
    /// Create a new executor.
    ///
    /// When the executor has work to do, it will call the pender function and pass `context` to it.
    ///
    /// See [`Executor`] docs for details on the pender.
    pub fn new(context: *mut ()) -> Self {
    983e:	b580      	push	{r7, lr}
    9840:	466f      	mov	r7, sp
    9842:	b084      	sub	sp, #16
    9844:	9000      	str	r0, [sp, #0]
    9846:	9103      	str	r1, [sp, #12]
    9848:	a801      	add	r0, sp, #4
        Self {
            inner: SyncExecutor::new(Pender(context)),
    984a:	f7ff ff7d 	bl	9748 <_ZN16embassy_executor3raw12SyncExecutor3new17he9cd83bbdee3c62fE>
    984e:	9900      	ldr	r1, [sp, #0]
        Self {
    9850:	9801      	ldr	r0, [sp, #4]
    9852:	9a02      	ldr	r2, [sp, #8]
    9854:	604a      	str	r2, [r1, #4]
    9856:	6008      	str	r0, [r1, #0]
            _not_sync: PhantomData,
        }
    }
    9858:	b004      	add	sp, #16
    985a:	bd80      	pop	{r7, pc}

0000985c <_ZN16embassy_executor3raw8Executor5spawn17h8099ca7172178bb6E>:
    /// `task` must be a valid pointer to an initialized but not-already-spawned task.
    ///
    /// It is OK to use `unsafe` to call this from a thread that's not the executor thread.
    /// In this case, the task's Future must be Send. This is because this is effectively
    /// sending the task to the executor thread.
    pub(super) unsafe fn spawn(&'static self, task: TaskRef) {
    985c:	b580      	push	{r7, lr}
    985e:	466f      	mov	r7, sp
    9860:	b082      	sub	sp, #8
    9862:	9000      	str	r0, [sp, #0]
    9864:	9101      	str	r1, [sp, #4]
        self.inner.spawn(task)
    9866:	f7ff ff82 	bl	976e <_ZN16embassy_executor3raw12SyncExecutor5spawn17h5709113c7670fb89E>
    }
    986a:	b002      	add	sp, #8
    986c:	bd80      	pop	{r7, pc}

0000986e <_ZN16embassy_executor3raw8Executor4poll17h19375dbfb09ee3a6E>:
    ///
    /// In particular, note that `poll` may call the pender synchronously. Therefore, you
    /// must NOT directly call `poll()` from the pender callback. Instead, the callback has to
    /// somehow schedule for `poll()` to be called later, at a time you know for sure there's
    /// no `poll()` already running.
    pub unsafe fn poll(&'static self) {
    986e:	b580      	push	{r7, lr}
    9870:	466f      	mov	r7, sp
    9872:	b082      	sub	sp, #8
    9874:	9001      	str	r0, [sp, #4]
        self.inner.poll()
    9876:	f7ff ffc1 	bl	97fc <_ZN16embassy_executor3raw12SyncExecutor4poll17h1648c9abe771619cE>
    }
    987a:	b002      	add	sp, #8
    987c:	bd80      	pop	{r7, pc}

0000987e <_ZN16embassy_executor3raw8Executor7spawner17hb7e0d8e9e2724e86E>:

    /// Get a spawner that spawns tasks in this executor.
    ///
    /// It is OK to call this method multiple times to obtain multiple
    /// `Spawner`s. You may also copy `Spawner`s.
    pub fn spawner(&'static self) -> super::Spawner {
    987e:	b580      	push	{r7, lr}
    9880:	466f      	mov	r7, sp
    9882:	b082      	sub	sp, #8
    9884:	9001      	str	r0, [sp, #4]
        super::Spawner::new(self)
    9886:	f000 f875 	bl	9974 <_ZN16embassy_executor7spawner7Spawner3new17h3de6049afb2a18d6E>
    }
    988a:	b002      	add	sp, #8
    988c:	bd80      	pop	{r7, pc}

0000988e <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE>:
}

/// Wake a task by `TaskRef`.
///
/// You can obtain a `TaskRef` from a `Waker` using [`task_from_waker`].
pub fn wake_task(task: TaskRef) {
    988e:	b580      	push	{r7, lr}
    9890:	466f      	mov	r7, sp
    9892:	b088      	sub	sp, #32
    9894:	9001      	str	r0, [sp, #4]
    let header = task.header();
    9896:	9801      	ldr	r0, [sp, #4]
    9898:	f7ff ff2f 	bl	96fa <_ZN16embassy_executor3raw7TaskRef6header17hd12d56945c9aeeb8E>
    989c:	4601      	mov	r1, r0
    989e:	9100      	str	r1, [sp, #0]
    98a0:	9002      	str	r0, [sp, #8]
    header.state.run_enqueue(|l| {
    98a2:	f100 0110 	add.w	r1, r0, #16
    98a6:	9104      	str	r1, [sp, #16]
    98a8:	9005      	str	r0, [sp, #20]
    98aa:	a901      	add	r1, sp, #4
    98ac:	9106      	str	r1, [sp, #24]
    98ae:	2100      	movs	r1, #0
        let old = self.run_queued.swap(true, Ordering::AcqRel);
    98b0:	f807 1c11 	strb.w	r1, [r7, #-17]
    98b4:	2101      	movs	r1, #1
    98b6:	f807 1c11 	strb.w	r1, [r7, #-17]
    98ba:	3011      	adds	r0, #17
    98bc:	2203      	movs	r2, #3
    98be:	f807 2c12 	strb.w	r2, [r7, #-18]
    98c2:	f817 2c12 	ldrb.w	r2, [r7, #-18]
    98c6:	f7fe ff47 	bl	8758 <_ZN4core4sync6atomic10AtomicBool4swap17h23bc1585152eec94E>
    98ca:	f807 0c01 	strb.w	r0, [r7, #-1]
        if !old {
    98ce:	b940      	cbnz	r0, 98e2 <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE+0x54>
    98d0:	e7ff      	b.n	98d2 <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE+0x44>
    98d2:	9800      	ldr	r0, [sp, #0]
    98d4:	2100      	movs	r1, #0
            locked(f);
    98d6:	f807 1c11 	strb.w	r1, [r7, #-17]
    98da:	a901      	add	r1, sp, #4
    98dc:	f7ff fe8a 	bl	95f4 <_ZN16embassy_executor3raw5state6locked17hff93f10e0f260cb6E>
    98e0:	e7ff      	b.n	98e2 <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE+0x54>
    }
    98e2:	f817 0c11 	ldrb.w	r0, [r7, #-17]
    98e6:	07c0      	lsls	r0, r0, #31
    98e8:	b108      	cbz	r0, 98ee <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE+0x60>
    98ea:	e7ff      	b.n	98ec <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE+0x5e>
    98ec:	e7ff      	b.n	98ee <_ZN16embassy_executor3raw9wake_task17haa563adf7cbcfabeE+0x60>
        unsafe {
            let executor = header.executor.load(Ordering::Relaxed).as_ref().unwrap_unchecked();
            executor.enqueue(task, l);
        }
    });
}
    98ee:	b008      	add	sp, #32
    98f0:	bd80      	pop	{r7, pc}

000098f2 <_ZN16embassy_executor3raw9wake_task28_$u7b$$u7b$closure$u7d$$u7d$17hb86b8469d7f90ed9E>:
    header.state.run_enqueue(|l| {
    98f2:	b580      	push	{r7, lr}
    98f4:	466f      	mov	r7, sp
    98f6:	b08c      	sub	sp, #48	@ 0x30
    98f8:	9003      	str	r0, [sp, #12]
    98fa:	9104      	str	r1, [sp, #16]
            let executor = header.executor.load(Ordering::Relaxed).as_ref().unwrap_unchecked();
    98fc:	9803      	ldr	r0, [sp, #12]
    98fe:	3018      	adds	r0, #24
    9900:	2100      	movs	r1, #0
    9902:	9101      	str	r1, [sp, #4]
    9904:	f807 1c1b 	strb.w	r1, [r7, #-27]
    9908:	f817 1c1b 	ldrb.w	r1, [r7, #-27]
    990c:	f7ff fa17 	bl	8d3e <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17h0c708234ebce0a48E>
    9910:	f7fe fecb 	bl	86aa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17hf2abadbcae1fe544E>
    9914:	f24e 3160 	movw	r1, #58208	@ 0xe360
    9918:	f2c0 0100 	movt	r1, #0
    991c:	f7ff fd2b 	bl	9376 <_ZN4core6option15Option$LT$T$GT$16unwrap_unchecked17h1f9e56b18fa314dbE>
    9920:	9901      	ldr	r1, [sp, #4]
    9922:	4602      	mov	r2, r0
    9924:	9202      	str	r2, [sp, #8]
    9926:	9006      	str	r0, [sp, #24]
            executor.enqueue(task, l);
    9928:	9a04      	ldr	r2, [sp, #16]
    992a:	6812      	ldr	r2, [r2, #0]
    992c:	9007      	str	r0, [sp, #28]
    992e:	9208      	str	r2, [sp, #32]
    9930:	9209      	str	r2, [sp, #36]	@ 0x24
    9932:	900b      	str	r0, [sp, #44]	@ 0x2c
        let mut was_empty = false;
    9934:	f807 1c07 	strb.w	r1, [r7, #-7]
    9938:	2104      	movs	r1, #4
            .fetch_update(Ordering::SeqCst, Ordering::SeqCst, |prev| {
    993a:	f807 1c06 	strb.w	r1, [r7, #-6]
    993e:	f807 1c05 	strb.w	r1, [r7, #-5]
        self.head
    9942:	f817 2c05 	ldrb.w	r2, [r7, #-5]
    9946:	f817 1c06 	ldrb.w	r1, [r7, #-6]
    994a:	46ec      	mov	ip, sp
    994c:	ab09      	add	r3, sp, #36	@ 0x24
    994e:	f8cc 3000 	str.w	r3, [ip]
    9952:	1ffb      	subs	r3, r7, #7
    9954:	f7ff f99f 	bl	8c96 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$12fetch_update17h2e8e6083c56eaf3aE>
    9958:	f7ff fd51 	bl	93fe <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9b73cde2f1bbd24fE>
        was_empty
    995c:	f817 0c07 	ldrb.w	r0, [r7, #-7]
        if self.run_queue.enqueue(task, l) {
    9960:	07c0      	lsls	r0, r0, #31
    9962:	b128      	cbz	r0, 9970 <_ZN16embassy_executor3raw9wake_task28_$u7b$$u7b$closure$u7d$$u7d$17hb86b8469d7f90ed9E+0x7e>
    9964:	e7ff      	b.n	9966 <_ZN16embassy_executor3raw9wake_task28_$u7b$$u7b$closure$u7d$$u7d$17hb86b8469d7f90ed9E+0x74>
            self.pender.pend();
    9966:	9802      	ldr	r0, [sp, #8]
    9968:	6840      	ldr	r0, [r0, #4]
    996a:	f7ff fee5 	bl	9738 <_ZN16embassy_executor3raw6Pender4pend17h1a40b965e4cfde3fE>
    996e:	e7ff      	b.n	9970 <_ZN16embassy_executor3raw9wake_task28_$u7b$$u7b$closure$u7d$$u7d$17hb86b8469d7f90ed9E+0x7e>
    });
    9970:	b00c      	add	sp, #48	@ 0x30
    9972:	bd80      	pop	{r7, pc}

00009974 <_ZN16embassy_executor7spawner7Spawner3new17h3de6049afb2a18d6E>:
    pub(crate) fn new(executor: &'static raw::Executor) -> Self {
    9974:	b580      	push	{r7, lr}
    9976:	466f      	mov	r7, sp
    9978:	b081      	sub	sp, #4
    997a:	9000      	str	r0, [sp, #0]
    }
    997c:	b001      	add	sp, #4
    997e:	bd80      	pop	{r7, pc}

00009980 <_ZN79_$LT$embassy_executor..spawner..SpawnError$u20$as$u20$defmt..traits..Format$GT$11_format_tag17hb60d30816bd64b53E>:
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
    9980:	b580      	push	{r7, lr}
    9982:	466f      	mov	r7, sp
    9984:	f240 0011 	movw	r0, #17
    9988:	f2c0 0000 	movt	r0, #0
    998c:	f000 fa29 	bl	9de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>
    9990:	bd80      	pop	{r7, pc}

00009992 <_ZN79_$LT$embassy_executor..spawner..SpawnError$u20$as$u20$defmt..traits..Format$GT$12_format_data17ha405255581f7b4d4E>:
    9992:	b580      	push	{r7, lr}
    9994:	466f      	mov	r7, sp
    9996:	b081      	sub	sp, #4
    9998:	9000      	str	r0, [sp, #0]
    999a:	b001      	add	sp, #4
    999c:	bd80      	pop	{r7, pc}

0000999e <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h36c959551a7cc780E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    999e:	b580      	push	{r7, lr}
    99a0:	466f      	mov	r7, sp
    99a2:	b082      	sub	sp, #8
    99a4:	4602      	mov	r2, r0
    99a6:	9200      	str	r2, [sp, #0]
    99a8:	9101      	str	r1, [sp, #4]
    99aa:	6810      	ldr	r0, [r2, #0]
    99ac:	6852      	ldr	r2, [r2, #4]
    99ae:	68d2      	ldr	r2, [r2, #12]
    99b0:	4790      	blx	r2
    99b2:	b002      	add	sp, #8
    99b4:	bd80      	pop	{r7, pc}

000099b6 <_ZN4core3fmt2rt8Argument11new_display17h3fe7ab214a2e6d9bE>:
            },
        }
    }

    #[inline]
    pub fn new_display<T: Display>(x: &T) -> Argument<'_> {
    99b6:	b580      	push	{r7, lr}
    99b8:	466f      	mov	r7, sp
    99ba:	b084      	sub	sp, #16
    99bc:	9100      	str	r1, [sp, #0]
    99be:	4601      	mov	r1, r0
    99c0:	9800      	ldr	r0, [sp, #0]
    99c2:	9003      	str	r0, [sp, #12]
            ty: ArgumentType::Placeholder {
    99c4:	9001      	str	r0, [sp, #4]
    99c6:	f649 109f 	movw	r0, #39327	@ 0x999f
    99ca:	f2c0 0000 	movt	r0, #0
    99ce:	9002      	str	r0, [sp, #8]
        Argument {
    99d0:	9801      	ldr	r0, [sp, #4]
    99d2:	9a02      	ldr	r2, [sp, #8]
    99d4:	604a      	str	r2, [r1, #4]
    99d6:	6008      	str	r0, [r1, #0]
        Self::new(x, Display::fmt)
    }
    99d8:	b004      	add	sp, #16
    99da:	bd80      	pop	{r7, pc}

000099dc <_ZN4core3fmt5Write10write_char17hb4d231858ec0b709E>:
    fn write_char(&mut self, c: char) -> Result {
    99dc:	b580      	push	{r7, lr}
    99de:	466f      	mov	r7, sp
    99e0:	b08a      	sub	sp, #40	@ 0x28
    99e2:	9100      	str	r1, [sp, #0]
    99e4:	4601      	mov	r1, r0
    99e6:	9800      	ldr	r0, [sp, #0]
    99e8:	9101      	str	r1, [sp, #4]
    99ea:	9104      	str	r1, [sp, #16]
    99ec:	9005      	str	r0, [sp, #20]
    99ee:	2100      	movs	r1, #0
        self.write_str(c.encode_utf8(&mut [0; MAX_LEN_UTF8]))
    99f0:	9103      	str	r1, [sp, #12]
    99f2:	a903      	add	r1, sp, #12
    99f4:	9106      	str	r1, [sp, #24]
    99f6:	2204      	movs	r2, #4
    99f8:	9207      	str	r2, [sp, #28]
    #[stable(feature = "unicode_encode_char", since = "1.15.0")]
    #[rustc_const_stable(feature = "const_char_encode_utf8", since = "1.83.0")]
    #[inline]
    pub const fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
        // SAFETY: `char` is not a surrogate, so this is valid UTF-8.
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
    99fa:	f000 f852 	bl	9aa2 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE>
    99fe:	4602      	mov	r2, r0
    9a00:	9801      	ldr	r0, [sp, #4]
    9a02:	9202      	str	r2, [sp, #8]
    9a04:	460a      	mov	r2, r1
    9a06:	9902      	ldr	r1, [sp, #8]
    9a08:	9108      	str	r1, [sp, #32]
    9a0a:	9209      	str	r2, [sp, #36]	@ 0x24
    9a0c:	f000 fa6a 	bl	9ee4 <_ZN60_$LT$defmt..export..FmtWrite$u20$as$u20$core..fmt..Write$GT$9write_str17h0af068b63453b811E>
    }
    9a10:	b00a      	add	sp, #40	@ 0x28
    9a12:	bd80      	pop	{r7, pc}

00009a14 <_ZN4core3fmt5Write9write_fmt17hd242372d8b039474E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
    9a14:	b580      	push	{r7, lr}
    9a16:	466f      	mov	r7, sp
    9a18:	b082      	sub	sp, #8
    9a1a:	9001      	str	r0, [sp, #4]
        self.spec_write_fmt(args)
    9a1c:	f000 f96b 	bl	9cf6 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E>
    }
    9a20:	b002      	add	sp, #8
    9a22:	bd80      	pop	{r7, pc}

00009a24 <_ZN4core3fmt9Arguments6new_v117h831b19bba454c7e5E>:
    pub const fn new_v1<const P: usize, const A: usize>(
    9a24:	b580      	push	{r7, lr}
    9a26:	466f      	mov	r7, sp
    9a28:	b083      	sub	sp, #12
    9a2a:	9100      	str	r1, [sp, #0]
    9a2c:	4601      	mov	r1, r0
    9a2e:	9800      	ldr	r0, [sp, #0]
    9a30:	9001      	str	r0, [sp, #4]
    9a32:	9202      	str	r2, [sp, #8]
        Arguments { pieces, fmt: None, args }
    9a34:	6008      	str	r0, [r1, #0]
    9a36:	2001      	movs	r0, #1
    9a38:	6048      	str	r0, [r1, #4]
    9a3a:	f64b 7348 	movw	r3, #48968	@ 0xbf48
    9a3e:	f2c0 0300 	movt	r3, #0
    9a42:	f8d3 c000 	ldr.w	ip, [r3]
    9a46:	685b      	ldr	r3, [r3, #4]
    9a48:	f8c1 c010 	str.w	ip, [r1, #16]
    9a4c:	614b      	str	r3, [r1, #20]
    9a4e:	608a      	str	r2, [r1, #8]
    9a50:	60c8      	str	r0, [r1, #12]
    }
    9a52:	b003      	add	sp, #12
    9a54:	bd80      	pop	{r7, pc}

00009a56 <_ZN4core3num21_$LT$impl$u20$u16$GT$11to_le_bytes17h777a07ff0b507e2bE>:
        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        pub const fn to_le_bytes(self) -> [u8; size_of::<Self>()] {
    9a56:	b580      	push	{r7, lr}
    9a58:	466f      	mov	r7, sp
    9a5a:	b081      	sub	sp, #4
    9a5c:	f827 0c02 	strh.w	r0, [r7, #-2]
        // transmute them to arrays of bytes
        #[inline]
        pub const fn to_ne_bytes(self) -> [u8; size_of::<Self>()] {
            // SAFETY: integers are plain old datatypes so we can always transmute them to
            // arrays of bytes
            unsafe { mem::transmute(self) }
    9a60:	f8ad 0000 	strh.w	r0, [sp]
        }
    9a64:	f8bd 0000 	ldrh.w	r0, [sp]
    9a68:	b001      	add	sp, #4
    9a6a:	bd80      	pop	{r7, pc}

00009a6c <_ZN4core3num21_$LT$impl$u20$u32$GT$11to_le_bytes17h92e3e95e8454dab3E>:
        pub const fn to_le_bytes(self) -> [u8; size_of::<Self>()] {
    9a6c:	b580      	push	{r7, lr}
    9a6e:	466f      	mov	r7, sp
    9a70:	b082      	sub	sp, #8
    9a72:	9001      	str	r0, [sp, #4]
            unsafe { mem::transmute(self) }
    9a74:	9000      	str	r0, [sp, #0]
        }
    9a76:	9800      	ldr	r0, [sp, #0]
    9a78:	b002      	add	sp, #8
    9a7a:	bd80      	pop	{r7, pc}

00009a7c <_ZN4core3num21_$LT$impl$u20$u64$GT$11to_le_bytes17hf9dc4b5b09d7c1e6E>:
        pub const fn to_le_bytes(self) -> [u8; size_of::<Self>()] {
    9a7c:	b580      	push	{r7, lr}
    9a7e:	466f      	mov	r7, sp
    9a80:	b082      	sub	sp, #8
    9a82:	9301      	str	r3, [sp, #4]
    9a84:	9200      	str	r2, [sp, #0]
            unsafe { mem::transmute(self) }
    9a86:	6043      	str	r3, [r0, #4]
    9a88:	6002      	str	r2, [r0, #0]
        }
    9a8a:	b002      	add	sp, #8
    9a8c:	bd80      	pop	{r7, pc}

00009a8e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h693a289ffc06f9ceE>:
    pub const fn len(&self) -> usize {
    9a8e:	b580      	push	{r7, lr}
    9a90:	466f      	mov	r7, sp
    9a92:	b083      	sub	sp, #12
    9a94:	9100      	str	r1, [sp, #0]
    9a96:	4601      	mov	r1, r0
    9a98:	9800      	ldr	r0, [sp, #0]
    9a9a:	9101      	str	r1, [sp, #4]
    9a9c:	9002      	str	r0, [sp, #8]
    }
    9a9e:	b003      	add	sp, #12
    9aa0:	bd80      	pop	{r7, pc}

00009aa2 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub const fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
    9aa2:	b580      	push	{r7, lr}
    9aa4:	466f      	mov	r7, sp
    9aa6:	b096      	sub	sp, #88	@ 0x58
    9aa8:	9201      	str	r2, [sp, #4]
    9aaa:	9102      	str	r1, [sp, #8]
    9aac:	9003      	str	r0, [sp, #12]
    9aae:	9005      	str	r0, [sp, #20]
    9ab0:	9106      	str	r1, [sp, #24]
    9ab2:	9207      	str	r2, [sp, #28]
        ..MAX_ONE_B => 1,
    9ab4:	2880      	cmp	r0, #128	@ 0x80
    9ab6:	d305      	bcc.n	9ac4 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x22>
    9ab8:	e7ff      	b.n	9aba <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x18>
        ..MAX_TWO_B => 2,
    9aba:	9803      	ldr	r0, [sp, #12]
    9abc:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
    9ac0:	d30b      	bcc.n	9ada <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x38>
    9ac2:	e005      	b.n	9ad0 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x2e>
    9ac4:	9801      	ldr	r0, [sp, #4]
    9ac6:	2101      	movs	r1, #1
        ..MAX_ONE_B => 1,
    9ac8:	9104      	str	r1, [sp, #16]
    let len = len_utf8(code);
    match (len, &mut *dst) {
        (1, [a, ..]) => {
    9aca:	2800      	cmp	r0, #0
    9acc:	d167      	bne.n	9b9e <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0xfc>
    9ace:	e016      	b.n	9afe <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x5c>
        ..MAX_THREE_B => 3,
    9ad0:	9803      	ldr	r0, [sp, #12]
    9ad2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    9ad6:	d30c      	bcc.n	9af2 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x50>
    9ad8:	e005      	b.n	9ae6 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x44>
    9ada:	9801      	ldr	r0, [sp, #4]
    9adc:	2102      	movs	r1, #2
        ..MAX_TWO_B => 2,
    9ade:	9104      	str	r1, [sp, #16]
            *a = code as u8;
        }
        (2, [a, b, ..]) => {
    9ae0:	2801      	cmp	r0, #1
    9ae2:	d84d      	bhi.n	9b80 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0xde>
    9ae4:	e00b      	b.n	9afe <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x5c>
    9ae6:	9801      	ldr	r0, [sp, #4]
    9ae8:	2104      	movs	r1, #4
        _ => 4,
    9aea:	9104      	str	r1, [sp, #16]
        (3, [a, b, c, ..]) => {
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
            *c = (code & 0x3F) as u8 | TAG_CONT;
        }
        (4, [a, b, c, d, ..]) => {
    9aec:	2803      	cmp	r0, #3
    9aee:	d811      	bhi.n	9b14 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x72>
    9af0:	e005      	b.n	9afe <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x5c>
    9af2:	9801      	ldr	r0, [sp, #4]
    9af4:	2103      	movs	r1, #3
        ..MAX_THREE_B => 3,
    9af6:	9104      	str	r1, [sp, #16]
        (3, [a, b, c, ..]) => {
    9af8:	2802      	cmp	r0, #2
    9afa:	d82c      	bhi.n	9b56 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0xb4>
    9afc:	e7ff      	b.n	9afe <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x5c>
        _ => {
            const_panic!(
                "encode_utf8: buffer does not have enough bytes to encode code point",
                "encode_utf8: need {len} bytes to encode U+{code:04X} but buffer has just {dst_len}",
                code: u32 = code,
                len: usize = len,
    9afe:	9a01      	ldr	r2, [sp, #4]
    9b00:	9803      	ldr	r0, [sp, #12]
    9b02:	9904      	ldr	r1, [sp, #16]
    9b04:	9111      	str	r1, [sp, #68]	@ 0x44
                dst_len: usize = dst.len(),
    9b06:	9212      	str	r2, [sp, #72]	@ 0x48
        const_eval_select(($($val,)*), compiletime, runtime)
    9b08:	f24e 33e8 	movw	r3, #58344	@ 0xe3e8
    9b0c:	f2c0 0300 	movt	r3, #0
    9b10:	f001 fac7 	bl	b0a2 <_ZN4core4char7methods15encode_utf8_raw8do_panic7runtime17h125f10c28f518e62E>
        (4, [a, b, c, d, ..]) => {
    9b14:	9902      	ldr	r1, [sp, #8]
    9b16:	9803      	ldr	r0, [sp, #12]
    9b18:	9108      	str	r1, [sp, #32]
    9b1a:	1c4a      	adds	r2, r1, #1
    9b1c:	9209      	str	r2, [sp, #36]	@ 0x24
    9b1e:	1c8a      	adds	r2, r1, #2
    9b20:	920a      	str	r2, [sp, #40]	@ 0x28
    9b22:	1cca      	adds	r2, r1, #3
    9b24:	920b      	str	r2, [sp, #44]	@ 0x2c
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
    9b26:	0c82      	lsrs	r2, r0, #18
    9b28:	231e      	movs	r3, #30
    9b2a:	f363 02df 	bfi	r2, r3, #3, #29
    9b2e:	700a      	strb	r2, [r1, #0]
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
    9b30:	0b03      	lsrs	r3, r0, #12
    9b32:	2202      	movs	r2, #2
    9b34:	f362 139f 	bfi	r3, r2, #6, #26
    9b38:	704b      	strb	r3, [r1, #1]
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
    9b3a:	0983      	lsrs	r3, r0, #6
    9b3c:	f362 139f 	bfi	r3, r2, #6, #26
    9b40:	708b      	strb	r3, [r1, #2]
            *d = (code & 0x3F) as u8 | TAG_CONT;
    9b42:	f362 109f 	bfi	r0, r2, #6, #26
    9b46:	70c8      	strb	r0, [r1, #3]
        }
    9b48:	e7ff      	b.n	9b4a <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0xa8>
        self as *mut [T] as *mut T
    9b4a:	9802      	ldr	r0, [sp, #8]
    9b4c:	9014      	str	r0, [sp, #80]	@ 0x50
            )
        }
    };
    // SAFETY: `<&mut [u8]>::as_mut_ptr` is guaranteed to return a valid pointer and `len` has been tested to be within bounds.
    unsafe { slice::from_raw_parts_mut(dst.as_mut_ptr(), len) }
    9b4e:	9804      	ldr	r0, [sp, #16]
    9b50:	9000      	str	r0, [sp, #0]
    9b52:	9015      	str	r0, [sp, #84]	@ 0x54
            if ::core::ub_checks::$kind() {
    9b54:	e028      	b.n	9ba8 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x106>
        (3, [a, b, c, ..]) => {
    9b56:	9902      	ldr	r1, [sp, #8]
    9b58:	9803      	ldr	r0, [sp, #12]
    9b5a:	910c      	str	r1, [sp, #48]	@ 0x30
    9b5c:	1c4a      	adds	r2, r1, #1
    9b5e:	920d      	str	r2, [sp, #52]	@ 0x34
    9b60:	1c8a      	adds	r2, r1, #2
    9b62:	920e      	str	r2, [sp, #56]	@ 0x38
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
    9b64:	0b02      	lsrs	r2, r0, #12
    9b66:	230e      	movs	r3, #14
    9b68:	f363 121f 	bfi	r2, r3, #4, #28
    9b6c:	700a      	strb	r2, [r1, #0]
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
    9b6e:	0983      	lsrs	r3, r0, #6
    9b70:	2202      	movs	r2, #2
    9b72:	f362 139f 	bfi	r3, r2, #6, #26
    9b76:	704b      	strb	r3, [r1, #1]
            *c = (code & 0x3F) as u8 | TAG_CONT;
    9b78:	f362 109f 	bfi	r0, r2, #6, #26
    9b7c:	7088      	strb	r0, [r1, #2]
        }
    9b7e:	e7e4      	b.n	9b4a <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0xa8>
        (2, [a, b, ..]) => {
    9b80:	9902      	ldr	r1, [sp, #8]
    9b82:	9803      	ldr	r0, [sp, #12]
    9b84:	910f      	str	r1, [sp, #60]	@ 0x3c
    9b86:	1c4a      	adds	r2, r1, #1
    9b88:	9210      	str	r2, [sp, #64]	@ 0x40
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
    9b8a:	0982      	lsrs	r2, r0, #6
    9b8c:	2306      	movs	r3, #6
    9b8e:	f363 125f 	bfi	r2, r3, #5, #27
    9b92:	700a      	strb	r2, [r1, #0]
    9b94:	2202      	movs	r2, #2
            *b = (code & 0x3F) as u8 | TAG_CONT;
    9b96:	f362 109f 	bfi	r0, r2, #6, #26
    9b9a:	7048      	strb	r0, [r1, #1]
        }
    9b9c:	e7d5      	b.n	9b4a <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0xa8>
        (1, [a, ..]) => {
    9b9e:	9803      	ldr	r0, [sp, #12]
    9ba0:	9902      	ldr	r1, [sp, #8]
    9ba2:	9113      	str	r1, [sp, #76]	@ 0x4c
            *a = code as u8;
    9ba4:	7008      	strb	r0, [r1, #0]
        }
    9ba6:	e7d0      	b.n	9b4a <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0xa8>
                precondition_check($($arg,)*);
    9ba8:	9b00      	ldr	r3, [sp, #0]
    9baa:	9802      	ldr	r0, [sp, #8]
    9bac:	2201      	movs	r2, #1
    9bae:	4611      	mov	r1, r2
    9bb0:	f000 f805 	bl	9bbe <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE>
            if ::core::ub_checks::$kind() {
    9bb4:	e7ff      	b.n	9bb6 <_ZN4core4char7methods15encode_utf8_raw17h13e346d1e6ae50ceE+0x114>
}
    9bb6:	9900      	ldr	r1, [sp, #0]
    9bb8:	9802      	ldr	r0, [sp, #8]
    9bba:	b016      	add	sp, #88	@ 0x58
    9bbc:	bd80      	pop	{r7, pc}

00009bbe <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE>:
            const fn precondition_check($($name:$ty),*) {
    9bbe:	b580      	push	{r7, lr}
    9bc0:	466f      	mov	r7, sp
    9bc2:	b096      	sub	sp, #88	@ 0x58
    9bc4:	9303      	str	r3, [sp, #12]
    9bc6:	9204      	str	r2, [sp, #16]
    9bc8:	9105      	str	r1, [sp, #20]
    9bca:	9006      	str	r0, [sp, #24]
    9bcc:	900e      	str	r0, [sp, #56]	@ 0x38
    9bce:	910f      	str	r1, [sp, #60]	@ 0x3c
    9bd0:	9210      	str	r2, [sp, #64]	@ 0x40
    9bd2:	9311      	str	r3, [sp, #68]	@ 0x44
    9bd4:	2100      	movs	r1, #0
    is_zst: bool,
    9bd6:	f807 1c0e 	strb.w	r1, [r7, #-14]
        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {
    9bda:	f807 1c0d 	strb.w	r1, [r7, #-13]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    9bde:	f24e 4124 	movw	r1, #58404	@ 0xe424
    9be2:	f2c0 0100 	movt	r1, #0
    9be6:	9113      	str	r1, [sp, #76]	@ 0x4c
                data: *mut () = data as *mut (),
                size: usize = size_of::<T>(),
                align: usize = align_of::<T>(),
                len: usize = len,
            ) =>
            ub_checks::maybe_is_aligned_and_not_null(data, align, false)
    9be8:	9014      	str	r0, [sp, #80]	@ 0x50
    9bea:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
            return intrinsics::ctpop(self);
    9bee:	ea00 0052 	and.w	r0, r0, r2, lsr #1
    9bf2:	1a10      	subs	r0, r2, r0
    9bf4:	f04f 3133 	mov.w	r1, #858993459	@ 0x33333333
    9bf8:	ea01 0190 	and.w	r1, r1, r0, lsr #2
    9bfc:	f020 30cc 	bic.w	r0, r0, #3435973836	@ 0xcccccccc
    9c00:	4408      	add	r0, r1
    9c02:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    9c06:	f020 30f0 	bic.w	r0, r0, #4042322160	@ 0xf0f0f0f0
    9c0a:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
    9c0e:	4348      	muls	r0, r1
    9c10:	0e00      	lsrs	r0, r0, #24
    9c12:	9015      	str	r0, [sp, #84]	@ 0x54
    9c14:	9815      	ldr	r0, [sp, #84]	@ 0x54
        if !align.is_power_of_two() {
    9c16:	2801      	cmp	r0, #1
    9c18:	d108      	bne.n	9c2c <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0x6e>
    9c1a:	e7ff      	b.n	9c1c <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0x5e>
        unsafe { mem::transmute(self.cast::<()>()) }
    9c1c:	9806      	ldr	r0, [sp, #24]
    9c1e:	9904      	ldr	r1, [sp, #16]
    9c20:	4602      	mov	r2, r0
        self.addr() & (align - 1) == 0
    9c22:	9202      	str	r2, [sp, #8]
    9c24:	3901      	subs	r1, #1
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    9c26:	4208      	tst	r0, r1
    9c28:	d01a      	beq.n	9c60 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xa2>
    9c2a:	e01c      	b.n	9c66 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xa8>
        Arguments { pieces, fmt: None, args: &[] }
    9c2c:	f24e 4024 	movw	r0, #58404	@ 0xe424
    9c30:	f2c0 0000 	movt	r0, #0
    9c34:	9007      	str	r0, [sp, #28]
    9c36:	2001      	movs	r0, #1
    9c38:	9008      	str	r0, [sp, #32]
    9c3a:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    9c3e:	f2c0 0000 	movt	r0, #0
    9c42:	6801      	ldr	r1, [r0, #0]
    9c44:	6840      	ldr	r0, [r0, #4]
    9c46:	910b      	str	r1, [sp, #44]	@ 0x2c
    9c48:	900c      	str	r0, [sp, #48]	@ 0x30
    9c4a:	2004      	movs	r0, #4
    9c4c:	9009      	str	r0, [sp, #36]	@ 0x24
    9c4e:	2000      	movs	r0, #0
    9c50:	900a      	str	r0, [sp, #40]	@ 0x28
            panic!("is_aligned_to: align is not a power-of-two");
    9c52:	f24e 6144 	movw	r1, #58948	@ 0xe644
    9c56:	f2c0 0100 	movt	r1, #0
    9c5a:	a807      	add	r0, sp, #28
    9c5c:	f000 fbe6 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    9c60:	9802      	ldr	r0, [sp, #8]
    9c62:	b910      	cbnz	r0, 9c6a <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xac>
    9c64:	e000      	b.n	9c68 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xaa>
    9c66:	e7ff      	b.n	9c68 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xaa>
    9c68:	e023      	b.n	9cb2 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xf4>
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
    9c6a:	9805      	ldr	r0, [sp, #20]
    9c6c:	fab0 f180 	clz	r1, r0
    9c70:	0949      	lsrs	r1, r1, #5
    9c72:	9101      	str	r1, [sp, #4]
    9c74:	b920      	cbnz	r0, 9c80 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xc2>
    9c76:	e7ff      	b.n	9c78 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xba>
    9c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    9c7c:	900d      	str	r0, [sp, #52]	@ 0x34
    9c7e:	e003      	b.n	9c88 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xca>
    9c80:	9801      	ldr	r0, [sp, #4]
    9c82:	07c0      	lsls	r0, r0, #31
    9c84:	b960      	cbnz	r0, 9ca0 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xe2>
    9c86:	e004      	b.n	9c92 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xd4>
    len <= max_len
    9c88:	9803      	ldr	r0, [sp, #12]
    9c8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
                && ub_checks::is_valid_allocation_size(size, len)
    9c8c:	4288      	cmp	r0, r1
    9c8e:	d90e      	bls.n	9cae <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xf0>
    9c90:	e00c      	b.n	9cac <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xee>
    9c92:	9905      	ldr	r1, [sp, #20]
    9c94:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
    9c98:	fbb0 f0f1 	udiv	r0, r0, r1
    9c9c:	900d      	str	r0, [sp, #52]	@ 0x34
    9c9e:	e7f3      	b.n	9c88 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xca>
    9ca0:	f24e 40a0 	movw	r0, #58528	@ 0xe4a0
    9ca4:	f2c0 0000 	movt	r0, #0
    9ca8:	f001 fa9e 	bl	b1e8 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hff1aa7944d63a61dE>
    9cac:	e001      	b.n	9cb2 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h328448cdcbdc952fE+0xf4>
            }
    9cae:	b016      	add	sp, #88	@ 0x58
    9cb0:	bd80      	pop	{r7, pc}
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    9cb2:	f24e 40b0 	movw	r0, #58544	@ 0xe4b0
    9cb6:	f2c0 0000 	movt	r0, #0
    9cba:	f240 111b 	movw	r1, #283	@ 0x11b
    9cbe:	f000 fbe7 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>

00009cc2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE>:
    pub fn ok(self) -> Option<T> {
    9cc2:	b580      	push	{r7, lr}
    9cc4:	466f      	mov	r7, sp
    9cc6:	b082      	sub	sp, #8
    9cc8:	4601      	mov	r1, r0
    9cca:	9100      	str	r1, [sp, #0]
    9ccc:	f807 0c02 	strb.w	r0, [r7, #-2]
        match self {
    9cd0:	b120      	cbz	r0, 9cdc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE+0x1a>
    9cd2:	e7ff      	b.n	9cd4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE+0x12>
    9cd4:	2000      	movs	r0, #0
            Err(_) => None,
    9cd6:	f807 0c03 	strb.w	r0, [r7, #-3]
    9cda:	e003      	b.n	9ce4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE+0x22>
    9cdc:	2001      	movs	r0, #1
            Ok(x) => Some(x),
    9cde:	f807 0c03 	strb.w	r0, [r7, #-3]
    9ce2:	e7ff      	b.n	9ce4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE+0x22>
    }
    9ce4:	9800      	ldr	r0, [sp, #0]
    9ce6:	07c0      	lsls	r0, r0, #31
    9ce8:	b108      	cbz	r0, 9cee <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE+0x2c>
    9cea:	e7ff      	b.n	9cec <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE+0x2a>
    9cec:	e7ff      	b.n	9cee <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE+0x2c>
    9cee:	f817 0c03 	ldrb.w	r0, [r7, #-3]
    9cf2:	b002      	add	sp, #8
    9cf4:	bd80      	pop	{r7, pc}

00009cf6 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E>:
            fn spec_write_fmt(self, args: Arguments<'_>) -> Result {
    9cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cf8:	af03      	add	r7, sp, #12
    9cfa:	f84d 8d04 	str.w	r8, [sp, #-4]!
    9cfe:	b098      	sub	sp, #96	@ 0x60
    9d00:	9101      	str	r1, [sp, #4]
    9d02:	9002      	str	r0, [sp, #8]
    9d04:	900b      	str	r0, [sp, #44]	@ 0x2c
                if let Some(s) = args.as_statically_known_str() {
    9d06:	910c      	str	r1, [sp, #48]	@ 0x30
        match (self.pieces, self.args) {
    9d08:	6808      	ldr	r0, [r1, #0]
    9d0a:	9003      	str	r0, [sp, #12]
    9d0c:	6848      	ldr	r0, [r1, #4]
    9d0e:	9004      	str	r0, [sp, #16]
    9d10:	68c9      	ldr	r1, [r1, #12]
            ([], []) => Some(""),
    9d12:	9105      	str	r1, [sp, #20]
    9d14:	b918      	cbnz	r0, 9d1e <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x28>
    9d16:	e7ff      	b.n	9d18 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x22>
    9d18:	9805      	ldr	r0, [sp, #20]
    9d1a:	b120      	cbz	r0, 9d26 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x30>
    9d1c:	e008      	b.n	9d30 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x3a>
            ([s], []) => Some(s),
    9d1e:	9804      	ldr	r0, [sp, #16]
    9d20:	2801      	cmp	r0, #1
    9d22:	d018      	beq.n	9d56 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x60>
    9d24:	e004      	b.n	9d30 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x3a>
    9d26:	2001      	movs	r0, #1
            ([], []) => Some(""),
    9d28:	9009      	str	r0, [sp, #36]	@ 0x24
    9d2a:	2000      	movs	r0, #0
    9d2c:	900a      	str	r0, [sp, #40]	@ 0x28
    9d2e:	e008      	b.n	9d42 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x4c>
            _ => None,
    9d30:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    9d34:	f2c0 0000 	movt	r0, #0
    9d38:	6801      	ldr	r1, [r0, #0]
    9d3a:	6840      	ldr	r0, [r0, #4]
    9d3c:	9109      	str	r1, [sp, #36]	@ 0x24
    9d3e:	900a      	str	r0, [sp, #40]	@ 0x28
    9d40:	e7ff      	b.n	9d42 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x4c>
    9d42:	a809      	add	r0, sp, #36	@ 0x24
        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
    9d44:	900e      	str	r0, [sp, #56]	@ 0x38
    9d46:	2000      	movs	r0, #0
    9d48:	f807 0c31 	strb.w	r0, [r7, #-49]
    9d4c:	f817 0c31 	ldrb.w	r0, [r7, #-49]
    9d50:	07c0      	lsls	r0, r0, #31
    9d52:	b960      	cbnz	r0, 9d6e <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x78>
    9d54:	e00a      	b.n	9d6c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x76>
            ([s], []) => Some(s),
    9d56:	9805      	ldr	r0, [sp, #20]
    9d58:	2800      	cmp	r0, #0
    9d5a:	d1e9      	bne.n	9d30 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x3a>
    9d5c:	e7ff      	b.n	9d5e <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x68>
    9d5e:	9803      	ldr	r0, [sp, #12]
    9d60:	900d      	str	r0, [sp, #52]	@ 0x34
    9d62:	6801      	ldr	r1, [r0, #0]
    9d64:	6840      	ldr	r0, [r0, #4]
    9d66:	9109      	str	r1, [sp, #36]	@ 0x24
    9d68:	900a      	str	r0, [sp, #40]	@ 0x28
    9d6a:	e7ea      	b.n	9d42 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x4c>
                if let Some(s) = args.as_statically_known_str() {
    9d6c:	e006      	b.n	9d7c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x86>
        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
    9d6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
    9d70:	980a      	ldr	r0, [sp, #40]	@ 0x28
    9d72:	9107      	str	r1, [sp, #28]
    9d74:	9008      	str	r0, [sp, #32]
                if let Some(s) = args.as_statically_known_str() {
    9d76:	9807      	ldr	r0, [sp, #28]
    9d78:	b988      	cbnz	r0, 9d9e <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0xa8>
    9d7a:	e7ff      	b.n	9d7c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0x86>
    9d7c:	9802      	ldr	r0, [sp, #8]
    9d7e:	9b01      	ldr	r3, [sp, #4]
    9d80:	aa12      	add	r2, sp, #72	@ 0x48
                    write(self, args)
    9d82:	4611      	mov	r1, r2
    9d84:	e893 5170 	ldmia.w	r3, {r4, r5, r6, r8, ip, lr}
    9d88:	e881 5170 	stmia.w	r1, {r4, r5, r6, r8, ip, lr}
    9d8c:	f24e 6154 	movw	r1, #58964	@ 0xe654
    9d90:	f2c0 0100 	movt	r1, #0
    9d94:	f000 fbf3 	bl	a57e <_ZN4core3fmt5write17h70d6640cc98da3feE>
    9d98:	f807 0c55 	strb.w	r0, [r7, #-85]
                if let Some(s) = args.as_statically_known_str() {
    9d9c:	e009      	b.n	9db2 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0xbc>
    9d9e:	9802      	ldr	r0, [sp, #8]
    9da0:	9907      	ldr	r1, [sp, #28]
    9da2:	9a08      	ldr	r2, [sp, #32]
    9da4:	9110      	str	r1, [sp, #64]	@ 0x40
    9da6:	9211      	str	r2, [sp, #68]	@ 0x44
                    self.write_str(s)
    9da8:	f000 f89c 	bl	9ee4 <_ZN60_$LT$defmt..export..FmtWrite$u20$as$u20$core..fmt..Write$GT$9write_str17h0af068b63453b811E>
    9dac:	f807 0c55 	strb.w	r0, [r7, #-85]
                if let Some(s) = args.as_statically_known_str() {
    9db0:	e7ff      	b.n	9db2 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8c4bf4379b34f0d1E+0xbc>
            }
    9db2:	f817 0c55 	ldrb.w	r0, [r7, #-85]
    9db6:	b018      	add	sp, #96	@ 0x60
    9db8:	f85d 8b04 	ldr.w	r8, [sp], #4
    9dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009dbe <_ZN5defmt6export8integers5usize17hf8375f8f419f193eE>:
}

write_to_le_bytes!(u8, u16, u32, u64, u128, i8, i16, i32, i64, i128);

/// Implementation detail
pub fn usize(b: &usize) {
    9dbe:	b580      	push	{r7, lr}
    9dc0:	466f      	mov	r7, sp
    9dc2:	b086      	sub	sp, #24
    9dc4:	9002      	str	r0, [sp, #8]
    write(&(*b as u32).to_le_bytes())
    9dc6:	6800      	ldr	r0, [r0, #0]
    9dc8:	f7ff fe50 	bl	9a6c <_ZN4core3num21_$LT$impl$u20$u32$GT$11to_le_bytes17h92e3e95e8454dab3E>
    9dcc:	9003      	str	r0, [sp, #12]
    9dce:	9803      	ldr	r0, [sp, #12]
    9dd0:	9001      	str	r0, [sp, #4]
    9dd2:	a801      	add	r0, sp, #4
    9dd4:	9004      	str	r0, [sp, #16]
    9dd6:	2104      	movs	r1, #4
    9dd8:	9105      	str	r1, [sp, #20]
    unsafe { _defmt_write(bytes) }
    9dda:	f7fe fc5d 	bl	8698 <_defmt_write>
}
    9dde:	b006      	add	sp, #24
    9de0:	bd80      	pop	{r7, pc}

00009de2 <_ZN5defmt6export9make_istr17h5fd4c9793e25184eE>:
pub fn make_istr(address: u16) -> Str {
    9de2:	b580      	push	{r7, lr}
    9de4:	466f      	mov	r7, sp
    9de6:	b081      	sub	sp, #4
    9de8:	f827 0c02 	strh.w	r0, [r7, #-2]
}
    9dec:	b001      	add	sp, #4
    9dee:	bd80      	pop	{r7, pc}

00009df0 <_ZN5defmt6export14make_formatter17hec2c8cf7937169c8E>:
pub fn make_formatter<'a>() -> Formatter<'a> {
    9df0:	b580      	push	{r7, lr}
    9df2:	466f      	mov	r7, sp
}
    9df4:	bd80      	pop	{r7, pc}

00009df6 <_ZN5defmt6export3str17h36a62e65d7ae988eE>:
/// Implementation detail
pub fn char(b: &char) {
    write(&(*b as u32).to_le_bytes())
}

pub fn str(s: &str) {
    9df6:	b580      	push	{r7, lr}
    9df8:	466f      	mov	r7, sp
    9dfa:	b08a      	sub	sp, #40	@ 0x28
    9dfc:	9102      	str	r1, [sp, #8]
    9dfe:	9001      	str	r0, [sp, #4]
    9e00:	9004      	str	r0, [sp, #16]
    9e02:	9105      	str	r1, [sp, #20]
    usize(&s.len());
    9e04:	f7ff fe43 	bl	9a8e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h693a289ffc06f9ceE>
    9e08:	9003      	str	r0, [sp, #12]
    9e0a:	a803      	add	r0, sp, #12
    9e0c:	f7ff ffd7 	bl	9dbe <_ZN5defmt6export8integers5usize17hf8375f8f419f193eE>
    9e10:	9801      	ldr	r0, [sp, #4]
    9e12:	9902      	ldr	r1, [sp, #8]
    9e14:	9006      	str	r0, [sp, #24]
    9e16:	9107      	str	r1, [sp, #28]
    9e18:	9008      	str	r0, [sp, #32]
    9e1a:	9109      	str	r1, [sp, #36]	@ 0x24
    unsafe { _defmt_write(bytes) }
    9e1c:	f7fe fc3c 	bl	8698 <_defmt_write>
    write(s.as_bytes());
}
    9e20:	b00a      	add	sp, #40	@ 0x28
    9e22:	bd80      	pop	{r7, pc}

00009e24 <_ZN5defmt6export4istr17h6a3148ca5bdcd2a2E>:
        value._format_data();
    }
}

/// Implementation detail
pub fn istr(s: &Str) {
    9e24:	b580      	push	{r7, lr}
    9e26:	466f      	mov	r7, sp
    9e28:	b086      	sub	sp, #24
    9e2a:	9002      	str	r0, [sp, #8]
    write(&s.address.to_le_bytes())
    9e2c:	8800      	ldrh	r0, [r0, #0]
    9e2e:	f7ff fe12 	bl	9a56 <_ZN4core3num21_$LT$impl$u20$u16$GT$11to_le_bytes17h777a07ff0b507e2bE>
    9e32:	f827 0c0a 	strh.w	r0, [r7, #-10]
    9e36:	f837 0c0a 	ldrh.w	r0, [r7, #-10]
    9e3a:	f827 0c12 	strh.w	r0, [r7, #-18]
    9e3e:	f1a7 0012 	sub.w	r0, r7, #18
    9e42:	9004      	str	r0, [sp, #16]
    9e44:	2102      	movs	r1, #2
    9e46:	9105      	str	r1, [sp, #20]
    unsafe { _defmt_write(bytes) }
    9e48:	f7fe fc26 	bl	8698 <_defmt_write>
}
    9e4c:	b006      	add	sp, #24
    9e4e:	bd80      	pop	{r7, pc}

00009e50 <_ZN5defmt6export7display17h66a6ad0d9a4f8d3fE>:
    core::write!(FmtWrite, "{val:?}").ok();
    write(&[0xff]);
}

/// Implementation detail
pub fn display(val: &dyn core::fmt::Display) {
    9e50:	b580      	push	{r7, lr}
    9e52:	466f      	mov	r7, sp
    9e54:	b090      	sub	sp, #64	@ 0x40
    9e56:	9001      	str	r0, [sp, #4]
    9e58:	9102      	str	r1, [sp, #8]
    9e5a:	a80c      	add	r0, sp, #48	@ 0x30
    9e5c:	a901      	add	r1, sp, #4
    core::write!(FmtWrite, "{val}").ok();
    9e5e:	f7ff fdaa 	bl	99b6 <_ZN4core3fmt2rt8Argument11new_display17h3fe7ab214a2e6d9bE>
    9e62:	980c      	ldr	r0, [sp, #48]	@ 0x30
    9e64:	990d      	ldr	r1, [sp, #52]	@ 0x34
    9e66:	910b      	str	r1, [sp, #44]	@ 0x2c
    9e68:	900a      	str	r0, [sp, #40]	@ 0x28
    9e6a:	f64b 7140 	movw	r1, #48960	@ 0xbf40
    9e6e:	f2c0 0100 	movt	r1, #0
    9e72:	a804      	add	r0, sp, #16
    9e74:	9000      	str	r0, [sp, #0]
    9e76:	aa0a      	add	r2, sp, #40	@ 0x28
    9e78:	f7ff fdd4 	bl	9a24 <_ZN4core3fmt9Arguments6new_v117h831b19bba454c7e5E>
    9e7c:	9900      	ldr	r1, [sp, #0]
    9e7e:	f1a7 0031 	sub.w	r0, r7, #49	@ 0x31
    9e82:	f7ff fdc7 	bl	9a14 <_ZN4core3fmt5Write9write_fmt17hd242372d8b039474E>
    9e86:	f7ff ff1c 	bl	9cc2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hcfbcb115a356bdadE>
    9e8a:	f24e 606c 	movw	r0, #58988	@ 0xe66c
    9e8e:	f2c0 0000 	movt	r0, #0
    9e92:	900e      	str	r0, [sp, #56]	@ 0x38
    9e94:	2101      	movs	r1, #1
    9e96:	910f      	str	r1, [sp, #60]	@ 0x3c
    unsafe { _defmt_write(bytes) }
    9e98:	f7fe fbfe 	bl	8698 <_defmt_write>
    write(&[0xff]);
}
    9e9c:	b010      	add	sp, #64	@ 0x40
    9e9e:	bd80      	pop	{r7, pc}

00009ea0 <_ZN5defmt6export18acquire_and_header17h16cffd26e27c4a0bE>:

#[inline(never)]
pub unsafe fn acquire_and_header(s: &Str) {
    9ea0:	b580      	push	{r7, lr}
    9ea2:	466f      	mov	r7, sp
    9ea4:	b082      	sub	sp, #8
    9ea6:	9000      	str	r0, [sp, #0]
    9ea8:	9001      	str	r0, [sp, #4]
    _defmt_acquire()
    9eaa:	f7fe fbeb 	bl	8684 <_defmt_acquire>
    9eae:	9800      	ldr	r0, [sp, #0]
    acquire();
    istr(s);
    9eb0:	f7ff ffb8 	bl	9e24 <_ZN5defmt6export4istr17h6a3148ca5bdcd2a2E>
    timestamp(make_formatter());
    9eb4:	f7ff ff9c 	bl	9df0 <_ZN5defmt6export14make_formatter17hec2c8cf7937169c8E>
    unsafe { _defmt_timestamp(fmt) }
    9eb8:	f7fc fe69 	bl	6b8e <_defmt_timestamp>
}
    9ebc:	b002      	add	sp, #8
    9ebe:	bd80      	pop	{r7, pc}

00009ec0 <_ZN5defmt6export26acquire_header_and_release17h7ce8ef2ffd00dd1bE>:

#[inline(never)]
pub fn acquire_header_and_release(s: &Str) {
    9ec0:	b580      	push	{r7, lr}
    9ec2:	466f      	mov	r7, sp
    9ec4:	b082      	sub	sp, #8
    9ec6:	9000      	str	r0, [sp, #0]
    9ec8:	9001      	str	r0, [sp, #4]
    _defmt_acquire()
    9eca:	f7fe fbdb 	bl	8684 <_defmt_acquire>
    9ece:	9800      	ldr	r0, [sp, #0]
    // safety: will be released a few lines further down
    unsafe { acquire() };
    istr(s);
    9ed0:	f7ff ffa8 	bl	9e24 <_ZN5defmt6export4istr17h6a3148ca5bdcd2a2E>
    timestamp(make_formatter());
    9ed4:	f7ff ff8c 	bl	9df0 <_ZN5defmt6export14make_formatter17hec2c8cf7937169c8E>
    unsafe { _defmt_timestamp(fmt) }
    9ed8:	f7fc fe59 	bl	6b8e <_defmt_timestamp>
    _defmt_release()
    9edc:	f7fe fbd7 	bl	868e <_defmt_release>
    // safety: acquire() was called a few lines above
    unsafe { release() };
}
    9ee0:	b002      	add	sp, #8
    9ee2:	bd80      	pop	{r7, pc}

00009ee4 <_ZN60_$LT$defmt..export..FmtWrite$u20$as$u20$core..fmt..Write$GT$9write_str17h0af068b63453b811E>:

struct FmtWrite;

impl core::fmt::Write for FmtWrite {
    fn write_str(&mut self, s: &str) -> core::fmt::Result {
    9ee4:	b580      	push	{r7, lr}
    9ee6:	466f      	mov	r7, sp
    9ee8:	b08a      	sub	sp, #40	@ 0x28
    9eea:	9200      	str	r2, [sp, #0]
    9eec:	460a      	mov	r2, r1
    9eee:	9900      	ldr	r1, [sp, #0]
    9ef0:	9201      	str	r2, [sp, #4]
    9ef2:	4602      	mov	r2, r0
    9ef4:	9801      	ldr	r0, [sp, #4]
    9ef6:	9203      	str	r2, [sp, #12]
    9ef8:	9004      	str	r0, [sp, #16]
    9efa:	9105      	str	r1, [sp, #20]
    9efc:	9006      	str	r0, [sp, #24]
    9efe:	9107      	str	r1, [sp, #28]
    9f00:	9008      	str	r0, [sp, #32]
    9f02:	9109      	str	r1, [sp, #36]	@ 0x24
    unsafe { _defmt_write(bytes) }
    9f04:	f7fe fbc8 	bl	8698 <_defmt_write>
    9f08:	2000      	movs	r0, #0
        write(s.as_bytes());
        Ok(())
    9f0a:	f807 0c1d 	strb.w	r0, [r7, #-29]
    }
    9f0e:	f817 0c1d 	ldrb.w	r0, [r7, #-29]
    9f12:	b00a      	add	sp, #40	@ 0x28
    9f14:	bd80      	pop	{r7, pc}

00009f16 <__defmt_default_timestamp>:
pub use defmt_macros::Format;

// There is no default timestamp format. Instead, the decoder looks for a matching ELF symbol. If
// absent, timestamps are turned off.
#[export_name = "__defmt_default_timestamp"]
fn default_timestamp(_f: Formatter<'_>) {}
    9f16:	b580      	push	{r7, lr}
    9f18:	466f      	mov	r7, sp
    9f1a:	b081      	sub	sp, #4
    9f1c:	b001      	add	sp, #4
    9f1e:	bd80      	pop	{r7, pc}

00009f20 <__defmt_default_panic>:

#[export_name = "__defmt_default_panic"]
fn default_panic() -> ! {
    9f20:	b580      	push	{r7, lr}
    9f22:	466f      	mov	r7, sp
    core::panic!()
    9f24:	f24e 60cc 	movw	r0, #59084	@ 0xe6cc
    9f28:	f2c0 0000 	movt	r0, #0
    9f2c:	f000 f812 	bl	9f54 <_ZN5defmt13default_panic19panic_cold_explicit17h1cddfb4b4bc7e40bE>

00009f30 <_ZN5defmt6export8integers3u6417hebbc2548cfde2953E>:
        pub fn $s(b: &$s) {
    9f30:	b580      	push	{r7, lr}
    9f32:	466f      	mov	r7, sp
    9f34:	b086      	sub	sp, #24
    9f36:	9003      	str	r0, [sp, #12]
            write(&b.to_le_bytes())
    9f38:	6802      	ldr	r2, [r0, #0]
    9f3a:	6843      	ldr	r3, [r0, #4]
    9f3c:	a801      	add	r0, sp, #4
    9f3e:	9000      	str	r0, [sp, #0]
    9f40:	f7ff fd9c 	bl	9a7c <_ZN4core3num21_$LT$impl$u20$u64$GT$11to_le_bytes17hf9dc4b5b09d7c1e6E>
    9f44:	9800      	ldr	r0, [sp, #0]
    9f46:	9004      	str	r0, [sp, #16]
    9f48:	2108      	movs	r1, #8
    9f4a:	9105      	str	r1, [sp, #20]
    unsafe { _defmt_write(bytes) }
    9f4c:	f7fe fba4 	bl	8698 <_defmt_write>
        })*
    9f50:	b006      	add	sp, #24
    9f52:	bd80      	pop	{r7, pc}

00009f54 <_ZN5defmt13default_panic19panic_cold_explicit17h1cddfb4b4bc7e40bE>:
        // Create a function so that the argument for `track_caller`
        // can be moved inside if possible.
        #[cold]
        #[track_caller]
        #[inline(never)]
        const fn panic_cold_explicit() -> ! {
    9f54:	b580      	push	{r7, lr}
    9f56:	466f      	mov	r7, sp
            $crate::panicking::panic_explicit()
    9f58:	f000 fab0 	bl	a4bc <_ZN4core9panicking14panic_explicit17hd41be345c3087614E>

00009f5c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c68ca476a49ed19E>:
}

macro_rules! step_unsigned_methods {
    () => {
        #[inline]
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    9f5c:	b580      	push	{r7, lr}
    9f5e:	466f      	mov	r7, sp
    9f60:	b084      	sub	sp, #16
    9f62:	9100      	str	r1, [sp, #0]
    9f64:	9001      	str	r0, [sp, #4]
    9f66:	9002      	str	r0, [sp, #8]
    9f68:	9103      	str	r1, [sp, #12]
            if ::core::ub_checks::$kind() {
    9f6a:	e7ff      	b.n	9f6c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c68ca476a49ed19E+0x10>
                precondition_check($($arg,)*);
    9f6c:	9900      	ldr	r1, [sp, #0]
    9f6e:	9801      	ldr	r0, [sp, #4]
    9f70:	f000 f806 	bl	9f80 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h04c6e41abfd69131E>
    9f74:	e7ff      	b.n	9f76 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c68ca476a49ed19E+0x1a>
                intrinsics::unchecked_add(self, rhs)
    9f76:	9801      	ldr	r0, [sp, #4]
    9f78:	9900      	ldr	r1, [sp, #0]
    9f7a:	4408      	add	r0, r1
            // SAFETY: the caller has to guarantee that `start + n` doesn't overflow.
            unsafe { start.unchecked_add(n as Self) }
        }
    9f7c:	b004      	add	sp, #16
    9f7e:	bd80      	pop	{r7, pc}

00009f80 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h04c6e41abfd69131E>:
            const fn precondition_check($($name:$ty),*) {
    9f80:	b580      	push	{r7, lr}
    9f82:	466f      	mov	r7, sp
    9f84:	b084      	sub	sp, #16
    9f86:	9101      	str	r1, [sp, #4]
    9f88:	4601      	mov	r1, r0
    9f8a:	9801      	ldr	r0, [sp, #4]
    9f8c:	9102      	str	r1, [sp, #8]
    9f8e:	9003      	str	r0, [sp, #12]
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    9f90:	4408      	add	r0, r1
    9f92:	4288      	cmp	r0, r1
                ) => !lhs.overflowing_add(rhs).1,
    9f94:	d302      	bcc.n	9f9c <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h04c6e41abfd69131E+0x1c>
    9f96:	e7ff      	b.n	9f98 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h04c6e41abfd69131E+0x18>
            }
    9f98:	b004      	add	sp, #16
    9f9a:	bd80      	pop	{r7, pc}
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    9f9c:	f24e 60dc 	movw	r0, #59100	@ 0xe6dc
    9fa0:	f2c0 0000 	movt	r0, #0
    9fa4:	21ba      	movs	r1, #186	@ 0xba
    9fa6:	f000 fa73 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>

00009faa <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    9faa:	b580      	push	{r7, lr}
    9fac:	466f      	mov	r7, sp
    9fae:	b084      	sub	sp, #16
    9fb0:	9001      	str	r0, [sp, #4]
    9fb2:	9002      	str	r0, [sp, #8]
            if ::core::ub_checks::$kind() {
    9fb4:	e7ff      	b.n	9fb6 <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE+0xc>
                precondition_check($($arg,)*);
    9fb6:	9801      	ldr	r0, [sp, #4]
    9fb8:	2104      	movs	r1, #4
    9fba:	2200      	movs	r2, #0
    9fbc:	f000 f807 	bl	9fce <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E>
            if ::core::ub_checks::$kind() {
    9fc0:	e7ff      	b.n	9fc2 <_ZN4core3ptr13read_volatile17h8c86911cfc86bd1dE+0x18>
        intrinsics::volatile_load(src)
    9fc2:	9801      	ldr	r0, [sp, #4]
    9fc4:	6800      	ldr	r0, [r0, #0]
    9fc6:	9003      	str	r0, [sp, #12]
    9fc8:	9803      	ldr	r0, [sp, #12]
}
    9fca:	b004      	add	sp, #16
    9fcc:	bd80      	pop	{r7, pc}

00009fce <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E>:
            const fn precondition_check($($name:$ty),*) {
    9fce:	b580      	push	{r7, lr}
    9fd0:	466f      	mov	r7, sp
    9fd2:	b090      	sub	sp, #64	@ 0x40
    9fd4:	9102      	str	r1, [sp, #8]
    9fd6:	9003      	str	r0, [sp, #12]
    9fd8:	4613      	mov	r3, r2
    9fda:	9304      	str	r3, [sp, #16]
    9fdc:	900b      	str	r0, [sp, #44]	@ 0x2c
    9fde:	910c      	str	r1, [sp, #48]	@ 0x30
    9fe0:	f807 2c09 	strb.w	r2, [r7, #-9]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    9fe4:	f24e 70c0 	movw	r0, #59328	@ 0xe7c0
    9fe8:	f2c0 0000 	movt	r0, #0
    9fec:	900e      	str	r0, [sp, #56]	@ 0x38
    9fee:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
            return intrinsics::ctpop(self);
    9ff2:	ea00 0051 	and.w	r0, r0, r1, lsr #1
    9ff6:	1a08      	subs	r0, r1, r0
    9ff8:	f04f 3133 	mov.w	r1, #858993459	@ 0x33333333
    9ffc:	ea01 0190 	and.w	r1, r1, r0, lsr #2
    a000:	f020 30cc 	bic.w	r0, r0, #3435973836	@ 0xcccccccc
    a004:	4408      	add	r0, r1
    a006:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    a00a:	f020 30f0 	bic.w	r0, r0, #4042322160	@ 0xf0f0f0f0
    a00e:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
    a012:	4348      	muls	r0, r1
    a014:	0e00      	lsrs	r0, r0, #24
    a016:	900f      	str	r0, [sp, #60]	@ 0x3c
    a018:	980f      	ldr	r0, [sp, #60]	@ 0x3c
        if !align.is_power_of_two() {
    a01a:	2801      	cmp	r0, #1
    a01c:	d108      	bne.n	a030 <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0x62>
    a01e:	e7ff      	b.n	a020 <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0x52>
        unsafe { mem::transmute(self.cast::<()>()) }
    a020:	9803      	ldr	r0, [sp, #12]
    a022:	9902      	ldr	r1, [sp, #8]
    a024:	4602      	mov	r2, r0
        self.addr() & (align - 1) == 0
    a026:	9201      	str	r2, [sp, #4]
    a028:	3901      	subs	r1, #1
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    a02a:	4208      	tst	r0, r1
    a02c:	d01a      	beq.n	a064 <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0x96>
    a02e:	e01d      	b.n	a06c <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0x9e>
        Arguments { pieces, fmt: None, args: &[] }
    a030:	f24e 70c0 	movw	r0, #59328	@ 0xe7c0
    a034:	f2c0 0000 	movt	r0, #0
    a038:	9005      	str	r0, [sp, #20]
    a03a:	2001      	movs	r0, #1
    a03c:	9006      	str	r0, [sp, #24]
    a03e:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    a042:	f2c0 0000 	movt	r0, #0
    a046:	6801      	ldr	r1, [r0, #0]
    a048:	6840      	ldr	r0, [r0, #4]
    a04a:	9109      	str	r1, [sp, #36]	@ 0x24
    a04c:	900a      	str	r0, [sp, #40]	@ 0x28
    a04e:	2004      	movs	r0, #4
    a050:	9007      	str	r0, [sp, #28]
    a052:	2000      	movs	r0, #0
    a054:	9008      	str	r0, [sp, #32]
            panic!("is_aligned_to: align is not a power-of-two");
    a056:	f64e 1124 	movw	r1, #59684	@ 0xe924
    a05a:	f2c0 0100 	movt	r1, #0
    a05e:	a805      	add	r0, sp, #20
    a060:	f000 f9e4 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    a064:	9804      	ldr	r0, [sp, #16]
    a066:	07c0      	lsls	r0, r0, #31
    a068:	b920      	cbnz	r0, a074 <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0xa6>
    a06a:	e000      	b.n	a06e <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0xa0>
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
    a06c:	e003      	b.n	a076 <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0xa8>
    a06e:	9801      	ldr	r0, [sp, #4]
    a070:	b940      	cbnz	r0, a084 <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0xb6>
    a072:	e000      	b.n	a076 <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0xa8>
    a074:	e006      	b.n	a084 <_ZN4core3ptr13read_volatile18precondition_check17hb1b8364a0c4ca357E+0xb6>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    a076:	f24e 70c8 	movw	r0, #59336	@ 0xe7c8
    a07a:	f2c0 0000 	movt	r0, #0
    a07e:	21e3      	movs	r1, #227	@ 0xe3
    a080:	f000 fa06 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
            }
    a084:	b010      	add	sp, #64	@ 0x40
    a086:	bd80      	pop	{r7, pc}

0000a088 <_ZN4core3ptr14write_volatile17h049177a1e39cbfb2E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    a088:	b580      	push	{r7, lr}
    a08a:	466f      	mov	r7, sp
    a08c:	b084      	sub	sp, #16
    a08e:	9000      	str	r0, [sp, #0]
    a090:	460a      	mov	r2, r1
    a092:	9201      	str	r2, [sp, #4]
    a094:	9002      	str	r0, [sp, #8]
    a096:	f807 1c01 	strb.w	r1, [r7, #-1]
            if ::core::ub_checks::$kind() {
    a09a:	e7ff      	b.n	a09c <_ZN4core3ptr14write_volatile17h049177a1e39cbfb2E+0x14>
                precondition_check($($arg,)*);
    a09c:	9800      	ldr	r0, [sp, #0]
    a09e:	2101      	movs	r1, #1
    a0a0:	2200      	movs	r2, #0
    a0a2:	f000 f819 	bl	a0d8 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE>
            if ::core::ub_checks::$kind() {
    a0a6:	e7ff      	b.n	a0a8 <_ZN4core3ptr14write_volatile17h049177a1e39cbfb2E+0x20>
        intrinsics::volatile_store(dst, src);
    a0a8:	9801      	ldr	r0, [sp, #4]
    a0aa:	9900      	ldr	r1, [sp, #0]
    a0ac:	7008      	strb	r0, [r1, #0]
}
    a0ae:	b004      	add	sp, #16
    a0b0:	bd80      	pop	{r7, pc}

0000a0b2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    a0b2:	b580      	push	{r7, lr}
    a0b4:	466f      	mov	r7, sp
    a0b6:	b084      	sub	sp, #16
    a0b8:	9100      	str	r1, [sp, #0]
    a0ba:	9001      	str	r0, [sp, #4]
    a0bc:	9002      	str	r0, [sp, #8]
    a0be:	9103      	str	r1, [sp, #12]
    a0c0:	e7ff      	b.n	a0c2 <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E+0x10>
                precondition_check($($arg,)*);
    a0c2:	9801      	ldr	r0, [sp, #4]
    a0c4:	2104      	movs	r1, #4
    a0c6:	2200      	movs	r2, #0
    a0c8:	f000 f806 	bl	a0d8 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE>
            if ::core::ub_checks::$kind() {
    a0cc:	e7ff      	b.n	a0ce <_ZN4core3ptr14write_volatile17hd1ab43ad884b9eb6E+0x1c>
        intrinsics::volatile_store(dst, src);
    a0ce:	9800      	ldr	r0, [sp, #0]
    a0d0:	9901      	ldr	r1, [sp, #4]
    a0d2:	6008      	str	r0, [r1, #0]
}
    a0d4:	b004      	add	sp, #16
    a0d6:	bd80      	pop	{r7, pc}

0000a0d8 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE>:
            const fn precondition_check($($name:$ty),*) {
    a0d8:	b580      	push	{r7, lr}
    a0da:	466f      	mov	r7, sp
    a0dc:	b090      	sub	sp, #64	@ 0x40
    a0de:	9101      	str	r1, [sp, #4]
    a0e0:	9002      	str	r0, [sp, #8]
    a0e2:	4613      	mov	r3, r2
    a0e4:	9303      	str	r3, [sp, #12]
    a0e6:	900a      	str	r0, [sp, #40]	@ 0x28
    a0e8:	910b      	str	r1, [sp, #44]	@ 0x2c
    a0ea:	f807 2c0d 	strb.w	r2, [r7, #-13]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    a0ee:	f24e 72c0 	movw	r2, #59328	@ 0xe7c0
    a0f2:	f2c0 0200 	movt	r2, #0
    a0f6:	920d      	str	r2, [sp, #52]	@ 0x34
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
    a0f8:	900e      	str	r0, [sp, #56]	@ 0x38
    a0fa:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
    a0fe:	ea00 0051 	and.w	r0, r0, r1, lsr #1
    a102:	1a08      	subs	r0, r1, r0
    a104:	f04f 3133 	mov.w	r1, #858993459	@ 0x33333333
    a108:	ea01 0190 	and.w	r1, r1, r0, lsr #2
    a10c:	f020 30cc 	bic.w	r0, r0, #3435973836	@ 0xcccccccc
    a110:	4408      	add	r0, r1
    a112:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    a116:	f020 30f0 	bic.w	r0, r0, #4042322160	@ 0xf0f0f0f0
    a11a:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
    a11e:	4348      	muls	r0, r1
    a120:	0e00      	lsrs	r0, r0, #24
    a122:	900f      	str	r0, [sp, #60]	@ 0x3c
    a124:	980f      	ldr	r0, [sp, #60]	@ 0x3c
        if !align.is_power_of_two() {
    a126:	2801      	cmp	r0, #1
    a128:	d108      	bne.n	a13c <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0x64>
    a12a:	e7ff      	b.n	a12c <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0x54>
        unsafe { mem::transmute(self.cast::<()>()) }
    a12c:	9802      	ldr	r0, [sp, #8]
    a12e:	9901      	ldr	r1, [sp, #4]
    a130:	4602      	mov	r2, r0
        self.addr() & (align - 1) == 0
    a132:	9200      	str	r2, [sp, #0]
    a134:	3901      	subs	r1, #1
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    a136:	4208      	tst	r0, r1
    a138:	d01a      	beq.n	a170 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0x98>
    a13a:	e01d      	b.n	a178 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0xa0>
        Arguments { pieces, fmt: None, args: &[] }
    a13c:	f24e 70c0 	movw	r0, #59328	@ 0xe7c0
    a140:	f2c0 0000 	movt	r0, #0
    a144:	9004      	str	r0, [sp, #16]
    a146:	2001      	movs	r0, #1
    a148:	9005      	str	r0, [sp, #20]
    a14a:	f64b 7048 	movw	r0, #48968	@ 0xbf48
    a14e:	f2c0 0000 	movt	r0, #0
    a152:	6801      	ldr	r1, [r0, #0]
    a154:	6840      	ldr	r0, [r0, #4]
    a156:	9108      	str	r1, [sp, #32]
    a158:	9009      	str	r0, [sp, #36]	@ 0x24
    a15a:	2004      	movs	r0, #4
    a15c:	9006      	str	r0, [sp, #24]
    a15e:	2000      	movs	r0, #0
    a160:	9007      	str	r0, [sp, #28]
            panic!("is_aligned_to: align is not a power-of-two");
    a162:	f64e 1124 	movw	r1, #59684	@ 0xe924
    a166:	f2c0 0100 	movt	r1, #0
    a16a:	a804      	add	r0, sp, #16
    a16c:	f000 f95e 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    a170:	9803      	ldr	r0, [sp, #12]
    a172:	07c0      	lsls	r0, r0, #31
    a174:	b920      	cbnz	r0, a180 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0xa8>
    a176:	e000      	b.n	a17a <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0xa2>
    a178:	e003      	b.n	a182 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0xaa>
    a17a:	9800      	ldr	r0, [sp, #0]
    a17c:	b940      	cbnz	r0, a190 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0xb8>
    a17e:	e000      	b.n	a182 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0xaa>
    a180:	e006      	b.n	a190 <_ZN4core3ptr14write_volatile18precondition_check17ha4bad227d179c88aE+0xb8>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    a182:	f64e 1034 	movw	r0, #59700	@ 0xe934
    a186:	f2c0 0000 	movt	r0, #0
    a18a:	21e4      	movs	r1, #228	@ 0xe4
    a18c:	f000 f980 	bl	a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>
            }
    a190:	b010      	add	sp, #64	@ 0x40
    a192:	bd80      	pop	{r7, pc}

0000a194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd1eed7027fe23b7aE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<A: Step> Iterator for ops::Range<A> {
    type Item = A;

    #[inline]
    fn next(&mut self) -> Option<A> {
    a194:	b580      	push	{r7, lr}
    a196:	466f      	mov	r7, sp
    a198:	b082      	sub	sp, #8
    a19a:	9001      	str	r0, [sp, #4]
        self.spec_next()
    a19c:	f000 f809 	bl	a1b2 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h98a1a367499b061eE>
    }
    a1a0:	b002      	add	sp, #8
    a1a2:	bd80      	pop	{r7, pc}

0000a1a4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0afde0faa91357dbE>:
    fn into_iter(self) -> I {
    a1a4:	b580      	push	{r7, lr}
    a1a6:	466f      	mov	r7, sp
    a1a8:	b082      	sub	sp, #8
    a1aa:	9000      	str	r0, [sp, #0]
    a1ac:	9101      	str	r1, [sp, #4]
    }
    a1ae:	b002      	add	sp, #8
    a1b0:	bd80      	pop	{r7, pc}

0000a1b2 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h98a1a367499b061eE>:
    fn spec_next(&mut self) -> Option<T> {
    a1b2:	b580      	push	{r7, lr}
    a1b4:	466f      	mov	r7, sp
    a1b6:	b08a      	sub	sp, #40	@ 0x28
    a1b8:	4601      	mov	r1, r0
    a1ba:	9103      	str	r1, [sp, #12]
    a1bc:	9106      	str	r1, [sp, #24]
        if self.start < self.end {
    a1be:	1d08      	adds	r0, r1, #4
    a1c0:	9108      	str	r1, [sp, #32]
    a1c2:	9009      	str	r0, [sp, #36]	@ 0x24
            fn lt(&self, other: &Self) -> bool { *self <  *other }
    a1c4:	6808      	ldr	r0, [r1, #0]
    a1c6:	6849      	ldr	r1, [r1, #4]
    a1c8:	4288      	cmp	r0, r1
    a1ca:	d303      	bcc.n	a1d4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h98a1a367499b061eE+0x22>
    a1cc:	e7ff      	b.n	a1ce <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h98a1a367499b061eE+0x1c>
    a1ce:	2000      	movs	r0, #0
            None
    a1d0:	9004      	str	r0, [sp, #16]
        if self.start < self.end {
    a1d2:	e00f      	b.n	a1f4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h98a1a367499b061eE+0x42>
            let old = self.start;
    a1d4:	9803      	ldr	r0, [sp, #12]
    a1d6:	6800      	ldr	r0, [r0, #0]
    a1d8:	9001      	str	r0, [sp, #4]
    a1da:	9007      	str	r0, [sp, #28]
    a1dc:	2101      	movs	r1, #1
            self.start = unsafe { Step::forward_unchecked(old, 1) };
    a1de:	9102      	str	r1, [sp, #8]
    a1e0:	f7ff febc 	bl	9f5c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c68ca476a49ed19E>
    a1e4:	9b03      	ldr	r3, [sp, #12]
    a1e6:	9901      	ldr	r1, [sp, #4]
    a1e8:	4602      	mov	r2, r0
    a1ea:	9802      	ldr	r0, [sp, #8]
    a1ec:	601a      	str	r2, [r3, #0]
            Some(old)
    a1ee:	9105      	str	r1, [sp, #20]
    a1f0:	9004      	str	r0, [sp, #16]
        if self.start < self.end {
    a1f2:	e7ff      	b.n	a1f4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h98a1a367499b061eE+0x42>
    }
    a1f4:	9804      	ldr	r0, [sp, #16]
    a1f6:	9905      	ldr	r1, [sp, #20]
    a1f8:	b00a      	add	sp, #40	@ 0x28
    a1fa:	bd80      	pop	{r7, pc}

0000a1fc <_ZN126_$LT$cortex_m..critical_section..single_core_critical_section..SingleCoreCriticalSection$u20$as$u20$critical_section..Impl$GT$7acquire17h6e211c7e29f7690fE>:

    struct SingleCoreCriticalSection;
    set_impl!(SingleCoreCriticalSection);

    unsafe impl Impl for SingleCoreCriticalSection {
        unsafe fn acquire() -> RawRestoreState {
    a1fc:	b580      	push	{r7, lr}
    a1fe:	466f      	mov	r7, sp
    a200:	b082      	sub	sp, #8
            let was_active = primask::read().is_active();
    a202:	f000 f82e 	bl	a262 <_ZN8cortex_m8register7primask4read17h5200c3282b26550fE>
    a206:	f000 f81e 	bl	a246 <_ZN8cortex_m8register7primask7Primask9is_active17hcade5a3996d497aaE>
    a20a:	9000      	str	r0, [sp, #0]
    a20c:	f807 0c01 	strb.w	r0, [r7, #-1]
            interrupt::disable();
    a210:	f000 f80f 	bl	a232 <_ZN8cortex_m9interrupt7disable17h80927f083ce1baf2E>
    a214:	9800      	ldr	r0, [sp, #0]
            was_active
        }
    a216:	b002      	add	sp, #8
    a218:	bd80      	pop	{r7, pc}

0000a21a <_ZN126_$LT$cortex_m..critical_section..single_core_critical_section..SingleCoreCriticalSection$u20$as$u20$critical_section..Impl$GT$7release17hca962cb97a73e5c6E>:

        unsafe fn release(was_active: RawRestoreState) {
    a21a:	b580      	push	{r7, lr}
    a21c:	466f      	mov	r7, sp
    a21e:	b082      	sub	sp, #8
    a220:	f807 0c01 	strb.w	r0, [r7, #-1]
            // Only re-enable interrupts if they were enabled before the critical section.
            if was_active {
    a224:	b910      	cbnz	r0, a22c <_ZN126_$LT$cortex_m..critical_section..single_core_critical_section..SingleCoreCriticalSection$u20$as$u20$critical_section..Impl$GT$7release17hca962cb97a73e5c6E+0x12>
    a226:	e7ff      	b.n	a228 <_ZN126_$LT$cortex_m..critical_section..single_core_critical_section..SingleCoreCriticalSection$u20$as$u20$critical_section..Impl$GT$7release17hca962cb97a73e5c6E+0xe>
                interrupt::enable()
            }
        }
    a228:	b002      	add	sp, #8
    a22a:	bd80      	pop	{r7, pc}
                interrupt::enable()
    a22c:	f000 f806 	bl	a23c <_ZN8cortex_m9interrupt6enable17h60c93a269a7d7d69E>
    a230:	e7fa      	b.n	a228 <_ZN126_$LT$cortex_m..critical_section..single_core_critical_section..SingleCoreCriticalSection$u20$as$u20$critical_section..Impl$GT$7release17hca962cb97a73e5c6E+0xe>

0000a232 <_ZN8cortex_m9interrupt7disable17h80927f083ce1baf2E>:
pub fn disable() {
    a232:	b580      	push	{r7, lr}
    a234:	466f      	mov	r7, sp
    a236:	f000 f848 	bl	a2ca <__cpsid>
}
    a23a:	bd80      	pop	{r7, pc}

0000a23c <_ZN8cortex_m9interrupt6enable17h60c93a269a7d7d69E>:
///
/// # Safety
///
/// - Do not call this function inside an `interrupt::free` critical section
#[inline]
pub unsafe fn enable() {
    a23c:	b580      	push	{r7, lr}
    a23e:	466f      	mov	r7, sp
    a240:	f000 f845 	bl	a2ce <__cpsie>
    call_asm!(__cpsie());
}
    a244:	bd80      	pop	{r7, pc}

0000a246 <_ZN8cortex_m8register7primask7Primask9is_active17hcade5a3996d497aaE>:
}

impl Primask {
    /// All exceptions with configurable priority are active
    #[inline]
    pub fn is_active(self) -> bool {
    a246:	b580      	push	{r7, lr}
    a248:	466f      	mov	r7, sp
    a24a:	b082      	sub	sp, #8
    a24c:	f807 0c01 	strb.w	r0, [r7, #-1]
        self == Primask::Active
    a250:	f64c 115c 	movw	r1, #51548	@ 0xc95c
    a254:	f2c0 0100 	movt	r1, #0
    a258:	1e78      	subs	r0, r7, #1
    a25a:	f000 f827 	bl	a2ac <_ZN77_$LT$cortex_m..register..primask..Primask$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b76190c526e1d8E>
    }
    a25e:	b002      	add	sp, #8
    a260:	bd80      	pop	{r7, pc}

0000a262 <_ZN8cortex_m8register7primask4read17h5200c3282b26550fE>:
    }
}

/// Reads the CPU register
#[inline]
pub fn read() -> Primask {
    a262:	b580      	push	{r7, lr}
    a264:	466f      	mov	r7, sp
    a266:	b082      	sub	sp, #8
    a268:	f000 f838 	bl	a2dc <__primask_r>
    a26c:	9001      	str	r0, [sp, #4]
    let r: u32 = call_asm!(__primask_r() -> u32);
    if r & (1 << 0) == (1 << 0) {
    a26e:	f000 0001 	and.w	r0, r0, #1
    a272:	2801      	cmp	r0, #1
    a274:	d004      	beq.n	a280 <_ZN8cortex_m8register7primask4read17h5200c3282b26550fE+0x1e>
    a276:	e7ff      	b.n	a278 <_ZN8cortex_m8register7primask4read17h5200c3282b26550fE+0x16>
    a278:	2000      	movs	r0, #0
        Primask::Inactive
    } else {
        Primask::Active
    a27a:	f807 0c05 	strb.w	r0, [r7, #-5]
    if r & (1 << 0) == (1 << 0) {
    a27e:	e003      	b.n	a288 <_ZN8cortex_m8register7primask4read17h5200c3282b26550fE+0x26>
    a280:	2001      	movs	r0, #1
        Primask::Inactive
    a282:	f807 0c05 	strb.w	r0, [r7, #-5]
    if r & (1 << 0) == (1 << 0) {
    a286:	e7ff      	b.n	a288 <_ZN8cortex_m8register7primask4read17h5200c3282b26550fE+0x26>
    }
}
    a288:	f817 0c05 	ldrb.w	r0, [r7, #-5]
    a28c:	b002      	add	sp, #8
    a28e:	bd80      	pop	{r7, pc}

0000a290 <_critical_section_1_0_acquire>:
/// # }
#[macro_export]
macro_rules! set_impl {
    ($t: ty) => {
        #[no_mangle]
        unsafe fn _critical_section_1_0_acquire() -> $crate::RawRestoreState {
    a290:	b580      	push	{r7, lr}
    a292:	466f      	mov	r7, sp
            <$t as $crate::Impl>::acquire()
    a294:	f7ff ffb2 	bl	a1fc <_ZN126_$LT$cortex_m..critical_section..single_core_critical_section..SingleCoreCriticalSection$u20$as$u20$critical_section..Impl$GT$7acquire17h6e211c7e29f7690fE>
        }
    a298:	bd80      	pop	{r7, pc}

0000a29a <_critical_section_1_0_release>:
        #[no_mangle]
        unsafe fn _critical_section_1_0_release(restore_state: $crate::RawRestoreState) {
    a29a:	b580      	push	{r7, lr}
    a29c:	466f      	mov	r7, sp
    a29e:	b082      	sub	sp, #8
    a2a0:	f807 0c01 	strb.w	r0, [r7, #-1]
            <$t as $crate::Impl>::release(restore_state)
    a2a4:	f7ff ffb9 	bl	a21a <_ZN126_$LT$cortex_m..critical_section..single_core_critical_section..SingleCoreCriticalSection$u20$as$u20$critical_section..Impl$GT$7release17hca962cb97a73e5c6E>
        }
    a2a8:	b002      	add	sp, #8
    a2aa:	bd80      	pop	{r7, pc}

0000a2ac <_ZN77_$LT$cortex_m..register..primask..Primask$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b76190c526e1d8E>:
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
    a2ac:	b580      	push	{r7, lr}
    a2ae:	466f      	mov	r7, sp
    a2b0:	b084      	sub	sp, #16
    a2b2:	9000      	str	r0, [sp, #0]
    a2b4:	9101      	str	r1, [sp, #4]
    a2b6:	7800      	ldrb	r0, [r0, #0]
    a2b8:	9002      	str	r0, [sp, #8]
    a2ba:	7809      	ldrb	r1, [r1, #0]
    a2bc:	9103      	str	r1, [sp, #12]
    a2be:	1a40      	subs	r0, r0, r1
    a2c0:	fab0 f080 	clz	r0, r0
    a2c4:	0940      	lsrs	r0, r0, #5
    a2c6:	b004      	add	sp, #16
    a2c8:	bd80      	pop	{r7, pc}

0000a2ca <__cpsid>:
    a2ca:	b672      	cpsid	i
    a2cc:	4770      	bx	lr

0000a2ce <__cpsie>:
    a2ce:	b662      	cpsie	i
    a2d0:	4770      	bx	lr

0000a2d2 <__dsb>:
    a2d2:	f3bf 8f4f 	dsb	sy
    a2d6:	4770      	bx	lr

0000a2d8 <__nop>:
    a2d8:	bf00      	nop
    a2da:	4770      	bx	lr

0000a2dc <__primask_r>:
    a2dc:	f3ef 8010 	mrs	r0, PRIMASK
    a2e0:	4770      	bx	lr

0000a2e2 <__udf>:
    a2e2:	de00      	udf	#0
    a2e4:	defe      	udf	#254	@ 0xfe

0000a2e6 <_ZN63_$LT$core..cell..BorrowMutError$u20$as$u20$core..fmt..Debug$GT$3fmt17h38e9279fc590690dE>:
    a2e6:	b580      	push	{r7, lr}
    a2e8:	466f      	mov	r7, sp
    a2ea:	e9d1 0200 	ldrd	r0, r2, [r1]
    a2ee:	f64e 21ec 	movw	r1, #60140	@ 0xeaec
    a2f2:	68d3      	ldr	r3, [r2, #12]
    a2f4:	f2c0 0100 	movt	r1, #0
    a2f8:	220e      	movs	r2, #14
    a2fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    a2fe:	4718      	bx	r3

0000a300 <_ZN4core4cell22panic_already_borrowed17h6cb71ddacd41e154E>:
    a300:	b580      	push	{r7, lr}
    a302:	466f      	mov	r7, sp
    a304:	b08a      	sub	sp, #40	@ 0x28
    a306:	4601      	mov	r1, r0
    a308:	2000      	movs	r0, #0
    a30a:	9005      	str	r0, [sp, #20]
    a30c:	2001      	movs	r0, #1
    a30e:	9002      	str	r0, [sp, #8]
    a310:	f64e 320c 	movw	r2, #60172	@ 0xeb0c
    a314:	9004      	str	r0, [sp, #16]
    a316:	a807      	add	r0, sp, #28
    a318:	9003      	str	r0, [sp, #12]
    a31a:	f24a 20e7 	movw	r0, #41703	@ 0xa2e7
    a31e:	f2c0 0000 	movt	r0, #0
    a322:	f2c0 0200 	movt	r2, #0
    a326:	9008      	str	r0, [sp, #32]
    a328:	1e78      	subs	r0, r7, #1
    a32a:	9007      	str	r0, [sp, #28]
    a32c:	a801      	add	r0, sp, #4
    a32e:	9201      	str	r2, [sp, #4]
    a330:	f000 f87c 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000a334 <_ZN4core6option13expect_failed17hf682f50f2caa2db5E>:
    a334:	b580      	push	{r7, lr}
    a336:	466f      	mov	r7, sp
    a338:	b08a      	sub	sp, #40	@ 0x28
    a33a:	e9cd 0100 	strd	r0, r1, [sp]
    a33e:	2000      	movs	r0, #0
    a340:	9006      	str	r0, [sp, #24]
    a342:	2001      	movs	r0, #1
    a344:	9003      	str	r0, [sp, #12]
    a346:	f64b 7140 	movw	r1, #48960	@ 0xbf40
    a34a:	9005      	str	r0, [sp, #20]
    a34c:	a808      	add	r0, sp, #32
    a34e:	9004      	str	r0, [sp, #16]
    a350:	f24b 4017 	movw	r0, #46103	@ 0xb417
    a354:	f2c0 0000 	movt	r0, #0
    a358:	f2c0 0100 	movt	r1, #0
    a35c:	9009      	str	r0, [sp, #36]	@ 0x24
    a35e:	4668      	mov	r0, sp
    a360:	9008      	str	r0, [sp, #32]
    a362:	a802      	add	r0, sp, #8
    a364:	9102      	str	r1, [sp, #8]
    a366:	4611      	mov	r1, r2
    a368:	f000 f860 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000a36c <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h31e6d42fa2f9de00E>:
    a36c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a36e:	af03      	add	r7, sp, #12
    a370:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    a374:	b08d      	sub	sp, #52	@ 0x34
    a376:	e9d1 ba00 	ldrd	fp, sl, [r1]
    a37a:	f64e 3150 	movw	r1, #60240	@ 0xeb50
    a37e:	f8da 600c 	ldr.w	r6, [sl, #12]
    a382:	4681      	mov	r9, r0
    a384:	f2c0 0100 	movt	r1, #0
    a388:	220c      	movs	r2, #12
    a38a:	4658      	mov	r0, fp
    a38c:	47b0      	blx	r6
    a38e:	b120      	cbz	r0, a39a <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h31e6d42fa2f9de00E+0x2e>
    a390:	2001      	movs	r0, #1
    a392:	b00d      	add	sp, #52	@ 0x34
    a394:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a39a:	f64e 3238 	movw	r2, #60216	@ 0xeb38
    a39e:	2100      	movs	r1, #0
    a3a0:	f8d9 0004 	ldr.w	r0, [r9, #4]
    a3a4:	f2c0 0200 	movt	r2, #0
    a3a8:	9105      	str	r1, [sp, #20]
    a3aa:	2103      	movs	r1, #3
    a3ac:	9201      	str	r2, [sp, #4]
    a3ae:	f100 020c 	add.w	r2, r0, #12
    a3b2:	9102      	str	r1, [sp, #8]
    a3b4:	f10d 081c 	add.w	r8, sp, #28
    a3b8:	9104      	str	r1, [sp, #16]
    a3ba:	f24b 3109 	movw	r1, #45833	@ 0xb309
    a3be:	f2c0 0100 	movt	r1, #0
    a3c2:	f8cd 800c 	str.w	r8, [sp, #12]
    a3c6:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
    a3ca:	aa01      	add	r2, sp, #4
    a3cc:	910c      	str	r1, [sp, #48]	@ 0x30
    a3ce:	f100 0108 	add.w	r1, r0, #8
    a3d2:	9109      	str	r1, [sp, #36]	@ 0x24
    a3d4:	f24b 4117 	movw	r1, #46103	@ 0xb417
    a3d8:	f2c0 0100 	movt	r1, #0
    a3dc:	e9cd 0107 	strd	r0, r1, [sp, #28]
    a3e0:	4658      	mov	r0, fp
    a3e2:	4651      	mov	r1, sl
    a3e4:	f000 f8cb 	bl	a57e <_ZN4core3fmt5write17h70d6640cc98da3feE>
    a3e8:	b120      	cbz	r0, a3f4 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h31e6d42fa2f9de00E+0x88>
    a3ea:	2001      	movs	r0, #1
    a3ec:	b00d      	add	sp, #52	@ 0x34
    a3ee:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3f4:	f64e 315c 	movw	r1, #60252	@ 0xeb5c
    a3f8:	4658      	mov	r0, fp
    a3fa:	f2c0 0100 	movt	r1, #0
    a3fe:	2202      	movs	r2, #2
    a400:	47b0      	blx	r6
    a402:	b120      	cbz	r0, a40e <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h31e6d42fa2f9de00E+0xa2>
    a404:	2001      	movs	r0, #1
    a406:	b00d      	add	sp, #52	@ 0x34
    a408:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a40e:	f8d9 c000 	ldr.w	ip, [r9]
    a412:	4641      	mov	r1, r8
    a414:	e89c 007d 	ldmia.w	ip, {r0, r2, r3, r4, r5, r6}
    a418:	c17d      	stmia	r1!, {r0, r2, r3, r4, r5, r6}
    a41a:	4658      	mov	r0, fp
    a41c:	4651      	mov	r1, sl
    a41e:	4642      	mov	r2, r8
    a420:	f000 f8ad 	bl	a57e <_ZN4core3fmt5write17h70d6640cc98da3feE>
    a424:	b00d      	add	sp, #52	@ 0x34
    a426:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a42a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>:
    a42c:	b580      	push	{r7, lr}
    a42e:	466f      	mov	r7, sp
    a430:	b084      	sub	sp, #16
    a432:	e9cd 0101 	strd	r0, r1, [sp, #4]
    a436:	a801      	add	r0, sp, #4
    a438:	2201      	movs	r2, #1
    a43a:	f8ad 200c 	strh.w	r2, [sp, #12]
    a43e:	f7fd f924 	bl	768a <_RNvCscSpY9Juk0HT_7___rustc17rust_begin_unwind>

0000a442 <_ZN4core9panicking18panic_nounwind_fmt17hc8d70d9c1bb0d40fE>:
    a442:	b580      	push	{r7, lr}
    a444:	466f      	mov	r7, sp
    a446:	b08a      	sub	sp, #40	@ 0x28
    a448:	f10d 0c04 	add.w	ip, sp, #4
    a44c:	e890 4370 	ldmia.w	r0, {r4, r5, r6, r8, r9, lr}
    a450:	2000      	movs	r0, #0
    a452:	4663      	mov	r3, ip
    a454:	e883 4370 	stmia.w	r3, {r4, r5, r6, r8, r9, lr}
    a458:	f88d 0024 	strb.w	r0, [sp, #36]	@ 0x24
    a45c:	a807      	add	r0, sp, #28
    a45e:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
    a462:	e9cd c207 	strd	ip, r2, [sp, #28]
    a466:	f7fd f910 	bl	768a <_RNvCscSpY9Juk0HT_7___rustc17rust_begin_unwind>

0000a46a <_ZN4core9panicking5panic17h5284cc5a37f28ed9E>:
    a46a:	b580      	push	{r7, lr}
    a46c:	466f      	mov	r7, sp
    a46e:	b088      	sub	sp, #32
    a470:	4694      	mov	ip, r2
    a472:	2201      	movs	r2, #1
    a474:	9201      	str	r2, [sp, #4]
    a476:	aa06      	add	r2, sp, #24
    a478:	2300      	movs	r3, #0
    a47a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a47e:	9200      	str	r2, [sp, #0]
    a480:	2204      	movs	r2, #4
    a482:	4668      	mov	r0, sp
    a484:	4661      	mov	r1, ip
    a486:	9304      	str	r3, [sp, #16]
    a488:	9303      	str	r3, [sp, #12]
    a48a:	9202      	str	r2, [sp, #8]
    a48c:	f7ff ffce 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000a490 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E>:
    a490:	b580      	push	{r7, lr}
    a492:	466f      	mov	r7, sp
    a494:	b088      	sub	sp, #32
    a496:	2200      	movs	r2, #0
    a498:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a49c:	9204      	str	r2, [sp, #16]
    a49e:	2301      	movs	r3, #1
    a4a0:	9203      	str	r2, [sp, #12]
    a4a2:	2204      	movs	r2, #4
    a4a4:	9202      	str	r2, [sp, #8]
    a4a6:	f64e 327c 	movw	r2, #60284	@ 0xeb7c
    a4aa:	f2c0 0200 	movt	r2, #0
    a4ae:	4668      	mov	r0, sp
    a4b0:	2100      	movs	r1, #0
    a4b2:	9301      	str	r3, [sp, #4]
    a4b4:	ab06      	add	r3, sp, #24
    a4b6:	9300      	str	r3, [sp, #0]
    a4b8:	f7ff ffc3 	bl	a442 <_ZN4core9panicking18panic_nounwind_fmt17hc8d70d9c1bb0d40fE>

0000a4bc <_ZN4core9panicking14panic_explicit17hd41be345c3087614E>:
    a4bc:	b580      	push	{r7, lr}
    a4be:	466f      	mov	r7, sp
    a4c0:	b088      	sub	sp, #32
    a4c2:	4601      	mov	r1, r0
    a4c4:	2000      	movs	r0, #0
    a4c6:	9004      	str	r0, [sp, #16]
    a4c8:	2001      	movs	r0, #1
    a4ca:	9001      	str	r0, [sp, #4]
    a4cc:	f64b 7240 	movw	r2, #48960	@ 0xbf40
    a4d0:	9003      	str	r0, [sp, #12]
    a4d2:	a806      	add	r0, sp, #24
    a4d4:	9002      	str	r0, [sp, #8]
    a4d6:	f24b 4017 	movw	r0, #46103	@ 0xb417
    a4da:	f2c0 0000 	movt	r0, #0
    a4de:	f2c0 0200 	movt	r2, #0
    a4e2:	9007      	str	r0, [sp, #28]
    a4e4:	f64e 309c 	movw	r0, #60316	@ 0xeb9c
    a4e8:	f2c0 0000 	movt	r0, #0
    a4ec:	9200      	str	r2, [sp, #0]
    a4ee:	9006      	str	r0, [sp, #24]
    a4f0:	4668      	mov	r0, sp
    a4f2:	f7ff ff9b 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    a4f6:	d4d4      	bmi.n	a4a2 <_ZN4core9panicking14panic_nounwind17h5e77e7d8ad1838b7E+0x12>

0000a4f8 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E>:
    a4f8:	b580      	push	{r7, lr}
    a4fa:	466f      	mov	r7, sp
    a4fc:	b08c      	sub	sp, #48	@ 0x30
    a4fe:	e9cd 0100 	strd	r0, r1, [sp]
    a502:	2000      	movs	r0, #0
    a504:	9006      	str	r0, [sp, #24]
    a506:	2002      	movs	r0, #2
    a508:	4908      	ldr	r1, [pc, #32]	@ (a52c <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E+0x34>)
    a50a:	9102      	str	r1, [sp, #8]
    a50c:	4669      	mov	r1, sp
    a50e:	9003      	str	r0, [sp, #12]
    a510:	9005      	str	r0, [sp, #20]
    a512:	a808      	add	r0, sp, #32
    a514:	9004      	str	r0, [sp, #16]
    a516:	4806      	ldr	r0, [pc, #24]	@ (a530 <_ZN4core9panicking18panic_bounds_check17hbfa4b59d350ae7c0E+0x38>)
    a518:	e9cd 0109 	strd	r0, r1, [sp, #36]	@ 0x24
    a51c:	4611      	mov	r1, r2
    a51e:	900b      	str	r0, [sp, #44]	@ 0x2c
    a520:	a801      	add	r0, sp, #4
    a522:	9008      	str	r0, [sp, #32]
    a524:	a802      	add	r0, sp, #8
    a526:	f7ff ff81 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>
    a52a:	bf00      	nop
    a52c:	0000ebb8 	.word	0x0000ebb8
    a530:	0000b309 	.word	0x0000b309

0000a534 <_ZN4core6result13unwrap_failed17h5f8fbd930397df6cE>:
    a534:	b580      	push	{r7, lr}
    a536:	466f      	mov	r7, sp
    a538:	b08e      	sub	sp, #56	@ 0x38
    a53a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    a53e:	2000      	movs	r0, #0
    a540:	f64e 31cc 	movw	r1, #60364	@ 0xebcc
    a544:	9008      	str	r0, [sp, #32]
    a546:	2002      	movs	r0, #2
    a548:	9005      	str	r0, [sp, #20]
    a54a:	f2c0 0100 	movt	r1, #0
    a54e:	9007      	str	r0, [sp, #28]
    a550:	a80a      	add	r0, sp, #40	@ 0x28
    a552:	9006      	str	r0, [sp, #24]
    a554:	f24b 4007 	movw	r0, #46087	@ 0xb407
    a558:	f2c0 0000 	movt	r0, #0
    a55c:	f8d7 c008 	ldr.w	ip, [r7, #8]
    a560:	900d      	str	r0, [sp, #52]	@ 0x34
    a562:	a802      	add	r0, sp, #8
    a564:	900c      	str	r0, [sp, #48]	@ 0x30
    a566:	f24b 4017 	movw	r0, #46103	@ 0xb417
    a56a:	f2c0 0000 	movt	r0, #0
    a56e:	9104      	str	r1, [sp, #16]
    a570:	900b      	str	r0, [sp, #44]	@ 0x2c
    a572:	4668      	mov	r0, sp
    a574:	900a      	str	r0, [sp, #40]	@ 0x28
    a576:	a804      	add	r0, sp, #16
    a578:	4661      	mov	r1, ip
    a57a:	f7ff ff57 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000a57e <_ZN4core3fmt5write17h70d6640cc98da3feE>:
    a57e:	b5f0      	push	{r4, r5, r6, r7, lr}
    a580:	af03      	add	r7, sp, #12
    a582:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    a586:	b087      	sub	sp, #28
    a588:	2300      	movs	r3, #0
    a58a:	6916      	ldr	r6, [r2, #16]
    a58c:	9306      	str	r3, [sp, #24]
    a58e:	2320      	movs	r3, #32
    a590:	f2ce 0300 	movt	r3, #57344	@ 0xe000
    a594:	2e00      	cmp	r6, #0
    a596:	9305      	str	r3, [sp, #20]
    a598:	e9cd 0103 	strd	r0, r1, [sp, #12]
    a59c:	d061      	beq.n	a662 <_ZN4core3fmt5write17h70d6640cc98da3feE+0xe4>
    a59e:	6950      	ldr	r0, [r2, #20]
    a5a0:	2800      	cmp	r0, #0
    a5a2:	f000 8089 	beq.w	a6b8 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x13a>
    a5a6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    a5aa:	f8d2 a000 	ldr.w	sl, [r2]
    a5ae:	6894      	ldr	r4, [r2, #8]
    a5b0:	3801      	subs	r0, #1
    a5b2:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
    a5b6:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    a5ba:	f04f 0800 	mov.w	r8, #0
    a5be:	f04f 0900 	mov.w	r9, #0
    a5c2:	3001      	adds	r0, #1
    a5c4:	9202      	str	r2, [sp, #8]
    a5c6:	9001      	str	r0, [sp, #4]
    a5c8:	eb0a 0109 	add.w	r1, sl, r9
    a5cc:	684a      	ldr	r2, [r1, #4]
    a5ce:	b132      	cbz	r2, a5de <_ZN4core3fmt5write17h70d6640cc98da3feE+0x60>
    a5d0:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
    a5d4:	6809      	ldr	r1, [r1, #0]
    a5d6:	68db      	ldr	r3, [r3, #12]
    a5d8:	4798      	blx	r3
    a5da:	2800      	cmp	r0, #0
    a5dc:	d17c      	bne.n	a6d8 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x15a>
    a5de:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    a5e2:	4430      	add	r0, r6
    a5e4:	8901      	ldrh	r1, [r0, #8]
    a5e6:	b181      	cbz	r1, a60a <_ZN4core3fmt5write17h70d6640cc98da3feE+0x8c>
    a5e8:	2901      	cmp	r1, #1
    a5ea:	d117      	bne.n	a61c <_ZN4core3fmt5write17h70d6640cc98da3feE+0x9e>
    a5ec:	68c1      	ldr	r1, [r0, #12]
    a5ee:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    a5f2:	8889      	ldrh	r1, [r1, #4]
    a5f4:	f836 2008 	ldrh.w	r2, [r6, r8]
    a5f8:	2a02      	cmp	r2, #2
    a5fa:	d00d      	beq.n	a618 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x9a>
    a5fc:	2a01      	cmp	r2, #1
    a5fe:	d113      	bne.n	a628 <_ZN4core3fmt5write17h70d6640cc98da3feE+0xaa>
    a600:	6842      	ldr	r2, [r0, #4]
    a602:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    a606:	8892      	ldrh	r2, [r2, #4]
    a608:	e00f      	b.n	a62a <_ZN4core3fmt5write17h70d6640cc98da3feE+0xac>
    a60a:	eb06 0108 	add.w	r1, r6, r8
    a60e:	8949      	ldrh	r1, [r1, #10]
    a610:	f836 2008 	ldrh.w	r2, [r6, r8]
    a614:	2a02      	cmp	r2, #2
    a616:	d1f1      	bne.n	a5fc <_ZN4core3fmt5write17h70d6640cc98da3feE+0x7e>
    a618:	2200      	movs	r2, #0
    a61a:	e006      	b.n	a62a <_ZN4core3fmt5write17h70d6640cc98da3feE+0xac>
    a61c:	2100      	movs	r1, #0
    a61e:	f836 2008 	ldrh.w	r2, [r6, r8]
    a622:	2a02      	cmp	r2, #2
    a624:	d1ea      	bne.n	a5fc <_ZN4core3fmt5write17h70d6640cc98da3feE+0x7e>
    a626:	e7f7      	b.n	a618 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x9a>
    a628:	8842      	ldrh	r2, [r0, #2]
    a62a:	e9d0 3504 	ldrd	r3, r5, [r0, #16]
    a62e:	f8ad 201a 	strh.w	r2, [sp, #26]
    a632:	f8ad 1018 	strh.w	r1, [sp, #24]
    a636:	a903      	add	r1, sp, #12
    a638:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    a63c:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
    a640:	9505      	str	r5, [sp, #20]
    a642:	6852      	ldr	r2, [r2, #4]
    a644:	4790      	blx	r2
    a646:	2800      	cmp	r0, #0
    a648:	d146      	bne.n	a6d8 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x15a>
    a64a:	f108 0818 	add.w	r8, r8, #24
    a64e:	f109 0908 	add.w	r9, r9, #8
    a652:	45c3      	cmp	fp, r8
    a654:	d1b8      	bne.n	a5c8 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x4a>
    a656:	e9dd a201 	ldrd	sl, r2, [sp, #4]
    a65a:	6850      	ldr	r0, [r2, #4]
    a65c:	4582      	cmp	sl, r0
    a65e:	d330      	bcc.n	a6c2 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x144>
    a660:	e03f      	b.n	a6e2 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x164>
    a662:	68d0      	ldr	r0, [r2, #12]
    a664:	b340      	cbz	r0, a6b8 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x13a>
    a666:	6894      	ldr	r4, [r2, #8]
    a668:	f10d 080c 	add.w	r8, sp, #12
    a66c:	f8d2 b000 	ldr.w	fp, [r2]
    a670:	2600      	movs	r6, #0
    a672:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
    a676:	3801      	subs	r0, #1
    a678:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
    a67c:	9202      	str	r2, [sp, #8]
    a67e:	f100 0a01 	add.w	sl, r0, #1
    a682:	eb0b 01c6 	add.w	r1, fp, r6, lsl #3
    a686:	684a      	ldr	r2, [r1, #4]
    a688:	b12a      	cbz	r2, a696 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x118>
    a68a:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
    a68e:	6809      	ldr	r1, [r1, #0]
    a690:	68db      	ldr	r3, [r3, #12]
    a692:	4798      	blx	r3
    a694:	bb00      	cbnz	r0, a6d8 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x15a>
    a696:	eb04 05c6 	add.w	r5, r4, r6, lsl #3
    a69a:	4641      	mov	r1, r8
    a69c:	e9d5 0200 	ldrd	r0, r2, [r5]
    a6a0:	4790      	blx	r2
    a6a2:	b9c8      	cbnz	r0, a6d8 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x15a>
    a6a4:	f105 0008 	add.w	r0, r5, #8
    a6a8:	3601      	adds	r6, #1
    a6aa:	4548      	cmp	r0, r9
    a6ac:	d1e9      	bne.n	a682 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x104>
    a6ae:	9a02      	ldr	r2, [sp, #8]
    a6b0:	6850      	ldr	r0, [r2, #4]
    a6b2:	4582      	cmp	sl, r0
    a6b4:	d305      	bcc.n	a6c2 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x144>
    a6b6:	e014      	b.n	a6e2 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x164>
    a6b8:	f04f 0a00 	mov.w	sl, #0
    a6bc:	6850      	ldr	r0, [r2, #4]
    a6be:	4582      	cmp	sl, r0
    a6c0:	d20f      	bcs.n	a6e2 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x164>
    a6c2:	6812      	ldr	r2, [r2, #0]
    a6c4:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    a6c8:	68cb      	ldr	r3, [r1, #12]
    a6ca:	f852 103a 	ldr.w	r1, [r2, sl, lsl #3]
    a6ce:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
    a6d2:	6852      	ldr	r2, [r2, #4]
    a6d4:	4798      	blx	r3
    a6d6:	b120      	cbz	r0, a6e2 <_ZN4core3fmt5write17h70d6640cc98da3feE+0x164>
    a6d8:	2001      	movs	r0, #1
    a6da:	b007      	add	sp, #28
    a6dc:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6e2:	2000      	movs	r0, #0
    a6e4:	b007      	add	sp, #28
    a6e6:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a6ec <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE>:
    a6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6ee:	af03      	add	r7, sp, #12
    a6f0:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    a6f4:	b087      	sub	sp, #28
    a6f6:	68fe      	ldr	r6, [r7, #12]
    a6f8:	461c      	mov	r4, r3
    a6fa:	4615      	mov	r5, r2
    a6fc:	4681      	mov	r9, r0
    a6fe:	b159      	cbz	r1, a718 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x2c>
    a700:	f8d9 b008 	ldr.w	fp, [r9, #8]
    a704:	f41b 1000 	ands.w	r0, fp, #2097152	@ 0x200000
    a708:	eb06 5850 	add.w	r8, r6, r0, lsr #21
    a70c:	f04f 002b 	mov.w	r0, #43	@ 0x2b
    a710:	bf08      	it	eq
    a712:	f44f 1088 	moveq.w	r0, #1114112	@ 0x110000
    a716:	e004      	b.n	a722 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x36>
    a718:	f8d9 b008 	ldr.w	fp, [r9, #8]
    a71c:	f106 0801 	add.w	r8, r6, #1
    a720:	202d      	movs	r0, #45	@ 0x2d
    a722:	9006      	str	r0, [sp, #24]
    a724:	68b8      	ldr	r0, [r7, #8]
    a726:	9005      	str	r0, [sp, #20]
    a728:	ea5f 200b 	movs.w	r0, fp, lsl #8
    a72c:	d418      	bmi.n	a760 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x74>
    a72e:	2500      	movs	r5, #0
    a730:	f8b9 a00c 	ldrh.w	sl, [r9, #12]
    a734:	45d0      	cmp	r8, sl
    a736:	f080 8084 	bcs.w	a842 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x156>
    a73a:	ea5f 10cb 	movs.w	r0, fp, lsl #7
    a73e:	9404      	str	r4, [sp, #16]
    a740:	d44b      	bmi.n	a7da <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0xee>
    a742:	f3cb 7041 	ubfx	r0, fp, #29, #2
    a746:	9603      	str	r6, [sp, #12]
    a748:	ebaa 0208 	sub.w	r2, sl, r8
    a74c:	f36f 5b5f 	bfc	fp, #21, #11
    a750:	2400      	movs	r4, #0
    a752:	46aa      	mov	sl, r5
    a754:	e8df f000 	tbb	[pc, r0]
    a758:	02a802aa 	.word	0x02a802aa
    a75c:	4614      	mov	r4, r2
    a75e:	e0a5      	b.n	a8ac <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x1c0>
    a760:	2c10      	cmp	r4, #16
    a762:	d264      	bcs.n	a82e <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x142>
    a764:	2c00      	cmp	r4, #0
    a766:	f000 8087 	beq.w	a878 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x18c>
    a76a:	f004 0c03 	and.w	ip, r4, #3
    a76e:	08a2      	lsrs	r2, r4, #2
    a770:	f04f 0000 	mov.w	r0, #0
    a774:	f000 80c1 	beq.w	a8fa <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x20e>
    a778:	f002 0203 	and.w	r2, r2, #3
    a77c:	1c6b      	adds	r3, r5, #1
    a77e:	e9cd 6403 	strd	r6, r4, [sp, #12]
    a782:	46aa      	mov	sl, r5
    a784:	eba0 0e82 	sub.w	lr, r0, r2, lsl #2
    a788:	f06f 0403 	mvn.w	r4, #3
    a78c:	191e      	adds	r6, r3, r4
    a78e:	3404      	adds	r4, #4
    a790:	f996 1003 	ldrsb.w	r1, [r6, #3]
    a794:	f996 5006 	ldrsb.w	r5, [r6, #6]
    a798:	f996 2005 	ldrsb.w	r2, [r6, #5]
    a79c:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    a7a0:	f996 6004 	ldrsb.w	r6, [r6, #4]
    a7a4:	bfc8      	it	gt
    a7a6:	3001      	addgt	r0, #1
    a7a8:	eb0e 0104 	add.w	r1, lr, r4
    a7ac:	f116 0f41 	cmn.w	r6, #65	@ 0x41
    a7b0:	bfc8      	it	gt
    a7b2:	3001      	addgt	r0, #1
    a7b4:	f112 0f41 	cmn.w	r2, #65	@ 0x41
    a7b8:	bfc8      	it	gt
    a7ba:	3001      	addgt	r0, #1
    a7bc:	f115 0f41 	cmn.w	r5, #65	@ 0x41
    a7c0:	bfc8      	it	gt
    a7c2:	3001      	addgt	r0, #1
    a7c4:	3104      	adds	r1, #4
    a7c6:	d1e1      	bne.n	a78c <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0xa0>
    a7c8:	1d22      	adds	r2, r4, #4
    a7ca:	9e03      	ldr	r6, [sp, #12]
    a7cc:	9c04      	ldr	r4, [sp, #16]
    a7ce:	4655      	mov	r5, sl
    a7d0:	f1bc 0f00 	cmp.w	ip, #0
    a7d4:	f040 8095 	bne.w	a902 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x216>
    a7d8:	e0ab      	b.n	a932 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x246>
    a7da:	e9d9 1002 	ldrd	r1, r0, [r9, #8]
    a7de:	462b      	mov	r3, r5
    a7e0:	e9d9 b400 	ldrd	fp, r4, [r9]
    a7e4:	9001      	str	r0, [sp, #4]
    a7e6:	2000      	movs	r0, #0
    a7e8:	f6c9 70e0 	movt	r0, #40928	@ 0x9fe0
    a7ec:	9102      	str	r1, [sp, #8]
    a7ee:	4008      	ands	r0, r1
    a7f0:	4621      	mov	r1, r4
    a7f2:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
    a7f6:	f040 0030 	orr.w	r0, r0, #48	@ 0x30
    a7fa:	f8c9 0008 	str.w	r0, [r9, #8]
    a7fe:	9804      	ldr	r0, [sp, #16]
    a800:	9000      	str	r0, [sp, #0]
    a802:	4658      	mov	r0, fp
    a804:	9a06      	ldr	r2, [sp, #24]
    a806:	f000 f8b1 	bl	a96c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hbee2c2faf78a9d07E>
    a80a:	2800      	cmp	r0, #0
    a80c:	d16f      	bne.n	a8ee <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x202>
    a80e:	ebaa 0008 	sub.w	r0, sl, r8
    a812:	9603      	str	r6, [sp, #12]
    a814:	2500      	movs	r5, #0
    a816:	b286      	uxth	r6, r0
    a818:	b2a8      	uxth	r0, r5
    a81a:	42b0      	cmp	r0, r6
    a81c:	d234      	bcs.n	a888 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x19c>
    a81e:	6922      	ldr	r2, [r4, #16]
    a820:	4658      	mov	r0, fp
    a822:	2130      	movs	r1, #48	@ 0x30
    a824:	4790      	blx	r2
    a826:	3501      	adds	r5, #1
    a828:	2800      	cmp	r0, #0
    a82a:	d0f5      	beq.n	a818 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x12c>
    a82c:	e05f      	b.n	a8ee <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x202>
    a82e:	4628      	mov	r0, r5
    a830:	4621      	mov	r1, r4
    a832:	f000 f9b8 	bl	aba6 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE>
    a836:	4480      	add	r8, r0
    a838:	f8b9 a00c 	ldrh.w	sl, [r9, #12]
    a83c:	45d0      	cmp	r8, sl
    a83e:	f4ff af7c 	bcc.w	a73a <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x4e>
    a842:	4620      	mov	r0, r4
    a844:	462b      	mov	r3, r5
    a846:	e9d9 4500 	ldrd	r4, r5, [r9]
    a84a:	9000      	str	r0, [sp, #0]
    a84c:	4629      	mov	r1, r5
    a84e:	9a06      	ldr	r2, [sp, #24]
    a850:	4620      	mov	r0, r4
    a852:	f000 f88b 	bl	a96c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hbee2c2faf78a9d07E>
    a856:	b128      	cbz	r0, a864 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x178>
    a858:	2401      	movs	r4, #1
    a85a:	4620      	mov	r0, r4
    a85c:	b007      	add	sp, #28
    a85e:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a864:	68eb      	ldr	r3, [r5, #12]
    a866:	4620      	mov	r0, r4
    a868:	9905      	ldr	r1, [sp, #20]
    a86a:	4632      	mov	r2, r6
    a86c:	b007      	add	sp, #28
    a86e:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a872:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a876:	4718      	bx	r3
    a878:	2000      	movs	r0, #0
    a87a:	4480      	add	r8, r0
    a87c:	f8b9 a00c 	ldrh.w	sl, [r9, #12]
    a880:	45d0      	cmp	r8, sl
    a882:	f4ff af5a 	bcc.w	a73a <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x4e>
    a886:	e7dc      	b.n	a842 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x156>
    a888:	68e3      	ldr	r3, [r4, #12]
    a88a:	4658      	mov	r0, fp
    a88c:	9905      	ldr	r1, [sp, #20]
    a88e:	9a03      	ldr	r2, [sp, #12]
    a890:	4798      	blx	r3
    a892:	bb60      	cbnz	r0, a8ee <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x202>
    a894:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
    a898:	2400      	movs	r4, #0
    a89a:	e9c9 0102 	strd	r0, r1, [r9, #8]
    a89e:	4620      	mov	r0, r4
    a8a0:	b007      	add	sp, #28
    a8a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8a8:	b290      	uxth	r0, r2
    a8aa:	0844      	lsrs	r4, r0, #1
    a8ac:	e9d9 5800 	ldrd	r5, r8, [r9]
    a8b0:	2600      	movs	r6, #0
    a8b2:	9202      	str	r2, [sp, #8]
    a8b4:	b2a0      	uxth	r0, r4
    a8b6:	b2b1      	uxth	r1, r6
    a8b8:	4281      	cmp	r1, r0
    a8ba:	d208      	bcs.n	a8ce <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x1e2>
    a8bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
    a8c0:	4628      	mov	r0, r5
    a8c2:	4659      	mov	r1, fp
    a8c4:	4790      	blx	r2
    a8c6:	3601      	adds	r6, #1
    a8c8:	2800      	cmp	r0, #0
    a8ca:	d0f3      	beq.n	a8b4 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x1c8>
    a8cc:	e00f      	b.n	a8ee <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x202>
    a8ce:	9804      	ldr	r0, [sp, #16]
    a8d0:	4641      	mov	r1, r8
    a8d2:	9000      	str	r0, [sp, #0]
    a8d4:	4628      	mov	r0, r5
    a8d6:	9a06      	ldr	r2, [sp, #24]
    a8d8:	4653      	mov	r3, sl
    a8da:	f000 f847 	bl	a96c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hbee2c2faf78a9d07E>
    a8de:	b930      	cbnz	r0, a8ee <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x202>
    a8e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a8e4:	4628      	mov	r0, r5
    a8e6:	9905      	ldr	r1, [sp, #20]
    a8e8:	9a03      	ldr	r2, [sp, #12]
    a8ea:	4798      	blx	r3
    a8ec:	b340      	cbz	r0, a940 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x254>
    a8ee:	2401      	movs	r4, #1
    a8f0:	4620      	mov	r0, r4
    a8f2:	b007      	add	sp, #28
    a8f4:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    a8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8fa:	2200      	movs	r2, #0
    a8fc:	f1bc 0f00 	cmp.w	ip, #0
    a900:	d017      	beq.n	a932 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x246>
    a902:	56a9      	ldrsb	r1, [r5, r2]
    a904:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    a908:	bfc8      	it	gt
    a90a:	3001      	addgt	r0, #1
    a90c:	f1bc 0f01 	cmp.w	ip, #1
    a910:	d00f      	beq.n	a932 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x246>
    a912:	442a      	add	r2, r5
    a914:	f992 1001 	ldrsb.w	r1, [r2, #1]
    a918:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    a91c:	bfc8      	it	gt
    a91e:	3001      	addgt	r0, #1
    a920:	f1bc 0f02 	cmp.w	ip, #2
    a924:	d005      	beq.n	a932 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x246>
    a926:	f992 1002 	ldrsb.w	r1, [r2, #2]
    a92a:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    a92e:	bfc8      	it	gt
    a930:	3001      	addgt	r0, #1
    a932:	4480      	add	r8, r0
    a934:	f8b9 a00c 	ldrh.w	sl, [r9, #12]
    a938:	45d0      	cmp	r8, sl
    a93a:	f4bf af82 	bcs.w	a842 <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x156>
    a93e:	e6fc      	b.n	a73a <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x4e>
    a940:	9802      	ldr	r0, [sp, #8]
    a942:	2600      	movs	r6, #0
    a944:	1b00      	subs	r0, r0, r4
    a946:	fa1f f980 	uxth.w	r9, r0
    a94a:	b2b0      	uxth	r0, r6
    a94c:	4548      	cmp	r0, r9
    a94e:	f04f 0400 	mov.w	r4, #0
    a952:	bf38      	it	cc
    a954:	2401      	movcc	r4, #1
    a956:	f4bf af80 	bcs.w	a85a <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x16e>
    a95a:	f8d8 2010 	ldr.w	r2, [r8, #16]
    a95e:	4628      	mov	r0, r5
    a960:	4659      	mov	r1, fp
    a962:	4790      	blx	r2
    a964:	3601      	adds	r6, #1
    a966:	2800      	cmp	r0, #0
    a968:	d0ef      	beq.n	a94a <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x25e>
    a96a:	e776      	b.n	a85a <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x16e>

0000a96c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hbee2c2faf78a9d07E>:
    a96c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a96e:	af03      	add	r7, sp, #12
    a970:	f84d 8d04 	str.w	r8, [sp, #-4]!
    a974:	f8d7 8008 	ldr.w	r8, [r7, #8]
    a978:	461c      	mov	r4, r3
    a97a:	460e      	mov	r6, r1
    a97c:	f5b2 1f88 	cmp.w	r2, #1114112	@ 0x110000
    a980:	d00a      	beq.n	a998 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hbee2c2faf78a9d07E+0x2c>
    a982:	6933      	ldr	r3, [r6, #16]
    a984:	4611      	mov	r1, r2
    a986:	4605      	mov	r5, r0
    a988:	4798      	blx	r3
    a98a:	4601      	mov	r1, r0
    a98c:	4628      	mov	r0, r5
    a98e:	b119      	cbz	r1, a998 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hbee2c2faf78a9d07E+0x2c>
    a990:	2001      	movs	r0, #1
    a992:	f85d 8b04 	ldr.w	r8, [sp], #4
    a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a998:	b13c      	cbz	r4, a9aa <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hbee2c2faf78a9d07E+0x3e>
    a99a:	68f3      	ldr	r3, [r6, #12]
    a99c:	4621      	mov	r1, r4
    a99e:	4642      	mov	r2, r8
    a9a0:	f85d 8b04 	ldr.w	r8, [sp], #4
    a9a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a9a8:	4718      	bx	r3
    a9aa:	2000      	movs	r0, #0
    a9ac:	f85d 8b04 	ldr.w	r8, [sp], #4
    a9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9b2:	d4d4      	bmi.n	a95e <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE+0x272>

0000a9b4 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E>:
    a9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9b6:	af03      	add	r7, sp, #12
    a9b8:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    a9bc:	b081      	sub	sp, #4
    a9be:	f8d0 9008 	ldr.w	r9, [r0, #8]
    a9c2:	4693      	mov	fp, r2
    a9c4:	4688      	mov	r8, r1
    a9c6:	f019 5fc0 	tst.w	r9, #402653184	@ 0x18000000
    a9ca:	f000 8078 	beq.w	aabe <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x10a>
    a9ce:	ea5f 01c9 	movs.w	r1, r9, lsl #3
    a9d2:	d43b      	bmi.n	aa4c <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x98>
    a9d4:	f1bb 0f10 	cmp.w	fp, #16
    a9d8:	d256      	bcs.n	aa88 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xd4>
    a9da:	f1bb 0f00 	cmp.w	fp, #0
    a9de:	f000 80b3 	beq.w	ab48 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x194>
    a9e2:	f00b 0c03 	and.w	ip, fp, #3
    a9e6:	ea5f 039b 	movs.w	r3, fp, lsr #2
    a9ea:	f04f 0100 	mov.w	r1, #0
    a9ee:	f000 80af 	beq.w	ab50 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x19c>
    a9f2:	f003 0303 	and.w	r3, r3, #3
    a9f6:	f108 0a01 	add.w	sl, r8, #1
    a9fa:	f06f 0503 	mvn.w	r5, #3
    a9fe:	eba1 0e83 	sub.w	lr, r1, r3, lsl #2
    aa02:	eb0a 0405 	add.w	r4, sl, r5
    aa06:	3504      	adds	r5, #4
    aa08:	f994 3003 	ldrsb.w	r3, [r4, #3]
    aa0c:	f994 2006 	ldrsb.w	r2, [r4, #6]
    aa10:	f994 6005 	ldrsb.w	r6, [r4, #5]
    aa14:	f113 0f41 	cmn.w	r3, #65	@ 0x41
    aa18:	f994 4004 	ldrsb.w	r4, [r4, #4]
    aa1c:	bfc8      	it	gt
    aa1e:	3101      	addgt	r1, #1
    aa20:	f114 0f41 	cmn.w	r4, #65	@ 0x41
    aa24:	bfc8      	it	gt
    aa26:	3101      	addgt	r1, #1
    aa28:	f116 0f41 	cmn.w	r6, #65	@ 0x41
    aa2c:	bfc8      	it	gt
    aa2e:	3101      	addgt	r1, #1
    aa30:	f112 0f41 	cmn.w	r2, #65	@ 0x41
    aa34:	eb0e 0205 	add.w	r2, lr, r5
    aa38:	bfc8      	it	gt
    aa3a:	3101      	addgt	r1, #1
    aa3c:	3204      	adds	r2, #4
    aa3e:	d1e0      	bne.n	aa02 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x4e>
    aa40:	1d2b      	adds	r3, r5, #4
    aa42:	f1bc 0f00 	cmp.w	ip, #0
    aa46:	f040 8087 	bne.w	ab58 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x1a4>
    aa4a:	e029      	b.n	aaa0 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xec>
    aa4c:	89c1      	ldrh	r1, [r0, #14]
    aa4e:	b319      	cbz	r1, aa98 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xe4>
    aa50:	eb08 030b 	add.w	r3, r8, fp
    aa54:	f04f 0b00 	mov.w	fp, #0
    aa58:	460a      	mov	r2, r1
    aa5a:	4645      	mov	r5, r8
    aa5c:	e007      	b.n	aa6e <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xba>
    aa5e:	2df0      	cmp	r5, #240	@ 0xf0
    aa60:	bf2c      	ite	cs
    aa62:	1d35      	addcs	r5, r6, #4
    aa64:	1cf5      	addcc	r5, r6, #3
    aa66:	1bae      	subs	r6, r5, r6
    aa68:	3a01      	subs	r2, #1
    aa6a:	44b3      	add	fp, r6
    aa6c:	d016      	beq.n	aa9c <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xe8>
    aa6e:	429d      	cmp	r5, r3
    aa70:	d015      	beq.n	aa9e <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xea>
    aa72:	462e      	mov	r6, r5
    aa74:	f915 4b01 	ldrsb.w	r4, [r5], #1
    aa78:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
    aa7c:	dcf3      	bgt.n	aa66 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xb2>
    aa7e:	b2e5      	uxtb	r5, r4
    aa80:	2de0      	cmp	r5, #224	@ 0xe0
    aa82:	d2ec      	bcs.n	aa5e <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xaa>
    aa84:	1cb5      	adds	r5, r6, #2
    aa86:	e7ee      	b.n	aa66 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xb2>
    aa88:	4604      	mov	r4, r0
    aa8a:	4640      	mov	r0, r8
    aa8c:	4659      	mov	r1, fp
    aa8e:	f000 f88a 	bl	aba6 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE>
    aa92:	4601      	mov	r1, r0
    aa94:	4620      	mov	r0, r4
    aa96:	e003      	b.n	aaa0 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xec>
    aa98:	f04f 0b00 	mov.w	fp, #0
    aa9c:	2200      	movs	r2, #0
    aa9e:	1a89      	subs	r1, r1, r2
    aaa0:	8982      	ldrh	r2, [r0, #12]
    aaa2:	4291      	cmp	r1, r2
    aaa4:	d20b      	bcs.n	aabe <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x10a>
    aaa6:	1a53      	subs	r3, r2, r1
    aaa8:	f3c9 7141 	ubfx	r1, r9, #29, #2
    aaac:	f36f 595f 	bfc	r9, #21, #11
    aab0:	2600      	movs	r6, #0
    aab2:	e8df f001 	tbb	[pc, r1]
    aab6:	0211      	.short	0x0211
    aab8:	110f      	.short	0x110f
    aaba:	461e      	mov	r6, r3
    aabc:	e00c      	b.n	aad8 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x124>
    aabe:	e9d0 0100 	ldrd	r0, r1, [r0]
    aac2:	465a      	mov	r2, fp
    aac4:	68cb      	ldr	r3, [r1, #12]
    aac6:	4641      	mov	r1, r8
    aac8:	b001      	add	sp, #4
    aaca:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    aace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    aad2:	4718      	bx	r3
    aad4:	b299      	uxth	r1, r3
    aad6:	084e      	lsrs	r6, r1, #1
    aad8:	e9d0 5a00 	ldrd	r5, sl, [r0]
    aadc:	2400      	movs	r4, #0
    aade:	9300      	str	r3, [sp, #0]
    aae0:	b2b0      	uxth	r0, r6
    aae2:	b2a1      	uxth	r1, r4
    aae4:	4281      	cmp	r1, r0
    aae6:	d20d      	bcs.n	ab04 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x150>
    aae8:	f8da 2010 	ldr.w	r2, [sl, #16]
    aaec:	4628      	mov	r0, r5
    aaee:	4649      	mov	r1, r9
    aaf0:	4790      	blx	r2
    aaf2:	3401      	adds	r4, #1
    aaf4:	2800      	cmp	r0, #0
    aaf6:	d0f3      	beq.n	aae0 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x12c>
    aaf8:	2601      	movs	r6, #1
    aafa:	4630      	mov	r0, r6
    aafc:	b001      	add	sp, #4
    aafe:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    ab02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab04:	f8da 300c 	ldr.w	r3, [sl, #12]
    ab08:	4628      	mov	r0, r5
    ab0a:	4641      	mov	r1, r8
    ab0c:	465a      	mov	r2, fp
    ab0e:	4798      	blx	r3
    ab10:	b128      	cbz	r0, ab1e <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x16a>
    ab12:	2601      	movs	r6, #1
    ab14:	4630      	mov	r0, r6
    ab16:	b001      	add	sp, #4
    ab18:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    ab1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab1e:	9800      	ldr	r0, [sp, #0]
    ab20:	2400      	movs	r4, #0
    ab22:	1b80      	subs	r0, r0, r6
    ab24:	fa1f f880 	uxth.w	r8, r0
    ab28:	b2a0      	uxth	r0, r4
    ab2a:	4540      	cmp	r0, r8
    ab2c:	f04f 0600 	mov.w	r6, #0
    ab30:	bf38      	it	cc
    ab32:	2601      	movcc	r6, #1
    ab34:	d2e1      	bcs.n	aafa <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x146>
    ab36:	f8da 2010 	ldr.w	r2, [sl, #16]
    ab3a:	4628      	mov	r0, r5
    ab3c:	4649      	mov	r1, r9
    ab3e:	4790      	blx	r2
    ab40:	3401      	adds	r4, #1
    ab42:	2800      	cmp	r0, #0
    ab44:	d0f0      	beq.n	ab28 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x174>
    ab46:	e7d8      	b.n	aafa <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0x146>
    ab48:	f04f 0b00 	mov.w	fp, #0
    ab4c:	2100      	movs	r1, #0
    ab4e:	e7a7      	b.n	aaa0 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xec>
    ab50:	2300      	movs	r3, #0
    ab52:	f1bc 0f00 	cmp.w	ip, #0
    ab56:	d0a3      	beq.n	aaa0 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xec>
    ab58:	f918 2003 	ldrsb.w	r2, [r8, r3]
    ab5c:	f112 0f41 	cmn.w	r2, #65	@ 0x41
    ab60:	bfc8      	it	gt
    ab62:	3101      	addgt	r1, #1
    ab64:	f1bc 0f01 	cmp.w	ip, #1
    ab68:	d09a      	beq.n	aaa0 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xec>
    ab6a:	4443      	add	r3, r8
    ab6c:	f993 2001 	ldrsb.w	r2, [r3, #1]
    ab70:	f112 0f41 	cmn.w	r2, #65	@ 0x41
    ab74:	bfc8      	it	gt
    ab76:	3101      	addgt	r1, #1
    ab78:	f1bc 0f02 	cmp.w	ip, #2
    ab7c:	f43f af90 	beq.w	aaa0 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xec>
    ab80:	f993 2002 	ldrsb.w	r2, [r3, #2]
    ab84:	f112 0f41 	cmn.w	r2, #65	@ 0x41
    ab88:	bfc8      	it	gt
    ab8a:	3101      	addgt	r1, #1
    ab8c:	e788      	b.n	aaa0 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E+0xec>

0000ab8e <_ZN4core3fmt9Formatter9write_str17hf2abd6d7d3a79bb2E>:
    ab8e:	b580      	push	{r7, lr}
    ab90:	466f      	mov	r7, sp
    ab92:	e9d0 0300 	ldrd	r0, r3, [r0]
    ab96:	68db      	ldr	r3, [r3, #12]
    ab98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    ab9c:	4718      	bx	r3

0000ab9e <_ZN4core5slice5index26slice_start_index_len_fail17hf0e445734c2ea2eeE>:
    ab9e:	b580      	push	{r7, lr}
    aba0:	466f      	mov	r7, sp
    aba2:	f000 fc42 	bl	b42a <_ZN4core5slice5index26slice_start_index_len_fail8do_panic7runtime17hbc22bef2b91ccf62E>

0000aba6 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE>:
    aba6:	b5f0      	push	{r4, r5, r6, r7, lr}
    aba8:	af03      	add	r7, sp, #12
    abaa:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    abae:	b082      	sub	sp, #8
    abb0:	4681      	mov	r9, r0
    abb2:	3003      	adds	r0, #3
    abb4:	f020 0a03 	bic.w	sl, r0, #3
    abb8:	ebaa 0809 	sub.w	r8, sl, r9
    abbc:	4541      	cmp	r1, r8
    abbe:	d235      	bcs.n	ac2c <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x86>
    abc0:	2900      	cmp	r1, #0
    abc2:	d046      	beq.n	ac52 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0xac>
    abc4:	f001 0c03 	and.w	ip, r1, #3
    abc8:	0889      	lsrs	r1, r1, #2
    abca:	f04f 0000 	mov.w	r0, #0
    abce:	f000 8232 	beq.w	b036 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x490>
    abd2:	eba0 0e81 	sub.w	lr, r0, r1, lsl #2
    abd6:	f109 0601 	add.w	r6, r9, #1
    abda:	f06f 0503 	mvn.w	r5, #3
    abde:	1973      	adds	r3, r6, r5
    abe0:	3504      	adds	r5, #4
    abe2:	f993 2003 	ldrsb.w	r2, [r3, #3]
    abe6:	f993 4006 	ldrsb.w	r4, [r3, #6]
    abea:	f993 1005 	ldrsb.w	r1, [r3, #5]
    abee:	f112 0f41 	cmn.w	r2, #65	@ 0x41
    abf2:	f993 3004 	ldrsb.w	r3, [r3, #4]
    abf6:	bfc8      	it	gt
    abf8:	3001      	addgt	r0, #1
    abfa:	f113 0f41 	cmn.w	r3, #65	@ 0x41
    abfe:	bfc8      	it	gt
    ac00:	3001      	addgt	r0, #1
    ac02:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    ac06:	bfc8      	it	gt
    ac08:	3001      	addgt	r0, #1
    ac0a:	f114 0f41 	cmn.w	r4, #65	@ 0x41
    ac0e:	eb0e 0105 	add.w	r1, lr, r5
    ac12:	bfc8      	it	gt
    ac14:	3001      	addgt	r0, #1
    ac16:	3104      	adds	r1, #4
    ac18:	d1e1      	bne.n	abde <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x38>
    ac1a:	1d29      	adds	r1, r5, #4
    ac1c:	f1bc 0f00 	cmp.w	ip, #0
    ac20:	f040 820e 	bne.w	b040 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x49a>
    ac24:	b002      	add	sp, #8
    ac26:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    ac2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac2c:	eba1 0e08 	sub.w	lr, r1, r8
    ac30:	ea5f 0c9e 	movs.w	ip, lr, lsr #2
    ac34:	d0c4      	beq.n	abc0 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x1a>
    ac36:	f00e 0203 	and.w	r2, lr, #3
    ac3a:	45ca      	cmp	sl, r9
    ac3c:	d101      	bne.n	ac42 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x9c>
    ac3e:	2000      	movs	r0, #0
    ac40:	e04d      	b.n	acde <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x138>
    ac42:	eba9 000a 	sub.w	r0, r9, sl
    ac46:	f110 0f04 	cmn.w	r0, #4
    ac4a:	d907      	bls.n	ac5c <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0xb6>
    ac4c:	2000      	movs	r0, #0
    ac4e:	2500      	movs	r5, #0
    ac50:	e029      	b.n	aca6 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x100>
    ac52:	2000      	movs	r0, #0
    ac54:	b002      	add	sp, #8
    ac56:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac5c:	f109 0b01 	add.w	fp, r9, #1
    ac60:	2000      	movs	r0, #0
    ac62:	f06f 0603 	mvn.w	r6, #3
    ac66:	eb0b 0506 	add.w	r5, fp, r6
    ac6a:	f995 4003 	ldrsb.w	r4, [r5, #3]
    ac6e:	f995 3006 	ldrsb.w	r3, [r5, #6]
    ac72:	f995 1005 	ldrsb.w	r1, [r5, #5]
    ac76:	f114 0f41 	cmn.w	r4, #65	@ 0x41
    ac7a:	f995 5004 	ldrsb.w	r5, [r5, #4]
    ac7e:	bfc8      	it	gt
    ac80:	3001      	addgt	r0, #1
    ac82:	f115 0f41 	cmn.w	r5, #65	@ 0x41
    ac86:	bfc8      	it	gt
    ac88:	3001      	addgt	r0, #1
    ac8a:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    ac8e:	bfc8      	it	gt
    ac90:	3001      	addgt	r0, #1
    ac92:	f113 0f41 	cmn.w	r3, #65	@ 0x41
    ac96:	f106 0104 	add.w	r1, r6, #4
    ac9a:	bfc8      	it	gt
    ac9c:	3001      	addgt	r0, #1
    ac9e:	f116 0508 	adds.w	r5, r6, #8
    aca2:	460e      	mov	r6, r1
    aca4:	d1df      	bne.n	ac66 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0xc0>
    aca6:	45ca      	cmp	sl, r9
    aca8:	d019      	beq.n	acde <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x138>
    acaa:	f919 1005 	ldrsb.w	r1, [r9, r5]
    acae:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    acb2:	bfc8      	it	gt
    acb4:	3001      	addgt	r0, #1
    acb6:	f1b8 0f01 	cmp.w	r8, #1
    acba:	d010      	beq.n	acde <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x138>
    acbc:	eb09 0105 	add.w	r1, r9, r5
    acc0:	f991 3001 	ldrsb.w	r3, [r1, #1]
    acc4:	f113 0f41 	cmn.w	r3, #65	@ 0x41
    acc8:	bfc8      	it	gt
    acca:	3001      	addgt	r0, #1
    accc:	f1b8 0f02 	cmp.w	r8, #2
    acd0:	d005      	beq.n	acde <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x138>
    acd2:	f991 1002 	ldrsb.w	r1, [r1, #2]
    acd6:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    acda:	bfc8      	it	gt
    acdc:	3001      	addgt	r0, #1
    acde:	eb09 0408 	add.w	r4, r9, r8
    ace2:	2300      	movs	r3, #0
    ace4:	b1c2      	cbz	r2, ad18 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x172>
    ace6:	f02e 0103 	bic.w	r1, lr, #3
    acea:	4421      	add	r1, r4
    acec:	f991 6000 	ldrsb.w	r6, [r1]
    acf0:	f116 0f41 	cmn.w	r6, #65	@ 0x41
    acf4:	bfc8      	it	gt
    acf6:	2301      	movgt	r3, #1
    acf8:	2a01      	cmp	r2, #1
    acfa:	d00d      	beq.n	ad18 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x172>
    acfc:	f991 6001 	ldrsb.w	r6, [r1, #1]
    ad00:	f116 0f41 	cmn.w	r6, #65	@ 0x41
    ad04:	bfc8      	it	gt
    ad06:	3301      	addgt	r3, #1
    ad08:	2a02      	cmp	r2, #2
    ad0a:	d005      	beq.n	ad18 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x172>
    ad0c:	f991 1002 	ldrsb.w	r1, [r1, #2]
    ad10:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    ad14:	bfc8      	it	gt
    ad16:	3301      	addgt	r3, #1
    ad18:	4418      	add	r0, r3
    ad1a:	e012      	b.n	ad42 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x19c>
    ad1c:	f04f 0800 	mov.w	r8, #0
    ad20:	fa3f f288 	uxtb16	r2, r8
    ad24:	fa3f f398 	uxtb16	r3, r8, ror #8
    ad28:	441a      	add	r2, r3
    ad2a:	ebac 0c0b 	sub.w	ip, ip, fp
    ad2e:	eb0a 048b 	add.w	r4, sl, fp, lsl #2
    ad32:	f01b 0103 	ands.w	r1, fp, #3
    ad36:	eb02 4202 	add.w	r2, r2, r2, lsl #16
    ad3a:	eb00 4012 	add.w	r0, r0, r2, lsr #16
    ad3e:	f040 8149 	bne.w	afd4 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x42e>
    ad42:	f1bc 0f00 	cmp.w	ip, #0
    ad46:	f43f af6d 	beq.w	ac24 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x7e>
    ad4a:	f1bc 0fc0 	cmp.w	ip, #192	@ 0xc0
    ad4e:	46e3      	mov	fp, ip
    ad50:	bf28      	it	cs
    ad52:	f04f 0bc0 	movcs.w	fp, #192	@ 0xc0
    ad56:	46a2      	mov	sl, r4
    ad58:	f1bc 0f04 	cmp.w	ip, #4
    ad5c:	d3de      	bcc.n	ad1c <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x176>
    ad5e:	f06f 010f 	mvn.w	r1, #15
    ad62:	2201      	movs	r2, #1
    ad64:	eb01 018b 	add.w	r1, r1, fp, lsl #2
    ad68:	2930      	cmp	r1, #48	@ 0x30
    ad6a:	eb02 1211 	add.w	r2, r2, r1, lsr #4
    ad6e:	e9cd 2a00 	strd	r2, sl, [sp]
    ad72:	d203      	bcs.n	ad7c <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x1d6>
    ad74:	f04f 0800 	mov.w	r8, #0
    ad78:	4654      	mov	r4, sl
    ad7a:	e0ab      	b.n	aed4 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x32e>
    ad7c:	f022 0903 	bic.w	r9, r2, #3
    ad80:	f04f 0800 	mov.w	r8, #0
    ad84:	4654      	mov	r4, sl
    ad86:	e894 040e 	ldmia.w	r4, {r1, r2, r3, sl}
    ad8a:	f1b9 0904 	subs.w	r9, r9, #4
    ad8e:	69a6      	ldr	r6, [r4, #24]
    ad90:	ea6f 0e01 	mvn.w	lr, r1
    ad94:	ea4f 15de 	mov.w	r5, lr, lsr #7
    ad98:	ea45 1191 	orr.w	r1, r5, r1, lsr #6
    ad9c:	ea6f 0502 	mvn.w	r5, r2
    ada0:	f021 31fe 	bic.w	r1, r1, #4278124286	@ 0xfefefefe
    ada4:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    ada8:	ea45 1292 	orr.w	r2, r5, r2, lsr #6
    adac:	4441      	add	r1, r8
    adae:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    adb2:	440a      	add	r2, r1
    adb4:	ea6f 0103 	mvn.w	r1, r3
    adb8:	ea4f 15d1 	mov.w	r5, r1, lsr #7
    adbc:	ea45 1393 	orr.w	r3, r5, r3, lsr #6
    adc0:	f023 33fe 	bic.w	r3, r3, #4278124286	@ 0xfefefefe
    adc4:	6925      	ldr	r5, [r4, #16]
    adc6:	441a      	add	r2, r3
    adc8:	ea6f 030a 	mvn.w	r3, sl
    adcc:	ea4f 13d3 	mov.w	r3, r3, lsr #7
    add0:	6961      	ldr	r1, [r4, #20]
    add2:	ea43 139a 	orr.w	r3, r3, sl, lsr #6
    add6:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
    adda:	f023 33fe 	bic.w	r3, r3, #4278124286	@ 0xfefefefe
    adde:	f8d4 e03c 	ldr.w	lr, [r4, #60]	@ 0x3c
    ade2:	441a      	add	r2, r3
    ade4:	ea6f 0305 	mvn.w	r3, r5
    ade8:	ea4f 13d3 	mov.w	r3, r3, lsr #7
    adec:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
    adf0:	69e5      	ldr	r5, [r4, #28]
    adf2:	f023 33fe 	bic.w	r3, r3, #4278124286	@ 0xfefefefe
    adf6:	441a      	add	r2, r3
    adf8:	ea6f 0301 	mvn.w	r3, r1
    adfc:	ea4f 13d3 	mov.w	r3, r3, lsr #7
    ae00:	ea43 1191 	orr.w	r1, r3, r1, lsr #6
    ae04:	f021 31fe 	bic.w	r1, r1, #4278124286	@ 0xfefefefe
    ae08:	6a23      	ldr	r3, [r4, #32]
    ae0a:	4411      	add	r1, r2
    ae0c:	ea6f 0206 	mvn.w	r2, r6
    ae10:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    ae14:	ea42 1296 	orr.w	r2, r2, r6, lsr #6
    ae18:	6a66      	ldr	r6, [r4, #36]	@ 0x24
    ae1a:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    ae1e:	4411      	add	r1, r2
    ae20:	ea6f 0205 	mvn.w	r2, r5
    ae24:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    ae28:	ea42 1295 	orr.w	r2, r2, r5, lsr #6
    ae2c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    ae2e:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    ae32:	4411      	add	r1, r2
    ae34:	ea6f 0203 	mvn.w	r2, r3
    ae38:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    ae3c:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
    ae40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    ae42:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    ae46:	4411      	add	r1, r2
    ae48:	ea6f 0206 	mvn.w	r2, r6
    ae4c:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    ae50:	ea42 1296 	orr.w	r2, r2, r6, lsr #6
    ae54:	6b26      	ldr	r6, [r4, #48]	@ 0x30
    ae56:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    ae5a:	4411      	add	r1, r2
    ae5c:	ea6f 0205 	mvn.w	r2, r5
    ae60:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    ae64:	ea42 1295 	orr.w	r2, r2, r5, lsr #6
    ae68:	6b65      	ldr	r5, [r4, #52]	@ 0x34
    ae6a:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    ae6e:	f104 0440 	add.w	r4, r4, #64	@ 0x40
    ae72:	4411      	add	r1, r2
    ae74:	ea6f 0203 	mvn.w	r2, r3
    ae78:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    ae7c:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
    ae80:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    ae84:	4411      	add	r1, r2
    ae86:	ea6f 0206 	mvn.w	r2, r6
    ae8a:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    ae8e:	ea42 1296 	orr.w	r2, r2, r6, lsr #6
    ae92:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    ae96:	4411      	add	r1, r2
    ae98:	ea6f 0205 	mvn.w	r2, r5
    ae9c:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    aea0:	ea42 1295 	orr.w	r2, r2, r5, lsr #6
    aea4:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    aea8:	4411      	add	r1, r2
    aeaa:	ea6f 0208 	mvn.w	r2, r8
    aeae:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    aeb2:	ea42 1298 	orr.w	r2, r2, r8, lsr #6
    aeb6:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    aeba:	4411      	add	r1, r2
    aebc:	ea6f 020e 	mvn.w	r2, lr
    aec0:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    aec4:	ea42 129e 	orr.w	r2, r2, lr, lsr #6
    aec8:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    aecc:	eb02 0801 	add.w	r8, r2, r1
    aed0:	f47f af59 	bne.w	ad86 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x1e0>
    aed4:	9900      	ldr	r1, [sp, #0]
    aed6:	f8dd a004 	ldr.w	sl, [sp, #4]
    aeda:	f011 0e03 	ands.w	lr, r1, #3
    aede:	f43f af1f 	beq.w	ad20 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x17a>
    aee2:	e894 004c 	ldmia.w	r4, {r2, r3, r6}
    aee6:	f1be 0f01 	cmp.w	lr, #1
    aeea:	68e5      	ldr	r5, [r4, #12]
    aeec:	ea6f 0102 	mvn.w	r1, r2
    aef0:	ea4f 11d1 	mov.w	r1, r1, lsr #7
    aef4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
    aef8:	ea6f 0203 	mvn.w	r2, r3
    aefc:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    af00:	f021 31fe 	bic.w	r1, r1, #4278124286	@ 0xfefefefe
    af04:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
    af08:	4441      	add	r1, r8
    af0a:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    af0e:	4411      	add	r1, r2
    af10:	ea6f 0206 	mvn.w	r2, r6
    af14:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    af18:	ea42 1296 	orr.w	r2, r2, r6, lsr #6
    af1c:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    af20:	4411      	add	r1, r2
    af22:	ea6f 0205 	mvn.w	r2, r5
    af26:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    af2a:	ea42 1295 	orr.w	r2, r2, r5, lsr #6
    af2e:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    af32:	eb02 0801 	add.w	r8, r2, r1
    af36:	f43f aef3 	beq.w	ad20 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x17a>
    af3a:	f104 0510 	add.w	r5, r4, #16
    af3e:	f1be 0f02 	cmp.w	lr, #2
    af42:	cd2e      	ldmia	r5, {r1, r2, r3, r5}
    af44:	ea6f 0601 	mvn.w	r6, r1
    af48:	ea4f 16d6 	mov.w	r6, r6, lsr #7
    af4c:	ea46 1191 	orr.w	r1, r6, r1, lsr #6
    af50:	ea6f 0602 	mvn.w	r6, r2
    af54:	f021 31fe 	bic.w	r1, r1, #4278124286	@ 0xfefefefe
    af58:	ea4f 16d6 	mov.w	r6, r6, lsr #7
    af5c:	ea46 1292 	orr.w	r2, r6, r2, lsr #6
    af60:	4441      	add	r1, r8
    af62:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    af66:	4411      	add	r1, r2
    af68:	ea6f 0203 	mvn.w	r2, r3
    af6c:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    af70:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
    af74:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    af78:	4411      	add	r1, r2
    af7a:	ea6f 0205 	mvn.w	r2, r5
    af7e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
    af82:	ea42 1295 	orr.w	r2, r2, r5, lsr #6
    af86:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    af8a:	eb02 0801 	add.w	r8, r2, r1
    af8e:	f43f aec7 	beq.w	ad20 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x17a>
    af92:	f104 0620 	add.w	r6, r4, #32
    af96:	ce4e      	ldmia	r6, {r1, r2, r3, r6}
    af98:	43cd      	mvns	r5, r1
    af9a:	09ed      	lsrs	r5, r5, #7
    af9c:	ea45 1191 	orr.w	r1, r5, r1, lsr #6
    afa0:	43d5      	mvns	r5, r2
    afa2:	f021 31fe 	bic.w	r1, r1, #4278124286	@ 0xfefefefe
    afa6:	09ed      	lsrs	r5, r5, #7
    afa8:	ea45 1292 	orr.w	r2, r5, r2, lsr #6
    afac:	4441      	add	r1, r8
    afae:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    afb2:	4411      	add	r1, r2
    afb4:	43da      	mvns	r2, r3
    afb6:	09d2      	lsrs	r2, r2, #7
    afb8:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
    afbc:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    afc0:	4411      	add	r1, r2
    afc2:	43f2      	mvns	r2, r6
    afc4:	09d2      	lsrs	r2, r2, #7
    afc6:	ea42 1296 	orr.w	r2, r2, r6, lsr #6
    afca:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    afce:	eb02 0801 	add.w	r8, r2, r1
    afd2:	e6a5      	b.n	ad20 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x17a>
    afd4:	f00b 03fc 	and.w	r3, fp, #252	@ 0xfc
    afd8:	2901      	cmp	r1, #1
    afda:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
    afde:	ea6f 0602 	mvn.w	r6, r2
    afe2:	ea4f 16d6 	mov.w	r6, r6, lsr #7
    afe6:	ea46 1292 	orr.w	r2, r6, r2, lsr #6
    afea:	f022 32fe 	bic.w	r2, r2, #4278124286	@ 0xfefefefe
    afee:	d015      	beq.n	b01c <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x476>
    aff0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    aff4:	2902      	cmp	r1, #2
    aff6:	685e      	ldr	r6, [r3, #4]
    aff8:	ea6f 0506 	mvn.w	r5, r6
    affc:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    b000:	ea45 1696 	orr.w	r6, r5, r6, lsr #6
    b004:	f026 36fe 	bic.w	r6, r6, #4278124286	@ 0xfefefefe
    b008:	4432      	add	r2, r6
    b00a:	d007      	beq.n	b01c <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x476>
    b00c:	6899      	ldr	r1, [r3, #8]
    b00e:	43cb      	mvns	r3, r1
    b010:	09db      	lsrs	r3, r3, #7
    b012:	ea43 1191 	orr.w	r1, r3, r1, lsr #6
    b016:	f021 31fe 	bic.w	r1, r1, #4278124286	@ 0xfefefefe
    b01a:	440a      	add	r2, r1
    b01c:	fa3f f182 	uxtb16	r1, r2
    b020:	fa3f f292 	uxtb16	r2, r2, ror #8
    b024:	4411      	add	r1, r2
    b026:	eb01 4101 	add.w	r1, r1, r1, lsl #16
    b02a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    b02e:	b002      	add	sp, #8
    b030:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    b034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b036:	2100      	movs	r1, #0
    b038:	f1bc 0f00 	cmp.w	ip, #0
    b03c:	f43f adf2 	beq.w	ac24 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x7e>
    b040:	f919 2001 	ldrsb.w	r2, [r9, r1]
    b044:	f112 0f41 	cmn.w	r2, #65	@ 0x41
    b048:	bfc8      	it	gt
    b04a:	3001      	addgt	r0, #1
    b04c:	f1bc 0f01 	cmp.w	ip, #1
    b050:	f43f ade8 	beq.w	ac24 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x7e>
    b054:	4449      	add	r1, r9
    b056:	f991 2001 	ldrsb.w	r2, [r1, #1]
    b05a:	f112 0f41 	cmn.w	r2, #65	@ 0x41
    b05e:	bfc8      	it	gt
    b060:	3001      	addgt	r0, #1
    b062:	f1bc 0f02 	cmp.w	ip, #2
    b066:	f43f addd 	beq.w	ac24 <_ZN4core3str5count14do_count_chars17h457216055dd3161cE+0x7e>
    b06a:	f991 1002 	ldrsb.w	r1, [r1, #2]
    b06e:	f111 0f41 	cmn.w	r1, #65	@ 0x41
    b072:	bfc8      	it	gt
    b074:	3001      	addgt	r0, #1
    b076:	b002      	add	sp, #8
    b078:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    b07c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b07e <_ZN4core5alloc6layout6Layout19is_size_align_valid17ha9abfdd8dbd267f5E>:
    b07e:	b580      	push	{r7, lr}
    b080:	466f      	mov	r7, sp
    b082:	f1c1 4200 	rsb	r2, r1, #2147483648	@ 0x80000000
    b086:	2300      	movs	r3, #0
    b088:	4290      	cmp	r0, r2
    b08a:	f04f 0000 	mov.w	r0, #0
    b08e:	f1a1 0201 	sub.w	r2, r1, #1
    b092:	bf98      	it	ls
    b094:	2001      	movls	r0, #1
    b096:	4051      	eors	r1, r2
    b098:	4291      	cmp	r1, r2
    b09a:	bf88      	it	hi
    b09c:	2301      	movhi	r3, #1
    b09e:	4018      	ands	r0, r3
    b0a0:	bd80      	pop	{r7, pc}

0000b0a2 <_ZN4core4char7methods15encode_utf8_raw8do_panic7runtime17h125f10c28f518e62E>:
    b0a2:	b580      	push	{r7, lr}
    b0a4:	466f      	mov	r7, sp
    b0a6:	b0a2      	sub	sp, #136	@ 0x88
    b0a8:	f10d 0c04 	add.w	ip, sp, #4
    b0ac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    b0b0:	a903      	add	r1, sp, #12
    b0b2:	f24b 3009 	movw	r0, #45833	@ 0xb309
    b0b6:	910e      	str	r1, [sp, #56]	@ 0x38
    b0b8:	f24b 215b 	movw	r1, #45659	@ 0xb25b
    b0bc:	f2c0 0100 	movt	r1, #0
    b0c0:	f2c0 0000 	movt	r0, #0
    b0c4:	910d      	str	r1, [sp, #52]	@ 0x34
    b0c6:	a901      	add	r1, sp, #4
    b0c8:	900f      	str	r0, [sp, #60]	@ 0x3c
    b0ca:	e9cd 010b 	strd	r0, r1, [sp, #44]	@ 0x2c
    b0ce:	a802      	add	r0, sp, #8
    b0d0:	900a      	str	r0, [sp, #40]	@ 0x28
    b0d2:	2020      	movs	r0, #32
    b0d4:	f2ce 0000 	movt	r0, #57344	@ 0xe000
    b0d8:	2102      	movs	r1, #2
    b0da:	f100 6210 	add.w	r2, r0, #150994944	@ 0x9000000
    b0de:	9021      	str	r0, [sp, #132]	@ 0x84
    b0e0:	9015      	str	r0, [sp, #84]	@ 0x54
    b0e2:	2000      	movs	r0, #0
    b0e4:	9014      	str	r0, [sp, #80]	@ 0x50
    b0e6:	2003      	movs	r0, #3
    b0e8:	9120      	str	r1, [sp, #128]	@ 0x80
    b0ea:	f8ad 1078 	strh.w	r1, [sp, #120]	@ 0x78
    b0ee:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
    b0f2:	f8ad 1058 	strh.w	r1, [sp, #88]	@ 0x58
    b0f6:	f8ad 1048 	strh.w	r1, [sp, #72]	@ 0x48
    b0fa:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
    b0fe:	a910      	add	r1, sp, #64	@ 0x40
    b100:	9108      	str	r1, [sp, #32]
    b102:	f64e 41e0 	movw	r1, #60640	@ 0xece0
    b106:	9009      	str	r0, [sp, #36]	@ 0x24
    b108:	f2c0 0100 	movt	r1, #0
    b10c:	9005      	str	r0, [sp, #20]
    b10e:	9007      	str	r0, [sp, #28]
    b110:	a80a      	add	r0, sp, #40	@ 0x28
    b112:	921b      	str	r2, [sp, #108]	@ 0x6c
    b114:	2201      	movs	r2, #1
    b116:	9006      	str	r0, [sp, #24]
    b118:	a804      	add	r0, sp, #16
    b11a:	921a      	str	r2, [sp, #104]	@ 0x68
    b11c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
    b120:	9104      	str	r1, [sp, #16]
    b122:	4619      	mov	r1, r3
    b124:	9218      	str	r2, [sp, #96]	@ 0x60
    b126:	f7ff f981 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b12a <_ZN4core9panicking11panic_const24panic_const_add_overflow17he3ca46f2f2ec3678E>:
    b12a:	b580      	push	{r7, lr}
    b12c:	466f      	mov	r7, sp
    b12e:	b086      	sub	sp, #24
    b130:	4601      	mov	r1, r0
    b132:	2000      	movs	r0, #0
    b134:	2201      	movs	r2, #1
    b136:	9004      	str	r0, [sp, #16]
    b138:	9201      	str	r2, [sp, #4]
    b13a:	f64e 2234 	movw	r2, #59956	@ 0xea34
    b13e:	9003      	str	r0, [sp, #12]
    b140:	2004      	movs	r0, #4
    b142:	f2c0 0200 	movt	r2, #0
    b146:	9002      	str	r0, [sp, #8]
    b148:	4668      	mov	r0, sp
    b14a:	9200      	str	r2, [sp, #0]
    b14c:	f7ff f96e 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b150 <_ZN4core9panicking11panic_const24panic_const_sub_overflow17ha4c339b91653944eE>:
    b150:	b580      	push	{r7, lr}
    b152:	466f      	mov	r7, sp
    b154:	b086      	sub	sp, #24
    b156:	4601      	mov	r1, r0
    b158:	2000      	movs	r0, #0
    b15a:	2201      	movs	r2, #1
    b15c:	9004      	str	r0, [sp, #16]
    b15e:	9201      	str	r2, [sp, #4]
    b160:	f64e 2260 	movw	r2, #60000	@ 0xea60
    b164:	9003      	str	r0, [sp, #12]
    b166:	2004      	movs	r0, #4
    b168:	f2c0 0200 	movt	r2, #0
    b16c:	9002      	str	r0, [sp, #8]
    b16e:	4668      	mov	r0, sp
    b170:	9200      	str	r2, [sp, #0]
    b172:	f7ff f95b 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b176 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h506b9e9ec8555105E>:
    b176:	b580      	push	{r7, lr}
    b178:	466f      	mov	r7, sp
    b17a:	b086      	sub	sp, #24
    b17c:	4601      	mov	r1, r0
    b17e:	2000      	movs	r0, #0
    b180:	2201      	movs	r2, #1
    b182:	9004      	str	r0, [sp, #16]
    b184:	9201      	str	r2, [sp, #4]
    b186:	f64e 228c 	movw	r2, #60044	@ 0xea8c
    b18a:	9003      	str	r0, [sp, #12]
    b18c:	2004      	movs	r0, #4
    b18e:	f2c0 0200 	movt	r2, #0
    b192:	9002      	str	r0, [sp, #8]
    b194:	4668      	mov	r0, sp
    b196:	9200      	str	r2, [sp, #0]
    b198:	f7ff f948 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b19c <_ZN4core9panicking11panic_const24panic_const_shr_overflow17h3b7efafe8b312b78E>:
    b19c:	b580      	push	{r7, lr}
    b19e:	466f      	mov	r7, sp
    b1a0:	b086      	sub	sp, #24
    b1a2:	4601      	mov	r1, r0
    b1a4:	2000      	movs	r0, #0
    b1a6:	2201      	movs	r2, #1
    b1a8:	9004      	str	r0, [sp, #16]
    b1aa:	9201      	str	r2, [sp, #4]
    b1ac:	f64e 22b8 	movw	r2, #60088	@ 0xeab8
    b1b0:	9003      	str	r0, [sp, #12]
    b1b2:	2004      	movs	r0, #4
    b1b4:	f2c0 0200 	movt	r2, #0
    b1b8:	9002      	str	r0, [sp, #8]
    b1ba:	4668      	mov	r0, sp
    b1bc:	9200      	str	r2, [sp, #0]
    b1be:	f7ff f935 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b1c2 <_ZN4core9panicking11panic_const24panic_const_shl_overflow17h947041eb91815fb2E>:
    b1c2:	b580      	push	{r7, lr}
    b1c4:	466f      	mov	r7, sp
    b1c6:	b086      	sub	sp, #24
    b1c8:	4601      	mov	r1, r0
    b1ca:	2000      	movs	r0, #0
    b1cc:	2201      	movs	r2, #1
    b1ce:	9004      	str	r0, [sp, #16]
    b1d0:	9201      	str	r2, [sp, #4]
    b1d2:	f64e 22e4 	movw	r2, #60132	@ 0xeae4
    b1d6:	9003      	str	r0, [sp, #12]
    b1d8:	2004      	movs	r0, #4
    b1da:	f2c0 0200 	movt	r2, #0
    b1de:	9002      	str	r0, [sp, #8]
    b1e0:	4668      	mov	r0, sp
    b1e2:	9200      	str	r2, [sp, #0]
    b1e4:	f7ff f922 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b1e8 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17hff1aa7944d63a61dE>:
    b1e8:	b580      	push	{r7, lr}
    b1ea:	466f      	mov	r7, sp
    b1ec:	b086      	sub	sp, #24
    b1ee:	4601      	mov	r1, r0
    b1f0:	2000      	movs	r0, #0
    b1f2:	2201      	movs	r2, #1
    b1f4:	9004      	str	r0, [sp, #16]
    b1f6:	9201      	str	r2, [sp, #4]
    b1f8:	f64e 5214 	movw	r2, #60692	@ 0xed14
    b1fc:	9003      	str	r0, [sp, #12]
    b1fe:	2004      	movs	r0, #4
    b200:	f2c0 0200 	movt	r2, #0
    b204:	9002      	str	r0, [sp, #8]
    b206:	4668      	mov	r0, sp
    b208:	9200      	str	r2, [sp, #0]
    b20a:	f7ff f90f 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b20e <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h94d69846dc90841aE>:
    b20e:	b580      	push	{r7, lr}
    b210:	466f      	mov	r7, sp
    b212:	b086      	sub	sp, #24
    b214:	4601      	mov	r1, r0
    b216:	2000      	movs	r0, #0
    b218:	2201      	movs	r2, #1
    b21a:	9004      	str	r0, [sp, #16]
    b21c:	9201      	str	r2, [sp, #4]
    b21e:	f64e 5258 	movw	r2, #60760	@ 0xed58
    b222:	9003      	str	r0, [sp, #12]
    b224:	2004      	movs	r0, #4
    b226:	f2c0 0200 	movt	r2, #0
    b22a:	9002      	str	r0, [sp, #8]
    b22c:	4668      	mov	r0, sp
    b22e:	9200      	str	r2, [sp, #0]
    b230:	f7ff f8fc 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b234 <_ZN4core9panicking11panic_const28panic_const_async_fn_resumed17hf08d9c560f63ded1E>:
    b234:	b580      	push	{r7, lr}
    b236:	466f      	mov	r7, sp
    b238:	b086      	sub	sp, #24
    b23a:	4601      	mov	r1, r0
    b23c:	2000      	movs	r0, #0
    b23e:	2201      	movs	r2, #1
    b240:	9004      	str	r0, [sp, #16]
    b242:	9201      	str	r2, [sp, #4]
    b244:	f64e 5284 	movw	r2, #60804	@ 0xed84
    b248:	9003      	str	r0, [sp, #12]
    b24a:	2004      	movs	r0, #4
    b24c:	f2c0 0200 	movt	r2, #0
    b250:	9002      	str	r0, [sp, #8]
    b252:	4668      	mov	r0, sp
    b254:	9200      	str	r2, [sp, #0]
    b256:	f7ff f8e9 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b25a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hfc0efaf636449e8dE>:
    b25a:	b5b0      	push	{r4, r5, r7, lr}
    b25c:	af02      	add	r7, sp, #8
    b25e:	b0a2      	sub	sp, #136	@ 0x88
    b260:	468c      	mov	ip, r1
    b262:	6801      	ldr	r1, [r0, #0]
    b264:	f10d 0e08 	add.w	lr, sp, #8
    b268:	2380      	movs	r3, #128	@ 0x80
    b26a:	2081      	movs	r0, #129	@ 0x81
    b26c:	f001 020f 	and.w	r2, r1, #15
    b270:	f102 0437 	add.w	r4, r2, #55	@ 0x37
    b274:	2a0a      	cmp	r2, #10
    b276:	bf38      	it	cc
    b278:	f102 0430 	addcc.w	r4, r2, #48	@ 0x30
    b27c:	eb0e 0200 	add.w	r2, lr, r0
    b280:	f802 4c02 	strb.w	r4, [r2, #-2]
    b284:	090c      	lsrs	r4, r1, #4
    b286:	d029      	beq.n	b2dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hfc0efaf636449e8dE+0x82>
    b288:	f004 040f 	and.w	r4, r4, #15
    b28c:	f104 0537 	add.w	r5, r4, #55	@ 0x37
    b290:	2c0a      	cmp	r4, #10
    b292:	bf38      	it	cc
    b294:	f104 0530 	addcc.w	r5, r4, #48	@ 0x30
    b298:	0a0c      	lsrs	r4, r1, #8
    b29a:	f802 5c03 	strb.w	r5, [r2, #-3]
    b29e:	d01f      	beq.n	b2e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hfc0efaf636449e8dE+0x86>
    b2a0:	f004 040f 	and.w	r4, r4, #15
    b2a4:	3804      	subs	r0, #4
    b2a6:	f104 0537 	add.w	r5, r4, #55	@ 0x37
    b2aa:	2c0a      	cmp	r4, #10
    b2ac:	bf38      	it	cc
    b2ae:	f104 0530 	addcc.w	r5, r4, #48	@ 0x30
    b2b2:	0b0c      	lsrs	r4, r1, #12
    b2b4:	f802 5c04 	strb.w	r5, [r2, #-4]
    b2b8:	d015      	beq.n	b2e6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hfc0efaf636449e8dE+0x8c>
    b2ba:	f004 040f 	and.w	r4, r4, #15
    b2be:	3b04      	subs	r3, #4
    b2c0:	f104 0537 	add.w	r5, r4, #55	@ 0x37
    b2c4:	2c0a      	cmp	r4, #10
    b2c6:	bf38      	it	cc
    b2c8:	f104 0530 	addcc.w	r5, r4, #48	@ 0x30
    b2cc:	0c09      	lsrs	r1, r1, #16
    b2ce:	f802 5c05 	strb.w	r5, [r2, #-5]
    b2d2:	d1cb      	bne.n	b26c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hfc0efaf636449e8dE+0x12>
    b2d4:	1e41      	subs	r1, r0, #1
    b2d6:	4603      	mov	r3, r0
    b2d8:	4608      	mov	r0, r1
    b2da:	e005      	b.n	b2e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hfc0efaf636449e8dE+0x8e>
    b2dc:	3802      	subs	r0, #2
    b2de:	e003      	b.n	b2e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hfc0efaf636449e8dE+0x8e>
    b2e0:	3b01      	subs	r3, #1
    b2e2:	3803      	subs	r0, #3
    b2e4:	e000      	b.n	b2e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hfc0efaf636449e8dE+0x8e>
    b2e6:	3b02      	subs	r3, #2
    b2e8:	f1c3 0181 	rsb	r1, r3, #129	@ 0x81
    b2ec:	f64e 32dc 	movw	r2, #60380	@ 0xebdc
    b2f0:	4470      	add	r0, lr
    b2f2:	f2c0 0200 	movt	r2, #0
    b2f6:	e9cd 0100 	strd	r0, r1, [sp]
    b2fa:	4660      	mov	r0, ip
    b2fc:	2101      	movs	r1, #1
    b2fe:	2302      	movs	r3, #2
    b300:	f7ff f9f4 	bl	a6ec <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE>
    b304:	b022      	add	sp, #136	@ 0x88
    b306:	bdb0      	pop	{r4, r5, r7, pc}

0000b308 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd60e1a95f99da54dE>:
    b308:	b580      	push	{r7, lr}
    b30a:	466f      	mov	r7, sp
    b30c:	460a      	mov	r2, r1
    b30e:	6800      	ldr	r0, [r0, #0]
    b310:	2101      	movs	r1, #1
    b312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    b316:	f000 b800 	b.w	b31a <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E>

0000b31a <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E>:
    b31a:	b5f0      	push	{r4, r5, r6, r7, lr}
    b31c:	af03      	add	r7, sp, #12
    b31e:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    b322:	b089      	sub	sp, #36	@ 0x24
    b324:	f64e 3ede 	movw	lr, #60382	@ 0xebde
    b328:	4615      	mov	r5, r2
    b32a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
    b32e:	f2c0 0e00 	movt	lr, #0
    b332:	d339      	bcc.n	b3a8 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E+0x8e>
    b334:	e9cd 1504 	strd	r1, r5, [sp, #16]
    b338:	f249 657f 	movw	r5, #38527	@ 0x967f
    b33c:	f1a7 0b26 	sub.w	fp, r7, #38	@ 0x26
    b340:	2300      	movs	r3, #0
    b342:	f242 7810 	movw	r8, #10000	@ 0x2710
    b346:	f241 497b 	movw	r9, #5243	@ 0x147b
    b34a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
    b34e:	f2c0 0598 	movt	r5, #152	@ 0x98
    b352:	4602      	mov	r2, r0
    b354:	9003      	str	r0, [sp, #12]
    b356:	f241 7059 	movw	r0, #5977	@ 0x1759
    b35a:	42aa      	cmp	r2, r5
    b35c:	f2cd 10b7 	movt	r0, #53687	@ 0xd1b7
    b360:	fba2 6c00 	umull	r6, ip, r2, r0
    b364:	eb0b 0003 	add.w	r0, fp, r3
    b368:	f1a3 0304 	sub.w	r3, r3, #4
    b36c:	ea4f 365c 	mov.w	r6, ip, lsr #13
    b370:	fb06 2418 	mls	r4, r6, r8, r2
    b374:	4632      	mov	r2, r6
    b376:	b2a1      	uxth	r1, r4
    b378:	ea4f 0191 	mov.w	r1, r1, lsr #2
    b37c:	fb01 f109 	mul.w	r1, r1, r9
    b380:	ea4f 4151 	mov.w	r1, r1, lsr #17
    b384:	fb01 441a 	mls	r4, r1, sl, r4
    b388:	f83e 1011 	ldrh.w	r1, [lr, r1, lsl #1]
    b38c:	80c1      	strh	r1, [r0, #6]
    b38e:	b2a4      	uxth	r4, r4
    b390:	f83e 4014 	ldrh.w	r4, [lr, r4, lsl #1]
    b394:	8104      	strh	r4, [r0, #8]
    b396:	d8de      	bhi.n	b356 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E+0x3c>
    b398:	ad03      	add	r5, sp, #12
    b39a:	330a      	adds	r3, #10
    b39c:	cd23      	ldmia	r5, {r0, r1, r5}
    b39e:	2e09      	cmp	r6, #9
    b3a0:	d806      	bhi.n	b3b0 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E+0x96>
    b3a2:	4632      	mov	r2, r6
    b3a4:	b9a8      	cbnz	r0, b3d2 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E+0xb8>
    b3a6:	e015      	b.n	b3d4 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E+0xba>
    b3a8:	230a      	movs	r3, #10
    b3aa:	4606      	mov	r6, r0
    b3ac:	2e09      	cmp	r6, #9
    b3ae:	d9f8      	bls.n	b3a2 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E+0x88>
    b3b0:	b2b2      	uxth	r2, r6
    b3b2:	3b02      	subs	r3, #2
    b3b4:	0894      	lsrs	r4, r2, #2
    b3b6:	f241 427b 	movw	r2, #5243	@ 0x147b
    b3ba:	4362      	muls	r2, r4
    b3bc:	2464      	movs	r4, #100	@ 0x64
    b3be:	0c52      	lsrs	r2, r2, #17
    b3c0:	fb02 6614 	mls	r6, r2, r4, r6
    b3c4:	b2b6      	uxth	r6, r6
    b3c6:	f83e 4016 	ldrh.w	r4, [lr, r6, lsl #1]
    b3ca:	f1a7 0626 	sub.w	r6, r7, #38	@ 0x26
    b3ce:	52f4      	strh	r4, [r6, r3]
    b3d0:	b100      	cbz	r0, b3d4 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E+0xba>
    b3d2:	b142      	cbz	r2, b3e6 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h25a8219fe9562f10E+0xcc>
    b3d4:	f002 000f 	and.w	r0, r2, #15
    b3d8:	3b01      	subs	r3, #1
    b3da:	f1a7 0226 	sub.w	r2, r7, #38	@ 0x26
    b3de:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
    b3e2:	7840      	ldrb	r0, [r0, #1]
    b3e4:	54d0      	strb	r0, [r2, r3]
    b3e6:	f1a7 0226 	sub.w	r2, r7, #38	@ 0x26
    b3ea:	f1c3 000a 	rsb	r0, r3, #10
    b3ee:	441a      	add	r2, r3
    b3f0:	2300      	movs	r3, #0
    b3f2:	e9cd 2000 	strd	r2, r0, [sp]
    b3f6:	4628      	mov	r0, r5
    b3f8:	2201      	movs	r2, #1
    b3fa:	f7ff f977 	bl	a6ec <_ZN4core3fmt9Formatter12pad_integral17h12ff88d7f2a4971aE>
    b3fe:	b009      	add	sp, #36	@ 0x24
    b400:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    b404:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b406 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd4926f264aaed311E>:
    b406:	b580      	push	{r7, lr}
    b408:	466f      	mov	r7, sp
    b40a:	e9d0 0200 	ldrd	r0, r2, [r0]
    b40e:	68d2      	ldr	r2, [r2, #12]
    b410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    b414:	4710      	bx	r2

0000b416 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h80a585b34ae46b8aE>:
    b416:	b580      	push	{r7, lr}
    b418:	466f      	mov	r7, sp
    b41a:	460b      	mov	r3, r1
    b41c:	e9d0 1200 	ldrd	r1, r2, [r0]
    b420:	4618      	mov	r0, r3
    b422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    b426:	f7ff bac5 	b.w	a9b4 <_ZN4core3fmt9Formatter3pad17h2934ce84474981e1E>

0000b42a <_ZN4core5slice5index26slice_start_index_len_fail8do_panic7runtime17hbc22bef2b91ccf62E>:
    b42a:	b580      	push	{r7, lr}
    b42c:	466f      	mov	r7, sp
    b42e:	b08c      	sub	sp, #48	@ 0x30
    b430:	e9cd 0100 	strd	r0, r1, [sp]
    b434:	2000      	movs	r0, #0
    b436:	f64e 51c0 	movw	r1, #60864	@ 0xedc0
    b43a:	9006      	str	r0, [sp, #24]
    b43c:	2002      	movs	r0, #2
    b43e:	f2c0 0100 	movt	r1, #0
    b442:	9003      	str	r0, [sp, #12]
    b444:	9005      	str	r0, [sp, #20]
    b446:	a808      	add	r0, sp, #32
    b448:	9102      	str	r1, [sp, #8]
    b44a:	a901      	add	r1, sp, #4
    b44c:	9004      	str	r0, [sp, #16]
    b44e:	f24b 3009 	movw	r0, #45833	@ 0xb309
    b452:	f2c0 0000 	movt	r0, #0
    b456:	e9cd 0109 	strd	r0, r1, [sp, #36]	@ 0x24
    b45a:	4611      	mov	r1, r2
    b45c:	900b      	str	r0, [sp, #44]	@ 0x2c
    b45e:	4668      	mov	r0, sp
    b460:	9008      	str	r0, [sp, #32]
    b462:	a802      	add	r0, sp, #8
    b464:	f7fe ffe2 	bl	a42c <_ZN4core9panicking9panic_fmt17h24455ea0bcd5a24aE>

0000b468 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E>:
    b468:	b5f0      	push	{r4, r5, r6, r7, lr}
    b46a:	af03      	add	r7, sp, #12
    b46c:	e92d 0700 	stmdb	sp!, {r8, r9, sl}
    b470:	2a10      	cmp	r2, #16
    b472:	d31e      	bcc.n	b4b2 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x4a>
    b474:	4243      	negs	r3, r0
    b476:	f003 0803 	and.w	r8, r3, #3
    b47a:	eb00 0308 	add.w	r3, r0, r8
    b47e:	4298      	cmp	r0, r3
    b480:	d233      	bcs.n	b4ea <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x82>
    b482:	f1a8 0c01 	sub.w	ip, r8, #1
    b486:	f1b8 0f00 	cmp.w	r8, #0
    b48a:	4606      	mov	r6, r0
    b48c:	460d      	mov	r5, r1
    b48e:	d01a      	beq.n	b4c6 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x5e>
    b490:	460d      	mov	r5, r1
    b492:	4606      	mov	r6, r0
    b494:	f815 eb01 	ldrb.w	lr, [r5], #1
    b498:	f1b8 0f01 	cmp.w	r8, #1
    b49c:	f806 eb01 	strb.w	lr, [r6], #1
    b4a0:	d011      	beq.n	b4c6 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x5e>
    b4a2:	784e      	ldrb	r6, [r1, #1]
    b4a4:	f1b8 0f02 	cmp.w	r8, #2
    b4a8:	7046      	strb	r6, [r0, #1]
    b4aa:	d108      	bne.n	b4be <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x56>
    b4ac:	1c8d      	adds	r5, r1, #2
    b4ae:	1c86      	adds	r6, r0, #2
    b4b0:	e009      	b.n	b4c6 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x5e>
    b4b2:	4684      	mov	ip, r0
    b4b4:	eb0c 0302 	add.w	r3, ip, r2
    b4b8:	459c      	cmp	ip, r3
    b4ba:	d33e      	bcc.n	b53a <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0xd2>
    b4bc:	e06a      	b.n	b594 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x12c>
    b4be:	788e      	ldrb	r6, [r1, #2]
    b4c0:	1ccd      	adds	r5, r1, #3
    b4c2:	7086      	strb	r6, [r0, #2]
    b4c4:	1cc6      	adds	r6, r0, #3
    b4c6:	f1bc 0f03 	cmp.w	ip, #3
    b4ca:	d30e      	bcc.n	b4ea <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x82>
    b4cc:	3d04      	subs	r5, #4
    b4ce:	3e04      	subs	r6, #4
    b4d0:	f815 4f04 	ldrb.w	r4, [r5, #4]!
    b4d4:	f806 4f04 	strb.w	r4, [r6, #4]!
    b4d8:	786c      	ldrb	r4, [r5, #1]
    b4da:	7074      	strb	r4, [r6, #1]
    b4dc:	78ac      	ldrb	r4, [r5, #2]
    b4de:	70b4      	strb	r4, [r6, #2]
    b4e0:	78ec      	ldrb	r4, [r5, #3]
    b4e2:	70f4      	strb	r4, [r6, #3]
    b4e4:	1d34      	adds	r4, r6, #4
    b4e6:	429c      	cmp	r4, r3
    b4e8:	d1f2      	bne.n	b4d0 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x68>
    b4ea:	eba2 0e08 	sub.w	lr, r2, r8
    b4ee:	4441      	add	r1, r8
    b4f0:	f02e 0203 	bic.w	r2, lr, #3
    b4f4:	eb03 0c02 	add.w	ip, r3, r2
    b4f8:	078c      	lsls	r4, r1, #30
    b4fa:	d158      	bne.n	b5ae <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x146>
    b4fc:	4563      	cmp	r3, ip
    b4fe:	d215      	bcs.n	b52c <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0xc4>
    b500:	460c      	mov	r4, r1
    b502:	6825      	ldr	r5, [r4, #0]
    b504:	f843 5b04 	str.w	r5, [r3], #4
    b508:	4563      	cmp	r3, ip
    b50a:	d20f      	bcs.n	b52c <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0xc4>
    b50c:	6865      	ldr	r5, [r4, #4]
    b50e:	f843 5b04 	str.w	r5, [r3], #4
    b512:	4563      	cmp	r3, ip
    b514:	bf3e      	ittt	cc
    b516:	68a5      	ldrcc	r5, [r4, #8]
    b518:	f843 5b04 	strcc.w	r5, [r3], #4
    b51c:	4563      	cmpcc	r3, ip
    b51e:	d205      	bcs.n	b52c <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0xc4>
    b520:	68e5      	ldr	r5, [r4, #12]
    b522:	3410      	adds	r4, #16
    b524:	f843 5b04 	str.w	r5, [r3], #4
    b528:	4563      	cmp	r3, ip
    b52a:	d3ea      	bcc.n	b502 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x9a>
    b52c:	4411      	add	r1, r2
    b52e:	f00e 0203 	and.w	r2, lr, #3
    b532:	eb0c 0302 	add.w	r3, ip, r2
    b536:	459c      	cmp	ip, r3
    b538:	d22c      	bcs.n	b594 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x12c>
    b53a:	f1a2 0e01 	sub.w	lr, r2, #1
    b53e:	f012 0403 	ands.w	r4, r2, #3
    b542:	d013      	beq.n	b56c <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x104>
    b544:	460a      	mov	r2, r1
    b546:	4665      	mov	r5, ip
    b548:	f812 6b01 	ldrb.w	r6, [r2], #1
    b54c:	2c01      	cmp	r4, #1
    b54e:	f805 6b01 	strb.w	r6, [r5], #1
    b552:	d00d      	beq.n	b570 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x108>
    b554:	784a      	ldrb	r2, [r1, #1]
    b556:	2c02      	cmp	r4, #2
    b558:	f88c 2001 	strb.w	r2, [ip, #1]
    b55c:	d11d      	bne.n	b59a <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x132>
    b55e:	1c8a      	adds	r2, r1, #2
    b560:	f10c 0502 	add.w	r5, ip, #2
    b564:	f1be 0f03 	cmp.w	lr, #3
    b568:	d205      	bcs.n	b576 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x10e>
    b56a:	e013      	b.n	b594 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x12c>
    b56c:	4665      	mov	r5, ip
    b56e:	460a      	mov	r2, r1
    b570:	f1be 0f03 	cmp.w	lr, #3
    b574:	d30e      	bcc.n	b594 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x12c>
    b576:	1f11      	subs	r1, r2, #4
    b578:	1f2a      	subs	r2, r5, #4
    b57a:	f811 6f04 	ldrb.w	r6, [r1, #4]!
    b57e:	f802 6f04 	strb.w	r6, [r2, #4]!
    b582:	784e      	ldrb	r6, [r1, #1]
    b584:	7056      	strb	r6, [r2, #1]
    b586:	788e      	ldrb	r6, [r1, #2]
    b588:	7096      	strb	r6, [r2, #2]
    b58a:	78ce      	ldrb	r6, [r1, #3]
    b58c:	70d6      	strb	r6, [r2, #3]
    b58e:	1d16      	adds	r6, r2, #4
    b590:	429e      	cmp	r6, r3
    b592:	d1f2      	bne.n	b57a <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x112>
    b594:	e8bd 0700 	ldmia.w	sp!, {r8, r9, sl}
    b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b59a:	788a      	ldrb	r2, [r1, #2]
    b59c:	f10c 0503 	add.w	r5, ip, #3
    b5a0:	f88c 2002 	strb.w	r2, [ip, #2]
    b5a4:	1cca      	adds	r2, r1, #3
    b5a6:	f1be 0f03 	cmp.w	lr, #3
    b5aa:	d2e4      	bcs.n	b576 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x10e>
    b5ac:	e7f2      	b.n	b594 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x12c>
    b5ae:	4563      	cmp	r3, ip
    b5b0:	d2bc      	bcs.n	b52c <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0xc4>
    b5b2:	2418      	movs	r4, #24
    b5b4:	f021 0603 	bic.w	r6, r1, #3
    b5b8:	ea04 08c1 	and.w	r8, r4, r1, lsl #3
    b5bc:	00cc      	lsls	r4, r1, #3
    b5be:	f1c4 0900 	rsb	r9, r4, #0
    b5c2:	6834      	ldr	r4, [r6, #0]
    b5c4:	f106 0508 	add.w	r5, r6, #8
    b5c8:	f009 0918 	and.w	r9, r9, #24
    b5cc:	f855 6c04 	ldr.w	r6, [r5, #-4]
    b5d0:	fa24 fa08 	lsr.w	sl, r4, r8
    b5d4:	fa06 f409 	lsl.w	r4, r6, r9
    b5d8:	ea44 040a 	orr.w	r4, r4, sl
    b5dc:	f843 4b04 	str.w	r4, [r3], #4
    b5e0:	4563      	cmp	r3, ip
    b5e2:	d2a3      	bcs.n	b52c <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0xc4>
    b5e4:	682c      	ldr	r4, [r5, #0]
    b5e6:	fa26 fa08 	lsr.w	sl, r6, r8
    b5ea:	fa04 f609 	lsl.w	r6, r4, r9
    b5ee:	ea46 060a 	orr.w	r6, r6, sl
    b5f2:	f843 6b04 	str.w	r6, [r3], #4
    b5f6:	4563      	cmp	r3, ip
    b5f8:	bf3f      	itttt	cc
    b5fa:	686e      	ldrcc	r6, [r5, #4]
    b5fc:	fa24 fa08 	lsrcc.w	sl, r4, r8
    b600:	fa06 f409 	lslcc.w	r4, r6, r9
    b604:	ea44 040a 	orrcc.w	r4, r4, sl
    b608:	bf3c      	itt	cc
    b60a:	f843 4b04 	strcc.w	r4, [r3], #4
    b60e:	4563      	cmpcc	r3, ip
    b610:	f4bf af8c 	bcs.w	b52c <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0xc4>
    b614:	68ac      	ldr	r4, [r5, #8]
    b616:	fa26 fa08 	lsr.w	sl, r6, r8
    b61a:	3510      	adds	r5, #16
    b61c:	fa04 f609 	lsl.w	r6, r4, r9
    b620:	ea46 060a 	orr.w	r6, r6, sl
    b624:	f843 6b04 	str.w	r6, [r3], #4
    b628:	4563      	cmp	r3, ip
    b62a:	d3cf      	bcc.n	b5cc <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0x164>
    b62c:	e77e      	b.n	b52c <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E+0xc4>

0000b62e <__aeabi_memcpy>:
    b62e:	b580      	push	{r7, lr}
    b630:	466f      	mov	r7, sp
    b632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    b636:	f7ff bf17 	b.w	b468 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E>

0000b63a <__aeabi_memcpy8>:
    b63a:	2a04      	cmp	r2, #4
    b63c:	d308      	bcc.n	b650 <__aeabi_memcpy8+0x16>
    b63e:	b5b0      	push	{r4, r5, r7, lr}
    b640:	af02      	add	r7, sp, #8
    b642:	f1a2 0e04 	sub.w	lr, r2, #4
    b646:	f00e 040c 	and.w	r4, lr, #12
    b64a:	2c0c      	cmp	r4, #12
    b64c:	d106      	bne.n	b65c <__aeabi_memcpy8+0x22>
    b64e:	e021      	b.n	b694 <__aeabi_memcpy8+0x5a>
    b650:	460b      	mov	r3, r1
    b652:	4684      	mov	ip, r0
    b654:	4660      	mov	r0, ip
    b656:	4619      	mov	r1, r3
    b658:	f7ff bf06 	b.w	b468 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E>
    b65c:	460b      	mov	r3, r1
    b65e:	4684      	mov	ip, r0
    b660:	f853 5b04 	ldr.w	r5, [r3], #4
    b664:	f01e 0f0c 	tst.w	lr, #12
    b668:	f84c 5b04 	str.w	r5, [ip], #4
    b66c:	d007      	beq.n	b67e <__aeabi_memcpy8+0x44>
    b66e:	684b      	ldr	r3, [r1, #4]
    b670:	2c04      	cmp	r4, #4
    b672:	6043      	str	r3, [r0, #4]
    b674:	d107      	bne.n	b686 <__aeabi_memcpy8+0x4c>
    b676:	3a08      	subs	r2, #8
    b678:	3108      	adds	r1, #8
    b67a:	3008      	adds	r0, #8
    b67c:	e008      	b.n	b690 <__aeabi_memcpy8+0x56>
    b67e:	4660      	mov	r0, ip
    b680:	4619      	mov	r1, r3
    b682:	4672      	mov	r2, lr
    b684:	e006      	b.n	b694 <__aeabi_memcpy8+0x5a>
    b686:	688b      	ldr	r3, [r1, #8]
    b688:	3a0c      	subs	r2, #12
    b68a:	6083      	str	r3, [r0, #8]
    b68c:	310c      	adds	r1, #12
    b68e:	300c      	adds	r0, #12
    b690:	4684      	mov	ip, r0
    b692:	460b      	mov	r3, r1
    b694:	f1be 0f0c 	cmp.w	lr, #12
    b698:	d314      	bcc.n	b6c4 <__aeabi_memcpy8+0x8a>
    b69a:	4684      	mov	ip, r0
    b69c:	460b      	mov	r3, r1
    b69e:	6818      	ldr	r0, [r3, #0]
    b6a0:	3a10      	subs	r2, #16
    b6a2:	f8cc 0000 	str.w	r0, [ip]
    b6a6:	2a03      	cmp	r2, #3
    b6a8:	6858      	ldr	r0, [r3, #4]
    b6aa:	f8cc 0004 	str.w	r0, [ip, #4]
    b6ae:	6898      	ldr	r0, [r3, #8]
    b6b0:	f8cc 0008 	str.w	r0, [ip, #8]
    b6b4:	68d8      	ldr	r0, [r3, #12]
    b6b6:	f103 0310 	add.w	r3, r3, #16
    b6ba:	f8cc 000c 	str.w	r0, [ip, #12]
    b6be:	f10c 0c10 	add.w	ip, ip, #16
    b6c2:	d8ec      	bhi.n	b69e <__aeabi_memcpy8+0x64>
    b6c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
    b6c8:	4660      	mov	r0, ip
    b6ca:	4619      	mov	r1, r3
    b6cc:	f7ff becc 	b.w	b468 <_ZN17compiler_builtins3mem6memcpy17h20ba2a1ad1eb6634E>

0000b6d0 <__aeabi_uldivmod>:
    b6d0:	b510      	push	{r4, lr}
    b6d2:	b084      	sub	sp, #16
    b6d4:	ac02      	add	r4, sp, #8
    b6d6:	9400      	str	r4, [sp, #0]
    b6d8:	f000 f804 	bl	b6e4 <__udivmoddi4>
    b6dc:	9a02      	ldr	r2, [sp, #8]
    b6de:	9b03      	ldr	r3, [sp, #12]
    b6e0:	b004      	add	sp, #16
    b6e2:	bd10      	pop	{r4, pc}

0000b6e4 <__udivmoddi4>:
    b6e4:	b580      	push	{r7, lr}
    b6e6:	466f      	mov	r7, sp
    b6e8:	b086      	sub	sp, #24
    b6ea:	4684      	mov	ip, r0
    b6ec:	a802      	add	r0, sp, #8
    b6ee:	e9cd 2300 	strd	r2, r3, [sp]
    b6f2:	4662      	mov	r2, ip
    b6f4:	460b      	mov	r3, r1
    b6f6:	f000 f80d 	bl	b714 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E>
    b6fa:	f8d7 c008 	ldr.w	ip, [r7, #8]
    b6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b702:	f1bc 0f00 	cmp.w	ip, #0
    b706:	bf1c      	itt	ne
    b708:	e9dd 3204 	ldrdne	r3, r2, [sp, #16]
    b70c:	e9cc 3200 	strdne	r3, r2, [ip]
    b710:	b006      	add	sp, #24
    b712:	bd80      	pop	{r7, pc}

0000b714 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E>:
    b714:	b5f0      	push	{r4, r5, r6, r7, lr}
    b716:	af03      	add	r7, sp, #12
    b718:	e92d 0b00 	stmdb	sp!, {r8, r9, fp}
    b71c:	e9d7 e802 	ldrd	lr, r8, [r7, #8]
    b720:	f1be 0f00 	cmp.w	lr, #0
    b724:	d072      	beq.n	b80c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xf8>
    b726:	f1b8 0f00 	cmp.w	r8, #0
    b72a:	d16f      	bne.n	b80c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xf8>
    b72c:	2b00      	cmp	r3, #0
    b72e:	f000 80fc 	beq.w	b92a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x216>
    b732:	4573      	cmp	r3, lr
    b734:	f080 8107 	bcs.w	b946 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x232>
    b738:	fab3 f183 	clz	r1, r3
    b73c:	fabe f68e 	clz	r6, lr
    b740:	1a71      	subs	r1, r6, r1
    b742:	f101 0620 	add.w	r6, r1, #32
    b746:	bf08      	it	eq
    b748:	261f      	moveq	r6, #31
    b74a:	f1c6 0520 	rsb	r5, r6, #32
    b74e:	fa08 f106 	lsl.w	r1, r8, r6
    b752:	fa0e f806 	lsl.w	r8, lr, r6
    b756:	fa2e f505 	lsr.w	r5, lr, r5
    b75a:	4329      	orrs	r1, r5
    b75c:	f1b6 0520 	subs.w	r5, r6, #32
    b760:	f006 061f 	and.w	r6, r6, #31
    b764:	bf58      	it	pl
    b766:	fa0e f105 	lslpl.w	r1, lr, r5
    b76a:	f04f 0501 	mov.w	r5, #1
    b76e:	fa05 fc06 	lsl.w	ip, r5, r6
    b772:	f04f 0500 	mov.w	r5, #0
    b776:	bf58      	it	pl
    b778:	f04f 0800 	movpl.w	r8, #0
    b77c:	e008      	b.n	b790 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x7c>
    b77e:	4622      	mov	r2, r4
    b780:	4633      	mov	r3, r6
    b782:	ea4f 1418 	mov.w	r4, r8, lsr #4
    b786:	ea44 7801 	orr.w	r8, r4, r1, lsl #28
    b78a:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    b78e:	0909      	lsrs	r1, r1, #4
    b790:	ebb2 0408 	subs.w	r4, r2, r8
    b794:	eb63 0601 	sbc.w	r6, r3, r1
    b798:	2e00      	cmp	r6, #0
    b79a:	d403      	bmi.n	b7a4 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x90>
    b79c:	ea45 050c 	orr.w	r5, r5, ip
    b7a0:	d102      	bne.n	b7a8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x94>
    b7a2:	e02d      	b.n	b800 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xec>
    b7a4:	4614      	mov	r4, r2
    b7a6:	461e      	mov	r6, r3
    b7a8:	ea5f 0351 	movs.w	r3, r1, lsr #1
    b7ac:	ea4f 0238 	mov.w	r2, r8, rrx
    b7b0:	1aa2      	subs	r2, r4, r2
    b7b2:	eb66 0303 	sbc.w	r3, r6, r3
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	d404      	bmi.n	b7c4 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xb0>
    b7ba:	ea45 055c 	orr.w	r5, r5, ip, lsr #1
    b7be:	4614      	mov	r4, r2
    b7c0:	d102      	bne.n	b7c8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xb4>
    b7c2:	e01d      	b.n	b800 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xec>
    b7c4:	4622      	mov	r2, r4
    b7c6:	4633      	mov	r3, r6
    b7c8:	ea4f 0498 	mov.w	r4, r8, lsr #2
    b7cc:	ea44 7481 	orr.w	r4, r4, r1, lsl #30
    b7d0:	1b14      	subs	r4, r2, r4
    b7d2:	eb63 0691 	sbc.w	r6, r3, r1, lsr #2
    b7d6:	2e00      	cmp	r6, #0
    b7d8:	d403      	bmi.n	b7e2 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xce>
    b7da:	ea45 059c 	orr.w	r5, r5, ip, lsr #2
    b7de:	d102      	bne.n	b7e6 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xd2>
    b7e0:	e00e      	b.n	b800 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0xec>
    b7e2:	4614      	mov	r4, r2
    b7e4:	461e      	mov	r6, r3
    b7e6:	ea4f 02d8 	mov.w	r2, r8, lsr #3
    b7ea:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    b7ee:	1aa2      	subs	r2, r4, r2
    b7f0:	eb66 03d1 	sbc.w	r3, r6, r1, lsr #3
    b7f4:	2b00      	cmp	r3, #0
    b7f6:	d4c2      	bmi.n	b77e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x6a>
    b7f8:	ea45 05dc 	orr.w	r5, r5, ip, lsr #3
    b7fc:	4614      	mov	r4, r2
    b7fe:	d1c0      	bne.n	b782 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x6e>
    b800:	fbb4 f1fe 	udiv	r1, r4, lr
    b804:	fb01 461e 	mls	r6, r1, lr, r4
    b808:	4329      	orrs	r1, r5
    b80a:	e092      	b.n	b932 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x21e>
    b80c:	ebb2 060e 	subs.w	r6, r2, lr
    b810:	f04f 0100 	mov.w	r1, #0
    b814:	eb73 0608 	sbcs.w	r6, r3, r8
    b818:	d37c      	bcc.n	b914 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x200>
    b81a:	2b00      	cmp	r3, #0
    b81c:	d07a      	beq.n	b914 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x200>
    b81e:	fab3 f183 	clz	r1, r3
    b822:	fab8 f688 	clz	r6, r8
    b826:	1a71      	subs	r1, r6, r1
    b828:	f001 063f 	and.w	r6, r1, #63	@ 0x3f
    b82c:	f001 011f 	and.w	r1, r1, #31
    b830:	f1c6 0420 	rsb	r4, r6, #32
    b834:	fa08 f506 	lsl.w	r5, r8, r6
    b838:	fa0e fc06 	lsl.w	ip, lr, r6
    b83c:	fa2e f404 	lsr.w	r4, lr, r4
    b840:	432c      	orrs	r4, r5
    b842:	f1b6 0520 	subs.w	r5, r6, #32
    b846:	bf58      	it	pl
    b848:	fa0e f405 	lslpl.w	r4, lr, r5
    b84c:	f04f 0501 	mov.w	r5, #1
    b850:	fa05 f901 	lsl.w	r9, r5, r1
    b854:	f04f 0100 	mov.w	r1, #0
    b858:	bf58      	it	pl
    b85a:	f04f 0c00 	movpl.w	ip, #0
    b85e:	e008      	b.n	b872 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x15e>
    b860:	4632      	mov	r2, r6
    b862:	462b      	mov	r3, r5
    b864:	ea4f 161c 	mov.w	r6, ip, lsr #4
    b868:	ea46 7c04 	orr.w	ip, r6, r4, lsl #28
    b86c:	ea4f 1919 	mov.w	r9, r9, lsr #4
    b870:	0924      	lsrs	r4, r4, #4
    b872:	ebb2 060c 	subs.w	r6, r2, ip
    b876:	eb73 0504 	sbcs.w	r5, r3, r4
    b87a:	d407      	bmi.n	b88c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x178>
    b87c:	ebb6 020e 	subs.w	r2, r6, lr
    b880:	ea41 0109 	orr.w	r1, r1, r9
    b884:	eb75 0208 	sbcs.w	r2, r5, r8
    b888:	d202      	bcs.n	b890 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x17c>
    b88a:	e03a      	b.n	b902 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x1ee>
    b88c:	4616      	mov	r6, r2
    b88e:	461d      	mov	r5, r3
    b890:	ea5f 0354 	movs.w	r3, r4, lsr #1
    b894:	ea4f 023c 	mov.w	r2, ip, rrx
    b898:	1ab2      	subs	r2, r6, r2
    b89a:	eb75 0303 	sbcs.w	r3, r5, r3
    b89e:	d409      	bmi.n	b8b4 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x1a0>
    b8a0:	ebb2 050e 	subs.w	r5, r2, lr
    b8a4:	ea41 0159 	orr.w	r1, r1, r9, lsr #1
    b8a8:	eb73 0508 	sbcs.w	r5, r3, r8
    b8ac:	4616      	mov	r6, r2
    b8ae:	461d      	mov	r5, r3
    b8b0:	d202      	bcs.n	b8b8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x1a4>
    b8b2:	e026      	b.n	b902 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x1ee>
    b8b4:	4632      	mov	r2, r6
    b8b6:	462b      	mov	r3, r5
    b8b8:	ea4f 059c 	mov.w	r5, ip, lsr #2
    b8bc:	ea45 7584 	orr.w	r5, r5, r4, lsl #30
    b8c0:	1b56      	subs	r6, r2, r5
    b8c2:	eb63 0594 	sbc.w	r5, r3, r4, lsr #2
    b8c6:	2d00      	cmp	r5, #0
    b8c8:	d407      	bmi.n	b8da <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x1c6>
    b8ca:	ebb6 020e 	subs.w	r2, r6, lr
    b8ce:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
    b8d2:	eb75 0208 	sbcs.w	r2, r5, r8
    b8d6:	d202      	bcs.n	b8de <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x1ca>
    b8d8:	e013      	b.n	b902 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x1ee>
    b8da:	4616      	mov	r6, r2
    b8dc:	461d      	mov	r5, r3
    b8de:	ea4f 02dc 	mov.w	r2, ip, lsr #3
    b8e2:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    b8e6:	1ab2      	subs	r2, r6, r2
    b8e8:	eb65 03d4 	sbc.w	r3, r5, r4, lsr #3
    b8ec:	2b00      	cmp	r3, #0
    b8ee:	d4b7      	bmi.n	b860 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x14c>
    b8f0:	ebb2 050e 	subs.w	r5, r2, lr
    b8f4:	ea41 01d9 	orr.w	r1, r1, r9, lsr #3
    b8f8:	eb73 0508 	sbcs.w	r5, r3, r8
    b8fc:	4616      	mov	r6, r2
    b8fe:	461d      	mov	r5, r3
    b900:	d2b0      	bcs.n	b864 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x150>
    b902:	f04f 0c00 	mov.w	ip, #0
    b906:	e9c0 1c00 	strd	r1, ip, [r0]
    b90a:	e9c0 6502 	strd	r6, r5, [r0, #8]
    b90e:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    b912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b914:	f04f 0c00 	mov.w	ip, #0
    b918:	4616      	mov	r6, r2
    b91a:	461d      	mov	r5, r3
    b91c:	e9c0 1c00 	strd	r1, ip, [r0]
    b920:	e9c0 6502 	strd	r6, r5, [r0, #8]
    b924:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    b928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b92a:	fbb2 f1fe 	udiv	r1, r2, lr
    b92e:	fb01 261e 	mls	r6, r1, lr, r2
    b932:	f04f 0c00 	mov.w	ip, #0
    b936:	2500      	movs	r5, #0
    b938:	e9c0 1c00 	strd	r1, ip, [r0]
    b93c:	e9c0 6502 	strd	r6, r5, [r0, #8]
    b940:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    b944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b946:	d10d      	bne.n	b964 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x250>
    b948:	fbb2 f1f3 	udiv	r1, r2, r3
    b94c:	2500      	movs	r5, #0
    b94e:	fb01 2613 	mls	r6, r1, r3, r2
    b952:	f04f 0c01 	mov.w	ip, #1
    b956:	e9c0 1c00 	strd	r1, ip, [r0]
    b95a:	e9c0 6502 	strd	r6, r5, [r0, #8]
    b95e:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    b962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b964:	fbb3 fcfe 	udiv	ip, r3, lr
    b968:	f5be 3f80 	cmp.w	lr, #65536	@ 0x10000
    b96c:	fb0c 351e 	mls	r5, ip, lr, r3
    b970:	d21a      	bcs.n	b9a8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x294>
    b972:	0429      	lsls	r1, r5, #16
    b974:	2500      	movs	r5, #0
    b976:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
    b97a:	fbb1 f3fe 	udiv	r3, r1, lr
    b97e:	fb03 f10e 	mul.w	r1, r3, lr
    b982:	ea4c 4c13 	orr.w	ip, ip, r3, lsr #16
    b986:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
    b98a:	eac2 4101 	pkhbt	r1, r2, r1, lsl #16
    b98e:	fbb1 f2fe 	udiv	r2, r1, lr
    b992:	fb02 161e 	mls	r6, r2, lr, r1
    b996:	ea42 4103 	orr.w	r1, r2, r3, lsl #16
    b99a:	e9c0 1c00 	strd	r1, ip, [r0]
    b99e:	e9c0 6502 	strd	r6, r5, [r0, #8]
    b9a2:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    b9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9a8:	ebb2 010e 	subs.w	r1, r2, lr
    b9ac:	eb75 0108 	sbcs.w	r1, r5, r8
    b9b0:	d208      	bcs.n	b9c4 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x2b0>
    b9b2:	2100      	movs	r1, #0
    b9b4:	4616      	mov	r6, r2
    b9b6:	e9c0 1c00 	strd	r1, ip, [r0]
    b9ba:	e9c0 6502 	strd	r6, r5, [r0, #8]
    b9be:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    b9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9c4:	ea4f 71c8 	mov.w	r1, r8, lsl #31
    b9c8:	ea41 035e 	orr.w	r3, r1, lr, lsr #1
    b9cc:	ea4f 79ce 	mov.w	r9, lr, lsl #31
    b9d0:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
    b9d4:	2100      	movs	r1, #0
    b9d6:	e008      	b.n	b9ea <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x2d6>
    b9d8:	4622      	mov	r2, r4
    b9da:	4635      	mov	r5, r6
    b9dc:	ea4f 1419 	mov.w	r4, r9, lsr #4
    b9e0:	ea44 7903 	orr.w	r9, r4, r3, lsl #28
    b9e4:	ea4f 1818 	mov.w	r8, r8, lsr #4
    b9e8:	091b      	lsrs	r3, r3, #4
    b9ea:	ebb2 0409 	subs.w	r4, r2, r9
    b9ee:	eb65 0603 	sbc.w	r6, r5, r3
    b9f2:	2e00      	cmp	r6, #0
    b9f4:	d403      	bmi.n	b9fe <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x2ea>
    b9f6:	ea41 0108 	orr.w	r1, r1, r8
    b9fa:	d102      	bne.n	ba02 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x2ee>
    b9fc:	e02d      	b.n	ba5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x346>
    b9fe:	4614      	mov	r4, r2
    ba00:	462e      	mov	r6, r5
    ba02:	ea5f 0553 	movs.w	r5, r3, lsr #1
    ba06:	ea4f 0239 	mov.w	r2, r9, rrx
    ba0a:	1aa2      	subs	r2, r4, r2
    ba0c:	eb66 0505 	sbc.w	r5, r6, r5
    ba10:	2d00      	cmp	r5, #0
    ba12:	d404      	bmi.n	ba1e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x30a>
    ba14:	ea41 0158 	orr.w	r1, r1, r8, lsr #1
    ba18:	4614      	mov	r4, r2
    ba1a:	d102      	bne.n	ba22 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x30e>
    ba1c:	e01d      	b.n	ba5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x346>
    ba1e:	4622      	mov	r2, r4
    ba20:	4635      	mov	r5, r6
    ba22:	ea4f 0499 	mov.w	r4, r9, lsr #2
    ba26:	ea44 7483 	orr.w	r4, r4, r3, lsl #30
    ba2a:	1b14      	subs	r4, r2, r4
    ba2c:	eb65 0693 	sbc.w	r6, r5, r3, lsr #2
    ba30:	2e00      	cmp	r6, #0
    ba32:	d403      	bmi.n	ba3c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x328>
    ba34:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
    ba38:	d102      	bne.n	ba40 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x32c>
    ba3a:	e00e      	b.n	ba5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x346>
    ba3c:	4614      	mov	r4, r2
    ba3e:	462e      	mov	r6, r5
    ba40:	ea4f 02d9 	mov.w	r2, r9, lsr #3
    ba44:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
    ba48:	1aa2      	subs	r2, r4, r2
    ba4a:	eb66 05d3 	sbc.w	r5, r6, r3, lsr #3
    ba4e:	2d00      	cmp	r5, #0
    ba50:	d4c2      	bmi.n	b9d8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x2c4>
    ba52:	ea41 01d8 	orr.w	r1, r1, r8, lsr #3
    ba56:	4614      	mov	r4, r2
    ba58:	d1c0      	bne.n	b9dc <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17h70363b08925eab74E+0x2c8>
    ba5a:	fbb4 f2fe 	udiv	r2, r4, lr
    ba5e:	2500      	movs	r5, #0
    ba60:	fb02 461e 	mls	r6, r2, lr, r4
    ba64:	4311      	orrs	r1, r2
    ba66:	e9c0 1c00 	strd	r1, ip, [r0]
    ba6a:	e9c0 6502 	strd	r6, r5, [r0, #8]
    ba6e:	e8bd 0b00 	ldmia.w	sp!, {r8, r9, fp}
    ba72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ba74 <HardFault_>:
pub unsafe extern "C" fn HardFault_() -> ! {
    ba74:	b580      	push	{r7, lr}
    ba76:	466f      	mov	r7, sp
    loop {}
    ba78:	e7ff      	b.n	ba7a <HardFault_+0x6>
    ba7a:	e7fe      	b.n	ba7a <HardFault_+0x6>
